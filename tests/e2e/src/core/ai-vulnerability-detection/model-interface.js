/**
 * Mock AI Model Interface for Playwright tests
 */

/**
 * Class representing an AI model interface for vulnerability detection
 */
class AIModelInterface {
  constructor(config = {}) {
    this.config = {
      modelName: 'mock-gpt-4',
      temperature: 0.2,
      ...config
    };
    this.prompts = {};
    console.log('Initializing mock AI Model Interface');
  }

  /**
   * Load prompts from directory
   */
  loadPromptsFromDirectory(dirPath) {
    console.log(`Loading prompts from ${dirPath}`);
    // Mock implementation that doesn't actually read files
    this.prompts = {
      'security-review': 'Analyze the following code for security vulnerabilities: {{code}}',
      'wallet-interaction': 'Review the following wallet interaction patterns: {{patterns}}',
      'metamask-security': 'Identify security issues in the following MetaMask interaction: {{interaction}}'
    };
    return true;
  }

  /**
   * Analyze code for vulnerabilities
   */
  async analyzeCode(code, options = {}) {
    console.log('Analyzing code with mock AI model');
    // Return mock analysis based on simple patterns
    const results = [];
    
    if (code.includes('eth_sign') && !code.includes('EIP-191')) {
      results.push({
        severity: 'high',
        type: 'signature-phishing',
        description: 'Potential phishing attack using eth_sign without EIP-191 prefix',
        location: { line: 42, column: 10 },
        recommendation: 'Use personal_sign or implement EIP-191 prefix'
      });
    }
    
    if (code.includes('localStorage') && code.includes('privateKey')) {
      results.push({
        severity: 'critical',
        type: 'key-exposure',
        description: 'Private key stored in localStorage',
        location: { line: 73, column: 5 },
        recommendation: 'Never store private keys in browser storage'
      });
    }
    
    return {
      vulnerabilities: results,
      score: results.length > 0 ? (10 - results.length * 2) : 10,
      modelName: this.config.modelName,
      analysisTime: 0.42
    };
  }
}

module.exports = { AIModelInterface }; 