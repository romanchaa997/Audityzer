./main.js:170:    // console.log('Analytics initialized');
./scripts/create-devforge-demo.js:28:  console.log('Starting DevForge demo creation...');
./scripts/create-devforge-demo.js:238:  console.log('Capturing frames...');
./scripts/create-devforge-demo.js:256:  console.log('Creating GIF...');
./scripts/create-devforge-demo.js:265:    console.log('Please install ImageMagick to create GIFs, or use a tool like ScreenToGif to convert the frames manually.');
./scripts/create-devforge-demo.js:270:  console.log('Demo creation completed!');
./scripts/run-metamask-tests.js:62:  console.log(`${colorCode}[${timestamp}] ${message}\x1b[0m`);
./scripts/add-to-project.js:33:    console.log(`Successfully added item to project: ${result.addProjectV2ItemById.item.id}`);
./scripts/build-package.js:11:console.log(chalk.blue('Building Audityzer package...'));
./scripts/build-package.js:25:    console.log(chalk.yellow('Consider further optimization:'));
./scripts/build-package.js:26:    console.log('1. Check .npmignore and package.json files list');
./scripts/build-package.js:27:    console.log('2. Remove large test files and example directories');
./scripts/build-package.js:28:    console.log('3. Use tarball command to inspect package contents');
./scripts/generate-security-report.js:70:  console.log('Running security tests...');
./scripts/generate-security-report.js:73:    console.log('Security tests completed.');
./scripts/generate-security-report.js:337:  console.log(`HTML report generated: ${reportPath}`);
./scripts/generate-security-report.js:394:  console.log(`Markdown report generated: ${reportPath}`);
./scripts/generate-security-report.js:444:  console.log('Uploading report to cloud storage...');
./scripts/generate-security-report.js:467:    console.log(`Report uploaded successfully. Download URL: ${downloadUrl}`);
./scripts/generate-security-report.js:468:    console.log(`Report ID: ${reportId}`);
./scripts/generate-security-report.js:479:  console.log('Generating security report...');
./scripts/generate-security-report.js:499:  console.log('Report generation complete.');
./scripts/setup.js:4:  console.log(`\n=== ${desc} ===`);
./scripts/setup.js:17:console.log('\nSetup complete! üöÄ You are ready to contribute.');
./scripts/rename-package.js:43:      console.log(`File not found, skipping: ${filePath}`);
./scripts/rename-package.js:91:      console.log(`Updated: ${filePath}`);
./scripts/rename-package.js:123:  console.log(`Starting package rename from ${oldName} to ${newName}...`);
./scripts/rename-package.js:144:      console.log(`Creating symbolic link from ${oldBinPath} to ${newBinPath}`);
./scripts/rename-package.js:156:  console.log('\nNext steps:');
./scripts/rename-package.js:157:  console.log('1. Review changes in the updated files');
./scripts/rename-package.js:158:  console.log('2. Update any remaining references manually');
./scripts/rename-package.js:159:  console.log('3. Test the package to ensure everything works correctly');
./scripts/rename-package.js:160:  console.log('4. Update npm scripts in your package.json to use the new name');
./scripts/find-available-port.js:32:      console.log(`Port ${port} is available`);
./scripts/announce.js:45:    console.log(`‚úÖ Discord message sent to '${channel}'.`);
./scripts/firebase-setup.js:19:    console.log(chalk.blue('üî• Firebase Configuration Helper\n'));
./scripts/firebase-setup.js:24:        console.log(chalk.yellow('‚ö†Ô∏è  Firebase config already exists at .firebase-config.json'));
./scripts/firebase-setup.js:27:          console.log(chalk.gray('Setup cancelled.'));
./scripts/firebase-setup.js:38:      console.log(chalk.blue(`üìÅ Config saved to: ${this.configPath}`));
./scripts/firebase-setup.js:50:    console.log(chalk.cyan('Please provide your Firebase project details:\n'));
./scripts/firebase-setup.js:77:    console.log(chalk.blue.bold('\nüìã Next Steps:\n'));
./scripts/firebase-setup.js:79:    console.log(chalk.white('1.'), 'Verify your Firebase project settings in the console');
./scripts/firebase-setup.js:80:    console.log(chalk.white('2.'), 'Enable Firestore Database in your Firebase project');
./scripts/firebase-setup.js:81:    console.log(chalk.white('3.'), 'Set up authentication rules (optional)');
./scripts/firebase-setup.js:82:    console.log(chalk.white('4.'), 'Test the connection:');
./scripts/firebase-setup.js:83:    console.log(chalk.gray('   npm run firebase:test'));
./scripts/firebase-setup.js:85:    console.log(chalk.blue('\nüí° Configuration Tips:'));
./scripts/firebase-setup.js:86:    console.log(chalk.gray('‚Ä¢ Keep your API key secure and never commit it to public repos'));
./scripts/firebase-setup.js:87:    console.log(chalk.gray('‚Ä¢ Use Firebase security rules to protect your data'));
./scripts/firebase-setup.js:88:    console.log(chalk.gray('‚Ä¢ Enable auto-upload in config for continuous reporting'));
./scripts/firebase-setup.js:90:    console.log(chalk.blue('\nüîß Audityzer Integration:'));
./scripts/firebase-setup.js:91:    console.log(chalk.gray('‚Ä¢ Reports will be stored in the "security-reports" collection'));
./scripts/firebase-setup.js:92:    console.log(chalk.gray('‚Ä¢ Use --upload flag to send results to Firebase'));
./scripts/firebase-setup.js:93:    console.log(chalk.gray('‚Ä¢ Configure auto-upload in audityzer.config.js'));
./scripts/firebase-setup.js:144:      console.log(chalk.blue('üîç Testing Firebase connection...'));
./scripts/firebase-setup.js:155:      console.log(chalk.green('‚úÖ Firebase configuration is valid'));
./scripts/firebase-setup.js:156:      console.log(chalk.blue(`üìÅ Project: ${config.projectId}`));
./scripts/firebase-setup.js:157:      console.log(chalk.blue(`üîó Auth Domain: ${config.authDomain}`));
./scripts/firebase-setup.js:160:        console.log(chalk.blue(`üìä Collection: ${config.audityzer.collection}`));
./scripts/firebase-setup.js:161:        console.log(chalk.blue(`üîÑ Auto-upload: ${config.audityzer.autoUpload ? 'Enabled' : 'Disabled'}`));
./scripts/firebase-setup.js:186:      console.log(chalk.blue('Firebase Configuration Helper\n'));
./scripts/firebase-setup.js:187:      console.log('Usage:');
./scripts/firebase-setup.js:188:      console.log('  node firebase-setup.js setup   - Interactive setup');
./scripts/firebase-setup.js:189:      console.log('  node firebase-setup.js example - Create example config');
./scripts/firebase-setup.js:190:      console.log('  node firebase-setup.js test    - Test connection');
./scripts/install-dependencies.js:42:    console.log(chalk.blue(`Installing ${packageSpec} with flags: ${flags.join(' ')}`));
./scripts/install-dependencies.js:48:        console.log(chalk.green(`Successfully installed ${packageSpec}`));
./scripts/install-dependencies.js:75:      console.log(chalk.yellow('Available critical packages:'));
./scripts/install-dependencies.js:77:        console.log(`- ${pkg}`);
./scripts/install-dependencies.js:87:    console.log(chalk.green('All critical dependencies are already installed!'));
./scripts/install-dependencies.js:103:  console.log(chalk.green('All dependencies installed successfully!'));
./scripts/fix-dependencies.js:18:console.log('Running dependency conflict resolution...');
./scripts/fix-dependencies.js:57:        console.log('‚ö†Ô∏è Detected puppeteer v23+ which conflicts with mermaid-cli');
./scripts/fix-dependencies.js:58:        console.log('Downgrading puppeteer to v21.10.0 for compatibility...');
./scripts/fix-dependencies.js:62:          console.log('‚úÖ Successfully downgraded puppeteer to v21.10.0');
./scripts/fix-dependencies.js:80:        console.log('‚ö†Ô∏è Detected mermaid-cli v11+ which may cause compatibility issues');
./scripts/fix-dependencies.js:81:        console.log('Downgrading mermaid-cli to v10.6.1 for better compatibility...');
./scripts/fix-dependencies.js:85:          console.log('‚úÖ Successfully downgraded mermaid-cli to v10.6.1');
./scripts/fix-dependencies.js:122:          console.log(`‚ö†Ô∏è Detected vulnerable ${pkg}@${currentVersion}`);
./scripts/fix-dependencies.js:123:          console.log(`Upgrading ${pkg} to ${safeVersion}...`);
./scripts/fix-dependencies.js:127:            console.log(`‚úÖ Successfully upgraded ${pkg} to ${safeVersion}`);
./scripts/fix-dependencies.js:148:    console.log('‚ö†Ô∏è package-lock.json not found, skipping deep dependency fixes');
./scripts/fix-dependencies.js:168:    console.log('‚úÖ Created/updated .npmrc with security overrides');
./scripts/fix-dependencies.js:193:    console.log('‚úÖ Created CI-specific .npmrc-ci configuration');
./scripts/fix-dependencies.js:205:    console.log('‚úÖ No dependency conflicts detected');
./scripts/fix-dependencies.js:207:    console.log('‚ÑπÔ∏è Dependency conflicts were resolved');
./scripts/fix-dependencies.js:211:    console.log(`‚ÑπÔ∏è Fixed ${fixedVulns} vulnerable package(s)`);
./scripts/fix-dependencies.js:214:  console.log('üì¶ Post-install dependency fixes completed');
./scripts/verify-actions.js:52:  console.log(chalk.blue('=== GitHub Actions Workflow Verification ===\n'));
./scripts/verify-actions.js:57:      console.log(chalk.yellow('Workflows directory not found.'));
./scripts/verify-actions.js:65:    console.log(chalk.blue(`Found ${yamlFiles.length} workflow files to verify\n`));
./scripts/verify-actions.js:68:      console.log(chalk.yellow('No workflow files found.'));
./scripts/verify-actions.js:82:    console.log(chalk.blue('\n=== Verification Summary ==='));
./scripts/verify-actions.js:84:      console.log(chalk.green('‚úì All workflows follow best practices'));
./scripts/verify-actions.js:86:      console.log(chalk.yellow(`! Found ${totalIssues} issues across all workflows`));
./scripts/verify-actions.js:87:      console.log(chalk.yellow('  Run `npm run fix-actions` to automatically fix common issues'));
./scripts/verify-actions.js:100:  console.log(chalk.magenta(`Verifying ${fileName}...`));
./scripts/verify-actions.js:112:        console.log(chalk.yellow(`  ! Workflow-level issue: ${formatCheckName(checkName)}`));
./scripts/verify-actions.js:123:            console.log(chalk.yellow(`  ! Job "${jobId}" issue: ${formatCheckName(checkName)}`));
./scripts/verify-actions.js:134:                console.log(
./scripts/verify-actions.js:149:        console.log(chalk.yellow(`  ! Security scan issue: ${issue}`));
./scripts/verify-actions.js:156:      console.log(chalk.green(`  ‚úì ${fileName} follows all best practices`));
./scripts/verify-actions.js:158:      console.log(chalk.yellow(`  ! ${fileName} has ${issuesCount} issues`));
./scripts/setup-analytics.js:56:  console.log('\n--- Plausible Analytics Setup ---');
./scripts/setup-analytics.js:62:    console.log('Plausible configuration saved.');
./scripts/setup-analytics.js:64:    console.log('Skipping Plausible setup.');
./scripts/setup-analytics.js:70:  console.log('\n--- PostHog Setup ---');
./scripts/setup-analytics.js:82:    console.log('PostHog configuration saved.');
./scripts/setup-analytics.js:84:    console.log('Skipping PostHog setup.');
./scripts/setup-analytics.js:90:  console.log('\n--- Umami Setup ---');
./scripts/setup-analytics.js:97:    console.log('Umami configuration saved.');
./scripts/setup-analytics.js:99:    console.log('Skipping Umami setup.');
./scripts/setup-analytics.js:105:  console.log('\n--- General Tracking Configuration ---');
./scripts/setup-analytics.js:116:  console.log('General tracking configuration saved.');
./scripts/setup-analytics.js:123:  console.log(`\nConfiguration saved to ${configPath}`);
./scripts/setup-analytics.js:311:  console.log(`Analytics script updated at ${analyticsScript}`);
./scripts/setup-analytics.js:457:  console.log(`Run 'npm run analytics:dashboard' to view it.`);
./scripts/setup-analytics.js:462:  console.log('\n=== Audityzer Analytics Setup ===\n');
./scripts/setup-analytics.js:463:  console.log('This script will help you configure analytics for your Audityzer installation.');
./scripts/setup-analytics.js:473:  console.log('\n=== Setup Complete ===\n');
./scripts/setup-analytics.js:474:  console.log('You can now use the following npm scripts:');
./scripts/setup-analytics.js:475:  console.log('- npm run analytics:dashboard: View your analytics dashboard');
./scripts/setup-analytics.js:476:  console.log('- npm run generate:utm-links: Generate UTM links for marketing campaigns');
./scripts/fix-vulnerabilities.js:29:    console.log(chalk.green('Successfully updated package-lock.json'));
./scripts/fix-vulnerabilities.js:38:  console.log(chalk.blue('Starting vulnerability fixes...'));
./scripts/fix-vulnerabilities.js:75:            console.log(chalk.yellow(`Fixing ${packagePath} from version ${pkg.version} to ${newVersion}`));
./scripts/fix-vulnerabilities.js:84:  console.log(chalk.blue(`Fixed ${modifiedCount} vulnerable package(s)`));
./scripts/fix-vulnerabilities.js:88:    console.log(chalk.green('Run "npm install" to apply the changes'));
./scripts/fix-vulnerabilities.js:90:    console.log(chalk.green('No vulnerable packages found or all packages are already at safe versions'));
./scripts/fix-vulnerabilities.js:149:    console.log(chalk.green('‚úÖ Created/updated .npmrc with security overrides'));
./scripts/fix-vulnerabilities.js:182:    console.log(chalk.green('‚úÖ Created CI-specific .npmrc-ci configuration'));
./scripts/fix-vulnerabilities.js:200:      console.log(chalk.yellow('‚ö†Ô∏è Detected development dependencies with vulnerabilities'));
./scripts/fix-vulnerabilities.js:201:      console.log(chalk.blue('Creating an npm-audit-resolve.json file to manage these vulnerabilities'));
./scripts/fix-vulnerabilities.js:219:      console.log(chalk.green('‚úÖ Created .nsprc to acknowledge and track known vulnerabilities'));
./scripts/fix-vulnerabilities.js:222:      console.log(chalk.blue('Attempting to fix lodash.set vulnerability...'));
./scripts/fix-vulnerabilities.js:225:        console.log(chalk.green('‚úÖ Installed latest version of lodash.set'));
./scripts/fix-vulnerabilities.js:227:        console.log(chalk.yellow('‚ö†Ô∏è Could not update lodash.set automatically'));
./scripts/fix-vulnerabilities.js:231:      console.log(chalk.blue('Updating package.json with explicit overrides...'));
./scripts/fix-vulnerabilities.js:248:        console.log(chalk.green('‚úÖ Updated package.json with explicit overrides'));
./scripts/fix-vulnerabilities.js:250:        console.log(chalk.yellow(`‚ö†Ô∏è Could not update package.json: ${err.message}`));
./scripts/fix-vulnerabilities.js:254:    console.log(chalk.yellow(`‚ö†Ô∏è Error checking for lighthouse/raven: ${err.message}`));
./scripts/generate-bridge-report.js:42:    console.log('‚úì Playwright report found');
./scripts/generate-bridge-report.js:46:    console.log('‚ö† No playwright report found, generating default summary');
./scripts/generate-bridge-report.js:55:console.log('‚úì Bridge security report generated successfully');
./scripts/generate-bridge-report.js:56:console.log(`Report saved to: ${summaryPath}`);
./scripts/generate-bridge-report.js:114:console.log(`‚úì HTML report saved to: ${htmlReportPath}`);
./scripts/community/metrics-tracker.js:96:    console.log('Community Metrics Report:');
./scripts/community/metrics-tracker.js:97:    console.log(JSON.stringify(report, null, 2));
./scripts/stop-server.js:15:    console.log(message);
./scripts/init-wizard.js:35:    console.log(chalk.blue.bold('\nüöÄ Welcome to Audityzer Setup Wizard!\n'));
./scripts/init-wizard.js:36:    console.log(chalk.gray('This wizard will help you set up your first security testing project.\n'));
./scripts/init-wizard.js:70:    console.log(chalk.cyan('\nüéØ What type of security testing do you want to focus on?'));
./scripts/init-wizard.js:71:    console.log('  1. DeFi Protocol Testing (defi)');
./scripts/init-wizard.js:72:    console.log('  2. Wallet Integration Testing (wallet)');
./scripts/init-wizard.js:73:    console.log('  3. Bridge Security Testing (bridge)');
./scripts/init-wizard.js:74:    console.log('  4. Account Abstraction Testing (aa)');
./scripts/init-wizard.js:75:    console.log('  5. General Web3 Security (general)');
./scripts/init-wizard.js:92:    console.log(chalk.cyan('\n‚õìÔ∏è  Which blockchain will you primarily test on?'));
./scripts/init-wizard.js:93:    console.log('  1. Ethereum Mainnet');
./scripts/init-wizard.js:94:    console.log('  2. Polygon');
./scripts/init-wizard.js:95:    console.log('  3. Arbitrum');
./scripts/init-wizard.js:96:    console.log('  4. Optimism');
./scripts/init-wizard.js:97:    console.log('  5. Base');
./scripts/init-wizard.js:98:    console.log('  6. Local/Testnet');
./scripts/init-wizard.js:115:    console.log(chalk.cyan('\nüß™ Which test types do you want to include? (comma-separated)'));
./scripts/init-wizard.js:116:    console.log('  Available: reentrancy, oracle, flashloan, access-control, front-running, signature-replay');
./scripts/init-wizard.js:128:    console.log(chalk.cyan('\nüëõ Which wallet will you use for testing?'));
./scripts/init-wizard.js:129:    console.log('  1. MetaMask');
./scripts/init-wizard.js:130:    console.log('  2. Coinbase Wallet');
./scripts/init-wizard.js:131:    console.log('  3. WalletConnect');
./scripts/init-wizard.js:132:    console.log('  4. Mock/Simulation');
./scripts/init-wizard.js:147:    console.log(chalk.cyan('\nüìÑ Preferred output format for reports?'));
./scripts/init-wizard.js:148:    console.log('  1. JSON');
./scripts/init-wizard.js:149:    console.log('  2. HTML');
./scripts/init-wizard.js:150:    console.log('  3. Markdown');
./scripts/init-wizard.js:178:    console.log(chalk.cyan('\nüß© Which Account Abstraction features do you want to test?'));
./scripts/init-wizard.js:179:    console.log('  1. Social Recovery');
./scripts/init-wizard.js:180:    console.log('  2. Counterfactual Wallets');
./scripts/init-wizard.js:181:    console.log('  3. Session Keys');
./scripts/init-wizard.js:182:    console.log('  4. Token Gating');
./scripts/init-wizard.js:183:    console.log('  5. All of the above');
./scripts/init-wizard.js:184:    console.log('  6. None (basic AA only)');
./scripts/init-wizard.js:201:    console.log(chalk.blue('\nüì¶ Generating your project...\n'));
./scripts/init-wizard.js:229:    console.log(chalk.green('‚úÖ Project generated successfully!'));
./scripts/init-wizard.js:357:    console.log('Setting up test environment...');
./scripts/init-wizard.js:363:    console.log('Testing ${testType} vulnerabilities...');
./scripts/init-wizard.js:371:    console.log('Cleaning up test environment...');
./scripts/init-wizard.js:396:    console.log('Testing UserOperation validation...');
./scripts/init-wizard.js:402:    console.log('Testing Paymaster security...');
./scripts/init-wizard.js:408:    console.log('Testing Bundler integration...');
./scripts/init-wizard.js:415:    console.log('Testing ${this.config.aaAddon} functionality...');
./scripts/init-wizard.js:521:    console.log(chalk.gray('   Edit .firebase-config.example.json and rename to .firebase-config.json'));
./scripts/init-wizard.js:568:    console.log(chalk.gray('   Add your secrets in GitHub repository settings'));
./scripts/init-wizard.js:572:    console.log(chalk.green.bold('\nüéâ Project setup complete!\n'));
./scripts/init-wizard.js:574:    console.log(chalk.cyan('üéØ Template:'), this.config.template);
./scripts/init-wizard.js:575:    console.log(chalk.cyan('‚õìÔ∏è  Chain:'), this.config.chain);
./scripts/init-wizard.js:576:    console.log(chalk.cyan('üß™ Test types:'), this.config.testTypes.join(', '));
./scripts/init-wizard.js:579:      console.log(chalk.cyan('üß© AA Mode:'), 'Enabled' + (this.config.aaAddon ? ` (${this.config.aaAddon})` : ''));
./scripts/init-wizard.js:582:    console.log(chalk.blue.bold('\nüìã Next Steps:\n'));
./scripts/init-wizard.js:583:    console.log(chalk.white('1.'), 'Navigate to your project:');
./scripts/init-wizard.js:584:    console.log(chalk.gray(`   cd ${this.config.projectName}`));
./scripts/init-wizard.js:586:    console.log(chalk.white('2.'), 'Install dependencies:');
./scripts/init-wizard.js:587:    console.log(chalk.gray('   npm install'));
./scripts/init-wizard.js:589:    console.log(chalk.white('3.'), 'Configure environment:');
./scripts/init-wizard.js:590:    console.log(chalk.gray('   cp .env.example .env'));
./scripts/init-wizard.js:591:    console.log(chalk.gray('   # Edit .env with your configuration'));
./scripts/init-wizard.js:594:      console.log(chalk.white('4.'), 'Setup Firebase:');
./scripts/init-wizard.js:595:      console.log(chalk.gray('   cp .firebase-config.example.json .firebase-config.json'));
./scripts/init-wizard.js:596:      console.log(chalk.gray('   # Edit with your Firebase configuration'));
./scripts/init-wizard.js:599:    console.log(chalk.white(this.config.setupFirebase ? '5.' : '4.'), 'Run your first test:');
./scripts/init-wizard.js:600:    console.log(chalk.gray('   npm test'));
./scripts/init-wizard.js:602:    console.log(chalk.blue('\nüí° Pro Tips:'));
./scripts/init-wizard.js:603:    console.log(chalk.gray('‚Ä¢ Start with mock mode: npm run test:mock'));
./scripts/init-wizard.js:604:    console.log(chalk.gray('‚Ä¢ Generate reports: npm run report'));
./scripts/init-wizard.js:605:    console.log(chalk.gray('‚Ä¢ Create dashboards: npm run dashboard'));
./scripts/init-wizard.js:608:      console.log(chalk.gray('‚Ä¢ Test AA features: npm run test:aa'));
./scripts/init-wizard.js:609:      console.log(chalk.gray('‚Ä¢ Use Pimlico: npm run test:aa:pimlico'));
./scripts/init-wizard.js:612:    console.log(chalk.blue('\nüìö Resources:'));
./scripts/init-wizard.js:613:    console.log(chalk.gray('‚Ä¢ Documentation: https://github.com/Cyfrin/audityzer'));
./scripts/init-wizard.js:614:    console.log(chalk.gray('‚Ä¢ Discord: https://discord.gg/audityzer'));
./scripts/init-wizard.js:615:    console.log(chalk.gray('‚Ä¢ Examples: https://github.com/Cyfrin/audityzer/examples'));
./scripts/init-wizard.js:617:    console.log(chalk.green.bold('\nHappy testing! üöÄ\n'));
./scripts/start-server.js:24:    console.log(message);
./scripts/run-test-with-mock.js:25:console.log('Running tests with MOCK_MODE=true');
./scripts/run-test-with-mock.js:26:console.log(`Command: npx playwright ${playwrithArgs.join(' ')}`);
./scripts/bulk-add-to-project.js:81:  console.log(`Would update fields for item ${itemId}:`, fields);
./scripts/bulk-add-to-project.js:93:    console.log(`Processing ${config.items.length} items from ${configPath}`);
./scripts/bulk-add-to-project.js:99:      console.log(`Processing ${type} #${number}...`);
./scripts/bulk-add-to-project.js:115:      console.log(`Added ${type} #${number} to project as item ${itemId}`);
./scripts/bulk-add-to-project.js:123:    console.log('Batch processing complete!');
./scripts/archive-closed-items.js:109:    console.log(`Finding closed items older than ${daysBeforeArchive} days...`);
./scripts/archive-closed-items.js:112:    console.log(`Found ${itemsToArchive.length} items to archive`);
./scripts/archive-closed-items.js:115:      console.log(`Archiving item: ${item.content.title}`);
./scripts/archive-closed-items.js:119:    console.log('Archiving complete!');
./scripts/generate-module-types.js:29:    console.log(`Generating declaration file for ${filePath}...`);
./scripts/generate-module-types.js:120:    console.log(`Created ${outputPath}`);
./scripts/generate-module-types.js:134:    console.log('Generating TypeScript declaration files...');
./scripts/generate-module-types.js:150:    console.log(`Successfully generated ${generatedCount} declaration files.`);
./scripts/typecheck.js:24:console.log(`${colors.cyan}Running TypeScript type check...${colors.reset}`);
./scripts/typecheck.js:29:  console.log(`${colors.green}TypeScript check passed! No type errors found.${colors.reset}`);
./scripts/typecheck.js:63:    console.log(`\n${colors.yellow}File: ${file}${colors.reset}`);
./scripts/typecheck.js:65:      console.log(`  ${colors.magenta}Line ${error.line}:${colors.reset} ${error.message}`);
./scripts/typecheck.js:72:  console.log(`\n${colors.red}Found ${totalErrors} errors in ${totalFiles} files.${colors.reset}`);
./scripts/typecheck.js:75:  console.log(`\n${colors.cyan}Suggested fixes:${colors.reset}`);
./scripts/typecheck.js:76:  console.log(
./scripts/typecheck.js:79:  console.log(
./scripts/typecheck.js:82:  console.log(
./scripts/typecheck.js:85:  console.log(
./scripts/generate-utm-links.js:140:  console.log('UTM links generated successfully in marketing/utm-links.md');
./scripts/fuzzer-browser-test.js:51:        console.log('MetaMask already initialized. Continuing with test.');
./scripts/bootstrap-all.js:9:  console.log(`\n> Running: ${cmd} in ${cwd}`);
./scripts/bootstrap-all.js:35:  console.log('\nAll packages bootstrapped, built, and linked!');
./src/cli/index.js:26:  console.log(chalk.blue('[+] Account Abstraction Test Mode enabled.'));
./src/cli/index.js:130:    console.log(chalk.blue(`üîç Running tests against ${target}...`));
./src/cli/index.js:150:      console.log(chalk.blue('üì° Connected to Pimlico API'));
./src/cli/index.js:161:        console.log(chalk.blue('‚õΩ Fetched live gas parameters from Pimlico'));
./src/cli/index.js:162:        console.log(chalk.blue('üìù Fetched EntryPoint metadata from Pimlico'));
./src/cli/index.js:177:        console.log(chalk.blue(`üß© Including specialized AA tests for ${addon}`));
./src/cli/index.js:209:    console.log(chalk.green('‚úÖ Tests completed successfully!'));
./src/cli/index.js:210:    console.log(chalk.yellow(`Total tests: ${results.summary.total}`));
./src/cli/index.js:211:    console.log(chalk.green(`Passed: ${results.summary.passed}`));
./src/cli/index.js:212:    console.log(chalk.red(`Failed: ${results.summary.failed}`));
./src/cli/index.js:215:      console.log(chalk.red(`Found ${results.summary.vulnerabilities.length} vulnerabilities:`));
./src/cli/index.js:218:        console.log(chalk.red(`  - ${vuln.type}: ${vuln.description}`));
./src/cli/index.js:265:      console.log(chalk.blue(`üìã CI report generated: ${chalk.bold(reportPath)}`));
./src/cli/index.js:304:        console.log(chalk.blue(`üìä Interactive dashboard generated at ${chalk.bold(dashboard.html)}`));
./src/cli/index.js:323:      console.log(chalk.blue(`üìù Results saved to ${chalk.bold(outputPath)}`));
./src/cli/index.js:334:    console.log(chalk.blue(`üîç Running Account Abstraction tests against ${target}...`));
./src/cli/index.js:367:      console.log(chalk.green(`‚úÖ Account Abstraction tests completed successfully`));
./src/cli/index.js:369:      console.log(chalk.yellow(`‚ö†Ô∏è  Account Abstraction tests completed with issues`));
./src/cli/index.js:373:    console.log(chalk.cyan('\nTest Summary:'));
./src/cli/index.js:377:        console.log(`${statusIcon} ${testName}: ${testResult.success ? 'Passed' : 'Failed'}`);
./src/cli/index.js:383:      console.log(chalk.cyan('\nCI Verdict:'));
./src/cli/index.js:384:      console.log(`Status: ${results.ciOutput.verdict.passed ? chalk.green('PASSED') : chalk.red('FAILED')}`);
./src/cli/index.js:385:      console.log(`Pass Rate: ${results.ciOutput.verdict.passRate}%`);
./src/cli/index.js:386:      console.log(`Output: ${results.ciOutput.path}`);
./src/cli/index.js:399:    console.log(chalk.blue(`üîß Running Account Abstraction tools...`));
./src/cli/index.js:415:        console.log(chalk.blue('üì° Connected to Pimlico API'));
./src/cli/index.js:419:          console.log(chalk.blue('üìä Generating Pimlico metrics report...'));
./src/cli/index.js:428:          console.log(chalk.green(`‚úÖ Pimlico metrics report generated: ${outputPath}`));
./src/cli/index.js:443:      console.log(chalk.blue(`üîÑ Generating UserOperation flow diagram...`));
./src/cli/index.js:457:        console.log(chalk.green(`‚úÖ UserOperation flow diagram generated!`));
./src/cli/index.js:458:        console.log(chalk.blue(`üìä HTML diagram: ${result.outputs.htmlPath}`));
./src/cli/index.js:459:        console.log(chalk.blue(`üîç JSON data: ${result.outputs.jsonPath}`));
./src/cli/index.js:495:          console.log(chalk.blue(`üìã CI flow analysis report generated: ${chalk.bold(reportPath)}`));
./src/cli/index.js:505:      console.log(chalk.blue(`üìä Generating AA test dashboard...`));
./src/cli/index.js:520:        console.log(chalk.green(`‚úÖ AA dashboard generated!`));
./src/cli/index.js:521:        console.log(chalk.blue(`üìä Dashboard: ${dashboard.html}`));
./src/cli/index.js:530:      console.log(chalk.blue(`üîÑ Comparing AA bundlers...`));
./src/cli/index.js:537:        console.log(chalk.yellow(`This feature is not yet implemented in the CLI.`));
./src/cli/index.js:538:        console.log(chalk.yellow(`Please use the templates/aa-tests/aa-multi-bundler.test.js template directly.`));
./src/cli/index.js:547:      console.log(chalk.yellow(`‚ÑπÔ∏è Please specify an AA tool option:`));
./src/cli/index.js:548:      console.log(chalk.blue(`  --flow <userOpFile>         Generate UserOperation flow diagram`));
./src/cli/index.js:549:      console.log(chalk.blue(`  --dashboard <resultsFile>   Generate AA test dashboard`));
./src/cli/index.js:550:      console.log(chalk.blue(`  --bundlers <bundlersFile>   Compare multiple bundlers`));
./src/cli/index.js:551:      console.log(chalk.blue(`  --addon <addon>             Generate specialized tests (social-recovery, counterfactual, session-keys, token-gating)`));
./src/cli/index.js:552:      console.log(chalk.blue(`  --pimlico-connect           Connect to Pimlico API for live gas data`));
./src/cli/index.js:566:  console.log(chalk.blue(`üìù Generating ${addon} tests...`));
./src/cli/index.js:605:    console.log(chalk.green(`‚úÖ Generated ${addon} test at: ${outputPath}`));
./src/cli/index.js:624:    console.log(chalk.blue(`‚è±Ô∏è Running Account Abstraction implementation benchmarks...`));
./src/cli/index.js:634:        console.log(chalk.blue(`üß© Including specialized AA benchmarks for ${addon}`));
./src/cli/index.js:646:      console.log(chalk.green('‚úÖ AA Benchmark completed!'));
./src/cli/index.js:647:      console.log(chalk.blue(`üìä Results saved to ${options.resultsDir}`));
./src/cli/index.js:673:        console.log(chalk.blue(`üìã CI benchmark report generated: ${chalk.bold(reportPath)}`));
./src/cli/index.js:684:  console.log(chalk.blue(`‚è±Ô∏è Running benchmark for ${chalk.bold(options.test)}...`));
./src/cli/index.js:685:  console.log(chalk.yellow(`Iterations: ${options.iterations}`));
./src/cli/index.js:688:  console.log(chalk.green('‚úÖ Benchmark completed!'));
./src/cli/index.js:693:  console.log(chalk.blue(`üì§ Submitting results from ${chalk.bold(file)} to ${chalk.bold(options.platform)}...`));
./src/cli/index.js:705:    console.log(chalk.green('‚úÖ Results submitted successfully!'));
./src/cli/index.js:706:    console.log(submission);
./src/cli/index.js:724:    console.log(chalk.blue(`üöÄ Initializing new project with ${chalk.bold(options.template)} template...`));
./src/cli/index.js:736:      console.log(chalk.green('‚úÖ Account Abstraction test templates initialized!'));
./src/cli/index.js:741:    console.log(chalk.green('‚úÖ Project initialized successfully!'));
./src/cli/index.js:742:    console.log(chalk.yellow('Run `audityzer run <target>` to start testing!'));
./src/cli/index.js:752:    console.log(chalk.blue(`üé® Generating ${options.type} visualization for ${chalk.bold(resultsFile)}...`));
./src/cli/index.js:775:      console.log(chalk.green('‚úÖ Dashboard visualization generated!'));
./src/cli/index.js:776:      console.log(chalk.blue(`üìä Dashboard: ${chalk.bold(dashboard.html)}`));
./src/cli/index.js:782:        console.log(chalk.blue('üìä Dashboard opened in your default browser'));
./src/cli/index.js:784:        console.log(chalk.yellow(`‚ÑπÔ∏è Dashboard can be viewed at: ${dashboard.html}`));
./src/cli/index.js:789:      console.log(chalk.yellow(`Flow visualization is not yet implemented in the CLI.`));
./src/cli/index.js:792:      console.log(chalk.yellow(`Comparison visualization is not yet implemented in the CLI.`));
./src/cli/generateAATestTemplates.js:79:      console.log(chalk.green(` Created template: ${name}`));
./src/cli/generateAATestTemplates.js:81:      console.log(chalk.yellow(` Template already exists: ${name}`));
./src/cli/generateAATestTemplates.js:113:        console.log(chalk.green(` Copied detailed implementation: ${path.basename(dest)}`));
./src/cli/generateAATestTemplates.js:115:        console.log(chalk.yellow(` Detailed implementation already exists: ${path.basename(dest)}`));
./src/cli/generateAATestTemplates.js:120:        console.log(chalk.green(` Used fallback template for: ${path.basename(dest)}`));
./src/cli/generateAATestTemplates.js:122:        console.log(chalk.yellow(` Detailed implementation already exists: ${path.basename(dest)}`));
./src/cli/generateAATestTemplates.js:125:      console.log(chalk.red(` Missing template for: ${path.basename(dest)}`));
./src/cli/generateAATestTemplates.js:150:          console.log(chalk.green(` Created ${addon} addon template: ${addonMap[addon]}`));
./src/cli/generateAATestTemplates.js:156:            console.log(chalk.green(` Copied ${addon} addon to examples: ${addonMap[addon]}`));
./src/cli/generateAATestTemplates.js:159:          console.log(chalk.yellow(` ${addon} addon template already exists: ${addonMap[addon]}`));
./src/cli/generateAATestTemplates.js:167:        console.log(chalk.red(` Missing addon template for: ${addon}`));
./src/cli/generateAATestTemplates.js:170:      console.log(chalk.yellow(` Unknown addon: ${addon}. Valid values are: ${validAddons.join(', ')}`));
./src/cli/generateAATestTemplates.js:174:  console.log(chalk.blue('\n AA Test templates ready. Run them with:'));
./src/cli/generateAATestTemplates.js:175:  console.log(chalk.yellow(' npm run test:security "examples/security-bug-tests/aa-*.test.js"\n'));
./src/cli/generateAATestTemplates.js:297:    console.log(chalk.green('üìÑ AA JSON Report generated: ') + reportPath);
./src/cli/generateAATestTemplates.js:301:    console.log(chalk.green('üìÑ AA Report generated: ') + reportPath);
./src/web-ui/process-visualization-data.js:15:console.log('Processing visualization data...');
./src/web-ui/process-visualization-data.js:46:    console.log(`‚úì Processing results from ${resultsDir}`);
./src/web-ui/process-visualization-data.js:60:            console.log('‚ö† Could not parse summary, using default data');
./src/web-ui/process-visualization-data.js:64:    console.log('‚ö† Results directory not found, using default visualization data');
./src/web-ui/process-visualization-data.js:161:console.log('‚úì Visualization data processed successfully');
./src/web-ui/process-visualization-data.js:162:console.log(`Data saved to: ${dataPath}`);
./src/web-ui/process-visualization-data.js:163:console.log(`Chart config saved to: ${chartConfigPath}`);
./src/web-ui/process-visualization-data.js:164:console.log(`Dashboard saved to: ${dashboardPath}`);
./src/web-ui/server.js:22:  console.log(`Request: ${req.method} ${req.url}`);
./src/web-ui/server.js:56:  console.log(`Audityzer UI server running at http://localhost:${PORT}/`);
./src/web-ui/server.js:57:  console.log('Press Ctrl+C to stop the server');
./src/web-ui/bridge-test-dashboard.js:84:    console.log(`Bridge Test Dashboard running on http://localhost:${config.port}`);
./src/web-ui/bridge-test-dashboard.js:227:  console.log('Updating dashboard with latest test results...');
./src/core/bridge-testing/radiant-test-harness.ts:121:          console.log('Simulating Radiant deposit:', params);
./src/core/bridge-testing/radiant-test-harness.ts:126:          console.log(`Approving ${params.amount} of token ${tokenAddress} to pool ${pool}`);
./src/core/bridge-testing/radiant-test-harness.ts:156:          console.log('Simulating Radiant withdrawal:', params);
./src/core/bridge-testing/radiant-test-harness.ts:187:          console.log('Simulating Radiant borrow:', params);
./src/core/bridge-testing/radiant-test-harness.ts:236:          console.log('Simulating Radiant flash loan:', params);
./src/core/bridge-testing/radiant-test-harness.ts:306:          console.log(
./src/core/bridge-testing/radiant-test-harness.ts:315:          console.log(`Price manipulation: ${basePrice} -> ${manipulatedPrice}`);
./src/core/bridge-testing/radiant-test-harness.ts:388:    console.log(`Depositing ${params.amount} ${params.token} on Radiant (${params.chain})`);
./src/core/bridge-testing/radiant-test-harness.ts:429:    console.log(`Withdrawing ${params.amount} ${params.token} from Radiant (${params.chain})`);
./src/core/bridge-testing/radiant-test-harness.ts:459:    console.log(`Borrowing ${params.amount} ${params.token} from Radiant (${params.chain})`);
./src/core/bridge-testing/radiant-test-harness.ts:500:    console.log(
./src/core/bridge-testing/radiant-test-harness.ts:554:        console.log('Testing flash loan vulnerabilities...');
./src/core/bridge-testing/radiant-test-harness.ts:559:        console.log('Testing oracle manipulation vulnerabilities...');
./src/core/bridge-testing/radiant-test-harness.ts:564:        console.log('Testing liquidation vulnerabilities...');
./src/core/bridge-testing/radiant-test-harness.ts:569:        console.log('Testing interest rate manipulation vulnerabilities...');
./src/core/bridge-testing/radiant-test-harness.ts:831:          console.log(`Simulating ${amount} deposit impact on interest rates`);
./src/core/bridge-testing/stargate-test-harness.ts:194:          console.log('Simulating Stargate swap:', params);
./src/core/bridge-testing/stargate-test-harness.ts:204:          console.log(`Approving ${params.amount} of token ${tokenAddress} to router ${srcRouter}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:71:  console.log('Testing for improper withdrawal verification periods...');
./src/core/bridge-testing/l2-bridge-security-test.ts:92:      console.log(`Bridge challenge period: ${challengePeriodHours} hours`);
./src/core/bridge-testing/l2-bridge-security-test.ts:95:        console.log('SECURITY VULNERABILITY: Short challenge period detected');
./src/core/bridge-testing/l2-bridge-security-test.ts:96:        console.log('Recommendation: Challenge periods should typically be at least 24 hours');
./src/core/bridge-testing/l2-bridge-security-test.ts:113:        console.log(`Time since last withdrawal: ${timeDifference} seconds`);
./src/core/bridge-testing/l2-bridge-security-test.ts:115:          console.log('SECURITY CONCERN: Withdrawals may be processed without sufficient verification time');
./src/core/bridge-testing/l2-bridge-security-test.ts:120:    console.log(`Error testing withdrawal verification: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:133:  console.log('Testing for missing replay protection...');
./src/core/bridge-testing/l2-bridge-security-test.ts:159:      console.log('SECURITY VULNERABILITY: Could not verify message replay protection');
./src/core/bridge-testing/l2-bridge-security-test.ts:160:      console.log('Bridge may be vulnerable to replay attacks if it does not track processed messages');
./src/core/bridge-testing/l2-bridge-security-test.ts:162:      console.log('Bridge appears to implement message replay protection');
./src/core/bridge-testing/l2-bridge-security-test.ts:165:    console.log(`Error testing replay protection: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:178:  console.log('Testing for chain ID validation...');
./src/core/bridge-testing/l2-bridge-security-test.ts:196:      console.log('SECURITY CONCERN: Could not verify chain ID validation');
./src/core/bridge-testing/l2-bridge-security-test.ts:197:      console.log('Bridge should explicitly validate chain IDs to prevent cross-chain replay attacks');
./src/core/bridge-testing/l2-bridge-security-test.ts:203:      console.log(`Bridge source chain ID: ${sourceChainIdHex}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:204:      console.log(`Bridge destination chain ID: ${destinationChainIdHex}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:208:        console.log('SECURITY VULNERABILITY: Bridge source chain ID mismatch');
./src/core/bridge-testing/l2-bridge-security-test.ts:209:        console.log(`Expected: ${config.originChainId}, Found: ${sourceChainIdHex}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:213:        console.log('SECURITY VULNERABILITY: Bridge destination chain ID mismatch');
./src/core/bridge-testing/l2-bridge-security-test.ts:214:        console.log(`Expected: ${config.destinationChainId}, Found: ${destinationChainIdHex}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:218:    console.log(`Error testing chain ID validation: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:231:  console.log('Testing for token address validation...');
./src/core/bridge-testing/l2-bridge-security-test.ts:252:      console.log(`L2 token address for USDC: ${l2TokenAddress}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:259:        console.log('SECURITY CONCERN: Could not verify token address validation');
./src/core/bridge-testing/l2-bridge-security-test.ts:261:        console.log('SECURITY VULNERABILITY: Invalid token pair detected');
./src/core/bridge-testing/l2-bridge-security-test.ts:262:        console.log('Bridge may accept deposits for tokens it cannot process on the other chain');
./src/core/bridge-testing/l2-bridge-security-test.ts:271:          console.log('SECURITY VULNERABILITY: Token address mapping mismatch');
./src/core/bridge-testing/l2-bridge-security-test.ts:272:          console.log(`L1->L2->L1 mapping: ${usdcL1Address} -> ${l2TokenAddress} -> ${l1TokenAddress}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:273:          console.log('This could lead to incorrect token bridging or token theft');
./src/core/bridge-testing/l2-bridge-security-test.ts:285:        console.log('SECURITY VULNERABILITY: Bridge does not validate token addresses');
./src/core/bridge-testing/l2-bridge-security-test.ts:286:        console.log('Bridge returned an L2 token address for an invalid L1 token');
./src/core/bridge-testing/l2-bridge-security-test.ts:290:    console.log(`Error testing token address validation: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:303:  console.log('Testing high-value transfer security...');
./src/core/bridge-testing/l2-bridge-security-test.ts:325:      console.log(`ETH deposit limit: ${ethDepositLimitInEth} ETH`);
./src/core/bridge-testing/l2-bridge-security-test.ts:328:        console.log('SECURITY CONCERN: High ETH deposit limit detected');
./src/core/bridge-testing/l2-bridge-security-test.ts:329:        console.log('Consider implementing stricter limits for high-value assets');
./src/core/bridge-testing/l2-bridge-security-test.ts:338:        console.log(`ETH daily deposit limit: ${ethDailyLimitInEth} ETH`);
./src/core/bridge-testing/l2-bridge-security-test.ts:341:          console.log('SECURITY CONCERN: High daily ETH deposit limit detected');
./src/core/bridge-testing/l2-bridge-security-test.ts:344:        console.log('SECURITY VULNERABILITY: No daily deposit limits found');
./src/core/bridge-testing/l2-bridge-security-test.ts:345:        console.log('Bridge should implement daily limits to prevent large-scale attacks');
./src/core/bridge-testing/l2-bridge-security-test.ts:348:      console.log('Could not verify deposit limits for ETH');
./src/core/bridge-testing/l2-bridge-security-test.ts:355:      console.log('SECURITY CONCERN: No pause functionality detected');
./src/core/bridge-testing/l2-bridge-security-test.ts:356:      console.log('Bridge should implement emergency pause to mitigate active exploits');
./src/core/bridge-testing/l2-bridge-security-test.ts:358:      console.log(`Bridge paused status: ${isPaused}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:361:    console.log(`Error testing high-value transfer security: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:374:  console.log('Testing for Arbitrum-specific vulnerabilities...');
./src/core/bridge-testing/l2-bridge-security-test.ts:395:      console.log(`Arbitrum retryable ticket max lifetime: ${Number(maxLifetime) / 86400} days`);
./src/core/bridge-testing/l2-bridge-security-test.ts:398:        console.log('SECURITY CONCERN: Short retryable ticket lifetime');
./src/core/bridge-testing/l2-bridge-security-test.ts:399:        console.log('Recommendation: Ensure applications handle retryable ticket expiration gracefully');
./src/core/bridge-testing/l2-bridge-security-test.ts:406:    console.log('Warning: Ensure bridge properly handles Arbitrum\'s L2 to L1 message passing system');
./src/core/bridge-testing/l2-bridge-security-test.ts:407:    console.log('L2 to L1 messages should be verified using the outbox contract after the dispute period');
./src/core/bridge-testing/l2-bridge-security-test.ts:410:    console.log(`Error testing Arbitrum-specific vulnerabilities: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:423:  console.log('Testing for Optimism-specific vulnerabilities...');
./src/core/bridge-testing/l2-bridge-security-test.ts:444:      console.log(`Optimism finalization period: ${Number(finalizationPeriod) / 3600} hours`);
./src/core/bridge-testing/l2-bridge-security-test.ts:447:        console.log('SECURITY CONCERN: Short finalization period for withdrawals');
./src/core/bridge-testing/l2-bridge-security-test.ts:448:        console.log('Recommendation: Be aware of the security implications of the finalization period');
./src/core/bridge-testing/l2-bridge-security-test.ts:453:    console.log('Warning: Ensure bridge properly handles Optimism\'s withdrawal proof system');
./src/core/bridge-testing/l2-bridge-security-test.ts:454:    console.log('Withdrawals should only be finalized after the finalization period');
./src/core/bridge-testing/l2-bridge-security-test.ts:457:    console.log(`Error testing Optimism-specific vulnerabilities: ${error.message}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:470:  console.log('Testing for zkSync-specific vulnerabilities...');
./src/core/bridge-testing/l2-bridge-security-test.ts:474:    console.log('Warning: Ensure bridge properly handles zkSync\'s priority queue system');
./src/core/bridge-testing/l2-bridge-security-test.ts:475:    console.log('L1 to L2 transactions should be processed in order according to the priority queue');
./src/core/bridge-testing/l2-bridge-security-test.ts:495:      console.log(`zkSync priority queue size: ${priorityQueueSize}`);
./src/core/bridge-testing/l2-bridge-security-test.ts:498:        console.log('POTENTIAL ISSUE: Large priority queue size detected');
./src/core/bridge-testing/l2-bridge-security-test.ts:499:        console.log('This could indicate congestion in L1 to L2 transaction processing');
./src/core/bridge-testing/l2-bridge-security-test.ts:504:    console.log('Recommendation: For zkSync bridges, ensure proper handling of:');
./src/core/bridge-testing/l2-bridge-security-test.ts:505:    console.log('1. Forced transactions and priority operations');
./src/core/bridge-testing/l2-bridge-security-test.ts:506:    console.log('2. L2 to L1 message verification using Merkle proofs');
./src/core/bridge-testing/l2-bridge-security-test.ts:507:    console.log('3. Token mapping between L1 and L2 (especially for ERC20 tokens)');
./src/core/bridge-testing/l2-bridge-security-test.ts:510:    console.log(`Error testing zkSync-specific vulnerabilities: ${error.message}`);
./src/core/account-abstraction/index.js:121:        console.log(`Dashboard generated at: ${dashboard.html}`);
./src/core/account-abstraction/index.js:150:        console.log(JSON.stringify(results.ciOutput.verdict, null, 2));
./src/core/account-abstraction/index.js:175:        console.log(JSON.stringify(results.ciOutput.verdict, null, 2));
./src/core/account-abstraction/index.js:309:  console.log(chalk.yellow(`Executing test: ${config.file}`));
./src/core/account-abstraction/index.js:335:    console.log(chalk.gray(`Running: ${cmd}`));
./src/core/account-abstraction/index.js:589:    console.log(chalk.green(`AA report generated: ${reportPath}`));
./src/core/account-abstraction/index.js:642:    console.log(chalk.yellow(`AA report generated with fallback method: ${reportPath}`));
./src/core/adapters/dappium/wallets/metamask.js:146:        console.log('No account selection needed');
./src/core/adapters/dappium/wallets/metamask.js:171:        console.log('No review details button found');
./src/core/adapters/chain-docs.js:47:        console.log(`Connected to ${networkName} at ${networkConfig.rpcUrl}`);
./src/core/adapters/chain-docs.js:121:          console.log(`ChainDocs server running at http://${this.config.host}:${this.config.port}`);
./src/core/adapters/chain-docs.js:148:          console.log('ChainDocs server stopped');
./src/core/adapters/chain-docs.js:516:        console.log(`Loaded API documentation for ${contractName}`);
./src/core/adapters/chain-docs.js:522:    console.log(`Loaded ${Object.keys(this.apiDocs).length} API docs`);
./src/core/adapters/smart-py-test.js:73:          console.log(`Python detected: ${output.trim()}`);
./src/core/adapters/smart-py-test.js:90:      console.log('SmartPy CLI not found. Downloading...');
./src/core/adapters/smart-py-test.js:112:          console.log(`SmartPy detected: ${output.trim()}`);
./src/core/adapters/smart-py-test.js:149:          console.log(`SmartPy Installer: ${data.toString().trim()}`);
./src/core/adapters/smart-py-test.js:158:            console.log('SmartPy installed successfully');
./src/core/adapters/smart-py-test.js:197:    console.log(`Loaded ${Object.keys(this.testScripts).length} test templates`);
./src/core/adapters/smart-py-test.js:471:    console.log(`Running SmartPy test: ${testName}`);
./src/core/adapters/smart-py-test.js:472:    console.log(`Command: ${this.config.pythonPath} ${args.join(' ')}`);
./src/core/adapters/smart-py-test.js:484:          console.log(`[SmartPyTest] ${text.trim()}`);
./src/core/adapters/dapp-recorder.js:84:      console.log(`Loaded ${Object.keys(this.recordings).length} recordings`);
./src/core/adapters/dapp-recorder.js:109:    console.log(`Starting recording: ${name} at ${url}`);
./src/core/adapters/dapp-recorder.js:179:    console.log(`Recording stopped: ${this.currentRecording.name}`);
./src/core/adapters/dapp-recorder.js:180:    console.log(
./src/core/adapters/dapp-recorder.js:211:    console.log(`Replaying: ${recordingName}`);
./src/core/adapters/dapp-recorder.js:240:      console.log(`Replaying event ${eventIndex + 1}/${recording.events.length}: ${event.type}`);
./src/core/adapters/dapp-recorder.js:266:    console.log(`Finished replaying: ${recordingName}`);
./src/core/adapters/dapp-recorder.js:334:    console.log(`Would load ${this.config.walletType} extension for ${this.config.browserType}`);
./src/core/adapters/dapp-recorder.js:348:    console.log('Setting up event listeners for recording');
./src/core/adapters/dapp-recorder.js:360:      console.log('dAppRecorder: Recording script injected');
./src/core/adapters/dapp-recorder.js:385:              console.log('dAppRecorder:', event);
./src/core/adapters/dapp-recorder.js:445:    console.log(`Recorded event: ${event.type}`);
./src/core/adapters/dapp-recorder.js:469:        console.log(`Skipping unknown event type: ${event.type}`);
./src/core/adapters/dapp-recorder.js:477:    console.log('Replaying wallet connection');
./src/core/adapters/dapp-recorder.js:509:    console.log('Replaying transaction submission');
./src/core/adapters/dapp-recorder.js:533:    console.log('Replaying message signing');
./src/core/adapters/dapp-recorder.js:557:    console.log('Replaying contract interaction');
./src/core/adapters/dapp-recorder.js:561:    console.log(
./src/core/adapters/dapp-recorder.js:573:    console.log('Replaying UI interaction');
./src/core/adapters/dapp-recorder.js:605:        console.log(`Unknown UI action: ${event.action}`);
./src/core/adapters/dapp-recorder.js:622:      console.log(`Screenshot saved: ${screenshotPath}`);
./src/core/adapters/dapp-recorder.js:671:    console.log(`Deleted recording: ${name}`);
./src/core/adapters/dapp-recorder.js:688:    console.log(`Exported recording to ${outputPath}`);
./src/core/adapters/dapp-recorder.js:715:    console.log(`Imported recording: ${recording.name}`);
./src/core/adapters/web3-cucumber.js:85:    console.log(`Created test wallet: ${currentWallet.address}`);
./src/core/adapters/web3-cucumber.js:89:    console.log(`Note: Wallet needs to be funded with ${ethAmount} ETH`);
./src/core/adapters/web3-cucumber.js:134:      console.log(`Warning: Could not verify contract connection: ${error.message}`);
./src/core/services/report-service.js:24:      console.log(`Report saved with ID: ${docRef.id}`);
./src/core/audityzer-core.ts:7:      console.log('Audityzer is already running');
./src/core/audityzer-core.ts:12:    console.log('üöÄ Starting Audityzer Security Scanner...');
./src/core/audityzer-core.ts:17:    console.log('‚úÖ Audityzer started successfully');
./src/core/audityzer-core.ts:22:    console.log('üõë Audityzer stopped');
./src/core/audityzer-core.ts:27:    console.log('üìã Initializing security modules...');
./src/core/audityzer-core.ts:32:    console.log('‚úÖ Security modules initialized');
./src/core/visualization/debug-tools.js:154:    const logFn = console[level] || console.log;
./src/core/visualization/generate-test-report.js:296:    console.log(`Report generated at: ${reportPath}`);
./src/core/visualization/server.js:146:    console.log(`Visualization server running at http://${config.host}:${config.port}`);
./src/core/visualization/server.js:275:    console.log('Client connected');
./src/core/visualization/server.js:346:      console.log('Client disconnected');
./src/core/visualization/server.js:386:  console.log('Real-time updates enabled');
./src/core/visualization/cli.js:48:      console.log(`Generating dashboard from ${input}...`);
./src/core/visualization/cli.js:57:      console.log(`Dashboard generated at: ${result}`);
./src/core/visualization/cli.js:85:      console.log(`Generating ${options.type} diagram from ${input}...`);
./src/core/visualization/cli.js:95:      console.log(`Diagram generated at: ${result.path}`);
./src/core/visualization/cli.js:118:        console.log(`Generating debug dashboard from ${options.input}...`);
./src/core/visualization/cli.js:128:        console.log(`Debug dashboard generated at: ${result.dashboard.path}`);
./src/core/visualization/cli.js:131:        console.log('Creating new debug session...');
./src/core/visualization/cli.js:145:        console.log(`Debug session created with ID: ${session.id}`);
./src/core/visualization/cli.js:146:        console.log('Use this ID to reference the session.');
./src/core/visualization/cli.js:168:      console.log(`Generating comprehensive report from ${inputDir}...`);
./src/core/visualization/cli.js:195:      console.log(`Report dashboard generated at: ${dashboardResult}`);
./src/core/visualization/cli.js:197:        console.log(`Transaction flow diagram generated at: ${flowResult.path}`);
./src/core/visualization/cli.js:218:      console.log(`Generating all visualizations from ${inputDir}...`);
./src/core/visualization/cli.js:259:      console.log(`All visualizations generated in: ${outputPath}`);
./src/core/visualization/enhanced-test-report.js:70:    console.log(`Report generated at: ${reportPath}`);
./src/core/bounty-integration/unified-dashboard.js:116:        console.log(
./src/core/bounty-integration/unified-dashboard.js:142:          console.log(chalk.yellow('Unified Bounty Dashboard stopped'));
./src/core/bounty-integration/unified-dashboard.js:192:      console.log(chalk.blue('Client connected to dashboard'));
./src/core/bounty-integration/unified-dashboard.js:261:      console.log(
./src/core/bounty-integration/unified-dashboard.js:288:    console.log(chalk.blue('Fetching submissions from all platforms...'));
./src/core/bounty-integration/unified-dashboard.js:299:          console.log(chalk.blue(`Fetching submissions from ${platform.name}...`));
./src/core/bounty-integration/unified-dashboard.js:316:          console.log(
./src/core/bounty-integration/hackenproof-submission.js:404:            console.log(`API request failed, retrying in ${delay}ms...`);
./src/core/bounty-integration/immunefi-submission-generator.ts:292:      console.log(`Submission saved to: ${outputPath}`);
./src/core/bounty-integration/immunefi-submission-generator.ts:338:    console.log(`Processing ${filteredFindings.length} findings (from ${findings.length} total)`);
./src/core/bounty-integration/immunefi-submission-generator.ts:367:          console.log(`Submitted finding "${finding.testName}" to Immunefi`);
./src/core/bounty-integration/immunefi-cli.js:35:  console.log('Use --input parameter to specify the path to your test results file');
./src/core/bounty-integration/immunefi-cli.js:42:  console.log('Set the environment variable before running this command:');
./src/core/bounty-integration/immunefi-cli.js:43:  console.log('  export IMMUNEFI_API_KEY=your_api_key_here');
./src/core/bounty-integration/immunefi-cli.js:48:console.log('Audityzer - Immunefi Vulnerability Submission');
./src/core/bounty-integration/immunefi-cli.js:49:console.log('================================================');
./src/core/bounty-integration/immunefi-cli.js:50:console.log(`Test Results: ${testResultsPath}`);
./src/core/bounty-integration/immunefi-cli.js:51:console.log(`Project Name: ${projectName}`);
./src/core/bounty-integration/immunefi-cli.js:52:console.log(`Contract Addresses: ${contractAddresses || 'Not specified'}`);
./src/core/bounty-integration/immunefi-cli.js:53:console.log(`Website URL: ${websiteUrl || 'Not specified'}`);
./src/core/bounty-integration/immunefi-cli.js:54:console.log(`Contact Info: ${contactInfo || 'Not specified'}`);
./src/core/bounty-integration/immunefi-cli.js:55:console.log(`Immunefi Project ID: ${immunefiProjectId || 'Not specified (auto-detection will be attempted)'}`);
./src/core/bounty-integration/immunefi-cli.js:56:console.log('================================================');
./src/core/bounty-integration/immunefi-cli.js:60:  console.log('\nReview the information above and add --confirm flag to proceed with submission.');
./src/core/bounty-integration/immunefi-cli.js:61:  console.log('Example: npm run submit:immunefi -- --input=./results.json --project="My Project" --confirm');
./src/core/bounty-integration/immunefi-cli.js:75:console.log('\nProcessing test results and submitting vulnerabilities to Immunefi...');
./src/core/bounty-integration/immunefi-cli.js:80:      console.log('\n‚úÖ Submission successful!');
./src/core/bounty-integration/immunefi-cli.js:81:      console.log(`Report ID: ${result.reportId}`);
./src/core/bounty-integration/immunefi-cli.js:82:      console.log(`Submission Date: ${result.submissionDate}`);
./src/core/bounty-integration/immunefi-cli.js:83:      console.log(`Status: ${result.status}`);
./src/core/bounty-integration/immunefi-cli.js:86:        console.log('\n‚ö†Ô∏è No critical, high, or medium vulnerabilities found. Submission skipped.');
./src/core/bounty-integration/sherlock-report-formatter.ts:383:          console.log(`Saved Sherlock issue #${issueCounter} to ${filePath}`);
./src/core/bounty-integration/sherlock-report-formatter.ts:401:          console.log(`Saved ${issues.length} ${severity} issues to ${filePath}`);
./src/core/bounty-integration/sherlock-report-formatter.ts:503:    console.log(`Generating Sherlock audit report for ${this.contestName}...`);
./src/core/bounty-integration/sherlock-report-formatter.ts:516:    console.log(`Generated Sherlock audit report with ${submissions.length} issues.`);
./src/core/bounty-integration/bridge-bounty-adapter.ts:478:    console.log('Testing vulnerability: ${report.title}');
./src/core/bounty-integration/bridge-bounty-adapter.ts:479:    console.log('Description: ${report.description}');
./src/core/bounty-integration/bridge-bounty-adapter.ts:480:    console.log('Impact: ${report.impact}');
./src/core/bounty-integration/bridge-bounty-adapter.ts:574:    console.log('Fetching vulnerability reports...');
./src/core/bounty-integration/bridge-bounty-adapter.ts:578:    console.log(`Fetched ${c4Reports.length} reports from Code4rena`);
./src/core/bounty-integration/bridge-bounty-adapter.ts:579:    console.log(`Fetched ${sherlockReports.length} reports from Sherlock`);
./src/core/bounty-integration/bridge-bounty-adapter.ts:581:    console.log('Generating test templates...');
./src/core/bounty-integration/bridge-bounty-adapter.ts:583:    console.log(`Generated ${templates.length} test templates`);
./src/core/bounty-integration/bridge-bounty-adapter.ts:585:    console.log('Saving test templates...');
./src/core/bounty-integration/bridge-bounty-adapter.ts:587:    console.log(`Saved ${savedFiles.length} test files`);
./src/core/bounty-integration/immunefi-submitter.js:298:      console.log('No critical, high, or medium vulnerabilities found. Skipping submission.');
./src/core/bounty-integration/immunefi-submitter.js:307:    console.log(`Submitting ${submissionData.metadata.vulnerability_count} vulnerabilities to Immunefi...`);
./src/core/bounty-integration/immunefi-submitter.js:320:    console.log(`Submission log saved to: ${submissionLogPath}`);
./src/core/bounty-integration/immunefi-connector.js:54:      console.log(`[${timestamp}] [Immunefi] [${level.toUpperCase()}] ${message}`);
./src/core/bounty-integration/cli.js:56:      console.log(chalk.blue(`Generating Immunefi submissions from ${options.input}...`));
./src/core/bounty-integration/cli.js:61:      console.log(chalk.green(`Generated ${files.length} Immunefi submissions in ${outputDir}`));
./src/core/bounty-integration/cli.js:81:        console.log(chalk.blue('Submitting reports to Immunefi...'));
./src/core/bounty-integration/cli.js:89:              console.log(
./src/core/bounty-integration/cli.js:101:        console.log(chalk.blue(`Submitted ${successCount} of ${files.length} reports to Immunefi`));
./src/core/bounty-integration/cli.js:120:      console.log(chalk.blue(`Generating HackenProof submissions from ${options.input}...`));
./src/core/bounty-integration/cli.js:125:      console.log(chalk.green(`Generated ${files.length} HackenProof submissions in ${outputDir}`));
./src/core/bounty-integration/cli.js:145:        console.log(chalk.blue('Submitting reports to HackenProof...'));
./src/core/bounty-integration/cli.js:150:          console.log(
./src/core/bounty-integration/cli.js:161:                console.log(
./src/core/bounty-integration/cli.js:175:          console.log(
./src/core/bounty-integration/cli.js:196:      console.log(chalk.blue(`Generating Code4rena submissions for contest ${options.contest}...`));
./src/core/bounty-integration/cli.js:201:      console.log(chalk.green(`Generated Code4rena submissions in ${outputDir}`));
./src/core/bounty-integration/cli.js:214:        console.log(chalk.blue('Submitting reports to Code4rena...'));
./src/core/bounty-integration/cli.js:216:        console.log(
./src/core/bounty-integration/cli.js:237:      console.log(chalk.blue(`Generating Sherlock audit report for ${options.contest}...`));
./src/core/bounty-integration/cli.js:243:      console.log(chalk.green(`Generated Sherlock audit report in ${outputDir}`));
./src/core/bounty-integration/cli.js:256:        console.log(chalk.blue('Submitting reports to Sherlock...'));
./src/core/bounty-integration/cli.js:258:        console.log(
./src/core/bounty-integration/cli.js:278:      console.log(chalk.blue('Generating bridge vulnerability reports...'));
./src/core/bounty-integration/cli.js:283:        console.log(chalk.blue(`Fetching up to ${options.limit} reports from Code4rena...`));
./src/core/bounty-integration/cli.js:288:        console.log(chalk.blue(`Fetching up to ${options.limit} reports from Sherlock...`));
./src/core/bounty-integration/cli.js:295:      console.log(
./src/core/bounty-integration/cli.js:313:      console.log(chalk.blue.bold('Starting unified bounty dashboard'));
./src/core/bounty-integration/cli.js:334:      console.log(chalk.green(`Dashboard running at ${serverInfo.url}`));
./src/core/bounty-integration/cli.js:335:      console.log('Press Ctrl+C to stop the dashboard');
./src/core/bounty-integration/cli.js:339:        console.log(chalk.yellow('\nStopping dashboard...'));
./src/core/bounty-integration/cli.js:371:      console.log(chalk.blue(`Auto-submitting to platforms: ${platforms.join(', ')}`));
./src/core/bounty-integration/cli.js:401:      console.log(
./src/core/bounty-integration/cli.js:406:      console.log(
./src/core/bounty-integration/cli.js:411:        console.log(chalk.yellow('DRY RUN MODE - No actual submissions were made'));
./src/core/bounty-integration/cli.js:421:        console.log(
./src/core/bounty-integration/cli.js:445:        console.log(chalk.blue.bold(`Available ${options.category} vulnerability templates:`));
./src/core/bounty-integration/cli.js:448:          console.log(`${chalk.green(id)}: ${template.title} (${chalk.yellow(template.severity)})`);
./src/core/bounty-integration/cli.js:451:        console.log(`\nTotal: ${Object.keys(templates).length} templates`);
./src/core/bounty-integration/cli.js:456:        console.log(chalk.green(`Templates saved to ${options.output}`));
./src/core/bounty-integration/cli.js:458:        console.log(JSON.stringify(templates, null, 2));
./src/core/bounty-integration/auto-submission-service.js:124:        console.log(`Generating submissions for ${platform}...`);
./src/core/bounty-integration/auto-submission-service.js:141:        console.log(`Generated ${platformSubmissions.length} submissions for ${platform}`);
./src/core/bounty-integration/auto-submission-service.js:204:          console.log(
./src/core/bounty-integration/auto-submission-service.js:243:    console.log(`Submission complete. Results saved to ${resultsPath}`);
./src/core/bounty-integration/auto-submission-service.js:479:        console.log(`Checking submission status for ${platform}...`);
./src/core/bounty-integration/auto-submission-service.js:493:          console.log(`No pending submissions for ${platform}`);
./src/core/bounty-integration/code4rena-integration.ts:248:      console.log(`Saved Code4rena submission to ${filePath}`);
./src/core/bounty-integration/code4rena-integration.ts:369:    console.log(`Generating Code4rena submissions for contest ${this.contestId}...`);
./src/core/bounty-integration/code4rena-integration.ts:386:    console.log(`Generated ${submissions.length} Code4rena submissions.`);
./src/core/bounty-integration/code4rena-integration.ts:387:    console.log(`Metrics report saved to ${metricsPath}`);
./src/core/plugin-manager.js:136:        console.log(`Loaded plugin: ${plugin.name} (${pluginType})`);
./src/core/cross-chain/zksync-validator.js:291:      console.log(`[${logEntry.timestamp}] [${level.toUpperCase()}] ${message}`);
./src/core/cross-chain/polygon-zkevm-validator.js:383:      console.log(`[${logEntry.timestamp}] [PolygonZkEVM] [${level.toUpperCase()}] ${message}`);
./src/core/cross-chain/omnichain-validator.js:78:          console.log(
./src/core/cross-chain/omnichain-validator.js:109:    console.log(`Validating bridge "${name}" from chain ${sourceChain} to ${targetChain}`);
./src/core/cross-chain/omnichain-validator.js:164:      console.log(
./src/core/cross-chain/omnichain-validator.js:593:    console.log(`Validating cross-chain transaction from ${sourceChain} to ${targetChain}`);
./src/core/cross-chain/omnichain-validator.js:713:    console.log(`Validating cross-chain application: ${name}`);
./src/core/cross-chain/omnichain-validator.js:805:    console.log(
./src/core/cross-chain/message-tracer.js:56:        console.log(`Connected to ${networkName} at ${networkConfig.rpcUrl}`);
./src/core/cross-chain/message-tracer.js:83:      console.log('Message tracing is disabled in configuration');
./src/core/cross-chain/message-tracer.js:87:    console.log('Starting cross-chain message tracing...');
./src/core/cross-chain/message-tracer.js:93:        console.log(`Listening for ${bridgeId} bridge events`);
./src/core/cross-chain/message-tracer.js:114:    console.log('Stopping cross-chain message tracing...');
./src/core/cross-chain/message-tracer.js:120:        console.log(`Stopped listening for ${bridgeId} bridge events`);
./src/core/cross-chain/message-tracer.js:131:      console.log('Visualization server stopped');
./src/core/cross-chain/message-tracer.js:146:    console.log(
./src/core/cross-chain/message-tracer.js:237:      console.log(`Visualization saved to ${filePath}`);
./src/core/cross-chain/message-tracer.js:381:        console.log(
./src/core/cross-chain/composable-test-generator.js:530:    console.log(`Generating cross-chain tests for ${appConfig.name}`);
./src/core/cross-chain/composable-test-generator.js:563:        console.log(`Generated test file: ${filePath}`);
./src/core/cross-chain/composable-test-generator.js:588:          console.log(`Generated helper file: ${filePath}`);
./src/core/cross-chain/composable-test-generator.js:590:          console.log(`Helper file already exists: ${filePath}`);
./src/core/cross-chain/composable-test-generator.js:608:    console.log(`Generating tests for bridge ${bridgeConfig.name}`);
./src/core/cross-chain/composable-test-generator.js:637:      console.log(`Generated bridge test file: ${filePath}`);
./src/core/cross-chain/base-validator.js:345:      console.log(`[${logEntry.timestamp}] [Base] [${level.toUpperCase()}] ${message}`);
./src/core/cross-chain/linea-validator.js:291:      console.log(`[${logEntry.timestamp}] [Linea] [${level.toUpperCase()}] ${message}`);
./src/core/plugin-api.js:225:        console.log(`[${plugin.name}]`, message, data);
./src/core/firebase-config.ts:113:      console.log('Firebase initialization skipped based on environment settings');
./src/core/ai-vulnerability-detection/data-infrastructure/transaction-pattern-collector.js:195:        console.log(`Skipping disabled network: ${network}`);
./src/core/ai-vulnerability-detection/data-infrastructure/transaction-pattern-collector.js:199:      console.log(`Collecting transaction patterns from ${network}...`);
./src/core/ai-vulnerability-detection/data-infrastructure/test-outcome-aggregator.js:194:        console.log(`Processing test file: ${testFile}`);
./src/core/ai-vulnerability-detection/data-infrastructure/smart-contract-categorizer.js:227:        console.log(`Analyzing contract: ${contract.name}`);
./src/core/ai-vulnerability-detection/data-infrastructure/index.js:58:    console.log('Data infrastructure initialized successfully');
./src/core/ai-vulnerability-detection/data-infrastructure/specialized-web3-training.js:78:        console.log(
./src/core/ai-vulnerability-detection/data-infrastructure/specialized-web3-training.js:197:      console.log(`Collected ${samples.length} samples from ${source.name}`);
./src/core/ai-vulnerability-detection/data-infrastructure/specialized-web3-training.js:237:      console.log(`Collected ${samples.length} samples from local source`);
./src/core/ai-vulnerability-detection/data-infrastructure/specialized-web3-training.js:344:    console.log(`Data collection complete. Collected: ${stats.collected}, Stored: ${stats.stored}`);
./src/core/ai-vulnerability-detection/data-infrastructure/specialized-web3-training.js:440:    console.log(
./src/core/ai-vulnerability-detection/data-infrastructure/specialized-web3-training.js:547:    console.log(`Exported datasets to ${exportDir}`);
./src/core/ai-vulnerability-detection/visualization/index.js:82:    console.log('Visualization module initialized successfully');
./src/core/ai-vulnerability-detection/visualization/index.js:142:    console.log(`Generating ${visualizationType} visualization...`);
./src/core/ai-vulnerability-detection/visualization/index.js:254:    console.log(`Generating ${format} report...`);
./src/core/ai-vulnerability-detection/advanced-detection/index.js:64:    console.log('Advanced detection module initialized successfully');
./src/core/ai-vulnerability-detection/advanced-detection/index.js:196:    console.log(`Setting up monitoring for contract ${contractAddress} on ${network}`);
./src/core/ai-vulnerability-detection/advanced-detection/index.js:265:    console.log(`Analyzing transaction patterns for ${contractAddress || 'provided transactions'}`);
./src/core/ai-vulnerability-detection/model-development/index.js:128:    console.log('Model development system initialized successfully');
./src/core/ai-vulnerability-detection/model-development/index.js:234:    console.log(`Training model ${modelId} with dataset ${datasetId}...`);
./src/core/ai-vulnerability-detection/model-development/index.js:269:      console.log('Evaluating model...');
./src/core/ai-vulnerability-detection/model-development/vulnerability-classifier.js:88:        console.log(
./src/core/ai-vulnerability-detection/cli.js:44:  console.log('AI Vulnerability Detector CLI');
./src/core/ai-vulnerability-detection/cli.js:45:  console.log('=============================');
./src/core/ai-vulnerability-detection/cli.js:46:  console.log('Usage: node cli.js [options]');
./src/core/ai-vulnerability-detection/cli.js:47:  console.log('');
./src/core/ai-vulnerability-detection/cli.js:48:  console.log('Options:');
./src/core/ai-vulnerability-detection/cli.js:49:  console.log(
./src/core/ai-vulnerability-detection/cli.js:52:  console.log('  -o, --output <path>     Specify the output directory (default: ./scan-results)');
./src/core/ai-vulnerability-detection/cli.js:53:  console.log('  -v, --verbose           Enable verbose output');
./src/core/ai-vulnerability-detection/cli.js:54:  console.log('  -e, --external          Run external security scan tools as well');
./src/core/ai-vulnerability-detection/cli.js:55:  console.log('  -h, --help              Display this help information');
./src/core/ai-vulnerability-detection/cli.js:56:  console.log('  -n, --no-ai             Disable AI-based vulnerability detection');
./src/core/ai-vulnerability-detection/cli.js:57:  console.log('');
./src/core/ai-vulnerability-detection/cli.js:58:  console.log('Example:');
./src/core/ai-vulnerability-detection/cli.js:59:  console.log('  node cli.js -d ./contracts -o ./security-reports -v');
./src/core/ai-vulnerability-detection/cli.js:64:console.log('=========================================');
./src/core/ai-vulnerability-detection/cli.js:65:console.log('     AI Vulnerability Detection Tool     ');
./src/core/ai-vulnerability-detection/cli.js:66:console.log('=========================================');
./src/core/ai-vulnerability-detection/cli.js:67:console.log('');
./src/core/ai-vulnerability-detection/cli.js:87:    console.log(`Scanning directory: ${scanDirectory}`);
./src/core/ai-vulnerability-detection/cli.js:102:      console.log('Running external security scan tools...');
./src/core/ai-vulnerability-detection/cli.js:106:        console.log('External security scan completed successfully');
./src/core/ai-vulnerability-detection/cli.js:113:    console.log('Running AI vulnerability detection...');
./src/core/ai-vulnerability-detection/cli.js:117:    console.log('\nScan Summary:');
./src/core/ai-vulnerability-detection/cli.js:118:    console.log(`- Files Scanned: ${results.stats.filesScanned}`);
./src/core/ai-vulnerability-detection/cli.js:119:    console.log(`- Vulnerabilities Found: ${results.stats.vulnerabilitiesFound}`);
./src/core/ai-vulnerability-detection/cli.js:122:      console.log(`  - Critical: ${results.stats.criticalIssues}`);
./src/core/ai-vulnerability-detection/cli.js:123:      console.log(`  - High: ${results.stats.highIssues}`);
./src/core/ai-vulnerability-detection/cli.js:124:      console.log(`  - Medium: ${results.stats.mediumIssues}`);
./src/core/ai-vulnerability-detection/cli.js:125:      console.log(`  - Low: ${results.stats.lowIssues}`);
./src/core/ai-vulnerability-detection/cli.js:128:    console.log(
./src/core/ai-vulnerability-detection/cli.js:134:      console.log('\nWarning: Critical vulnerabilities detected!');
./src/core/ai-vulnerability-detection/index.js:186:    console.log('Initializing AI Vulnerability Detection System...');
./src/core/ai-vulnerability-detection/index.js:189:    console.log('Initializing Data Infrastructure...');
./src/core/ai-vulnerability-detection/index.js:200:    console.log('Initializing Model Development...');
./src/core/ai-vulnerability-detection/index.js:212:    console.log('Initializing Testing Integration...');
./src/core/ai-vulnerability-detection/index.js:226:      console.log('Initializing Advanced Detection...');
./src/core/ai-vulnerability-detection/index.js:241:      console.log('Initializing Visualization...');
./src/core/ai-vulnerability-detection/index.js:253:    console.log('Initializing AI Components...');
./src/core/ai-vulnerability-detection/index.js:271:    console.log('AI Vulnerability Detection System initialized successfully');
./src/core/ai-vulnerability-detection/testing-integration/index.js:409:        console.log(`AI vulnerability detection: starting test "${testInfo.title}"`);
./src/core/ai-vulnerability-detection/testing-integration/index.js:531:      console.log(`AI vulnerability detection: starting test "${testName}"`);
./src/core/ci-integration/deploy-guardian.js:84:          console.log(`Connected to ${networkName} at ${networkConfig.rpcUrl}`);
./src/core/ci-integration/deploy-guardian.js:152:    console.log(`Validating deployment of ${contractName} on ${network}...`);
./src/core/ci-integration/deploy-guardian.js:335:      console.log(`Deploying with account: ${wallet.address}`);
./src/core/ci-integration/deploy-guardian.js:502:    console.log(`Compiling contract: ${contractPath}`);
./src/core/ci-integration/deploy-guardian.js:556:    console.log(`Running security checks on: ${contractPath}`);
./src/core/ci-integration/deploy-guardian.js:1157:      console.log(
./src/core/ci-integration/deploy-guardian.js:1402:    console.log(`Deployment information saved to ${filePath}`);
./src/core/ci-integration/platforms/github-adapter.js:86:          console.log(
./src/core/ci-integration/platforms/github-adapter.js:197:      console.log(`SARIF report generated at: ${outputPath}`);
./src/core/ci-integration/platforms/github-adapter.js:201:        console.log(
./src/core/ci-integration/platforms/github-adapter.js:247:    console.log('GitHub issue creation would create the following issues:');
./src/core/ci-integration/platforms/github-adapter.js:253:        console.log(`${index + 1}. ${issueTitle} (${issue.category})`);
./src/core/ci-integration/platforms/gitlab-adapter.js:151:      console.log(`JUnit report generated at: ${outputPath}`);
./src/core/ci-integration/platforms/gitlab-adapter.js:154:      console.log(`\nGitLab JUnit report available at: ${outputPath}`);
./src/core/ci-integration/platforms/gitlab-adapter.js:156:        console.log(`View job results at: ${process.env.CI_JOB_URL}`);
./src/core/ci-integration/platforms/gitlab-adapter.js:235:      console.log(`GitLab Security Report generated at: ${outputPath}`);
./src/core/ci-integration/platforms/gitlab-adapter.js:239:        console.log(`\nGitLab Security Report available at: ${outputPath}`);
./src/core/ci-integration/platforms/gitlab-adapter.js:240:        console.log(
./src/core/ci-integration/platforms/gitlab-adapter.js:377:      console.log(`GitLab Pipeline Visualization report generated at: ${outputPath}`);
./src/core/ci-integration/static-analysis.js:62:          console.log(`Slither found: ${this.toolVersions.slither}`);
./src/core/ci-integration/static-analysis.js:65:          console.log('To install Slither: pip3 install slither-analyzer');
./src/core/ci-integration/static-analysis.js:75:          console.log(`Mythril found: ${this.toolVersions.mythril}`);
./src/core/ci-integration/static-analysis.js:78:          console.log('To install Mythril: pip3 install mythril');
./src/core/ci-integration/static-analysis.js:88:          console.log(`Solhint found: ${this.toolVersions.solhint}`);
./src/core/ci-integration/static-analysis.js:91:          console.log('To install Solhint: npm install -g solhint');
./src/core/ci-integration/static-analysis.js:101:          console.log(`Echidna found: ${this.toolVersions.echidna}`);
./src/core/ci-integration/static-analysis.js:104:          console.log('To install Echidna: https://github.com/crytic/echidna#installation');
./src/core/ci-integration/static-analysis.js:176:      console.log(`Running Slither analysis on: ${contractPath}`);
./src/core/ci-integration/static-analysis.js:177:      console.log(`Command: ${command}`);
./src/core/ci-integration/static-analysis.js:300:      console.log(`Running Mythril analysis on: ${contractPath}`);
./src/core/ci-integration/static-analysis.js:301:      console.log(`Command: ${command}`);
./src/core/ci-integration/static-analysis.js:445:      console.log(`Running Solhint analysis on: ${contractPath}`);
./src/core/ci-integration/static-analysis.js:446:      console.log(`Command: ${command}`);
./src/core/ci-integration/static-analysis.js:604:      console.log(`Running Echidna fuzzing on: ${contractPath}`);
./src/core/ci-integration/static-analysis.js:605:      console.log(`Command: ${command}`);
./src/core/ci-integration/static-analysis.js:808:      console.log(`Static analysis report generated at: ${outputPath}`);
./src/core/ci-integration/static-analysis.js:923:      console.log(`Markdown report generated at: ${outputPath}`);
./src/core/ci-integration/notification-system.js:121:      console.log('No alerts sent - threshold not met or notifications disabled');
./src/core/ci-integration/notification-system.js:625:      console.log(`Email alert sent: ${result.messageId}`);
./src/core/ci-integration/notification-system.js:663:      console.log('Slack alert sent successfully');
./src/core/ci-integration/notification-system.js:699:      console.log('Webhook alert sent successfully');
./src/core/ci-integration/notification-system.js:783:      console.log(`Notification configuration saved to: ${configPath}`);
./src/core/ci-integration/notification-system.js:811:      console.log(`Notification configuration loaded from: ${configPath}`);
./src/core/ci-integration/headless-wallet.js:65:          console.log(`Registered event handler for: ${eventName}`);
./src/core/ci-integration/headless-wallet.js:74:          console.log('Mock ethereum.request called with:', args);
./src/core/ci-integration/headless-wallet.js:101:      console.log('Mock Ethereum provider injected');
./src/core/ci-integration/headless-wallet.js:113:    console.log('Mock provider configured with test accounts and chain ID');
./src/core/ci-integration/headless-wallet.js:138:        console.log(`Mock ethereum.request called with method: ${args.method}`);
./src/core/ci-integration/headless-wallet.js:142:          console.log(`Using mock response for method: ${args.method}`);
./src/core/ci-integration/headless-wallet.js:157:      console.log('Mock responses configured');
./src/core/ci-integration/headless-wallet.js:178:      console.log(`Navigated to dApp: ${dAppUrl}`);
./src/core/ci-integration/headless-wallet.js:199:      console.log('Wallet connection simulated successfully');
./src/core/ci-integration/headless-wallet.js:233:            console.log('Mock eth_sendTransaction called with params:', args.params[0]);
./src/core/ci-integration/headless-wallet.js:254:      console.log(`Transaction simulated with hash: ${txHash}`);
./src/core/ci-integration/headless-wallet.js:317:      console.log(`Message signed with signature: ${signature}`);
./src/core/ci-integration/headless-wallet.js:355:            console.log(
./src/core/ci-integration/headless-wallet.js:387:      console.log(`Network switch simulated: ${success ? 'successful' : 'failed'}`);
./src/core/ci-integration/platform-registry.js:58:      console.log('No CI/CD platform detected. Using default implementation.');
./src/core/ci-integration/platform-registry.js:63:          console.log('No specific platform reporting available.');
./src/core/ci-integration/platform-registry.js:96:    console.log(`Registered adapter for platform: ${platformName}`);
./src/core/ci-integration/report-generators.js:95:    console.log(chalk.green(`Markdown report generated at: ${outputPath}`));
./src/core/ci-integration/security-rules-validator.js:1029:      console.log('Measuring finality across chains...');
./src/core/ci-integration/security-rules-validator.js:1083:      console.log('Testing transaction confirmation timing...');
./src/core/ci-integration/security-rules-validator.js:1139:      console.log('Simulating reorganizations and testing recovery...');
./src/core/ci-integration/github-action.js:237:      console.log(chalk.green(`Security scan workflow created at ${workflowPath}`));
./src/core/ci-integration/github-action.js:385:      console.log(chalk.green(`Deployment validation workflow created at ${workflowPath}`));
./src/core/ci-integration/github-action.js:574:      console.log(chalk.green(`Bug bounty readiness workflow created at ${workflowPath}`));
./src/core/ci-integration/github-action.js:735:      console.log(chalk.green(`L2 validation workflow created at ${workflowPath}`));
./src/core/ci-integration/index.js:39:    console.log(`Template security rules generated at: ${outputPath}`);
./src/core/ci-integration/index.js:58:      console.log('Security rules validation successful!');
./src/core/ci-integration/index.js:113:      console.log('No security misconfigurations detected.');
./src/core/ci-integration/index.js:150:      console.log(`${standard.toUpperCase()} compliance check passed!`);
./src/core/ci-integration/index.js:189:      console.log(`Security rules exported to SARIF format at: ${outputPath}`);
./src/core/ci-integration/index.js:209:  console.log(`Detected CI platform: ${platform || 'None (local environment)'}`);
./src/core/ci-integration/index.js:286:    console.log(`CI configuration for ${platform} generated at: ${outputPath}`);
./src/core/ci-integration/index.js:341:    console.log(`Notification configuration template generated at: ${outputPath}`);
./src/core/ci-integration/index.js:390:      console.log(`${l2Protocol} protocol security validation passed!`);
./src/core/ci-integration/index.js:425:      console.log('Bridge security validation passed!');
./src/core/ci-integration/index.js:458:    console.log(`${l2Protocol} security rules template generated at: ${outputPath}`);
./src/core/ci-integration/index.js:477:    console.log(`Bridge security rules template generated at: ${outputPath}`);
./src/core/ci-integration/index.js:515:      console.log('L2 finality measurement completed successfully!');
./src/core/ci-integration/index.js:519:        console.log(`\n${chain.toUpperCase()} Finality:`);
./src/core/ci-integration/index.js:520:        console.log(`  Average Finality Time: ${data.averageFinalityTime} seconds`);
./src/core/ci-integration/index.js:521:        console.log(`  Confirmed Blocks: ${data.confirmedBlocks}`);
./src/core/ci-integration/index.js:522:        console.log(`  Security Level: ${data.securityLevel}`);
./src/core/ci-integration/index.js:571:      console.log('L2 transaction confirmation tests completed successfully!');
./src/core/ci-integration/index.js:575:        console.log(`\nTransaction ${txId} (${data.chain}):`);
./src/core/ci-integration/index.js:576:        console.log(`  Submission Time: ${data.submissionTime}`);
./src/core/ci-integration/index.js:577:        console.log(`  Confirmation Time: ${data.confirmationTime}`);
./src/core/ci-integration/index.js:578:        console.log(`  Finality Achieved: ${data.finalityAchieved ? 'Yes' : 'No'}`);
./src/core/ci-integration/index.js:579:        console.log(`  Blocks to Finality: ${data.blocksToFinality}`);
./src/core/ci-integration/index.js:628:      console.log('L2 reorg simulation and recovery tests completed successfully!');
./src/core/ci-integration/index.js:632:        console.log(`\nScenario ${scenarioId} (${data.chain}):`);
./src/core/ci-integration/index.js:633:        console.log(`  Reorg Depth: ${data.reorgDepth} blocks`);
./src/core/ci-integration/index.js:634:        console.log(`  Start Time: ${data.startTime}`);
./src/core/ci-integration/index.js:635:        console.log(`  Recovery Time: ${data.recoveryTime}`);
./src/core/ci-integration/index.js:636:        console.log(`  Transactions Affected: ${data.transactionsAffected}`);
./src/core/ci-integration/index.js:637:        console.log(`  Recovery Success: ${data.recoverySuccess ? 'Yes' : 'No'}`);
./src/core/ci-integration/index.js:638:        console.log(`  Data Consistency: ${data.dataConsistency}%`);
./src/core/ci-integration/index.js:668:    console.log(`L2 performance testing template generated at: ${outputPath}`);
./src/core/ci-integration/index.js:714:    console.log(`Loaded ${testResults.length} test results from ${resultsFiles.length} files`);
./src/core/ci-integration/index.js:741:    console.log(`Security report generated at: ${reportPath}`);
./src/core/ci-integration/index.js:856:    console.log(`Vulnerability summary generated at: ${outputPath}`);
./src/core/ci-integration/index.js:911:    console.log(`Found ${criticalCount} critical and ${highCount} high severity vulnerabilities`);
./src/core/ci-integration/index.js:924:    console.log('No critical/high severity vulnerabilities that require build failure.');
./src/core/ci-integration/test-executor.js:174:      console.log(`Executing tests with command: npx ${args.join(' ')}`);
./src/core/ci-integration/test-executor.js:188:        console.log(output);
./src/core/ci-integration/test-executor.js:208:        console.log(`Test process exited with code ${code}`);
./src/core/ci-integration/test-executor.js:299:      console.log(`Security report generated at: ${reportPath}`);
./src/core/ci-integration/deployment-validator.js:459:      console.log(`Deployment validation report saved to ${reportPath}`);
./src/core/ci-integration/deployment-validator.js:537:      console.log(`Markdown deployment validation report saved to ${outputPath}`);
./src/core/ci-integration/deployment-validator.js:549:    console.log('Running deployment validation...');
./src/core/ci-integration/deployment-validator.js:558:    console.log('Scanning for deployments...');
./src/core/ci-integration/deployment-validator.js:560:    console.log(`Found ${deployments.length} deployments.`);
./src/core/ci-integration/deployment-validator.js:564:      console.log('Checking contract verification...');
./src/core/ci-integration/deployment-validator.js:566:      console.log(
./src/core/ci-integration/deployment-validator.js:572:    console.log('Checking for security issues...');
./src/core/ci-integration/deployment-validator.js:574:    console.log(`Found ${securityIssues.length} security issues.`);
./src/core/ci-integration/deployment-validator.js:581:    console.log(`Deployment validation complete. Report saved to ${outputPath}`);
./src/core/defi-testing/amm-protocols.js:152:    console.log(`Running test: ${testName}`);
./src/core/defi-testing/amm-protocols.js:195:    console.log(`Test ${testName} completed in ${result.duration}ms. Success: ${result.success}`);
./src/core/defi-testing/amm-protocols.js:697:    console.log(
./src/core/defi-testing/amm-protocols.js:750:    console.log(`Test summary generated: ${filename}`);
./src/core/defi-testing/amm-protocols.js:751:    console.log(`Security score: ${summary.securityScore}%`);
./src/core/defi-testing/trading-strategies.js:747:    console.log(`Strategy report generated at: ${outputPath}`);
./src/core/defi-testing/nft-marketplace-royalty.js:135:    console.log(`Running test: ${testName}`);
./src/core/defi-testing/nft-marketplace-royalty.js:176:    console.log(`Test ${testName} completed in ${result.duration}ms. Success: ${result.success}`);
./src/core/defi-testing/nft-marketplace-royalty.js:678:    console.log(`Running full NFT marketplace test suite for ${nftAddress} token ${tokenId}`);
./src/core/defi-testing/nft-marketplace-royalty.js:777:    console.log(`Test summary generated: ${filename}`);
./src/core/defi-testing/nft-marketplace-royalty.js:778:    console.log(`Compatibility score: ${summary.compatibilityScore}%`);
./src/core/defi-testing/nft-marketplace-royalty.js:780:      console.log(`Recommended marketplaces: ${bestMarketplaces.join(', ')}`);
./src/core/defi-testing/governance-protocol-tester.js:200:      console.log(logMessage);
./src/core/defi-testing/lending-protocols.js:203:    console.log(`Running test: ${testName}`);
./src/core/defi-testing/lending-protocols.js:248:    console.log(`Test ${testName} completed in ${result.duration}ms. Success: ${result.success}`);
./src/core/defi-testing/lending-protocols.js:582:    console.log(
./src/core/defi-testing/lending-protocols.js:629:    console.log(`Test summary generated: ${filename}`);
./src/core/defi-testing/lending-protocols.js:630:    console.log(`Security score: ${summary.securityScore}%`);
./src/core/defi-testing/mempool-monitor.js:60:        console.log(`Connected to ${networkName} at ${networkConfig.rpcUrl}`);
./src/core/defi-testing/mempool-monitor.js:104:      console.log('Mempool monitoring is disabled in configuration');
./src/core/defi-testing/mempool-monitor.js:109:      console.log('Mempool monitoring is already running');
./src/core/defi-testing/mempool-monitor.js:113:    console.log('Starting mempool monitoring...');
./src/core/defi-testing/mempool-monitor.js:143:      console.log('Mempool monitoring is not running');
./src/core/defi-testing/mempool-monitor.js:147:    console.log('Stopping mempool monitoring...');
./src/core/defi-testing/mempool-monitor.js:588:      console.log(`Now watching address: ${address}`);
./src/core/defi-testing/mempool-monitor.js:604:      console.log(`Added suspicious contract: ${address}`);
./src/core/defi-testing/gas-runner.js:83:    console.log(`Running gas optimization for target: ${this.config.optimizationTarget}`);
./src/core/defi-testing/gas-runner.js:600:      console.log(`Gas report saved to ${this.config.gasReportPath}`);
./src/core/defi-testing/cli.js:43:      console.log(chalk.blue(`Loaded config from ${configPath}`));
./src/core/defi-testing/cli.js:61:    console.log(chalk.green(`Config saved to ${configPath}`));
./src/core/defi-testing/cli.js:126:  console.log(chalk.blue(`Running lending protocol test: ${protocol} - ${test}`));
./src/core/defi-testing/cli.js:139:    console.log(formatTestResult(result));
./src/core/defi-testing/cli.js:140:    console.log(
./src/core/defi-testing/cli.js:160:  console.log(chalk.blue(`Running AMM protocol test: ${protocol} - ${test}`));
./src/core/defi-testing/cli.js:174:    console.log(formatTestResult(result));
./src/core/defi-testing/cli.js:175:    console.log(
./src/core/defi-testing/cli.js:195:  console.log(chalk.blue(`Running staking protocol test: ${protocol} - ${test}`));
./src/core/defi-testing/cli.js:208:    console.log(formatTestResult(result));
./src/core/defi-testing/cli.js:209:    console.log(
./src/core/defi-testing/cli.js:229:  console.log(chalk.blue(`Running NFT marketplace test: ${marketplace} - ${test}`));
./src/core/defi-testing/cli.js:261:    console.log(formatTestResult(result));
./src/core/defi-testing/cli.js:262:    console.log(
./src/core/defi-testing/cli.js:280:  console.log(chalk.blue(`Running L2 network test: ${network}`));
./src/core/defi-testing/cli.js:291:    console.log(chalk.blue(`Network status for ${network}:`));
./src/core/defi-testing/cli.js:293:      console.log(chalk.green(`‚úì Connected to ${statusResult.name}`));
./src/core/defi-testing/cli.js:294:      console.log(chalk.cyan(`  Chain ID: ${statusResult.chainId}`));
./src/core/defi-testing/cli.js:295:      console.log(chalk.cyan(`  Current block: ${statusResult.currentBlock}`));
./src/core/defi-testing/cli.js:296:      console.log(chalk.cyan(`  Gas price: ${statusResult.gasPrice}`));
./src/core/defi-testing/cli.js:298:      console.log(chalk.red(`‚úó Connection failed to ${statusResult.name}`));
./src/core/defi-testing/cli.js:299:      console.log(chalk.red(`  Error: ${statusResult.error}`));
./src/core/defi-testing/cli.js:304:      console.log(chalk.blue(`\nRunning test transaction on ${network}...`));
./src/core/defi-testing/cli.js:318:        console.log(chalk.green('‚úì Test transaction successful!'));
./src/core/defi-testing/cli.js:319:        console.log(chalk.cyan(`  Transaction hash: ${txResult.transactionHash}`));
./src/core/defi-testing/cli.js:320:        console.log(chalk.cyan(`  Block number: ${txResult.blockNumber}`));
./src/core/defi-testing/cli.js:321:        console.log(chalk.cyan(`  Gas used: ${txResult.gasUsed}`));
./src/core/defi-testing/cli.js:323:        console.log(chalk.red('‚úó Test transaction failed!'));
./src/core/defi-testing/cli.js:324:        console.log(chalk.red(`  Error: ${txResult.error}`));
./src/core/defi-testing/cli.js:351:    console.log(chalk.green(`\nTest result saved to ${resultFilePath}`));
./src/core/defi-testing/cli.js:369:  console.log(chalk.blue(`Running ${suiteType} test suite for: ${name}`));
./src/core/defi-testing/cli.js:429:        console.log(chalk.green(`L2 network report saved to ${reportFilePath}`));
./src/core/defi-testing/cli.js:432:        console.log(chalk.blue('\nL2 Network Test Summary:'));
./src/core/defi-testing/cli.js:433:        console.log(chalk.cyan(`Total networks: ${report.summary.total}`));
./src/core/defi-testing/cli.js:434:        console.log(chalk.green(`Available: ${report.summary.available}`));
./src/core/defi-testing/cli.js:435:        console.log(chalk.red(`Unavailable: ${report.summary.unavailable}`));
./src/core/defi-testing/cli.js:444:      console.log(chalk.blue('\nTest Suite Summary:'));
./src/core/defi-testing/cli.js:445:      console.log(chalk.cyan(`Total tests: ${result.summary.total}`));
./src/core/defi-testing/cli.js:446:      console.log(chalk.green(`Passed: ${result.summary.passed}`));
./src/core/defi-testing/cli.js:447:      console.log(chalk.red(`Failed: ${result.summary.failed}`));
./src/core/defi-testing/cli.js:448:      console.log(chalk.cyan(`Success rate: ${result.summary.successRate}`));
./src/core/defi-testing/cli.js:449:      console.log(chalk.cyan(`Total duration: ${result.summary.totalDuration}ms`));
./src/core/defi-testing/cli.js:468:  console.log(chalk.blue('Generating comprehensive test report...'));
./src/core/defi-testing/cli.js:503:    console.log(chalk.green(`Comprehensive report saved to ${reportFilePath}`));
./src/core/defi-testing/cli.js:516:  console.log(chalk.blue('Running all protocol tests...'));
./src/core/defi-testing/cli.js:520:    console.log(chalk.cyan('\n=== Running Uniswap tests ==='));
./src/core/defi-testing/cli.js:524:    console.log(chalk.cyan('\n=== Running Aave tests ==='));
./src/core/defi-testing/cli.js:528:    console.log(chalk.cyan('\n=== Running Lido tests ==='));
./src/core/defi-testing/cli.js:532:    console.log(chalk.cyan('\n=== Running OpenSea tests ==='));
./src/core/defi-testing/cli.js:540:    console.log(chalk.cyan('\n=== Running L2 network tests ==='));
./src/core/defi-testing/cli.js:544:    console.log(chalk.cyan('\n=== Generating comprehensive report ==='));
./src/core/defi-testing/cli.js:547:    console.log(chalk.green('\nAll tests completed! Report generated at:'));
./src/core/defi-testing/cli.js:548:    console.log(chalk.cyan(reportResult.reportFilePath));
./src/core/defi-testing/cli.js:671:      console.log(chalk.blue(`Analyzing ${strategyType} trading strategy`));
./src/core/defi-testing/cli.js:719:      console.log('\n' + chalk.yellow('Analysis Results:'));
./src/core/defi-testing/cli.js:720:      console.log(chalk.yellow('================='));
./src/core/defi-testing/cli.js:721:      console.log(chalk.cyan(`Risk Score: ${results.riskScore}/100`));
./src/core/defi-testing/cli.js:724:        console.log(chalk.green('No vulnerabilities detected'));
./src/core/defi-testing/cli.js:726:        console.log(chalk.red(`Detected ${results.vulnerabilities.length} vulnerabilities:`));
./src/core/defi-testing/cli.js:728:          console.log(chalk.red(`- ${vuln.name} (${vuln.severity}): ${vuln.description}`));
./src/core/defi-testing/cli.js:729:          console.log(chalk.cyan(`  Remediation: ${vuln.remediation}`));
./src/core/defi-testing/cli.js:733:      console.log(
./src/core/defi-testing/cli.js:768:      console.log(chalk.blue(`Executing ${strategyType} trading strategy`));
./src/core/defi-testing/cli.js:800:          console.log(
./src/core/defi-testing/cli.js:805:          console.log(
./src/core/defi-testing/cli.js:812:            console.log(chalk.red(`- ${vuln.name} (${vuln.severity}): ${vuln.description}`));
./src/core/defi-testing/cli.js:813:            console.log(chalk.cyan(`  Remediation: ${vuln.remediation}`));
./src/core/defi-testing/cli.js:820:            console.log(chalk.yellow('Execution cancelled by user.'));
./src/core/defi-testing/cli.js:823:          console.log(chalk.yellow('Proceeding with execution despite high risk...'));
./src/core/defi-testing/cli.js:833:        console.log(chalk.yellow('Running in simulation mode...'));
./src/core/defi-testing/cli.js:835:        console.log(chalk.green('Simulation completed.'));
./src/core/defi-testing/cli.js:838:        console.log(chalk.yellow('\nSimulation Results:'));
./src/core/defi-testing/cli.js:839:        console.log(chalk.yellow('==================='));
./src/core/defi-testing/cli.js:840:        console.log(
./src/core/defi-testing/cli.js:845:        console.log(chalk.cyan(`Transactions: ${results.transactions.length}`));
./src/core/defi-testing/cli.js:846:        console.log(chalk.cyan(`Gas used: ${results.profits.gas.toFixed(6)} ETH`));
./src/core/defi-testing/cli.js:848:        console.log(chalk.green(`\nFull simulation report saved to ${executionConfig.outputDir}`));
./src/core/defi-testing/cli.js:850:        console.log(chalk.yellow('Executing live strategy...'));
./src/core/defi-testing/cli.js:862:        console.log(chalk.green('Execution completed.'));
./src/core/defi-testing/cli.js:865:        console.log(chalk.yellow('\nExecution Results:'));
./src/core/defi-testing/cli.js:866:        console.log(chalk.yellow('=================='));
./src/core/defi-testing/cli.js:867:        console.log(chalk.cyan(`Status: ${results.status}`));
./src/core/defi-testing/cli.js:868:        console.log(
./src/core/defi-testing/cli.js:873:        console.log(chalk.cyan(`Transactions: ${results.transactions.length}`));
./src/core/defi-testing/cli.js:875:        console.log(chalk.green(`\nFull execution report saved to ${executionConfig.outputDir}`));
./src/core/defi-testing/trading-strategy-analyzer.js:132:    console.log(
./src/core/defi-testing/trading-strategy-analyzer.js:803:    console.log(chalk.green(`Saved analysis report to ${filePath}`));
./src/core/index.js:26:  console.log('Running Audityzer security tests...');
./src/core/index.js:40:    console.log('Running in Account Abstraction mode...');
./src/core/sandbox/execution-environment.js:158:      console.log(logMessage);
./src/index.ts:13:  console.log('üîí Audityzer Security Scanner initialized');
./src/index.js:16:    console.log('Generating security report...');
./src/index.js:42:    console.log('Audityzer - Web3 Security Analysis Toolkit');
./src/index.js:43:    console.log('Run "audityzer --help" for usage information.');
./test-example.js:22:          console.log(`MetaMask mock: ${method} called`);
./test-example.js:32:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./test-example.js:63:    console.log('MetaMask connection test completed successfully!');
./autotests/metamask-extension.test.ts:37:    console.log(`MetaMask extension ID: ${extensionId}`);
./autotests/metamask-extension.test.ts:86:    console.log('MetaMask connection test completed successfully!');
./autotests/sample-tests/metamask-login.test.js:21:          console.log(`MetaMask mock: ${method} called`);
./autotests/sample-tests/metamask-login.test.js:31:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./autotests/sample-tests/metamask-login.test.js:85:    console.log('Test completed successfully! Screenshot saved to media/metamask-test-mocked.png');
./autotests/sample-tests/unhandled-provider-errors.test.js:53:          console.log(`Ethereum mock: ${method} called`);
./autotests/sample-tests/unhandled-provider-errors.test.js:99:          console.log(`Ethereum mock: registered event listener for ${eventName}`);
./autotests/sample-tests/unhandled-provider-errors.test.js:106:        console.log(`Set to trigger error: ${errorType}`);
./autotests/sample-tests/unhandled-provider-errors.test.js:244:            console.log('Chain not added yet');
./autotests/sample-tests/unhandled-provider-errors.test.js:356:    console.log(
./autotests/sample-tests/reentrancy-test.test.js:31:        console.log(message);
./autotests/sample-tests/reentrancy-test.test.js:100:    page.on('console', msg => console.log(`PAGE LOG: ${msg.text()}`));
./autotests/sample-tests/signature-spoofing.test.js:25:          console.log('Contract: verifySignature called');
./autotests/sample-tests/signature-spoofing.test.js:26:          console.log(`Message: ${message}`);
./autotests/sample-tests/signature-spoofing.test.js:27:          console.log(`Signature: ${signature}`);
./autotests/sample-tests/signature-spoofing.test.js:28:          console.log(`Address: ${address}`);
./autotests/sample-tests/signature-spoofing.test.js:37:          console.log('Contract: executeWithSignature called');
./autotests/sample-tests/signature-spoofing.test.js:42:            console.log(`Executing operation for amount: ${amount}`);
./autotests/sample-tests/signature-spoofing.test.js:62:          console.log(`Ethereum mock: ${method} called`);
./autotests/sample-tests/signature-spoofing.test.js:111:          console.log(`Ethereum mock: registered event listener for ${eventName}`);
./autotests/sample-tests/signature-spoofing.test.js:237:    console.log(
./autotests/sample-tests/reentrancy-check.test.js:32:          console.log('Contract: withdrawFunds called');
./autotests/sample-tests/reentrancy-check.test.js:47:          console.log(`Ethereum mock: ${method} called`);
./autotests/sample-tests/reentrancy-check.test.js:55:            console.log('Transaction params:', txParams);
./autotests/sample-tests/reentrancy-check.test.js:75:          console.log(`Ethereum mock: registered event listener for ${eventName}`);
./autotests/sample-tests/reentrancy-check.test.js:170:    console.log('Reentrancy test completed! Screenshot saved to media/reentrancy-test.png');
./plugins/front-running-detection/index.js:312:        console.log('Front-running attack simulation enabled');
./plugins/front-running-detection/index.js:340:          console.log('Flashbots protection enabled - transactions will use private mempool');
./plugins/front-running-detection/index.js:344:          console.log('High gas price protection enabled');
./plugins/front-running-detection/index.js:358:          console.log('Timelock protection enabled - transactions will be delayed');
./fix-tests.js:25:console.log(`${colors.cyan}==================================================${colors.reset}`);
./fix-tests.js:26:console.log(`${colors.cyan}       Audityzer Test Fix Utility             ${colors.reset}`);
./fix-tests.js:27:console.log(`${colors.cyan}==================================================${colors.reset}`);
./fix-tests.js:42:  console.log(`\n${colors.blue}[STEP]${colors.reset} ${description}...`);
./fix-tests.js:43:  console.log(`${colors.yellow}$ ${command}${colors.reset}`);
./fix-tests.js:47:    console.log(`${colors.green}‚úì Success!${colors.reset}`);
./fix-tests.js:60:    console.log(`${colors.yellow}Trying alternative installation method...${colors.reset}`);
./fix-tests.js:75:  console.log(`\n${colors.green}==================================================${colors.reset}`);
./fix-tests.js:76:  console.log(
./fix-tests.js:79:  console.log(`${colors.green} installed locally and tests have been fixed.${colors.reset}`);
./fix-tests.js:80:  console.log(`${colors.green}==================================================${colors.reset}`);
./fix-tests.js:81:  console.log(`\n${colors.blue}Next steps:${colors.reset}`);
./fix-tests.js:82:  console.log(
./fix-tests.js:85:  console.log(
./fix-tests.js:88:  console.log('3. See README.md for more detailed instructions');
./SolidStartApp/setup-and-build.js:19:  console.log(`${colors.blue}${colors.bright}> ${description}...${colors.reset}`);
./SolidStartApp/setup-and-build.js:22:    console.log(`${colors.green}‚úì ${description} completed successfully${colors.reset}\n`);
./SolidStartApp/setup-and-build.js:32:  console.log(`\n${colors.bright}=== SOLIDSTART APP SETUP AND BUILD ===\n${colors.reset}`);
./SolidStartApp/setup-and-build.js:37:    console.log(`${colors.yellow}Creating .env file with CODECOV_TOKEN...${colors.reset}`);
./SolidStartApp/setup-and-build.js:39:    console.log(`${colors.green}‚úì .env file created${colors.reset}\n`);
./SolidStartApp/setup-and-build.js:70:  console.log(
./SolidStartApp/setup-and-build.js:73:  console.log(
./playwright.config.js:11:  console.log('Mock mode:', mockMode);
./playwright.config.js:12:  console.log('Target URL:', targetUrl);
./organize-tests.js:68:          console.log(`Copied Playwright test: ${fullPath} -> ${targetPath}`);
./organize-tests.js:79:console.log('Done organizing Playwright tests!');
./utils/phantom-wallet.js:18:  console.log('Setting up Phantom wallet for testing...');
./utils/phantom-wallet.js:27:      console.log(`Creating mock Phantom provider (${network})`);
./utils/phantom-wallet.js:82:          console.log('Mock signing transaction:', transaction);
./utils/phantom-wallet.js:86:          console.log('Mock signing multiple transactions:', transactions);
./utils/phantom-wallet.js:90:          console.log('Mock signing message:', message);
./utils/phantom-wallet.js:95:          console.log('Phantom request:', params);
./utils/phantom-wallet.js:121:  console.log('Phantom wallet setup complete');
./utils/phantom-wallet.js:130:  console.log('Connecting Phantom wallet to dApp...');
./utils/phantom-wallet.js:139:    console.log('Phantom popup detected, handling connection approval');
./utils/phantom-wallet.js:147:        console.log('Error finding connect button in popup:', err);
./utils/phantom-wallet.js:154:            console.log('Failed to find any connect button, trying to press Enter key');
./utils/phantom-wallet.js:161:      console.log('Timeout waiting for popup to close');
./utils/phantom-wallet.js:165:    console.log('No popup detected, assuming in-page connection flow');
./utils/phantom-wallet.js:173:        console.log('No in-page connect button found, connection may be automatic');
./utils/phantom-wallet.js:187:  console.log(`Connected with Phantom address: ${connectedAddress}`);
./utils/phantom-wallet.js:198:  console.log('Disconnecting Phantom wallet...');
./utils/phantom-wallet.js:207:    console.log('Disconnect button not found in main UI, trying wallet dropdown');
./utils/phantom-wallet.js:215:        console.log('Wallet button not found, trying alternative disconnect method');
./utils/phantom-wallet.js:224:        console.log('Still no disconnect option found, trying programmatic disconnect');
./utils/phantom-wallet.js:239:  console.log('Phantom wallet disconnected');
./utils/phantom-wallet.js:248:  console.log('Approving Phantom transaction...');
./utils/phantom-wallet.js:257:    console.log('Transaction popup detected');
./utils/phantom-wallet.js:276:        console.log('Error finding approve button:', err);
./utils/phantom-wallet.js:283:      console.log('Timeout waiting for transaction popup to close');
./utils/phantom-wallet.js:287:    console.log('No transaction popup detected, looking for in-page approval');
./utils/phantom-wallet.js:296:        console.log('No in-page approve button found, trying programmatic approval');
./utils/phantom-wallet.js:313:  console.log('Transaction approved');
./utils/phantom-wallet.js:390:      console.log(`Restoring network to ${state.network}`);
./utils/phantom-wallet.js:407:  console.log('Phantom wallet state restored:', state.isConnected ? 'Connected' : 'Disconnected');
./utils/wallet-helpers.js:95:    console.log('Mock wallet injected with config:', walletConfig);
./utils/wallet-helpers.js:98:  console.log('Wallet state set up with config:', config);
./utils/wallet-helpers.js:126:    console.log('Wallet connected with address:', window.ethereum.selectedAddress);
./utils/wallet-helpers.js:130:  console.log('Wallet connection simulated');
./utils/fix-linting.js:37:  console.log(chalk.blue('Starting automated lint fixes...'));
./utils/fix-linting.js:42:      console.log(chalk.yellow(`Directory ${dir} not found, skipping.`));
./utils/fix-linting.js:46:    console.log(chalk.blue(`Processing directory: ${dir}`));
./utils/fix-linting.js:116:            console.log(chalk.green(`‚úì Fixed issues in ${file}`));
./utils/fix-linting.js:129:    console.log(chalk.blue('Running ESLint fix...'));
./utils/fix-linting.js:131:    console.log(chalk.green('‚úì ESLint fix completed'));
./utils/fix-linting.js:138:console.log(chalk.blue('==== Web3 Security Test Kit - Lint Fixer ===='));
./utils/fix-linting.js:140:console.log(chalk.green('Done! Most common ESLint issues should now be fixed.'));
./utils/fix-linting.js:141:console.log(
./utils/phantom.js:7:export function injectPhantomProvider(logger = console.log) {
./utils/walletconnect-provider.js:67:    console.log(`WalletConnect request: ${method}`, params);
./utils/walletconnect-provider.js:200:    console.log('Displaying WalletConnect QR code with URI:', this.pairingUri);
./utils/analyze-performance.js:26:    console.log('Analyzing performance benchmarks...');
./utils/analyze-performance.js:63:    console.log(`Performance metrics saved to: ${OUTPUT_PATH}`);
./utils/analyze-performance.js:215:  console.log('\n===== PERFORMANCE BENCHMARK SUMMARY =====');
./utils/analyze-performance.js:216:  console.log(`Total Tests: ${metrics.totalTests}`);
./utils/analyze-performance.js:217:  console.log(
./utils/analyze-performance.js:220:  console.log(`Total Duration: ${formatDuration(metrics.totalDuration)}`);
./utils/analyze-performance.js:221:  console.log(`Average Test Duration: ${formatDuration(metrics.averageDuration)}`);
./utils/analyze-performance.js:223:  console.log('\n----- SLOWEST TESTS -----');
./utils/analyze-performance.js:225:    console.log(`${index + 1}. ${test.name} - ${formatDuration(test.duration)}`);
./utils/analyze-performance.js:228:  console.log('\n----- FASTEST TESTS -----');
./utils/analyze-performance.js:230:    console.log(`${index + 1}. ${test.name} - ${formatDuration(test.duration)}`);
./utils/analyze-performance.js:236:  console.log('\n===== COMPARISON WITH PREVIOUS RUN =====');
./utils/analyze-performance.js:241:  console.log(
./utils/analyze-performance.js:244:  console.log(`Percentage Change: ${comparison.percentageDurationChange.toFixed(2)}%`);
./utils/analyze-performance.js:246:  console.log('\n----- TESTS WITH LARGEST CHANGES -----');
./utils/analyze-performance.js:249:    console.log(
./utils/walletconnect.js:6:  console.log(msg);
./utils/ensure-reports-dir.js:19:  console.log('Ensuring report directories exist...');
./utils/ensure-reports-dir.js:25:      console.log(`Creating directory: ${dir}`);
./utils/ensure-reports-dir.js:28:      console.log(`Directory already exists: ${dir}`);
./utils/ensure-reports-dir.js:32:  console.log('Report directories checked successfully.');
./utils/compare-benchmarks.js:20:    console.log('Comparing benchmark results...');
./utils/compare-benchmarks.js:43:      console.log(`Comparison report saved to: ${outputPath}`);
./utils/compare-benchmarks.js:45:      console.log('\n===== BENCHMARK COMPARISON REPORT =====\n');
./utils/compare-benchmarks.js:46:      console.log(comparisonReport);
./utils/rabby.js:7:export function injectRabbyProvider(logger = console.log) {
./utils/walletMocks.ts:83:        console.log(`Mock wallet: ${method} called with params:`, params);
./utils/walletMocks.ts:326:    console.log('Wallet state saved:', state);
./utils/walletMocks.ts:354:          console.log(`Mock wallet: ${method} called with params:`, params);
./utils/walletMocks.ts:503:    console.log('Wallet state restored:', savedState);
./utils/openai-generator.js:28:    console.log(chalk.blue(`Generating configuration from prompt: "${prompt}"`));
./utils/openai-generator.js:55:      console.log(chalk.green('Configuration generated successfully'));
./utils/openai-generator.js:59:      console.log(
./utils/openai-generator.js:64:      console.log(chalk.gray('Raw response:'), configContent);
./utils/openai-generator.js:86:    console.log(chalk.green(`Configuration saved to ${configPath}`));
./utils/merge-reports.js:20:    console.log('Merging HTML reports...');
./utils/merge-reports.js:26:    console.log(`Reports successfully merged at: ${reportsDir}`);
./utils/merge-reports.js:32:      console.log('Attempting fallback: copying most recent report...');
./utils/merge-reports.js:44:        console.log(`Latest report copied to: ${reportsDir}`);
./utils/merge-reports.js:46:        console.log('No playwright-report directory found.');
./utils/merge-reports.js:58:  console.log('Enhancing report with links to artifacts and fuzzed inputs...');
./utils/merge-reports.js:88:    console.log(
./utils/coinbase-provider.js:63:    console.log(`Coinbase Wallet request: ${method}`, params);
./utils/coinbase-provider.js:219:    console.log('Opening Coinbase Wallet mobile link:', this.mobileLoginUri);
./utils/coinbase-provider.js:238:    console.log('Displaying Coinbase Wallet QR code with URI:', this.desktopLoginUri);
./utils/debug-logger.js:297:    console.log(colorFn(`[${timestamp}] [${category.toUpperCase()}] ${message}`));
./utils/debug-logger.js:303:      console.log(chalk.gray(JSON.stringify(dataToPrint, null, 2)));
./utils/coinbase.js:6:  console.log(msg);
./bin/dev-server-runner.js:76:          console.log('Status: Running');
./bin/dev-server-runner.js:77:          console.log(`PID: ${pid}`);
./bin/dev-server-runner.js:78:          console.log(`Port: ${port}`);
./bin/dev-server-runner.js:79:          console.log(`Health endpoint: http://localhost:${parseInt(port)+1}/health`);
./bin/dev-server-runner.js:80:          console.log(`Start time: ${new Date(startTime).toISOString()}`);
./bin/dev-server-runner.js:81:          console.log(`Uptime: ${uptime.toFixed(2)} seconds`);
./bin/dev-server-runner.js:85:          console.log('Status: Running (legacy format)');
./bin/dev-server-runner.js:86:          console.log(`PID: ${pid}`);
./bin/dev-server-runner.js:87:          console.log('Note: Server is running with an older version of the runner');
./bin/dev-server-runner.js:90:        console.log('Status: Not running');
./bin/devforge.js:76:          console.log('Status: Running');
./bin/devforge.js:77:          console.log(`PID: ${pid}`);
./bin/devforge.js:78:          console.log(`Port: ${port}`);
./bin/devforge.js:79:          console.log(`Health endpoint: http://localhost:${parseInt(port)+1}/health`);
./bin/devforge.js:80:          console.log(`Start time: ${new Date(startTime).toISOString()}`);
./bin/devforge.js:81:          console.log(`Uptime: ${uptime.toFixed(2)} seconds`);
./bin/devforge.js:85:          console.log('Status: Running (legacy format)');
./bin/devforge.js:86:          console.log(`PID: ${pid}`);
./bin/devforge.js:87:          console.log('Note: Server is running with an older version of the runner');
./bin/devforge.js:90:        console.log('Status: Not running');
./run-lighthouse.js:36:  console.log('Navigating to the local test page...');
./run-lighthouse.js:39:  console.log('Running Lighthouse audit...');
./run-lighthouse.js:46:  console.log('Audit complete. Report saved to lighthouse-report.html');
./run-lighthouse.js:56:  console.log('Lighthouse scores:');
./run-lighthouse.js:59:    console.log(`${color}${score.name}: ${score.score.toFixed(0)}\x1b[0m`);
./metamask-dtk-defai/Web3FuzzForge/src/components/RedeemPermissionButton.tsx:130:      console.log(receipt);
./fix-imports.js:35:  console.log(`Processing: ${filePath}`);
./fix-imports.js:47:    console.log(`  No imports to fix in: ${filePath}`);
./fix-imports.js:110:    console.log(`  Updated imports in: ${filePath}`);
./fix-imports.js:118:  console.log(`Fixing imports in ${playwrightDir}...`);
./fix-imports.js:122:  console.log('Done fixing imports!');
./tests/stargate-bridge-tests.js:53:        console.log(`Testing ${token.name} transfer from ${network.name}`);
./tests/stargate-bridge-tests.js:82:      console.log(`Testing slippage setting: ${slippage / 100}%`);
./tests/stargate-bridge-tests.js:97:        console.log(`  Checking low slippage (${slippage / 100}%) handling`);
./tests/stargate-bridge-tests.js:120:        console.log(`Testing fee consistency for ${token.name} on ${network.name}`);
./tests/stargate-bridge-tests.js:144:        console.log(`  Relative variance: ${(relativeVariance * 100).toFixed(2)}%`);
./tests/stargate-bridge-tests.js:155:      console.log(`Running security scan for ${network.name}`);
./tests/stargate-bridge-tests.js:172:        console.log('‚ö†Ô∏è Security vulnerabilities detected:');
./tests/stargate-bridge-tests.js:174:          console.log(`  - ${finding.type} (${finding.severity}): ${finding.description}`);
./tests/stargate-bridge-tests.js:187:        console.log(`Verifying liquidity for ${token.name} on ${network.name}`);
./tests/stargate-bridge-tests.js:208:            console.log(`  ‚úì Correctly rejected transfer due to: ${status.error}`);
./tests/stargate-bridge-tests.js:210:            console.log(
./tests/stargate-bridge-tests.js:217:          console.log(`  ‚úì Correctly rejected transfer due to: ${result.error}`);
./tests/stargate-bridge-tests.js:240:      console.log(`Running fuzzing test #${i + 1}:`);
./tests/stargate-bridge-tests.js:241:      console.log(`  Network: ${network.name}, Token: ${token.name}`);
./tests/stargate-bridge-tests.js:242:      console.log(`  Amount: ${amount}, Slippage: ${slippage / 100}%`);
./tests/stargate-bridge-tests.js:258:        console.log(`  Result: ${status.status}`);
./tests/stargate-bridge-tests.js:260:        console.log(`  Result: Failed - ${result.error}`);
./tests/tx-fuzzing-test.ts:40:          console.log(`MetaMask mock: ${method} called`);
./tests/tx-fuzzing-test.ts:48:            console.log('Transaction params:', txParams);
./tests/tx-fuzzing-test.ts:62:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/tx-fuzzing-test.ts:96:    console.log('MetaMask transaction test completed successfully!');
./tests/tx-fuzzing-test.ts:107:      console.log(`Testing XSS payload: ${payload}`);
./tests/tx-fuzzing-test.ts:119:        console.log(`Error testing recipient field: ${e.message}`);
./tests/tx-fuzzing-test.ts:132:        console.log(`Error testing amount field: ${e.message}`);
./tests/tx-fuzzing-test.ts:143:      console.log(`Testing large amount: ${amount}`);
./tests/tx-fuzzing-test.ts:164:              console.log(`Error displayed: ${await errorElement.textContent()}`);
./tests/tx-fuzzing-test.ts:169:        console.log(`Error testing large amount: ${e.message}`);
./tests/defi-swap-test.js:26:          console.log(`MetaMask mock: ${method} called`);
./tests/defi-swap-test.js:34:            console.log('Transaction params:', txParams);
./tests/defi-swap-test.js:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/defi-swap-test.js:82:    console.log('MetaMask transaction test completed successfully!');
./tests/connection-test.js:22:          console.log(`MetaMask mock: ${method} called`);
./tests/connection-test.js:32:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/connection-test.js:63:    console.log('MetaMask connection test completed successfully!');
./tests/walletconnect-tx-test.js:18:  console.log('Navigating to the dApp...');
./tests/walletconnect-tx-test.js:25:  console.log('Looking for Connect Wallet button...');
./tests/walletconnect-tx-test.js:31:  console.log('Waiting for WalletConnect modal...');
./tests/walletconnect-tx-test.js:37:  console.log('Waiting for QR code...');
./tests/walletconnect-tx-test.js:46:  console.log('QR Code displayed and ready for scanning');
./tests/walletconnect-tx-test.js:47:  console.log('NOTE: In a real test environment, you would scan this code with a mobile wallet');
./tests/walletconnect-tx-test.js:50:  console.log('Simulating successful WalletConnect connection...');
./tests/walletconnect-tx-test.js:78:  console.log('Waiting for wallet connection to establish...');
./tests/walletconnect-tx-test.js:82:    console.log('Wallet connected successfully');
./tests/walletconnect-tx-test.js:84:    console.log('Connection verification failed, but test continuing for demonstration');
./tests/walletconnect-tx-test.js:88:  console.log('Preparing transaction...');
./tests/walletconnect-tx-test.js:98:    console.log('Could not fill transaction form, continuing with default values:', e);
./tests/walletconnect-tx-test.js:102:  console.log('Submitting transaction...');
./tests/walletconnect-tx-test.js:115:      console.log('No confirmation modal found');
./tests/walletconnect-tx-test.js:118:    console.log('Could not submit transaction:', e);
./tests/walletconnect-tx-test.js:122:  console.log('Simulating transaction approval in the wallet...');
./tests/walletconnect-tx-test.js:141:  console.log('Verifying transaction confirmation...');
./tests/walletconnect-tx-test.js:148:      console.log('Transaction confirmed with hash:', await txHash.textContent());
./tests/walletconnect-tx-test.js:151:    console.log('Transaction successfully completed');
./tests/walletconnect-tx-test.js:153:    console.log('Transaction confirmation verification failed:', e);
./tests/walletconnect-tx-test.js:158:  console.log('WalletConnect transaction test completed');
./tests/custom.test.js:26:          console.log(`MetaMask mock: ${method} called`);
./tests/custom.test.js:39:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/custom.test.js:70:    console.log('Custom MetaMask connection test completed successfully!');
./tests/uniswap-security-test.js:32:        console.log(`MetaMask mock: ${method} called with params:`, params);
./tests/uniswap-security-test.js:71:        console.log(`MetaMask mock: event listener for ${eventName} registered`);
./tests/uniswap-security-test.js:188:          console.log('No explicit error shown but transaction should not succeed');
./tests/test-metamask-tx.js:26:          console.log(`MetaMask mock: ${method} called`);
./tests/test-metamask-tx.js:34:            console.log('Transaction params:', txParams);
./tests/test-metamask-tx.js:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/test-metamask-tx.js:82:    console.log('MetaMask transaction test completed successfully!');
./tests/test-metamask-tx.js:93:      console.log(`Testing XSS payload: ${payload}`);
./tests/test-metamask-tx.js:107:        console.log(`Error testing recipient field: ${e.message}`);
./tests/test-metamask-tx.js:119:        console.log(`Error testing input fields: ${e.message}`);
./tests/test-metamask-tx.js:126:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./tests/test-metamask-tx.js:129:        console.log(`Error clicking buttons: ${e.message}`);
./tests/test-metamask-tx.js:141:      console.log(`Testing large amount: ${amount}`);
./tests/test-metamask-tx.js:168:              console.log(`Error displayed: ${await errorElement.textContent()}`);
./tests/test-metamask-tx.js:173:        console.log(`Error testing large amount: ${e.message}`);
./tests/rabby-connect.ts:33:    console.log('Note: Rabby wallet support is in development. Using MetaMask provider for now.');
./tests/rabby-connect.ts:42:          console.log(`Rabby mock (via MetaMask): ${method} called`);
./tests/rabby-connect.ts:52:          console.log(`Rabby mock (via MetaMask): registered event listener for ${eventName}`);
./tests/rabby-connect.ts:67:    console.log('Note: Rabby-specific features will be added in a future update.');
./tests/rabby-connect.ts:85:    console.log('Rabby connection test (via MetaMask) completed successfully!');
./tests/test-coinbase.js:26:          console.log(`Coinbase Wallet mock: ${method} called`);
./tests/test-coinbase.js:36:          console.log(`Coinbase Wallet mock: registered event listener for ${eventName}`);
./tests/test-coinbase.js:74:    console.log('Coinbase Wallet connection test completed successfully!');
./tests/test-coinbase.js:112:      console.log('Disconnect button not found, skipping disconnect test');
./tests/error-test.ts:38:          console.log(`MetaMask mock: ${method} called`);
./tests/error-test.ts:62:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/error-test.ts:85:    console.log('MetaMask transaction error test completed successfully!');
./tests/error-test.ts:102:    console.log('MetaMask signature error test completed successfully!');
./tests/error-test.ts:119:    console.log('MetaMask network error test completed successfully!');
./tests/lint-test3.ts:38:          console.log(`MetaMask mock: ${method} called`);
./tests/lint-test3.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/lint-test3.ts:79:    console.log('MetaMask connection test completed successfully!');
./tests/walletconnect-test-new.js:18:  console.log('Navigating to the dApp...');
./tests/walletconnect-test-new.js:25:  console.log('Looking for Connect Wallet button...');
./tests/walletconnect-test-new.js:31:  console.log('Waiting for WalletConnect modal...');
./tests/walletconnect-test-new.js:37:  console.log('Waiting for QR code...');
./tests/walletconnect-test-new.js:46:  console.log('QR Code displayed and ready for scanning');
./tests/walletconnect-test-new.js:47:  console.log('NOTE: In a real test environment, you would scan this code with a mobile wallet');
./tests/walletconnect-test-new.js:58:  console.log('Simulating successful WalletConnect connection...');
./tests/walletconnect-test-new.js:90:  console.log('Verifying connection status...');
./tests/walletconnect-test-new.js:101:    console.log('WalletConnect connection verified!');
./tests/walletconnect-test-new.js:103:    console.log('Connection verification failed, but test continuing for demonstration');
./tests/walletconnect-test-new.js:104:    console.log(e);
./tests/walletconnect-test-new.js:108:  console.log('Testing disconnection...');
./tests/walletconnect-test-new.js:118:    console.log('Disconnection successful!');
./tests/walletconnect-test-new.js:120:    console.log('Disconnection flow skipped - button not found or not implemented in dApp');
./tests/walletconnect-test-new.js:123:  console.log('WalletConnect test completed');
./tests/metamask-test-new.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/metamask-test-new.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/metamask-test-new.js:66:    console.log('MetaMask connection test completed successfully!');
./tests/wallet-matrix-fuzz.js:31:  console.log('Running in snapshot mode. Wallet state will be captured before and after tests.');
./tests/wallet-matrix-fuzz.js:106:    console.log(`Wallet snapshot saved: ${filename}`);
./tests/wallet-matrix-fuzz.js:181:      console.log(`Detected ${changes.changes.length} state changes for ${after.walletType}`);
./tests/wallet-matrix-fuzz.js:183:        console.log(`- ${change.type} (${change.severity}): ${change.before} ‚Üí ${change.after}`);
./tests/wallet-matrix-fuzz.js:186:      console.log(`No state changes detected for ${after.walletType}`);
./tests/wallet-matrix-fuzz.js:261:          console.log(`Mock wallet: ${method} called with params:`, params);
./tests/wallet-matrix-fuzz.js:340:          console.log(`Wallet mock: registered event listener for ${eventName}`);
./tests/wallet-matrix-fuzz.js:419:          console.log(`Detected state drift in connection flow test for ${walletType}!`);
./tests/wallet-matrix-fuzz.js:444:          console.log(`Transaction ${i + 1} (${walletType}):`, txResult);
./tests/wallet-matrix-fuzz.js:452:          console.log(`Transaction ${i + 1} failed with error:`, error.message);
./tests/wallet-matrix-fuzz.js:469:          console.log(`Detected state drift in transaction signing test for ${walletType}!`);
./tests/wallet-matrix-fuzz.js:517:          console.log(`${signMethod} signature for ${walletType} (message ${i + 1}):`, signature);
./tests/wallet-matrix-fuzz.js:520:          console.log(`Message signing ${i + 1} failed with error:`, error.message);
./tests/wallet-matrix-fuzz.js:565:          console.log('Transaction succeeded unexpectedly:', txResult);
./tests/wallet-matrix-fuzz.js:567:          console.log(`Expected error ${i + 1}:`, error.message);
./tests/wallet-matrix-fuzz.js:623:      console.log(`Iteration ${i + 1}: Switching to ${walletType}`);
./tests/wallet-matrix-fuzz.js:637:          console.log('Transaction failed during multi-wallet test:', error.message);
./tests/wallet-matrix-fuzz.js:654:        console.log(
./tests/connect-test.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/connect-test.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/connect-test.js:66:    console.log('MetaMask connection test completed successfully!');
./tests/test-metamask-connect.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/test-metamask-connect.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/test-metamask-connect.js:67:    console.log('MetaMask connection test completed successfully!');
./tests/darkforest-security-test.js:40:        console.log(`Wallet mock: ${method} called with params:`, params);
./tests/darkforest-security-test.js:91:        console.log(`Wallet mock: event listener for ${eventName} registered`);
./tests/darkforest-security-test.js:110:          console.log('Mock SNARK proof generation:', { input, wasmFile, zkeyFile });
./tests/darkforest-security-test.js:140:          console.log('Mock SNARK verification:', { vkey, publicSignals, proof });
./tests/darkforest-security-test.js:248:      const moveFn = window.df?.move || ((from, to) => console.log('Move attempted', { from, to }));
./tests/darkforest-security-test.js:254:        console.log('Move correctly rejected:', e);
./tests/darkforest-security-test.js:298:        window.df?.revealLocation || (location => console.log('Reveal attempted', { location }));
./tests/darkforest-security-test.js:303:        console.log('Action correctly rejected due to invalid proof:', e);
./tests/darkforest-security-test.js:345:      console.log('Attempting transaction replay with old nonce:', mockTx);
./tests/darkforest-security-test.js:432:            console.log('Checking if sensitive operation is actually protected...');
./tests/coinbase-transaction.js:28:          console.log(`Coinbase Wallet mock: ${method} called with params:`, params);
./tests/coinbase-transaction.js:39:            console.log('Transaction parameters:', txParams);
./tests/coinbase-transaction.js:48:          console.log(`Coinbase Wallet mock: registered event listener for ${eventName}`);
./tests/coinbase-transaction.js:111:      console.log('Transaction hash:', txHash);
./tests/coinbase-transaction.js:114:      console.log('Transaction hash element not found, but transaction was sent');
./tests/coinbase-transaction.js:120:    console.log('Coinbase Wallet transaction test completed successfully!');
./tests/metamask-basic-test.js:24:    console.log(`MetaMask extension not found at: ${METAMASK_EXTENSION_PATH}`);
./tests/metamask-basic-test.js:31:      console.log(`Found MetaMask extension: ${manifest.name} v${manifest.version}`);
./tests/metamask-basic-test.js:34:      console.log(`Found extension, but it doesn't appear to be MetaMask: ${manifest.name}`);
./tests/metamask-basic-test.js:38:    console.log(`Error reading manifest: ${e.message}`);
./tests/metamask-basic-test.js:46:    console.log('Testing environment:');
./tests/metamask-basic-test.js:47:    console.log(`- Target URL: ${config.targetUrl}`);
./tests/metamask-basic-test.js:48:    console.log(`- MetaMask Path: ${METAMASK_EXTENSION_PATH}`);
./tests/metamask-basic-test.js:49:    console.log(`- Extension exists: ${fs.existsSync(METAMASK_EXTENSION_PATH)}`);
./tests/metamask-basic-test.js:55:    console.log(`Extension validity check: ${isExtensionValid}`);
./tests/metamask-basic-test.js:63:      console.log('Launching browser with MetaMask extension...');
./tests/metamask-basic-test.js:78:      console.log('Browser launched, creating new page...');
./tests/metamask-basic-test.js:82:      console.log(`Navigating to ${config.targetUrl}...`);
./tests/metamask-basic-test.js:85:      console.log('Page loaded');
./tests/metamask-basic-test.js:89:      console.log(`Page title: ${title}`);
./tests/metamask-basic-test.js:100:      console.log(`Screenshot saved to: ${screenshotPath}`);
./tests/metamask-basic-test.js:104:      console.log('Browser context closed');
./tests/wallet-snapshot-simple.test.js:37:    console.log('Saved wallet state:', walletState);
./tests/layerzero-crosschain-fuzz.js:129:          console.log(`Sending message to chain ${dstChainId}`);
./tests/layerzero-crosschain-fuzz.js:147:          console.log(`Bridging ${amount} tokens to chain ${dstChainId}`);
./tests/layerzero-crosschain-fuzz.js:180:      console.log('\n' + visualization);
./tests/layerzero-crosschain-fuzz.js:198:      console.log(
./tests/layerzero-crosschain-fuzz.js:236:        console.log(`[Fuzz #${i + 1}] Message status: ${status.status}`);
./tests/layerzero-crosschain-fuzz.js:245:    console.log(`Fuzzing completed. ${failures.length} of ${results.length} messages failed.`);
./tests/layerzero-crosschain-fuzz.js:251:        console.log(`${gasLimitFailures.length} failures likely due to insufficient gas.`);
./tests/layerzero-crosschain-fuzz.js:270:        console.log(
./tests/layerzero-crosschain-fuzz.js:282:      console.log(
./tests/layerzero-crosschain-fuzz.js:315:        console.log(`[Fuzz #${i + 1}] Bridge status: ${status.status}`);
./tests/layerzero-crosschain-fuzz.js:324:    console.log(
./tests/layerzero-crosschain-fuzz.js:368:      console.log(`Checking relayer configuration for chain ${chainPair.src}`);
./tests/layerzero-crosschain-fuzz.js:388:    console.log('Testing for liquidity synchronization bugs across chains');
./tests/tx-test.ts:40:          console.log(`MetaMask mock: ${method} called`);
./tests/tx-test.ts:48:            console.log('Transaction params:', txParams);
./tests/tx-test.ts:62:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/tx-test.ts:96:    console.log('MetaMask transaction test completed successfully!');
./tests/airdrop-security-test.js:42:          console.log(`Wallet mock: ${method} called with params:`, params);
./tests/airdrop-security-test.js:102:          console.log(`Wallet mock: event listener for ${eventName} registered`);
./tests/utils/walletMock.ts:108:          console.log(`Mock ${provider}: ${method} called with params:`, params);
./tests/utils/walletMock.ts:194:    console.log('Could not find connect button, proceeding with mock setup anyway');
./tests/utils/walletMock.ts:268:          console.log(`Mock ${provider}: ${method} called with params:`, params);
./tests/utils/bridgeMock.ts:49:        console.log('LayerZero bridge called with params:', params);
./tests/utils/bridgeMock.ts:70:        console.log('Wormhole transfer called with params:', params);
./tests/utils/wallet-snapshot.js:144:            console.log(`Mock wallet: ${method} called with params:`, params);
./tests/utils/wallet-snapshot.js:205:            console.log(`Mock wallet: registered event listener for ${eventName}`);
./tests/utils/wallet-snapshot.js:215:            console.log(`Mock wallet: removed event listener for ${eventName}`);
./tests/test-lint2.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/test-lint2.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/test-lint2.js:66:    console.log('MetaMask connection test completed successfully!');
./tests/test-lint2.js:77:      console.log(`Testing XSS payload: ${payload}`);
./tests/test-lint2.js:91:        console.log(`Error testing recipient field: ${e.message}`);
./tests/test-lint2.js:103:        console.log(`Error testing input fields: ${e.message}`);
./tests/test-lint2.js:110:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./tests/test-lint2.js:113:        console.log(`Error clicking buttons: ${e.message}`);
./tests/test-lint2.js:124:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./tests/test-lint2.js:137:                console.log('Intercepted signing request with potential phishing payload');
./tests/test-lint2.js:154:                  console.log('Intercepted sendAsync signing request');
./tests/test-lint2.js:177:            .catch(() => console.log('Sign button click failed, continuing...'));
./tests/test-lint2.js:183:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./tests/security-tx-test.js:24:          console.log(`MetaMask mock: ${method} called`);
./tests/security-tx-test.js:32:            console.log('Transaction params:', txParams);
./tests/security-tx-test.js:46:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/security-tx-test.js:80:    console.log('MetaMask transaction test completed successfully!');
./tests/security-tx-test.js:91:      console.log(`Testing XSS payload: ${payload}`);
./tests/security-tx-test.js:105:        console.log(`Error testing recipient field: ${e.message}`);
./tests/security-tx-test.js:117:        console.log(`Error testing input fields: ${e.message}`);
./tests/security-tx-test.js:124:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./tests/security-tx-test.js:127:        console.log(`Error clicking buttons: ${e.message}`);
./tests/security-tx-test.js:139:      console.log(`Testing large amount: ${amount}`);
./tests/security-tx-test.js:166:              console.log(`Error displayed: ${await errorElement.textContent()}`);
./tests/security-tx-test.js:171:        console.log(`Error testing large amount: ${e.message}`);
./tests/test-gen-connect.js:22:          console.log(`MetaMask mock: ${method} called`);
./tests/test-gen-connect.js:32:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/test-gen-connect.js:63:    console.log('MetaMask connection test completed successfully!');
./tests/test-gen-connect.js:74:      console.log(`Testing XSS payload: ${payload}`);
./tests/test-gen-connect.js:88:        console.log(`Error testing recipient field: ${e.message}`);
./tests/test-gen-connect.js:100:        console.log(`Error testing input fields: ${e.message}`);
./tests/test-gen-connect.js:107:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./tests/test-gen-connect.js:110:        console.log(`Error clicking buttons: ${e.message}`);
./tests/test-gen-connect.js:121:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./tests/test-gen-connect.js:134:                console.log('Intercepted signing request with potential phishing payload');
./tests/test-gen-connect.js:151:                  console.log('Intercepted sendAsync signing request');
./tests/test-gen-connect.js:174:            .catch(() => console.log('Sign button click failed, continuing...'));
./tests/test-gen-connect.js:180:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./tests/connection.test.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/connection.test.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/connection.test.js:66:    console.log('MetaMask connection test completed successfully!');
./tests/sign-test.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/sign-test.js:32:            console.log('Signing params:', params);
./tests/sign-test.js:40:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/sign-test.js:74:    console.log('MetaMask signing test completed successfully!');
./tests/transaction.test.ts:29:          console.log(`MetaMask mock: ${method} called`);
./tests/transaction.test.ts:37:            console.log('Transaction params:', txParams);
./tests/transaction.test.ts:51:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/transaction.test.ts:85:    console.log('MetaMask transaction test completed successfully!');
./tests/radiant-capital-tests.js:32:      console.log(`Testing basic lending operations on ${chain.name}`);
./tests/radiant-capital-tests.js:48:      console.log(`  ‚úì Deposited 10 ${collateralToken} as collateral`);
./tests/radiant-capital-tests.js:60:      console.log(`  ‚úì Borrowed 10,000 ${borrowToken}`);
./tests/radiant-capital-tests.js:72:      console.log(`  ‚úì Withdrew 5 ${collateralToken}`);
./tests/radiant-capital-tests.js:79:      console.log(`Testing flash loan vulnerabilities on ${chain.name}`);
./tests/radiant-capital-tests.js:83:        console.log(`  Testing with ${token.name}`);
./tests/radiant-capital-tests.js:93:        console.log(`  Found ${vulnerabilityResults.findings.length} vulnerabilities`);
./tests/radiant-capital-tests.js:98:            console.log(`    - ${finding.type} (${finding.severity}): ${finding.description}`);
./tests/radiant-capital-tests.js:110:      console.log(`Testing oracle manipulation vulnerabilities on ${chain.name}`);
./tests/radiant-capital-tests.js:113:        console.log(`  Testing with ${token.name}`);
./tests/radiant-capital-tests.js:118:          console.log(`    Testing manipulation factor: ${factor}x`);
./tests/radiant-capital-tests.js:130:            console.log(`    Found ${vulnerabilityResults.findings.length} vulnerabilities:`);
./tests/radiant-capital-tests.js:132:              console.log(`      - ${finding.type} (${finding.severity}): ${finding.description}`);
./tests/radiant-capital-tests.js:133:              console.log(
./tests/radiant-capital-tests.js:146:      console.log(`Testing liquidation vulnerabilities on ${chain.name}`);
./tests/radiant-capital-tests.js:151:        console.log(`  Testing with ${token.name}`);
./tests/radiant-capital-tests.js:166:          console.log(
./tests/radiant-capital-tests.js:169:          console.log(`    ${frontRunVulnerability.description}`);
./tests/radiant-capital-tests.js:170:          console.log(
./tests/radiant-capital-tests.js:173:          console.log(
./tests/radiant-capital-tests.js:184:      console.log(`Testing interest rate manipulation on ${chain.name}`);
./tests/radiant-capital-tests.js:191:        console.log(`  Testing with ${token.name}, amounts up to ${hugeAmount}`);
./tests/radiant-capital-tests.js:203:          console.log(
./tests/radiant-capital-tests.js:207:            console.log(`    - ${finding.description}`);
./tests/radiant-capital-tests.js:208:            console.log(
./tests/radiant-capital-tests.js:213:          console.log('  ‚úì No interest rate manipulation vulnerabilities found');
./tests/radiant-capital-tests.js:221:    console.log('Testing combined attack vectors (flash loan + oracle manipulation)');
./tests/radiant-capital-tests.js:252:    console.log(`  ‚úì Successfully executed flash loan of 1,000,000 ${token.name}`);
./tests/radiant-capital-tests.js:264:    console.log(
./tests/radiant-capital-tests.js:268:      console.log(
./tests/radiant-capital-tests.js:275:      console.log(
./tests/radiant-capital-tests.js:278:      console.log(
./tests/radiant-capital-tests.js:282:      console.log('  ‚úì System protected against combined attack vectors');
./tests/radiant-capital-tests.js:288:    console.log('Testing Radiant-specific edge cases');
./tests/radiant-capital-tests.js:293:    console.log(`Testing RDNT token behavior on ${chain.name}`);
./tests/radiant-capital-tests.js:305:    console.log('  ‚úì Deposited 10,000 RDNT as collateral');
./tests/radiant-capital-tests.js:316:    console.log(`  Borrow against RDNT result: ${borrowResult.success ? 'Allowed' : 'Rejected'}`);
./tests/radiant-capital-tests.js:321:      console.log(
./tests/radiant-capital-tests.js:327:      console.log('  Cross-chain RDNT testing completed');
./tests/lint-test.ts:38:          console.log(`MetaMask mock: ${method} called`);
./tests/lint-test.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/lint-test.ts:79:    console.log('MetaMask connection test completed successfully!');
./tests/wallet-session-persistence.test.js:48:          console.log('Found saved wallet state:', state);
./tests/wallet-session-persistence.test.js:94:          console.log(`Wallet mock: ${method} called with params:`, params);
./tests/walletconnect-tx.test.js:18:  console.log('Navigating to the dApp...');
./tests/walletconnect-tx.test.js:31:        console.log(`WalletConnect mock: ${method} called`);
./tests/walletconnect-tx.test.js:42:          console.log('Transaction params:', txParams);
./tests/walletconnect-tx.test.js:60:        console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./tests/walletconnect-tx.test.js:71:  console.log('Looking for Connect Wallet button...');
./tests/walletconnect-tx.test.js:89:  console.log('Preparing transaction...');
./tests/walletconnect-tx.test.js:94:  console.log('Submitting transaction...');
./tests/walletconnect-tx.test.js:107:  console.log('Verifying transaction confirmation...');
./tests/walletconnect-tx.test.js:113:    console.log('Transaction confirmed with hash:', await txHash.textContent());
./tests/walletconnect-tx.test.js:118:  console.log('WalletConnect transaction test completed');
./tests/final-walletconnect.js:27:          console.log(`WalletConnect mock: ${method} called`);
./tests/final-walletconnect.js:37:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./tests/final-walletconnect.js:46:          console.log('WalletConnect mock: disconnect called');
./tests/final-walletconnect.js:53:          console.log('WalletConnect mock: QR code should be displayed');
./tests/final-walletconnect.js:72:      console.log('Simulating QR code scan from mobile wallet');
./tests/final-walletconnect.js:89:    console.log('WalletConnect connection test completed successfully!');
./tests/final-walletconnect.js:126:      console.log('Disconnect button not found, skipping disconnect test');
./tests/sign-fuzzing-test.ts:40:          console.log(`MetaMask mock: ${method} called`);
./tests/sign-fuzzing-test.ts:47:            console.log('Signing params:', params);
./tests/sign-fuzzing-test.ts:55:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/sign-fuzzing-test.ts:89:    console.log('MetaMask signing test completed successfully!');
./tests/sign-fuzzing-test.ts:98:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./tests/sign-fuzzing-test.ts:107:              console.log('Intercepted personal_sign request with potential phishing payload');
./tests/sign-fuzzing-test.ts:127:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./tests/l2-network-test.js:192:      console.log('Skipping contract deployment - no private key provided');
./tests/l2-network-test.js:219:      console.log('Skipping contract deployment - no private key provided');
./tests/l2-network-test.js:269:        console.log(`Error getting gas price for ${network}: ${error.message}`);
./tests/l2-network-test.js:274:    console.log('Gas prices across networks:', gasPrices);
./tests/l2-network-test.js:312:        console.log(`Error getting block for ${network}: ${error.message}`);
./tests/l2-network-test.js:317:    console.log('Block information across networks:', blocks);
./tests/metamask-connection.test.ts:29:          console.log(`MetaMask mock: ${method} called`);
./tests/metamask-connection.test.ts:42:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/metamask-connection.test.ts:73:    console.log('MetaMask connection test completed successfully!');
./tests/connection.test.ts:29:          console.log(`MetaMask mock: ${method} called`);
./tests/connection.test.ts:42:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/connection.test.ts:73:    console.log('MetaMask connection test completed successfully!');
./tests/lint-test2.ts:38:          console.log(`MetaMask mock: ${method} called`);
./tests/lint-test2.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/lint-test2.ts:79:    console.log('MetaMask connection test completed successfully!');
./tests/wallet-options.test.js:20:          console.log(`MetaMask mock: ${method} called`);
./tests/wallet-options.test.js:28:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/wallet-options.test.js:40:    console.log('MetaMask wallet connection example completed successfully');
./tests/wallet-options.test.js:51:          console.log(`WalletConnect mock: ${method} called`);
./tests/wallet-options.test.js:59:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./tests/wallet-options.test.js:62:          console.log('WalletConnect mock: disconnect called');
./tests/wallet-options.test.js:78:    console.log('WalletConnect wallet connection example completed successfully');
./tests/wallet-options.test.js:101:    console.log(`Detected wallet type: ${walletType}`);
./tests/metamask-extension-security.test.js:73:        console.log('Using mock AI model for analysis');
./tests/metamask-extension-security.test.js:132:    console.log(`Found ${vulnerabilities.length} potential permission vulnerabilities`);
./tests/metamask-extension-security.test.js:135:        console.log(`- ${v.type} (${v.severity}): ${v.description} in ${v.file}`);
./tests/metamask-extension-security.test.js:190:    console.log(`Found ${vulnerabilities.length} potential transaction signing vulnerabilities`);
./tests/metamask-extension-security.test.js:193:        console.log(`- ${v.type} (${v.severity}): ${v.description} in ${v.file}`);
./tests/metamask-extension-security.test.js:228:    console.log(`Found ${vulnerabilities.length} potential background script vulnerabilities`);
./tests/metamask-extension-security.test.js:231:        console.log(`- ${v.type} (${v.severity}): ${v.description}`);
./tests/metamask-extension-security.test.js:275:    console.log(`Found ${vulnerabilities.length} potential content script vulnerabilities`);
./tests/metamask-extension-security.test.js:278:        console.log(`- ${v.type} (${v.severity}): ${v.description} in ${v.file}`);
./tests/metamask-extension-security.test.js:342:      console.log(`Found ${securityIssues.length} UI security issues`);
./tests/metamask-extension-security.test.js:345:          console.log(`- ${issue}`);
./tests/test-walletconnect.js:27:          console.log(`WalletConnect mock: ${method} called`);
./tests/test-walletconnect.js:37:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./tests/test-walletconnect.js:46:          console.log('WalletConnect mock: disconnect called');
./tests/test-walletconnect.js:53:          console.log('WalletConnect mock: QR code should be displayed');
./tests/test-walletconnect.js:72:      console.log('Simulating QR code scan from mobile wallet');
./tests/test-walletconnect.js:89:    console.log('WalletConnect connection test completed successfully!');
./tests/test-walletconnect.js:126:      console.log('Disconnect button not found, skipping disconnect test');
./tests/test.js:22:          console.log(`MetaMask mock: ${method} called`);
./tests/test.js:46:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/test.js:69:    console.log('MetaMask transaction error test completed successfully!');
./tests/test.js:86:    console.log('MetaMask signature error test completed successfully!');
./tests/test.js:103:    console.log('MetaMask network error test completed successfully!');
./tests/nft-connect-test.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/nft-connect-test.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/nft-connect-test.js:66:    console.log('MetaMask connection test completed successfully!');
./tests/lint-test-sign.ts:40:          console.log(`MetaMask mock: ${method} called`);
./tests/lint-test-sign.ts:47:            console.log('Signing params:', params);
./tests/lint-test-sign.ts:55:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/lint-test-sign.ts:89:    console.log('MetaMask signing test completed successfully!');
./tests/wallet-switching.test.js:44:          console.log(`Mock ${walletType}: ${method} called with params:`, params);
./tests/transaction.test.js:27:          console.log(`MetaMask mock: ${method} called`);
./tests/transaction.test.js:35:            console.log('Transaction params:', txParams);
./tests/transaction.test.js:53:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/transaction.test.js:61:    console.log('Loading test page:', fileUrl);
./tests/transaction.test.js:92:    console.log('MetaMask transaction test completed successfully!');
./tests/metamask-connect.ts:38:          console.log(`MetaMask mock: ${method} called`);
./tests/metamask-connect.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/metamask-connect.ts:79:    console.log('MetaMask connection test completed successfully!');
./tests/walletconnect-connect.ts:43:          console.log(`WalletConnect mock: ${method} called`);
./tests/walletconnect-connect.ts:53:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./tests/walletconnect-connect.ts:62:          console.log('WalletConnect mock: disconnect called');
./tests/walletconnect-connect.ts:69:          console.log('WalletConnect mock: QR code should be displayed');
./tests/walletconnect-connect.ts:88:      console.log('Simulating QR code scan from mobile wallet');
./tests/walletconnect-connect.ts:105:    console.log('WalletConnect connection test completed successfully!');
./tests/walletconnect-connect.ts:142:      console.log('Disconnect button not found, skipping disconnect test');
./tests/wallet-snapshot.test.js:125:          console.log(`Mock wallet: ${method} called with params:`, params);
./tests/wallet-snapshot.test.js:189:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/wallet-snapshot.test.js:213:    console.log('Saved wallet state:', walletState);
./tests/wallet-snapshot.test.js:268:    console.log('Goerli state:', goerliState);
./tests/test-lint.js:25:          console.log(`MetaMask mock: ${method} called`);
./tests/test-lint.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./tests/test-lint.js:66:    console.log('MetaMask connection test completed successfully!');
./tests/test-lint.js:77:      console.log(`Testing XSS payload: ${payload}`);
./tests/test-lint.js:91:        console.log(`Error testing recipient field: ${e.message}`);
./tests/test-lint.js:103:        console.log(`Error testing input fields: ${e.message}`);
./tests/test-lint.js:110:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./tests/test-lint.js:113:        console.log(`Error clicking buttons: ${e.message}`);
./tests/test-lint.js:124:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./tests/test-lint.js:137:                console.log('Intercepted signing request with potential phishing payload');
./tests/test-lint.js:154:                  console.log('Intercepted sendAsync signing request');
./tests/test-lint.js:177:            .catch(() => console.log('Sign button click failed, continuing...'));
./tests/test-lint.js:183:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./tests/zk-snark-security.test.js:416:      console.log('Valid proof result:', validResult);
./tests/zk-snark-security.test.js:444:      console.log('Invalid curve points result:', invalidResult);
./Audityzer-community-tests/utils/wallet-helpers.js:13:  console.log(`Connecting ${walletType} wallet...`);
./Audityzer-community-tests/utils/wallet-helpers.js:50:          console.log(`MetaMask mock: Method ${method} not implemented`);
./Audityzer-community-tests/utils/wallet-helpers.js:54:          console.log(`Registered event listener for ${eventName}`);
./Audityzer-community-tests/utils/wallet-helpers.js:91:          console.log(`WalletConnect mock: Method ${method} not implemented`);
./Audityzer-community-tests/utils/wallet-helpers.js:146:          console.log(`Method ${method} not implemented in mock`);
./Audityzer-community-tests/utils/wallet-helpers.js:150:          console.log(`Registered event listener for ${eventName}`);
./Audityzer-community-tests/utils/validate-tests.js:37:  console.log(chalk.blue('Ensuring test directories exist...'));
./Audityzer-community-tests/utils/validate-tests.js:42:      console.log(chalk.yellow(`Creating directory: ${dir}`));
./Audityzer-community-tests/utils/validate-tests.js:47:  console.log(chalk.green('All directories present ‚úì'));
./Audityzer-community-tests/utils/validate-tests.js:52:  console.log(chalk.blue(`Validating: ${filePath}`));
./Audityzer-community-tests/utils/validate-tests.js:61:      console.log(chalk.red(`‚ùå Missing required comments in ${filePath}:`));
./Audityzer-community-tests/utils/validate-tests.js:62:      missingComments.forEach(comment => console.log(chalk.red(`   - ${comment}`)));
./Audityzer-community-tests/utils/validate-tests.js:69:      console.log(chalk.yellow(`‚ö†Ô∏è Warning: No assertions found in ${filePath}`));
./Audityzer-community-tests/utils/validate-tests.js:76:      console.log(
./Audityzer-community-tests/utils/validate-tests.js:82:    console.log(chalk.green(`‚úì ${filePath} passed validation`));
./Audityzer-community-tests/utils/validate-tests.js:86:    console.log(chalk.red(`‚ùå Error reading/validating ${filePath}: ${error.message}`));
./Audityzer-community-tests/utils/validate-tests.js:94:  console.log(chalk.blue('Validating test files...'));
./Audityzer-community-tests/utils/validate-tests.js:115:    console.log(chalk.yellow('‚ö†Ô∏è No test files found. Creating sample test...'));
./Audityzer-community-tests/utils/validate-tests.js:165:  console.log(chalk.green(`‚úì Created sample test at ${samplePath}`));
./Audityzer-community-tests/utils/validate-tests.js:171:  console.log(chalk.bold('Validating test structure...'));
./Audityzer-community-tests/utils/validate-tests.js:176:  console.log('\n' + chalk.bold('Validation Summary:'));
./Audityzer-community-tests/utils/validate-tests.js:177:  console.log(chalk.green(`‚úì ${results.passed} tests passed`));
./Audityzer-community-tests/utils/validate-tests.js:178:  console.log(chalk.yellow(`‚ö†Ô∏è ${results.warnings} warnings`));
./Audityzer-community-tests/utils/validate-tests.js:179:  console.log(chalk.red(`‚ùå ${results.errors} errors`));
./Audityzer-community-tests/utils/validate-tests.js:182:    console.log(chalk.red('\nValidation failed! Please fix the errors above.'));
./Audityzer-community-tests/utils/validate-tests.js:185:    console.log(chalk.green('\nValidation successful!'));
./Audityzer-community-tests/utils/contributor-tracker.js:80:    console.log(
./Audityzer-community-tests/utils/contributor-tracker.js:97:      console.log('No contributions found yet.');
./Audityzer-community-tests/utils/contributor-tracker.js:155:    console.log('‚úÖ Hall of Fame has been updated!');
./Audityzer-community-tests/dapp-tests/wallet-connection/metamask-permissions-bypass.test.js:66:        console.log('Permission test error:', error);
./Audityzer-community-tests/dapp-tests/wallet-connection/network-switch-race-condition.test.js:141:    console.log('Network switches detected:', networkSwitches.length);
./Audityzer-community-tests/dapp-tests/wallet-connection/metamask-connection.test.js:46:        console.log('MetaMask already initialized. Continuing with test.');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:187:        console.log('Front-running attack simulation enabled');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:215:          console.log('Flashbots protection enabled - transactions will use private mempool');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:219:          console.log('High gas price protection enabled');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:233:          console.log('Timelock protection enabled - transactions will be delayed');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:270:    console.log('Front-running report:', JSON.stringify(report.summary, null, 2));
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:277:      console.log('‚ö†Ô∏è FRONT-RUNNING VULNERABILITIES DETECTED ‚ö†Ô∏è');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:279:        console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:282:        console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:289:        console.log('üìà SIMULATED ATTACK RESULTS:');
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:291:          console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:326:      console.log(`Protection type ${protectionType}:`, JSON.stringify(report.summary, null, 2));
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:331:        console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:348:        console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:353:        console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:91:                  .catch(e => console.log('Reentrancy simulation failed:', e.message));
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:133:        console.log('Reentrancy simulation enabled');
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:189:    console.log('Attempting to trigger reentrancy vulnerability...');
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:199:    console.log('Reentrancy report:', JSON.stringify(reentrancyReport, null, 2));
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:203:      console.log('‚ö†Ô∏è POTENTIAL REENTRANCY VULNERABILITY DETECTED ‚ö†Ô∏è');
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:205:        console.log(
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:307:    console.log('State update order report:', JSON.stringify(stateUpdateReport, null, 2));
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:312:      console.log('‚ö†Ô∏è POTENTIAL STATE UPDATE ORDER ISSUE DETECTED ‚ö†Ô∏è');
./Audityzer-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:313:      console.log('Contract may not follow Checks-Effects-Interactions pattern');
./Audityzer-community-tests/dapp-tests/transaction-flow/metamask-transaction.test.js:46:        console.log('MetaMask already initialized. Continuing with test.');
./Audityzer-community-tests/dapp-tests/transaction-flow/metamask-signature-tampering.test.js:67:            console.log('Original tx:', originalTx);
./Audityzer-community-tests/dapp-tests/transaction-flow/metamask-signature-tampering.test.js:68:            console.log('Modified tx:', JSON.stringify(payload.params[0]));
./service-worker.js:22:        console.log('Opened cache');
./playwright-tests/src/core/bridge-testing/layerzero-test-harness.js:27:    console.log('Initializing mock LayerZero Test Harness');
./playwright-tests/src/core/bridge-testing/layerzero-test-harness.js:34:    console.log('Mock LayerZero Test Harness initialized');
./playwright-tests/src/core/bridge-testing/layerzero-test-harness.js:42:    console.log('Simulating bridge transaction', params);
./playwright-tests/src/core/bridge-testing/layerzero-test-harness.js:55:    console.log('Verifying message delivery for tx', txHash);
./playwright-tests/src/core/ai-vulnerability-detection/model-interface.js:16:    console.log('Initializing mock AI Model Interface');
./playwright-tests/src/core/ai-vulnerability-detection/model-interface.js:23:    console.log(`Loading prompts from ${dirPath}`);
./playwright-tests/src/core/ai-vulnerability-detection/model-interface.js:37:    console.log('Analyzing code with mock AI model');
./playwright-tests/src/core/ci-integration/platforms/circleci-adapter.js:107:    console.log(`Mock writing CircleCI config to ${outputPath}`);
./playwright-tests/autotests/metamask-extension.test.ts:37:    console.log(`MetaMask extension ID: ${extensionId}`);
./playwright-tests/autotests/metamask-extension.test.ts:86:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/autotests/sample-tests/metamask-login.test.js:21:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/autotests/sample-tests/metamask-login.test.js:31:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/autotests/sample-tests/metamask-login.test.js:85:    console.log('Test completed successfully! Screenshot saved to media/metamask-test-mocked.png');
./playwright-tests/autotests/sample-tests/unhandled-provider-errors.test.js:53:          console.log(`Ethereum mock: ${method} called`);
./playwright-tests/autotests/sample-tests/unhandled-provider-errors.test.js:99:          console.log(`Ethereum mock: registered event listener for ${eventName}`);
./playwright-tests/autotests/sample-tests/unhandled-provider-errors.test.js:106:        console.log(`Set to trigger error: ${errorType}`);
./playwright-tests/autotests/sample-tests/unhandled-provider-errors.test.js:244:            console.log('Chain not added yet');
./playwright-tests/autotests/sample-tests/unhandled-provider-errors.test.js:356:    console.log(
./playwright-tests/autotests/sample-tests/reentrancy-test.test.js:31:        console.log(message);
./playwright-tests/autotests/sample-tests/reentrancy-test.test.js:100:    page.on('console', msg => console.log(`PAGE LOG: ${msg.text()}`));
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:25:          console.log('Contract: verifySignature called');
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:26:          console.log(`Message: ${message}`);
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:27:          console.log(`Signature: ${signature}`);
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:28:          console.log(`Address: ${address}`);
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:37:          console.log('Contract: executeWithSignature called');
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:42:            console.log(`Executing operation for amount: ${amount}`);
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:62:          console.log(`Ethereum mock: ${method} called`);
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:111:          console.log(`Ethereum mock: registered event listener for ${eventName}`);
./playwright-tests/autotests/sample-tests/signature-spoofing.test.js:237:    console.log(
./playwright-tests/autotests/sample-tests/reentrancy-check.test.js:32:          console.log('Contract: withdrawFunds called');
./playwright-tests/autotests/sample-tests/reentrancy-check.test.js:47:          console.log(`Ethereum mock: ${method} called`);
./playwright-tests/autotests/sample-tests/reentrancy-check.test.js:55:            console.log('Transaction params:', txParams);
./playwright-tests/autotests/sample-tests/reentrancy-check.test.js:75:          console.log(`Ethereum mock: registered event listener for ${eventName}`);
./playwright-tests/autotests/sample-tests/reentrancy-check.test.js:170:    console.log('Reentrancy test completed! Screenshot saved to media/reentrancy-test.png');
./playwright-tests/utils/walletMock.ts:72:          console.log(`Mock ${provider}: ${method} called with params:`, params);
./playwright-tests/utils/walletMock.ts:154:    console.log('Could not find connect button, proceeding with mock setup anyway');
./playwright-tests/utils/walletMock.ts:228:          console.log(`Mock ${provider}: ${method} called with params:`, params);
./playwright-tests/utils/wallet-helpers.js:95:    console.log('Mock wallet injected with config:', walletConfig);
./playwright-tests/utils/wallet-helpers.js:98:  console.log('Wallet state set up with config:', config);
./playwright-tests/utils/wallet-helpers.js:126:    console.log('Wallet connected with address:', window.ethereum.selectedAddress);
./playwright-tests/utils/wallet-helpers.js:130:  console.log('Wallet connection simulated');
./playwright-tests/utils/bridgeMock.ts:49:        console.log('LayerZero bridge called with params:', params);
./playwright-tests/utils/bridgeMock.ts:70:        console.log('Wormhole transfer called with params:', params);
./playwright-tests/utils/wallet-snapshot.js:144:            console.log(`Mock wallet: ${method} called with params:`, params);
./playwright-tests/utils/wallet-snapshot.js:205:            console.log(`Mock wallet: registered event listener for ${eventName}`);
./playwright-tests/utils/wallet-snapshot.js:215:            console.log(`Mock wallet: removed event listener for ${eventName}`);
./playwright-tests/utils/debug-logger.js:297:    console.log(colorFn(`[${timestamp}] [${category.toUpperCase()}] ${message}`));
./playwright-tests/utils/debug-logger.js:303:      console.log(chalk.gray(JSON.stringify(dataToPrint, null, 2)));
./playwright-tests/utils/contributor-tracker.js:11:  console.log(`Recording contribution from ${contributorId}`);
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:37:  console.log(chalk.blue('Ensuring test directories exist...'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:42:      console.log(chalk.yellow(`Creating directory: ${dir}`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:47:  console.log(chalk.green('All directories present ‚úì'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:52:  console.log(chalk.blue(`Validating: ${filePath}`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:61:      console.log(chalk.red(`‚ùå Missing required comments in ${filePath}:`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:62:      missingComments.forEach(comment => console.log(chalk.red(`   - ${comment}`)));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:69:      console.log(chalk.yellow(`‚ö†Ô∏è Warning: No assertions found in ${filePath}`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:76:      console.log(
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:82:    console.log(chalk.green(`‚úì ${filePath} passed validation`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:86:    console.log(chalk.red(`‚ùå Error reading/validating ${filePath}: ${error.message}`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:94:  console.log(chalk.blue('Validating test files...'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:115:    console.log(chalk.yellow('‚ö†Ô∏è No test files found. Creating sample test...'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:165:  console.log(chalk.green(`‚úì Created sample test at ${samplePath}`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:171:  console.log(chalk.bold('Validating test structure...'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:176:  console.log('\n' + chalk.bold('Validation Summary:'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:177:  console.log(chalk.green(`‚úì ${results.passed} tests passed`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:178:  console.log(chalk.yellow(`‚ö†Ô∏è ${results.warnings} warnings`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:179:  console.log(chalk.red(`‚ùå ${results.errors} errors`));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:182:    console.log(chalk.red('\nValidation failed! Please fix the errors above.'));
./playwright-tests/web3fuzzforge-community-tests/utils/validate-tests.js:185:    console.log(chalk.green('\nValidation successful!'));
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/wallet-connection/metamask-permissions-bypass.test.js:66:        console.log('Permission test error:', error);
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/wallet-connection/network-switch-race-condition.test.js:141:    console.log('Network switches detected:', networkSwitches.length);
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/wallet-connection/metamask-connection.test.js:46:        console.log('MetaMask already initialized. Continuing with test.');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:187:        console.log('Front-running attack simulation enabled');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:215:          console.log('Flashbots protection enabled - transactions will use private mempool');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:219:          console.log('High gas price protection enabled');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:233:          console.log('Timelock protection enabled - transactions will be delayed');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:270:    console.log('Front-running report:', JSON.stringify(report.summary, null, 2));
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:277:      console.log('‚ö†Ô∏è FRONT-RUNNING VULNERABILITIES DETECTED ‚ö†Ô∏è');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:279:        console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:282:        console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:289:        console.log('üìà SIMULATED ATTACK RESULTS:');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:291:          console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:326:      console.log(`Protection type ${protectionType}:`, JSON.stringify(report.summary, null, 2));
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:331:        console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:348:        console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/front-running-detection.test.js:353:        console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:91:                  .catch(e => console.log('Reentrancy simulation failed:', e.message));
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:133:        console.log('Reentrancy simulation enabled');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:189:    console.log('Attempting to trigger reentrancy vulnerability...');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:199:    console.log('Reentrancy report:', JSON.stringify(reentrancyReport, null, 2));
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:203:      console.log('‚ö†Ô∏è POTENTIAL REENTRANCY VULNERABILITY DETECTED ‚ö†Ô∏è');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:205:        console.log(
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:307:    console.log('State update order report:', JSON.stringify(stateUpdateReport, null, 2));
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:312:      console.log('‚ö†Ô∏è POTENTIAL STATE UPDATE ORDER ISSUE DETECTED ‚ö†Ô∏è');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/reentrancy-attack-simulation.test.js:313:      console.log('Contract may not follow Checks-Effects-Interactions pattern');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/metamask-transaction.test.js:46:        console.log('MetaMask already initialized. Continuing with test.');
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/metamask-signature-tampering.test.js:67:            console.log('Original tx:', originalTx);
./playwright-tests/web3fuzzforge-community-tests/dapp-tests/transaction-flow/metamask-signature-tampering.test.js:68:            console.log('Modified tx:', JSON.stringify(payload.params[0]));
./playwright-tests/mev-sandwich-protection.test.ts:157:              console.log('SWAP_TRANSACTION:', JSON.stringify(txData));
./playwright-tests/mev-sandwich-protection.test.ts:169:                console.log('Using MEV protection:', mevProtection);
./playwright-tests/mev-sandwich-protection.test.ts:173:                  console.log('FLASHBOTS: Bundle would be sent to Flashbots RPC');
./playwright-tests/mev-sandwich-protection.test.ts:176:                  console.log('EDEN: Transaction would include Eden Network gas price priority');
./playwright-tests/mev-sandwich-protection.test.ts:179:                  console.log('COWSWAP: Swap would be executed as a CoW order');
./playwright-tests/mev-sandwich-protection.test.ts:256:            console.log(`TRANSACTION_REQUEST: ${JSON.stringify(args.params)}`);
./playwright-tests/mev-sandwich-protection.test.ts:277:        console.log('Detected transaction request:', text);
./playwright-tests/mev-sandwich-protection.test.ts:296:    console.log('VULNERABILITY: Transaction lacks MEV protection and has no slippage tolerance');
./playwright-tests/mev-sandwich-protection.test.ts:311:    console.log('Protected transaction has MEV protection via Flashbots and 0.5% slippage protection');
./playwright-tests/mev-sandwich-protection.test.ts:368:    console.log(`Found ${vulnerableSwaps.length} vulnerable swaps without proper MEV protection`);
./playwright-tests/mev-sandwich-protection.test.ts:374:    console.log(`Found ${protectedSwaps.length} swaps with some form of protection`);
./playwright-tests/tests/stargate-bridge-tests.js:53:        console.log(`Testing ${token.name} transfer from ${network.name}`);
./playwright-tests/tests/stargate-bridge-tests.js:82:      console.log(`Testing slippage setting: ${slippage / 100}%`);
./playwright-tests/tests/stargate-bridge-tests.js:97:        console.log(`  Checking low slippage (${slippage / 100}%) handling`);
./playwright-tests/tests/stargate-bridge-tests.js:120:        console.log(`Testing fee consistency for ${token.name} on ${network.name}`);
./playwright-tests/tests/stargate-bridge-tests.js:144:        console.log(`  Relative variance: ${(relativeVariance * 100).toFixed(2)}%`);
./playwright-tests/tests/stargate-bridge-tests.js:155:      console.log(`Running security scan for ${network.name}`);
./playwright-tests/tests/stargate-bridge-tests.js:172:        console.log('‚ö†Ô∏è Security vulnerabilities detected:');
./playwright-tests/tests/stargate-bridge-tests.js:174:          console.log(`  - ${finding.type} (${finding.severity}): ${finding.description}`);
./playwright-tests/tests/stargate-bridge-tests.js:187:        console.log(`Verifying liquidity for ${token.name} on ${network.name}`);
./playwright-tests/tests/stargate-bridge-tests.js:208:            console.log(`  ‚úì Correctly rejected transfer due to: ${status.error}`);
./playwright-tests/tests/stargate-bridge-tests.js:210:            console.log(
./playwright-tests/tests/stargate-bridge-tests.js:217:          console.log(`  ‚úì Correctly rejected transfer due to: ${result.error}`);
./playwright-tests/tests/stargate-bridge-tests.js:240:      console.log(`Running fuzzing test #${i + 1}:`);
./playwright-tests/tests/stargate-bridge-tests.js:241:      console.log(`  Network: ${network.name}, Token: ${token.name}`);
./playwright-tests/tests/stargate-bridge-tests.js:242:      console.log(`  Amount: ${amount}, Slippage: ${slippage / 100}%`);
./playwright-tests/tests/stargate-bridge-tests.js:258:        console.log(`  Result: ${status.status}`);
./playwright-tests/tests/stargate-bridge-tests.js:260:        console.log(`  Result: Failed - ${result.error}`);
./playwright-tests/tests/tx-fuzzing-test.ts:40:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/tx-fuzzing-test.ts:48:            console.log('Transaction params:', txParams);
./playwright-tests/tests/tx-fuzzing-test.ts:62:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/tx-fuzzing-test.ts:96:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/tx-fuzzing-test.ts:107:      console.log(`Testing XSS payload: ${payload}`);
./playwright-tests/tests/tx-fuzzing-test.ts:119:        console.log(`Error testing recipient field: ${e.message}`);
./playwright-tests/tests/tx-fuzzing-test.ts:132:        console.log(`Error testing amount field: ${e.message}`);
./playwright-tests/tests/tx-fuzzing-test.ts:143:      console.log(`Testing large amount: ${amount}`);
./playwright-tests/tests/tx-fuzzing-test.ts:164:              console.log(`Error displayed: ${await errorElement.textContent()}`);
./playwright-tests/tests/tx-fuzzing-test.ts:169:        console.log(`Error testing large amount: ${e.message}`);
./playwright-tests/tests/defi-swap-test.js:26:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/defi-swap-test.js:34:            console.log('Transaction params:', txParams);
./playwright-tests/tests/defi-swap-test.js:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/defi-swap-test.js:82:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/connection-test.js:22:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/connection-test.js:32:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/connection-test.js:63:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/walletconnect-tx-test.js:18:  console.log('Navigating to the dApp...');
./playwright-tests/tests/walletconnect-tx-test.js:25:  console.log('Looking for Connect Wallet button...');
./playwright-tests/tests/walletconnect-tx-test.js:31:  console.log('Waiting for WalletConnect modal...');
./playwright-tests/tests/walletconnect-tx-test.js:37:  console.log('Waiting for QR code...');
./playwright-tests/tests/walletconnect-tx-test.js:46:  console.log('QR Code displayed and ready for scanning');
./playwright-tests/tests/walletconnect-tx-test.js:47:  console.log('NOTE: In a real test environment, you would scan this code with a mobile wallet');
./playwright-tests/tests/walletconnect-tx-test.js:50:  console.log('Simulating successful WalletConnect connection...');
./playwright-tests/tests/walletconnect-tx-test.js:78:  console.log('Waiting for wallet connection to establish...');
./playwright-tests/tests/walletconnect-tx-test.js:82:    console.log('Wallet connected successfully');
./playwright-tests/tests/walletconnect-tx-test.js:84:    console.log('Connection verification failed, but test continuing for demonstration');
./playwright-tests/tests/walletconnect-tx-test.js:88:  console.log('Preparing transaction...');
./playwright-tests/tests/walletconnect-tx-test.js:98:    console.log('Could not fill transaction form, continuing with default values:', e);
./playwright-tests/tests/walletconnect-tx-test.js:102:  console.log('Submitting transaction...');
./playwright-tests/tests/walletconnect-tx-test.js:115:      console.log('No confirmation modal found');
./playwright-tests/tests/walletconnect-tx-test.js:118:    console.log('Could not submit transaction:', e);
./playwright-tests/tests/walletconnect-tx-test.js:122:  console.log('Simulating transaction approval in the wallet...');
./playwright-tests/tests/walletconnect-tx-test.js:141:  console.log('Verifying transaction confirmation...');
./playwright-tests/tests/walletconnect-tx-test.js:148:      console.log('Transaction confirmed with hash:', await txHash.textContent());
./playwright-tests/tests/walletconnect-tx-test.js:151:    console.log('Transaction successfully completed');
./playwright-tests/tests/walletconnect-tx-test.js:153:    console.log('Transaction confirmation verification failed:', e);
./playwright-tests/tests/walletconnect-tx-test.js:158:  console.log('WalletConnect transaction test completed');
./playwright-tests/tests/custom.test.js:26:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/custom.test.js:39:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/custom.test.js:70:    console.log('Custom MetaMask connection test completed successfully!');
./playwright-tests/tests/uniswap-security-test.js:32:        console.log(`MetaMask mock: ${method} called with params:`, params);
./playwright-tests/tests/uniswap-security-test.js:71:        console.log(`MetaMask mock: event listener for ${eventName} registered`);
./playwright-tests/tests/uniswap-security-test.js:188:          console.log('No explicit error shown but transaction should not succeed');
./playwright-tests/tests/test-metamask-tx.js:26:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/test-metamask-tx.js:34:            console.log('Transaction params:', txParams);
./playwright-tests/tests/test-metamask-tx.js:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-metamask-tx.js:82:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/test-metamask-tx.js:93:      console.log(`Testing XSS payload: ${payload}`);
./playwright-tests/tests/test-metamask-tx.js:107:        console.log(`Error testing recipient field: ${e.message}`);
./playwright-tests/tests/test-metamask-tx.js:119:        console.log(`Error testing input fields: ${e.message}`);
./playwright-tests/tests/test-metamask-tx.js:126:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./playwright-tests/tests/test-metamask-tx.js:129:        console.log(`Error clicking buttons: ${e.message}`);
./playwright-tests/tests/test-metamask-tx.js:141:      console.log(`Testing large amount: ${amount}`);
./playwright-tests/tests/test-metamask-tx.js:168:              console.log(`Error displayed: ${await errorElement.textContent()}`);
./playwright-tests/tests/test-metamask-tx.js:173:        console.log(`Error testing large amount: ${e.message}`);
./playwright-tests/tests/rabby-connect.ts:33:    console.log('Note: Rabby wallet support is in development. Using MetaMask provider for now.');
./playwright-tests/tests/rabby-connect.ts:42:          console.log(`Rabby mock (via MetaMask): ${method} called`);
./playwright-tests/tests/rabby-connect.ts:52:          console.log(`Rabby mock (via MetaMask): registered event listener for ${eventName}`);
./playwright-tests/tests/rabby-connect.ts:67:    console.log('Note: Rabby-specific features will be added in a future update.');
./playwright-tests/tests/rabby-connect.ts:85:    console.log('Rabby connection test (via MetaMask) completed successfully!');
./playwright-tests/tests/test-coinbase.js:26:          console.log(`Coinbase Wallet mock: ${method} called`);
./playwright-tests/tests/test-coinbase.js:36:          console.log(`Coinbase Wallet mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-coinbase.js:74:    console.log('Coinbase Wallet connection test completed successfully!');
./playwright-tests/tests/test-coinbase.js:112:      console.log('Disconnect button not found, skipping disconnect test');
./playwright-tests/tests/error-test.ts:38:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/error-test.ts:62:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/error-test.ts:85:    console.log('MetaMask transaction error test completed successfully!');
./playwright-tests/tests/error-test.ts:102:    console.log('MetaMask signature error test completed successfully!');
./playwright-tests/tests/error-test.ts:119:    console.log('MetaMask network error test completed successfully!');
./playwright-tests/tests/lint-test3.ts:38:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/lint-test3.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/lint-test3.ts:79:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/walletconnect-test-new.js:18:  console.log('Navigating to the dApp...');
./playwright-tests/tests/walletconnect-test-new.js:25:  console.log('Looking for Connect Wallet button...');
./playwright-tests/tests/walletconnect-test-new.js:31:  console.log('Waiting for WalletConnect modal...');
./playwright-tests/tests/walletconnect-test-new.js:37:  console.log('Waiting for QR code...');
./playwright-tests/tests/walletconnect-test-new.js:46:  console.log('QR Code displayed and ready for scanning');
./playwright-tests/tests/walletconnect-test-new.js:47:  console.log('NOTE: In a real test environment, you would scan this code with a mobile wallet');
./playwright-tests/tests/walletconnect-test-new.js:58:  console.log('Simulating successful WalletConnect connection...');
./playwright-tests/tests/walletconnect-test-new.js:90:  console.log('Verifying connection status...');
./playwright-tests/tests/walletconnect-test-new.js:101:    console.log('WalletConnect connection verified!');
./playwright-tests/tests/walletconnect-test-new.js:103:    console.log('Connection verification failed, but test continuing for demonstration');
./playwright-tests/tests/walletconnect-test-new.js:104:    console.log(e);
./playwright-tests/tests/walletconnect-test-new.js:108:  console.log('Testing disconnection...');
./playwright-tests/tests/walletconnect-test-new.js:118:    console.log('Disconnection successful!');
./playwright-tests/tests/walletconnect-test-new.js:120:    console.log('Disconnection flow skipped - button not found or not implemented in dApp');
./playwright-tests/tests/walletconnect-test-new.js:123:  console.log('WalletConnect test completed');
./playwright-tests/tests/metamask-test-new.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/metamask-test-new.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/metamask-test-new.js:66:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/wallet-matrix-fuzz.js:31:  console.log('Running in snapshot mode. Wallet state will be captured before and after tests.');
./playwright-tests/tests/wallet-matrix-fuzz.js:106:    console.log(`Wallet snapshot saved: ${filename}`);
./playwright-tests/tests/wallet-matrix-fuzz.js:181:      console.log(`Detected ${changes.changes.length} state changes for ${after.walletType}`);
./playwright-tests/tests/wallet-matrix-fuzz.js:183:        console.log(`- ${change.type} (${change.severity}): ${change.before} ‚Üí ${change.after}`);
./playwright-tests/tests/wallet-matrix-fuzz.js:186:      console.log(`No state changes detected for ${after.walletType}`);
./playwright-tests/tests/wallet-matrix-fuzz.js:261:          console.log(`Mock wallet: ${method} called with params:`, params);
./playwright-tests/tests/wallet-matrix-fuzz.js:340:          console.log(`Wallet mock: registered event listener for ${eventName}`);
./playwright-tests/tests/wallet-matrix-fuzz.js:419:          console.log(`Detected state drift in connection flow test for ${walletType}!`);
./playwright-tests/tests/wallet-matrix-fuzz.js:444:          console.log(`Transaction ${i + 1} (${walletType}):`, txResult);
./playwright-tests/tests/wallet-matrix-fuzz.js:452:          console.log(`Transaction ${i + 1} failed with error:`, error.message);
./playwright-tests/tests/wallet-matrix-fuzz.js:469:          console.log(`Detected state drift in transaction signing test for ${walletType}!`);
./playwright-tests/tests/wallet-matrix-fuzz.js:517:          console.log(`${signMethod} signature for ${walletType} (message ${i + 1}):`, signature);
./playwright-tests/tests/wallet-matrix-fuzz.js:520:          console.log(`Message signing ${i + 1} failed with error:`, error.message);
./playwright-tests/tests/wallet-matrix-fuzz.js:565:          console.log('Transaction succeeded unexpectedly:', txResult);
./playwright-tests/tests/wallet-matrix-fuzz.js:567:          console.log(`Expected error ${i + 1}:`, error.message);
./playwright-tests/tests/wallet-matrix-fuzz.js:623:      console.log(`Iteration ${i + 1}: Switching to ${walletType}`);
./playwright-tests/tests/wallet-matrix-fuzz.js:637:          console.log('Transaction failed during multi-wallet test:', error.message);
./playwright-tests/tests/wallet-matrix-fuzz.js:654:        console.log(
./playwright-tests/tests/connect-test.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/connect-test.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/connect-test.js:66:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/test-metamask-connect.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/test-metamask-connect.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-metamask-connect.js:67:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/darkforest-security-test.js:40:        console.log(`Wallet mock: ${method} called with params:`, params);
./playwright-tests/tests/darkforest-security-test.js:91:        console.log(`Wallet mock: event listener for ${eventName} registered`);
./playwright-tests/tests/darkforest-security-test.js:110:          console.log('Mock SNARK proof generation:', { input, wasmFile, zkeyFile });
./playwright-tests/tests/darkforest-security-test.js:140:          console.log('Mock SNARK verification:', { vkey, publicSignals, proof });
./playwright-tests/tests/darkforest-security-test.js:248:      const moveFn = window.df?.move || ((from, to) => console.log('Move attempted', { from, to }));
./playwright-tests/tests/darkforest-security-test.js:254:        console.log('Move correctly rejected:', e);
./playwright-tests/tests/darkforest-security-test.js:298:        window.df?.revealLocation || (location => console.log('Reveal attempted', { location }));
./playwright-tests/tests/darkforest-security-test.js:303:        console.log('Action correctly rejected due to invalid proof:', e);
./playwright-tests/tests/darkforest-security-test.js:345:      console.log('Attempting transaction replay with old nonce:', mockTx);
./playwright-tests/tests/darkforest-security-test.js:432:            console.log('Checking if sensitive operation is actually protected...');
./playwright-tests/tests/coinbase-transaction.js:28:          console.log(`Coinbase Wallet mock: ${method} called with params:`, params);
./playwright-tests/tests/coinbase-transaction.js:39:            console.log('Transaction parameters:', txParams);
./playwright-tests/tests/coinbase-transaction.js:48:          console.log(`Coinbase Wallet mock: registered event listener for ${eventName}`);
./playwright-tests/tests/coinbase-transaction.js:111:      console.log('Transaction hash:', txHash);
./playwright-tests/tests/coinbase-transaction.js:114:      console.log('Transaction hash element not found, but transaction was sent');
./playwright-tests/tests/coinbase-transaction.js:120:    console.log('Coinbase Wallet transaction test completed successfully!');
./playwright-tests/tests/metamask-basic-test.js:24:    console.log(`MetaMask extension not found at: ${METAMASK_EXTENSION_PATH}`);
./playwright-tests/tests/metamask-basic-test.js:31:      console.log(`Found MetaMask extension: ${manifest.name} v${manifest.version}`);
./playwright-tests/tests/metamask-basic-test.js:34:      console.log(`Found extension, but it doesn't appear to be MetaMask: ${manifest.name}`);
./playwright-tests/tests/metamask-basic-test.js:38:    console.log(`Error reading manifest: ${e.message}`);
./playwright-tests/tests/metamask-basic-test.js:46:    console.log('Testing environment:');
./playwright-tests/tests/metamask-basic-test.js:47:    console.log(`- Target URL: ${config.targetUrl}`);
./playwright-tests/tests/metamask-basic-test.js:48:    console.log(`- MetaMask Path: ${METAMASK_EXTENSION_PATH}`);
./playwright-tests/tests/metamask-basic-test.js:49:    console.log(`- Extension exists: ${fs.existsSync(METAMASK_EXTENSION_PATH)}`);
./playwright-tests/tests/metamask-basic-test.js:55:    console.log(`Extension validity check: ${isExtensionValid}`);
./playwright-tests/tests/metamask-basic-test.js:63:      console.log('Launching browser with MetaMask extension...');
./playwright-tests/tests/metamask-basic-test.js:78:      console.log('Browser launched, creating new page...');
./playwright-tests/tests/metamask-basic-test.js:82:      console.log(`Navigating to ${config.targetUrl}...`);
./playwright-tests/tests/metamask-basic-test.js:85:      console.log('Page loaded');
./playwright-tests/tests/metamask-basic-test.js:89:      console.log(`Page title: ${title}`);
./playwright-tests/tests/metamask-basic-test.js:100:      console.log(`Screenshot saved to: ${screenshotPath}`);
./playwright-tests/tests/metamask-basic-test.js:104:      console.log('Browser context closed');
./playwright-tests/tests/wallet-snapshot-simple.test.js:37:    console.log('Saved wallet state:', walletState);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:129:          console.log(`Sending message to chain ${dstChainId}`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:147:          console.log(`Bridging ${amount} tokens to chain ${dstChainId}`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:180:      console.log('\n' + visualization);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:198:      console.log(
./playwright-tests/tests/layerzero-crosschain-fuzz.js:236:        console.log(`[Fuzz #${i + 1}] Message status: ${status.status}`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:245:    console.log(`Fuzzing completed. ${failures.length} of ${results.length} messages failed.`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:251:        console.log(`${gasLimitFailures.length} failures likely due to insufficient gas.`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:270:        console.log(
./playwright-tests/tests/layerzero-crosschain-fuzz.js:282:      console.log(
./playwright-tests/tests/layerzero-crosschain-fuzz.js:315:        console.log(`[Fuzz #${i + 1}] Bridge status: ${status.status}`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:324:    console.log(
./playwright-tests/tests/layerzero-crosschain-fuzz.js:368:      console.log(`Checking relayer configuration for chain ${chainPair.src}`);
./playwright-tests/tests/layerzero-crosschain-fuzz.js:388:    console.log('Testing for liquidity synchronization bugs across chains');
./playwright-tests/tests/tx-test.ts:40:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/tx-test.ts:48:            console.log('Transaction params:', txParams);
./playwright-tests/tests/tx-test.ts:62:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/tx-test.ts:96:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/airdrop-security-test.js:42:          console.log(`Wallet mock: ${method} called with params:`, params);
./playwright-tests/tests/airdrop-security-test.js:102:          console.log(`Wallet mock: event listener for ${eventName} registered`);
./playwright-tests/tests/utils/walletMock.ts:72:          console.log(`Mock ${provider}: ${method} called with params:`, params);
./playwright-tests/tests/utils/walletMock.ts:154:    console.log('Could not find connect button, proceeding with mock setup anyway');
./playwright-tests/tests/utils/walletMock.ts:228:          console.log(`Mock ${provider}: ${method} called with params:`, params);
./playwright-tests/tests/utils/bridgeMock.ts:49:        console.log('LayerZero bridge called with params:', params);
./playwright-tests/tests/utils/bridgeMock.ts:70:        console.log('Wormhole transfer called with params:', params);
./playwright-tests/tests/test-lint2.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/test-lint2.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-lint2.js:66:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/test-lint2.js:77:      console.log(`Testing XSS payload: ${payload}`);
./playwright-tests/tests/test-lint2.js:91:        console.log(`Error testing recipient field: ${e.message}`);
./playwright-tests/tests/test-lint2.js:103:        console.log(`Error testing input fields: ${e.message}`);
./playwright-tests/tests/test-lint2.js:110:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./playwright-tests/tests/test-lint2.js:113:        console.log(`Error clicking buttons: ${e.message}`);
./playwright-tests/tests/test-lint2.js:124:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./playwright-tests/tests/test-lint2.js:137:                console.log('Intercepted signing request with potential phishing payload');
./playwright-tests/tests/test-lint2.js:154:                  console.log('Intercepted sendAsync signing request');
./playwright-tests/tests/test-lint2.js:177:            .catch(() => console.log('Sign button click failed, continuing...'));
./playwright-tests/tests/test-lint2.js:183:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./playwright-tests/tests/security-tx-test.js:24:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/security-tx-test.js:32:            console.log('Transaction params:', txParams);
./playwright-tests/tests/security-tx-test.js:46:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/security-tx-test.js:80:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/security-tx-test.js:91:      console.log(`Testing XSS payload: ${payload}`);
./playwright-tests/tests/security-tx-test.js:105:        console.log(`Error testing recipient field: ${e.message}`);
./playwright-tests/tests/security-tx-test.js:117:        console.log(`Error testing input fields: ${e.message}`);
./playwright-tests/tests/security-tx-test.js:124:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./playwright-tests/tests/security-tx-test.js:127:        console.log(`Error clicking buttons: ${e.message}`);
./playwright-tests/tests/security-tx-test.js:139:      console.log(`Testing large amount: ${amount}`);
./playwright-tests/tests/security-tx-test.js:166:              console.log(`Error displayed: ${await errorElement.textContent()}`);
./playwright-tests/tests/security-tx-test.js:171:        console.log(`Error testing large amount: ${e.message}`);
./playwright-tests/tests/test-gen-connect.js:22:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/test-gen-connect.js:32:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-gen-connect.js:63:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/test-gen-connect.js:74:      console.log(`Testing XSS payload: ${payload}`);
./playwright-tests/tests/test-gen-connect.js:88:        console.log(`Error testing recipient field: ${e.message}`);
./playwright-tests/tests/test-gen-connect.js:100:        console.log(`Error testing input fields: ${e.message}`);
./playwright-tests/tests/test-gen-connect.js:107:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./playwright-tests/tests/test-gen-connect.js:110:        console.log(`Error clicking buttons: ${e.message}`);
./playwright-tests/tests/test-gen-connect.js:121:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./playwright-tests/tests/test-gen-connect.js:134:                console.log('Intercepted signing request with potential phishing payload');
./playwright-tests/tests/test-gen-connect.js:151:                  console.log('Intercepted sendAsync signing request');
./playwright-tests/tests/test-gen-connect.js:174:            .catch(() => console.log('Sign button click failed, continuing...'));
./playwright-tests/tests/test-gen-connect.js:180:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./playwright-tests/tests/connection.test.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/connection.test.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/connection.test.js:66:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/sign-test.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/sign-test.js:32:            console.log('Signing params:', params);
./playwright-tests/tests/sign-test.js:40:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/sign-test.js:74:    console.log('MetaMask signing test completed successfully!');
./playwright-tests/tests/transaction.test.ts:29:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/transaction.test.ts:37:            console.log('Transaction params:', txParams);
./playwright-tests/tests/transaction.test.ts:51:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/transaction.test.ts:85:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/radiant-capital-tests.js:32:      console.log(`Testing basic lending operations on ${chain.name}`);
./playwright-tests/tests/radiant-capital-tests.js:48:      console.log(`  ‚úì Deposited 10 ${collateralToken} as collateral`);
./playwright-tests/tests/radiant-capital-tests.js:60:      console.log(`  ‚úì Borrowed 10,000 ${borrowToken}`);
./playwright-tests/tests/radiant-capital-tests.js:72:      console.log(`  ‚úì Withdrew 5 ${collateralToken}`);
./playwright-tests/tests/radiant-capital-tests.js:79:      console.log(`Testing flash loan vulnerabilities on ${chain.name}`);
./playwright-tests/tests/radiant-capital-tests.js:83:        console.log(`  Testing with ${token.name}`);
./playwright-tests/tests/radiant-capital-tests.js:93:        console.log(`  Found ${vulnerabilityResults.findings.length} vulnerabilities`);
./playwright-tests/tests/radiant-capital-tests.js:98:            console.log(`    - ${finding.type} (${finding.severity}): ${finding.description}`);
./playwright-tests/tests/radiant-capital-tests.js:110:      console.log(`Testing oracle manipulation vulnerabilities on ${chain.name}`);
./playwright-tests/tests/radiant-capital-tests.js:113:        console.log(`  Testing with ${token.name}`);
./playwright-tests/tests/radiant-capital-tests.js:118:          console.log(`    Testing manipulation factor: ${factor}x`);
./playwright-tests/tests/radiant-capital-tests.js:130:            console.log(`    Found ${vulnerabilityResults.findings.length} vulnerabilities:`);
./playwright-tests/tests/radiant-capital-tests.js:132:              console.log(`      - ${finding.type} (${finding.severity}): ${finding.description}`);
./playwright-tests/tests/radiant-capital-tests.js:133:              console.log(
./playwright-tests/tests/radiant-capital-tests.js:146:      console.log(`Testing liquidation vulnerabilities on ${chain.name}`);
./playwright-tests/tests/radiant-capital-tests.js:151:        console.log(`  Testing with ${token.name}`);
./playwright-tests/tests/radiant-capital-tests.js:166:          console.log(
./playwright-tests/tests/radiant-capital-tests.js:169:          console.log(`    ${frontRunVulnerability.description}`);
./playwright-tests/tests/radiant-capital-tests.js:170:          console.log(
./playwright-tests/tests/radiant-capital-tests.js:173:          console.log(
./playwright-tests/tests/radiant-capital-tests.js:184:      console.log(`Testing interest rate manipulation on ${chain.name}`);
./playwright-tests/tests/radiant-capital-tests.js:191:        console.log(`  Testing with ${token.name}, amounts up to ${hugeAmount}`);
./playwright-tests/tests/radiant-capital-tests.js:203:          console.log(
./playwright-tests/tests/radiant-capital-tests.js:207:            console.log(`    - ${finding.description}`);
./playwright-tests/tests/radiant-capital-tests.js:208:            console.log(
./playwright-tests/tests/radiant-capital-tests.js:213:          console.log('  ‚úì No interest rate manipulation vulnerabilities found');
./playwright-tests/tests/radiant-capital-tests.js:221:    console.log('Testing combined attack vectors (flash loan + oracle manipulation)');
./playwright-tests/tests/radiant-capital-tests.js:252:    console.log(`  ‚úì Successfully executed flash loan of 1,000,000 ${token.name}`);
./playwright-tests/tests/radiant-capital-tests.js:264:    console.log(
./playwright-tests/tests/radiant-capital-tests.js:268:      console.log(
./playwright-tests/tests/radiant-capital-tests.js:275:      console.log(
./playwright-tests/tests/radiant-capital-tests.js:278:      console.log(
./playwright-tests/tests/radiant-capital-tests.js:282:      console.log('  ‚úì System protected against combined attack vectors');
./playwright-tests/tests/radiant-capital-tests.js:288:    console.log('Testing Radiant-specific edge cases');
./playwright-tests/tests/radiant-capital-tests.js:293:    console.log(`Testing RDNT token behavior on ${chain.name}`);
./playwright-tests/tests/radiant-capital-tests.js:305:    console.log('  ‚úì Deposited 10,000 RDNT as collateral');
./playwright-tests/tests/radiant-capital-tests.js:316:    console.log(`  Borrow against RDNT result: ${borrowResult.success ? 'Allowed' : 'Rejected'}`);
./playwright-tests/tests/radiant-capital-tests.js:321:      console.log(
./playwright-tests/tests/radiant-capital-tests.js:327:      console.log('  Cross-chain RDNT testing completed');
./playwright-tests/tests/lint-test.ts:38:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/lint-test.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/lint-test.ts:79:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/wallet-session-persistence.test.js:48:          console.log('Found saved wallet state:', state);
./playwright-tests/tests/wallet-session-persistence.test.js:94:          console.log(`Wallet mock: ${method} called with params:`, params);
./playwright-tests/tests/walletconnect-tx.test.js:18:  console.log('Navigating to the dApp...');
./playwright-tests/tests/walletconnect-tx.test.js:31:        console.log(`WalletConnect mock: ${method} called`);
./playwright-tests/tests/walletconnect-tx.test.js:42:          console.log('Transaction params:', txParams);
./playwright-tests/tests/walletconnect-tx.test.js:60:        console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./playwright-tests/tests/walletconnect-tx.test.js:71:  console.log('Looking for Connect Wallet button...');
./playwright-tests/tests/walletconnect-tx.test.js:89:  console.log('Preparing transaction...');
./playwright-tests/tests/walletconnect-tx.test.js:94:  console.log('Submitting transaction...');
./playwright-tests/tests/walletconnect-tx.test.js:107:  console.log('Verifying transaction confirmation...');
./playwright-tests/tests/walletconnect-tx.test.js:113:    console.log('Transaction confirmed with hash:', await txHash.textContent());
./playwright-tests/tests/walletconnect-tx.test.js:118:  console.log('WalletConnect transaction test completed');
./playwright-tests/tests/final-walletconnect.js:27:          console.log(`WalletConnect mock: ${method} called`);
./playwright-tests/tests/final-walletconnect.js:37:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./playwright-tests/tests/final-walletconnect.js:46:          console.log('WalletConnect mock: disconnect called');
./playwright-tests/tests/final-walletconnect.js:53:          console.log('WalletConnect mock: QR code should be displayed');
./playwright-tests/tests/final-walletconnect.js:72:      console.log('Simulating QR code scan from mobile wallet');
./playwright-tests/tests/final-walletconnect.js:89:    console.log('WalletConnect connection test completed successfully!');
./playwright-tests/tests/final-walletconnect.js:126:      console.log('Disconnect button not found, skipping disconnect test');
./playwright-tests/tests/sign-fuzzing-test.ts:40:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/sign-fuzzing-test.ts:47:            console.log('Signing params:', params);
./playwright-tests/tests/sign-fuzzing-test.ts:55:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/sign-fuzzing-test.ts:89:    console.log('MetaMask signing test completed successfully!');
./playwright-tests/tests/sign-fuzzing-test.ts:98:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./playwright-tests/tests/sign-fuzzing-test.ts:107:              console.log('Intercepted personal_sign request with potential phishing payload');
./playwright-tests/tests/sign-fuzzing-test.ts:127:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./playwright-tests/tests/l2-network-test.js:192:      console.log('Skipping contract deployment - no private key provided');
./playwright-tests/tests/l2-network-test.js:219:      console.log('Skipping contract deployment - no private key provided');
./playwright-tests/tests/l2-network-test.js:269:        console.log(`Error getting gas price for ${network}: ${error.message}`);
./playwright-tests/tests/l2-network-test.js:274:    console.log('Gas prices across networks:', gasPrices);
./playwright-tests/tests/l2-network-test.js:312:        console.log(`Error getting block for ${network}: ${error.message}`);
./playwright-tests/tests/l2-network-test.js:317:    console.log('Block information across networks:', blocks);
./playwright-tests/tests/metamask-connection.test.ts:29:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/metamask-connection.test.ts:42:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/metamask-connection.test.ts:73:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/connection.test.ts:29:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/connection.test.ts:42:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/connection.test.ts:73:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/lint-test2.ts:38:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/lint-test2.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/lint-test2.ts:79:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/wallet-options.test.js:20:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/wallet-options.test.js:28:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/wallet-options.test.js:40:    console.log('MetaMask wallet connection example completed successfully');
./playwright-tests/tests/wallet-options.test.js:51:          console.log(`WalletConnect mock: ${method} called`);
./playwright-tests/tests/wallet-options.test.js:59:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./playwright-tests/tests/wallet-options.test.js:62:          console.log('WalletConnect mock: disconnect called');
./playwright-tests/tests/wallet-options.test.js:78:    console.log('WalletConnect wallet connection example completed successfully');
./playwright-tests/tests/wallet-options.test.js:101:    console.log(`Detected wallet type: ${walletType}`);
./playwright-tests/tests/metamask-extension-security.test.js:73:        console.log('Using mock AI model for analysis');
./playwright-tests/tests/metamask-extension-security.test.js:132:    console.log(`Found ${vulnerabilities.length} potential permission vulnerabilities`);
./playwright-tests/tests/metamask-extension-security.test.js:135:        console.log(`- ${v.type} (${v.severity}): ${v.description} in ${v.file}`);
./playwright-tests/tests/metamask-extension-security.test.js:190:    console.log(`Found ${vulnerabilities.length} potential transaction signing vulnerabilities`);
./playwright-tests/tests/metamask-extension-security.test.js:193:        console.log(`- ${v.type} (${v.severity}): ${v.description} in ${v.file}`);
./playwright-tests/tests/metamask-extension-security.test.js:228:    console.log(`Found ${vulnerabilities.length} potential background script vulnerabilities`);
./playwright-tests/tests/metamask-extension-security.test.js:231:        console.log(`- ${v.type} (${v.severity}): ${v.description}`);
./playwright-tests/tests/metamask-extension-security.test.js:275:    console.log(`Found ${vulnerabilities.length} potential content script vulnerabilities`);
./playwright-tests/tests/metamask-extension-security.test.js:278:        console.log(`- ${v.type} (${v.severity}): ${v.description} in ${v.file}`);
./playwright-tests/tests/metamask-extension-security.test.js:342:      console.log(`Found ${securityIssues.length} UI security issues`);
./playwright-tests/tests/metamask-extension-security.test.js:345:          console.log(`- ${issue}`);
./playwright-tests/tests/test-walletconnect.js:27:          console.log(`WalletConnect mock: ${method} called`);
./playwright-tests/tests/test-walletconnect.js:37:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-walletconnect.js:46:          console.log('WalletConnect mock: disconnect called');
./playwright-tests/tests/test-walletconnect.js:53:          console.log('WalletConnect mock: QR code should be displayed');
./playwright-tests/tests/test-walletconnect.js:72:      console.log('Simulating QR code scan from mobile wallet');
./playwright-tests/tests/test-walletconnect.js:89:    console.log('WalletConnect connection test completed successfully!');
./playwright-tests/tests/test-walletconnect.js:126:      console.log('Disconnect button not found, skipping disconnect test');
./playwright-tests/tests/test.js:22:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/test.js:46:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test.js:69:    console.log('MetaMask transaction error test completed successfully!');
./playwright-tests/tests/test.js:86:    console.log('MetaMask signature error test completed successfully!');
./playwright-tests/tests/test.js:103:    console.log('MetaMask network error test completed successfully!');
./playwright-tests/tests/nft-connect-test.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/nft-connect-test.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/nft-connect-test.js:66:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/lint-test-sign.ts:40:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/lint-test-sign.ts:47:            console.log('Signing params:', params);
./playwright-tests/tests/lint-test-sign.ts:55:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/lint-test-sign.ts:89:    console.log('MetaMask signing test completed successfully!');
./playwright-tests/tests/wallet-switching.test.js:44:          console.log(`Mock ${walletType}: ${method} called with params:`, params);
./playwright-tests/tests/transaction.test.js:27:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/transaction.test.js:35:            console.log('Transaction params:', txParams);
./playwright-tests/tests/transaction.test.js:53:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/transaction.test.js:61:    console.log('Loading test page:', fileUrl);
./playwright-tests/tests/transaction.test.js:92:    console.log('MetaMask transaction test completed successfully!');
./playwright-tests/tests/metamask-connect.ts:38:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/metamask-connect.ts:48:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/metamask-connect.ts:79:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/walletconnect-connect.ts:43:          console.log(`WalletConnect mock: ${method} called`);
./playwright-tests/tests/walletconnect-connect.ts:53:          console.log(`WalletConnect mock: registered event listener for ${eventName}`);
./playwright-tests/tests/walletconnect-connect.ts:62:          console.log('WalletConnect mock: disconnect called');
./playwright-tests/tests/walletconnect-connect.ts:69:          console.log('WalletConnect mock: QR code should be displayed');
./playwright-tests/tests/walletconnect-connect.ts:88:      console.log('Simulating QR code scan from mobile wallet');
./playwright-tests/tests/walletconnect-connect.ts:105:    console.log('WalletConnect connection test completed successfully!');
./playwright-tests/tests/walletconnect-connect.ts:142:      console.log('Disconnect button not found, skipping disconnect test');
./playwright-tests/tests/wallet-snapshot.test.js:125:          console.log(`Mock wallet: ${method} called with params:`, params);
./playwright-tests/tests/wallet-snapshot.test.js:189:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/wallet-snapshot.test.js:213:    console.log('Saved wallet state:', walletState);
./playwright-tests/tests/wallet-snapshot.test.js:268:    console.log('Goerli state:', goerliState);
./playwright-tests/tests/test-lint.js:25:          console.log(`MetaMask mock: ${method} called`);
./playwright-tests/tests/test-lint.js:35:          console.log(`MetaMask mock: registered event listener for ${eventName}`);
./playwright-tests/tests/test-lint.js:66:    console.log('MetaMask connection test completed successfully!');
./playwright-tests/tests/test-lint.js:77:      console.log(`Testing XSS payload: ${payload}`);
./playwright-tests/tests/test-lint.js:91:        console.log(`Error testing recipient field: ${e.message}`);
./playwright-tests/tests/test-lint.js:103:        console.log(`Error testing input fields: ${e.message}`);
./playwright-tests/tests/test-lint.js:110:          await buttons[i].click().catch(() => console.log('Button click failed, continuing...'));
./playwright-tests/tests/test-lint.js:113:        console.log(`Error clicking buttons: ${e.message}`);
./playwright-tests/tests/test-lint.js:124:      console.log(`Testing eth_sign phishing payload: ${phishingPayload}`);
./playwright-tests/tests/test-lint.js:137:                console.log('Intercepted signing request with potential phishing payload');
./playwright-tests/tests/test-lint.js:154:                  console.log('Intercepted sendAsync signing request');
./playwright-tests/tests/test-lint.js:177:            .catch(() => console.log('Sign button click failed, continuing...'));
./playwright-tests/tests/test-lint.js:183:        console.log(`Error testing eth_sign phishing vector: ${e.message}`);
./playwright-tests/tests/zk-snark-security.test.js:416:      console.log('Valid proof result:', validResult);
./playwright-tests/tests/zk-snark-security.test.js:444:      console.log('Invalid curve points result:', invalidResult);
./playwright-tests/examples/exploits/uniswap-approval-overflow.fuzz.js:155:        console.log(
./playwright-tests/examples/exploits/uniswap-approval-overflow.fuzz.js:184:        console.log('Unlimited Approval Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/uniswap-approval-overflow.fuzz.js:271:        console.log('Approval Sequence Test:', JSON.stringify(result.approvalSequence, null, 2));
./playwright-tests/examples/exploits/uniswap-approval-overflow.fuzz.js:317:        console.log('Network Mismatch Test Result:', JSON.stringify(result, null, 2));
./playwright-tests/examples/exploits/airdrop-batch-loss.test.ts:50:      console.log(`Simulating contract call: ${functionName}(${params.join(', ')})`);
./playwright-tests/examples/exploits/airdrop-batch-loss.test.ts:137:        console.log('Vulnerability recorded:', finding);
./playwright-tests/examples/exploits/airdrop-batch-loss.test.ts:245:    console.log('Role Assignment Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/airdrop-batch-loss.test.ts:330:    console.log('Batch Distribution Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/airdrop-batch-loss.test.ts:426:    console.log('Token Address Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/airdrop-batch-loss.test.ts:499:    console.log('Combined Attack Simulation Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/debug-example.test.js:65:      console.log('Performing basic action');
./playwright-tests/examples/exploits/debug-example.test.js:155:    console.log('\n' + visualization);
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:212:        console.log('Vulnerability recorded:', finding);
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:420:        console.log('ZK Proof Replay Test:', JSON.stringify(result, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:432:    console.log('ZK Proof Replay Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:534:        console.log('ZK Proof Manipulation Test:', JSON.stringify(result, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:546:    console.log('ZK Proof Manipulation Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:664:        console.log('Game Reentrancy Test:', JSON.stringify(result, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:675:    console.log('Reentrancy Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:805:        console.log('ZK Circuit Implementation Test:', JSON.stringify(result, null, 2));
./playwright-tests/examples/exploits/darkforest-zk-replay.fuzz.ts:816:    console.log('ZK Circuit Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/index.js:73:  console.log(`Running template: ${templateName} with options:`, options);
./playwright-tests/examples/exploits/session-handling.test.js:45:        console.log('Vulnerability recorded:', finding);
./playwright-tests/examples/exploits/session-handling.test.js:156:    console.log('Session Storage Test Result:', JSON.stringify(vulnerableStorage, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:160:    console.log('Session Storage Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:231:        console.log('Error Leak Detection Test:', JSON.stringify(result, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:236:    console.log('Error Leak Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:327:    console.log('CSRF Protection Test:', JSON.stringify(csrfProtection, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:331:    console.log('CSRF Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:345:        console.log('Simulating wallet disconnection');
./playwright-tests/examples/exploits/session-handling.test.js:435:    console.log('Session Fixation Test:', JSON.stringify(sessionFixationTest, null, 2));
./playwright-tests/examples/exploits/session-handling.test.js:439:    console.log('Session Fixation Vulnerability Report:', JSON.stringify(report, null, 2));
./playwright-tests/examples/multi-wallet-test.js:142:    console.log(`Testing with ${config.type}...`);
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:308:    console.log(`Initial chain ID: ${initialChainId}`);
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:318:    console.log(`Final chain ID: ${finalChainId}`);
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:322:    console.log('Event log:', eventLog);
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:341:          console.log('Race condition detected: Network changed during transaction preparation');
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:345:            console.log('Network switched before transaction was sent');
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:347:            console.log('Network switched after transaction was initiated but before completion');
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:510:      console.log('Page log:', msg.text());
./playwright-tests/examples/security-bug-tests/network-switch-race.test.ts:526:    console.log('Result:', resultText);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:158:              console.log('Detected eth_sign call with params:', postData.params);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:173:        console.log(`Console message: ${text}`);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:192:          console.log(`eth_sign called with params: ${JSON.stringify(args.params)}`);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:237:          console.log('VULNERABILITY DETECTED: Potential phishing via eth_sign');
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:238:          console.log(`Message: ${messageStr}`);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:239:          console.log('Improper use of eth_sign without standard prefix');
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:266:          console.log(`SIGN_METHOD: ${args.method} with params: ${JSON.stringify(args.params)}`);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:278:      console.log(`Console log: ${text}`);
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:280:        console.log('‚úÖ Detected secure signing method: personal_sign');
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:294:      console.log('Secure signature detected in result text');
./playwright-tests/examples/security-bug-tests/eth-sign-phishing.test.ts:301:      console.log('No secure method detected in logs, but result UI indicates signing happened');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:126:                console.log(\`APPROVAL: \${owner} approved \${spender} to spend \${amount} USDC\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:176:                console.log(\`TRANSFER: \${spender} transferred \${amount} USDC from \${from} to \${to}\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:304:            console.log('MALICIOUS: Checking for existing token approvals');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:346:              console.log(\`EXPLOIT: Found allowance of \${allowance} for legitimate app\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:397:                console.log('EXPLOIT: Attempting to use existing approval to steal tokens');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:410:                  console.log(\`EXPLOIT SUCCESSFUL: Stole \${amountToSteal} tokens from \${userAddress}\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:470:    console.log('Legitimate dApp approval status:', approvalStatus);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:478:        console.log('Captured event:', text);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:508:        console.log('Captured exploit:', text);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:514:    console.log('Malicious dApp initial status:', maliciousResult);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:537:    console.log('Token balance after exploit:', tokenBalance);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:581:        console.log('Safe user exploit attempt:', text);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:663:                console.log('SAFE: Using exact approval amount pattern');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:666:                console.log(\`APPROVAL: Approving \${spenderContract} to spend exactly 10 USDC\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:685:                console.log('SAFE: Using approval with buffer pattern');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:686:                console.log(\`APPROVAL: Approving \${spenderContract} to spend 12 USDC (with buffer)\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:705:                console.log('UNSAFE: Using unlimited approval pattern');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:706:                console.log(\`APPROVAL: Approving \${spenderContract} to spend unlimited USDC\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:725:                console.log('SAFE: Revoking approval');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:726:                console.log(\`APPROVAL: Setting \${spenderContract}'s allowance to zero\`);
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:741:                console.log('TRANSACTION: Executing transaction with approved tokens');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:745:                console.log('SAFE: Auto-revoking remaining approval');
./playwright-tests/examples/security-bug-tests/token-approval-reuse.test.ts:769:        console.log('Security pattern:', text);
./playwright-tests/examples/visualization-demo.js:170:  console.log(`Dashboard generated at: ${dashboardPath}`);
./playwright-tests/examples/visualization-demo.js:179:  console.log(`Simple dashboard generated at: ${simpleDashboardPath}`);
./playwright-tests/examples/visualization-demo.js:202:  console.log(`Flow visualization generated at: ${flowPath}`);
./playwright-tests/examples/visualization-demo.js:211:  console.log(`Simple flow visualization generated at: ${simpleFlowPath}`);
./playwright-tests/examples/visualization-demo.js:252:  console.log(`Debug report generated at: ${reportPath}`);
./playwright-tests/examples/visualization-demo.js:307:    console.log(`Debug report generated at: ${reportPath}`);
./test-templates.js:7:  console.log('Checking Audityzer template files...');
./test-templates.js:28:    console.log(
./test-templates.js:47:    console.log(
./test-templates.js:99:  console.log('Test configuration result:', JSON.stringify(config, null, 2));
./test-templates.js:103:    console.log('\n‚úì All template files exist and are properly defined in index.js');
./test-templates.js:104:    console.log('‚úì Test completed successfully!');
./test-templates.js:106:    console.log('\n‚úó There were issues with the template files or definitions');
./test-templates.js:107:    if (!allFilesExist) console.log('  - Some template files are missing or empty');
./test-templates.js:109:      console.log('  - Some templates are not properly defined in index.js');
./convert-to-webp.js:30:        console.log(`Skipping ${inputPath} (WebP already exists and is up-to-date)`);
./convert-to-webp.js:40:    console.log(`Converted ${inputPath} ‚Üí ${outputPath}`);
./convert-to-webp.js:81:    console.log('Starting image conversion to WebP...');
./convert-to-webp.js:84:    console.log(`Found ${images.length} images to process`);
./convert-to-webp.js:91:    console.log('Conversion complete!');
./packages/dev-server-runner/bin/dev-server-runner.js:67:        console.log(`Status: ${status.status}`);
./packages/dev-server-runner/bin/dev-server-runner.js:68:        if (status.pid) console.log(`PID: ${status.pid}`);
./packages/dev-server-runner/bin/dev-server-runner.js:69:        if (status.port) console.log(`Port: ${status.port}`);
./packages/dev-server-runner/bin/dev-server-runner.js:70:        if (status.healthEndpoint) console.log(`Health endpoint: ${status.healthEndpoint}`);
./packages/dev-server-runner/bin/dev-server-runner.js:71:        if (status.startTime) console.log(`Start time: ${status.startTime}`);
./packages/dev-server-runner/bin/dev-server-runner.js:72:        if (status.uptime) console.log(`Uptime: ${status.uptime}`);
./packages/dev-server-runner/bin/dev-server-runner.js:73:        if (status.note) console.log(`Note: ${status.note}`);
./packages/dev-server-runner/index.js:43:      console.log(message);
./reports/trace/sw.bundle.js:446:                  console.log(
./reports/trace/uiMode.Sdytl9wc.js:1535:              console.log(D);
./compress-resources.js:75:    console.log(`Compressed ${filePath}:
./compress-resources.js:90:    console.log('Starting resource compression...');
./compress-resources.js:93:    console.log(`Found ${files.length} files to compress`);
./compress-resources.js:100:    console.log('Compression complete!');
./templates/aa-tests/aa-multi-bundler.test.js:177:      console.log(`Bundler ${client.name} ${results[key].success ? 'accepted' : 'rejected'} the standard UserOperation`);
./templates/aa-tests/aa-multi-bundler.test.js:184:    console.log(`Standard UserOperation acceptance rate: ${(acceptanceRate * 100).toFixed(1)}%`);
./templates/aa-tests/aa-multi-bundler.test.js:206:        console.log(`${client.name} gas estimation:`, {
./templates/aa-tests/aa-multi-bundler.test.js:212:        console.log(`${client.name} failed to estimate gas: ${estimationResults[key].error}`);
./templates/aa-tests/aa-multi-bundler.test.js:231:      console.log(`Call gas variance between bundlers: ${callGasVariance.toFixed(1)}%`);
./templates/aa-tests/aa-multi-bundler.test.js:232:      console.log(`Verification gas variance between bundlers: ${verificationGasVariance.toFixed(1)}%`);
./templates/aa-tests/aa-multi-bundler.test.js:251:      console.log(`Bundler ${client.name} ${results[key].success ? 'accepted' : 'rejected'} the paymaster operation`);
./templates/aa-tests/aa-multi-bundler.test.js:257:    console.log(`Paymaster acceptance rate: ${(acceptedCount / Object.keys(results).length * 100).toFixed(1)}%`);
./templates/aa-tests/aa-multi-bundler.test.js:261:      console.log(`${client.name} results:`, client.getResults());
./templates/aa-tests/aa-ci-reporter.js:271:    console.log('\n-----------------------------------------');
./templates/aa-tests/aa-ci-reporter.js:272:    console.log(`AA Test Results: ${verdict}`);
./templates/aa-tests/aa-ci-reporter.js:273:    console.log('-----------------------------------------');
./templates/aa-tests/aa-ci-reporter.js:274:    console.log(`Total Tests: ${summary.total}`);
./templates/aa-tests/aa-ci-reporter.js:275:    console.log(`Passed: ${summary.passed}`);
./templates/aa-tests/aa-ci-reporter.js:276:    console.log(`Failed: ${summary.failed}`);
./templates/aa-tests/aa-ci-reporter.js:277:    console.log(`Pass Rate: ${summary.passRate}`);
./templates/aa-tests/aa-ci-reporter.js:278:    console.log('-----------------------------------------');
./templates/aa-tests/aa-ci-reporter.js:281:    console.log('Results by Category:');
./templates/aa-tests/aa-ci-reporter.js:286:      console.log(`  ${category}: ${results.passed}/${results.total} (${categoryPassRate})`);
./templates/aa-tests/aa-ci-reporter.js:290:      console.log('\nFailing Tests:');
./templates/aa-tests/aa-ci-reporter.js:294:          console.log(`  - ${test.category} > ${test.name}`);
./templates/aa-tests/aa-ci-reporter.js:296:            console.log(`    Error: ${test.message}`);
./templates/aa-tests/aa-ci-reporter.js:301:    console.log('-----------------------------------------\n');
./templates/aa-tests/aa-counterfactual-wallets.test.js:301:      console.log(`Gas used for counterfactual deployment and operation: ${receipt.gasUsed.toString()}`);
./templates/aa-tests/aa-counterfactual-wallets.test.js:328:      console.log(`Gas used for regular operation: ${receipt2.gasUsed.toString()}`);
./templates/aa-tests/aa-counterfactual-wallets.test.js:329:      console.log(`Gas savings percentage: ${100 - (receipt2.gasUsed.toNumber() / receipt.gasUsed.toNumber() * 100)}%`);
./templates/aa-tests/aa-pimlico-service.js:243:      console.log(`[PimlicoService] ${message}`, data || '');
./templates/aa-tests/aa-benchmark-comparison.js:102:    console.log(chalk.blue('üîç Starting AA Implementation Benchmark'));
./templates/aa-tests/aa-benchmark-comparison.js:125:    console.log(chalk.green('‚úÖ AA Benchmark completed successfully'));
./templates/aa-tests/aa-benchmark-comparison.js:133:    console.log(chalk.yellow('üìä Testing account creation costs...'));
./templates/aa-tests/aa-benchmark-comparison.js:152:      console.log(`  - ${implDetails.name}: Creation gas: ${results[implKey].creationGas.toLocaleString()} gas`);
./templates/aa-tests/aa-benchmark-comparison.js:163:    console.log(chalk.yellow('üìä Testing basic ETH transfer performance...'));
./templates/aa-tests/aa-benchmark-comparison.js:186:      console.log(`  - ${implDetails.name}: Transfer total gas: ${results[implKey].totalGas.toLocaleString()} gas`);
./templates/aa-tests/aa-benchmark-comparison.js:197:    console.log(chalk.yellow('üìä Testing bundler compatibility...'));
./templates/aa-tests/aa-benchmark-comparison.js:225:      console.log(`  - ${implDetails.name}: Compatible with ${compatibleCount}/${Object.keys(BUNDLER_IMPLEMENTATIONS).length} bundlers`);
./templates/aa-tests/aa-benchmark-comparison.js:236:    console.log(chalk.yellow('üìä Testing gas efficiency...'));
./templates/aa-tests/aa-benchmark-comparison.js:269:      console.log(`  - ${implDetails.name}: Avg gas: ${avgGas.toLocaleString()} gas`);
./templates/aa-tests/aa-benchmark-comparison.js:280:    console.log(chalk.yellow('üìä Testing security validation robustness...'));
./templates/aa-tests/aa-benchmark-comparison.js:320:      console.log(`  - ${implDetails.name}: Security score: ${avgScore}/10`);
./templates/aa-tests/aa-benchmark-comparison.js:489:    console.log(chalk.green(`üìä Results saved to ${filePath}`));
./templates/aa-tests/aa-benchmark-comparison.js:490:    console.log(chalk.green(`üìù Report saved to ${reportPath}`));
./templates/aa-tests/aa-benchmark-comparison.js:595:    console.log('\n' + chalk.blue('üìä AA Implementation Benchmark Summary'));
./templates/aa-tests/aa-benchmark-comparison.js:596:    console.log('===========================================');
./templates/aa-tests/aa-benchmark-comparison.js:598:    console.log(chalk.green('\nüìù Recommendations'));
./templates/aa-tests/aa-benchmark-comparison.js:600:      console.log(`  - ${chalk.yellow(rec.title)}: ${chalk.cyan(rec.recommendation)}`);
./templates/aa-tests/aa-benchmark-comparison.js:603:    console.log(chalk.green('\nüèÜ Category Winners'));
./templates/aa-tests/aa-benchmark-comparison.js:604:    console.log(`  - Most Gas Efficient: ${chalk.cyan(AA_IMPLEMENTATIONS[comparisons.mostGasEfficient.key].name)}`);
./templates/aa-tests/aa-benchmark-comparison.js:605:    console.log(`  - Most Secure: ${chalk.cyan(AA_IMPLEMENTATIONS[comparisons.mostSecure.key].name)}`);
./templates/aa-tests/aa-benchmark-comparison.js:606:    console.log(`  - Best Bundler Compatibility: ${chalk.cyan(AA_IMPLEMENTATIONS[comparisons.mostCompatible.key].name)}`);
./templates/aa-tests/aa-benchmark-comparison.js:607:    console.log(`  - Cheapest Creation: ${chalk.cyan(AA_IMPLEMENTATIONS[comparisons.cheapestCreation.key].name)}`);
./templates/aa-tests/aa-dashboard-report.js:80:    console.log(chalk.blue('üîç Generating AA Test Dashboard'));
./templates/aa-tests/aa-dashboard-report.js:100:    console.log(chalk.green(`‚úÖ Dashboard generated at ${htmlPath}`));
./templates/aa-tests/aa-social-recovery.test.js:35:  console.log(`Testing social recovery for ${CONFIG.implementation} implementation`);
./templates/aa-tests/aa-social-recovery.test.js:67:    console.log('Test Results:', JSON.stringify(results, null, 2));
./templates/providers/coinbase/coinbase-wallet-template.ts:68:        console.log('Mock Coinbase Wallet request:', params);
./templates/providers/coinbase/coinbase-wallet-template.ts:77:            console.log('Mock switching chain to:', params.params[0].chainId);
./templates/providers/coinbase/coinbase-wallet-template.ts:94:        console.log(`Mock Coinbase Wallet event listener registered: ${event}`);
./templates/providers/coinbase/coinbase-wallet-template.ts:98:        console.log(`Mock Coinbase Wallet event listener removed: ${event}`);
./templates/providers/coinbase/coinbase-wallet-template.ts:108:    console.log('Mock Coinbase Wallet injected:', address);
./templates/providers/coinbase/coinbase-wallet-template.ts:210:      console.log('Disconnecting Coinbase Wallet');
./test-provider-plugin.js:5:  console.log('OUTPUT:', output);
./test-provider-plugin.js:16:console.log('Testing provider plugins directly with commands...');
./test-provider-plugin.js:26:    console.log('\nTesting "create" command with WalletConnect provider:');
./test-provider-plugin.js:29:    console.log('\nTesting "create" command with Coinbase provider:');
./test-provider-plugin.js:32:    console.log('\nAll tests completed!');
./test-provider-plugin.js:39:  console.log(`Running: create ${args.join(' ')}`);
./test-provider-plugin.js:42:  console.log('This would create a test template with:');
./test-provider-plugin.js:43:  console.log(`- Template: ${args[0]}`);
./test-provider-plugin.js:44:  console.log(`- Provider: ${args.find(a => a.startsWith('--provider=')).split('=')[1]}`);
./test-provider-plugin.js:45:  console.log(`- Language: ${args.find(a => a.startsWith('--lang=')).split('=')[1]}`);
./test-provider-plugin.js:49:  console.log(`\nWould import: /utils/providerLoader.js for provider: ${provider}`);
./test-provider-plugin.js:55:    console.log(`\nProvider implementation (${provider}.js):`);
./test-provider-plugin.js:56:    console.log('----------------------------------------');
./test-provider-plugin.js:57:    console.log(providerCode);
./test-provider-plugin.js:58:    console.log('----------------------------------------');
