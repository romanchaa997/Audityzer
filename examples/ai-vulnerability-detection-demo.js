/**
 * AI-Enhanced Vulnerability Detection System Demo
 *
 * This script demonstrates the usage of the AI-Enhanced Vulnerability
 * Detection System with various examples.
 */

const path = require('path');
const fs = require('fs-extra');

// Import the vulnerability detection system
const aiVulnDetection = require('../src/core/ai-vulnerability-detection');

// Sample smart contract for testing
const SAMPLE_CONTRACT = `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VulnerableWallet {
    mapping(address => uint256) public balances;
    address public owner;
    
    constructor() {
        owner = msg.sender;
    }
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // Vulnerable to reentrancy
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        balances[msg.sender] -= amount;
    }
    
    function transferOwnership(address newOwner) public {
        // Missing access control
        owner = newOwner;
    }
    
    function emergencyWithdraw() public {
        // Using tx.origin for authentication
        require(tx.origin == owner, "Not owner");
        payable(msg.sender).transfer(address(this).balance);
    }
}
`;

/**
 * Run the complete demo
 */
async function runDemo() {
  try {
    console.log('='.repeat(80));
    console.log('AI-Enhanced Vulnerability Detection System Demo');
    console.log('='.repeat(80));

    // Create data directories
    const dataDir = path.join(__dirname, 'demo-data');
    await fs.ensureDir(dataDir);

    // Write sample contract to a file for testing
    const sampleContractPath = path.join(dataDir, 'VulnerableWallet.sol');
    await fs.writeFile(sampleContractPath, SAMPLE_CONTRACT);

    console.log('\n1. Initializing the system...');
    const initResult = await aiVulnDetection.initialize({
      dataStoragePath: dataDir,
    });

    if (!initResult.success) {
      throw new Error(`Initialization failed: ${initResult.error}`);
    }

    console.log('✓ System initialized successfully!');
    console.log(
      `  - Initialized modules: ${Object.keys(initResult.initializedModules)
        .filter(m => initResult.initializedModules[m])
        .join(', ')}`
    );

    // Example 1: Analyze a contract for vulnerabilities
    console.log('\n2. Analyzing a smart contract for vulnerabilities...');
    const analysisResult = await aiVulnDetection.analyzeContract({
      contractPath: sampleContractPath,
    });

    console.log('✓ Contract analysis complete!');
    console.log(`  - Vulnerabilities found: ${analysisResult.vulnerabilityCount}`);

    // Display vulnerability details
    if (analysisResult.vulnerabilities && analysisResult.vulnerabilities.length > 0) {
      console.log('\n   Vulnerability Details:');
      console.log('   ---------------------');

      for (const vuln of analysisResult.vulnerabilities) {
        console.log(`   • ${vuln.type} (${vuln.severity})`);
        console.log(`     Confidence: ${(vuln.confidence * 100).toFixed(1)}%`);
        console.log(`     Description: ${vuln.description}`);
        console.log(`     Remediation: ${vuln.remediation}`);

        if (vuln.locations && vuln.locations.length > 0) {
          console.log('     Locations:');
          for (const loc of vuln.locations) {
            console.log(`       - Line ${loc.line}: ${loc.content}`);
          }
        }

        console.log('');
      }
    }

    // Example 2: Collect vulnerability data
    console.log('\n3. Collecting vulnerability data from contract...');
    const collectionResult = await aiVulnDetection.collectData({
      contracts: [sampleContractPath],
      contractDirectories: [],
    });

    console.log('✓ Data collection complete!');
    console.log(`  - Collected ${collectionResult.count || 0} vulnerability findings`);

    // Example 3: Train a model using collected data
    console.log('\n4. Training a vulnerability detection model...');
    console.log('   (Note: This is a simulation in the demo)');

    const trainingResult = await aiVulnDetection.trainModel({
      modelId: 'vuln-classifier-base',
      datasetId: 'demo-dataset', // This would normally be a real dataset ID
    });

    console.log('✓ Model training complete!');
    console.log(`  - Training accuracy: ${(trainingResult.metrics?.accuracy * 100).toFixed(1)}%`);

    // Example 4: Generate a vulnerability report
    console.log('\n5. Generating a vulnerability report...');

    const reportResult = await aiVulnDetection.generateVisualization({
      visualizationType: 'vulnerabilityTypes',
      vulnerabilityData: analysisResult,
      title: 'Vulnerability Analysis Report',
      format: 'html',
    });

    console.log('✓ Report generation complete!');
    console.log(`  - Report ID: ${reportResult.visualizationId}`);

    // Example 5: Create test hooks for integration
    console.log('\n6. Creating test hooks for integration with testing framework...');

    const testHooks = aiVulnDetection.createTestHooks({
      testFramework: 'playwright',
      saveDetectionResults: true,
    });

    console.log('✓ Test hooks created successfully!');
    console.log(`  - Available hooks: ${Object.keys(testHooks).join(', ')}`);

    // Summary
    console.log('\n='.repeat(80));
    console.log('Demo completed successfully!');
    console.log('='.repeat(80));
    console.log('\nSummary of created resources:');
    console.log(`- Data directory: ${dataDir}`);
    console.log(`- Sample contract: ${sampleContractPath}`);
    console.log(`- Vulnerabilities detected: ${analysisResult.vulnerabilityCount}`);

    if (reportResult.success) {
      console.log(`- Visualization created: ${reportResult.type}`);
    }

    console.log('\nTo use this system in your project:');
    console.log('1. Initialize the system with your config');
    console.log('2. Use analyzeContract() to detect vulnerabilities');
    console.log('3. Integrate with your testing using createTestHooks()');
    console.log('4. Generate reports with generateVisualization()');
  } catch (error) {
    console.error('Error in demo:', error);
  }
}

// Run the demo if this script is executed directly
if (require.main === module) {
  runDemo().catch(console.error);
}

module.exports = { runDemo };
