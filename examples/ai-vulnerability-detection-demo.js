/**
 * AI-Enhanced Vulnerability Detection System Demo
 *
 * This script demonstrates the usage of the AI-Enhanced Vulnerability
 * Detection System with various examples.
 */

const path = require('path');
const fs = require('fs-extra');

// Import the vulnerability detection system
const aiVulnDetection = require('../src/core/ai-vulnerability-detection');

// Sample smart contract for testing
const SAMPLE_CONTRACT = `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VulnerableWallet {
    mapping(address => uint256) public balances;
    address public owner;
    
    constructor() {
        owner = msg.sender;
    }
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // Vulnerable to reentrancy
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        balances[msg.sender] -= amount;
    }
    
    function transferOwnership(address newOwner) public {
        // Missing access control
        owner = newOwner;
    }
    
    function emergencyWithdraw() public {
        // Using tx.origin for authentication
        require(tx.origin == owner, "Not owner");
        payable(msg.sender).transfer(address(this).balance);
    }
}
`;

/**
 * Run the complete demo
 */
async function runDemo() {
  try {

    // Create data directories
    const dataDir = path.join(__dirname, 'demo-data');
    await fs.ensureDir(dataDir);

    // Write sample contract to a file for testing
    const sampleContractPath = path.join(dataDir, 'VulnerableWallet.sol');
    await fs.writeFile(sampleContractPath, SAMPLE_CONTRACT);

    const initResult = await aiVulnDetection.initialize({
      dataStoragePath: dataDir,
    });

    if (!initResult.success) {
      throw new Error(`Initialization failed: ${initResult.error}`);
    }

      `  - Initialized modules: ${Object.keys(initResult.initializedModules)
        .filter(m => initResult.initializedModules[m])
        .join(', ')}`
    );

    // Example 1: Analyze a contract for vulnerabilities
    const analysisResult = await aiVulnDetection.analyzeContract({
      contractPath: sampleContractPath,
    });


    // Display vulnerability details
    if (analysisResult.vulnerabilities && analysisResult.vulnerabilities.length > 0) {

      for (const vuln of analysisResult.vulnerabilities) {

        if (vuln.locations && vuln.locations.length > 0) {
          for (const loc of vuln.locations) {
          }
        }

      }
    }

    // Example 2: Collect vulnerability data
    const collectionResult = await aiVulnDetection.collectData({
      contracts: [sampleContractPath],
      contractDirectories: [],
    });


    // Example 3: Train a model using collected data

    const trainingResult = await aiVulnDetection.trainModel({
      modelId: 'vuln-classifier-base',
      datasetId: 'demo-dataset', // This would normally be a real dataset ID
    });


    // Example 4: Generate a vulnerability report

    const reportResult = await aiVulnDetection.generateVisualization({
      visualizationType: 'vulnerabilityTypes',
      vulnerabilityData: analysisResult,
      title: 'Vulnerability Analysis Report',
      format: 'html',
    });


    // Example 5: Create test hooks for integration

    const testHooks = aiVulnDetection.createTestHooks({
      testFramework: 'playwright',
      saveDetectionResults: true,
    });


    // Summary

    if (reportResult.success) {
    }

  } catch (error) {
    console.error('Error in demo:', error);
  }
}

// Run the demo if this script is executed directly
if (require.main === module) {
  runDemo().catch(console.error);
}

module.exports = { runDemo };
