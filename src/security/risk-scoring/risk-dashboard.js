/**
 * Risk Dashboard Generator
 * 
 * This module generates visual risk dashboards with color-coded indicators
 * for smart contract security risks.
 */

class RiskDashboard {
    constructor () {
        this.colorMap = {
            'Critical': '#990000',
            'High': '#ff0000',
            'Medium': '#ff9900',
            'Low': '#ffcc00',
            'None': '#009900'
        };
    }

    /**
     * Generate HTML dashboard for risk assessment
     * @param {Object} riskAssessment - Risk assessment data from RiskScoringEngine
     * @returns {String} - HTML dashboard content
     */
    generateHtmlDashboard(riskAssessment) {
        if (!riskAssessment) {
            return '<div class="error">No risk assessment data available</div>';
        }

        return `
        <div class="risk-dashboard">
            <div class="dashboard-header">
                <h2>Smart Contract Risk Assessment</h2>
                <div class="contract-info">
                    <p><strong>Contract Address:</strong> ${riskAssessment.contractAddress}</p>
                    <p><strong>Assessment Date:</strong> ${new Date(riskAssessment.timestamp).toLocaleString()}</p>
                </div>
            </div>
            
            ${this._generateOverallRiskIndicator(riskAssessment)}
            
            <div class="vulnerability-breakdown">
                <h3>Vulnerability Breakdown</h3>
                ${this._generateVulnerabilityTable(riskAssessment.vulnerabilityScores)}
            </div>
            
            <div class="risk-summary">
                <h3>Risk Summary</h3>
                <p>${riskAssessment.summary}</p>
            </div>
            
            ${this._generateRemediationSection(riskAssessment.vulnerabilityScores)}
            
            <div class="dashboard-footer">
                <p>Generated by Audityzer Risk Scoring Engine</p>
                <p><small>Based on CVSS framework and historical vulnerability data</small></p>
            </div>
        </div>
        
        <style>
            .risk-dashboard {
                font-family: Arial, sans-serif;
                max-width: 1000px;
                margin: 0 auto;
                padding: 20px;
                background: #f9f9f9;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .dashboard-header {
                margin-bottom: 20px;
                border-bottom: 1px solid #eee;
                padding-bottom: 15px;
            }
            .overall-risk {
                display: flex;
                align-items: center;
                margin-bottom: 30px;
                padding: 20px;
                border-radius: 8px;
                background: #f0f0f0;
            }
            .risk-gauge {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 30px;
                color: white;
                font-weight: bold;
                font-size: 24px;
                position: relative;
            }
            .risk-gauge::after {
                content: '';
                position: absolute;
                width: 130px;
                height: 130px;
                border-radius: 50%;
                background: white;
                z-index: 1;
            }
            .risk-gauge-inner {
                z-index: 2;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
            }
            .risk-score {
                font-size: 36px;
                font-weight: bold;
            }
            .risk-label {
                font-size: 16px;
                margin-top: 5px;
            }
            .risk-details {
                flex: 1;
            }
            .vulnerability-breakdown {
                margin-bottom: 30px;
            }
            .vuln-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 15px;
            }
            .vuln-table th, .vuln-table td {
                padding: 12px 15px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .vuln-table th {
                background-color: #f2f2f2;
            }
            .severity-indicator {
                display: inline-block;
                width: 15px;
                height: 15px;
                border-radius: 50%;
                margin-right: 8px;
            }
            .remediation-section {
                margin-bottom: 30px;
            }
            .remediation-item {
                margin-bottom: 20px;
                padding: 15px;
                background: #f0f0f0;
                border-radius: 5px;
                border-left: 5px solid #ccc;
            }
            .remediation-title {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
                font-weight: bold;
            }
            .remediation-list {
                margin-top: 10px;
                padding-left: 20px;
            }
            .dashboard-footer {
                margin-top: 30px;
                padding-top: 15px;
                border-top: 1px solid #eee;
                font-size: 12px;
                color: #666;
                text-align: center;
            }
            .explanation-section {
                margin-top: 10px;
                font-size: 12px;
                color: #666;
                background: #f5f5f5;
                padding: 10px;
                border-radius: 5px;
            }
            .explanation-toggle {
                cursor: pointer;
                color: #0066cc;
                text-decoration: underline;
            }
        </style>
        
        <script>
            function toggleExplanation(id) {
                const element = document.getElementById(id);
                if (element) {
                    element.style.display = element.style.display === 'none' ? 'block' : 'none';
                }
            }
        </script>
        `;
    }

    /**
     * Generate JSON representation of the dashboard data
     * @param {Object} riskAssessment - Risk assessment data
     * @returns {Object} - Dashboard data in JSON format
     */
    generateJsonDashboard(riskAssessment) {
        if (!riskAssessment) {
            return { error: 'No risk assessment data available' };
        }

        return {
            contractAddress: riskAssessment.contractAddress,
            timestamp: riskAssessment.timestamp,
            overallRisk: {
                score: riskAssessment.overallScore,
                level: riskAssessment.severityLevel.label,
                color: riskAssessment.severityLevel.color
            },
            weightedAverageScore: riskAssessment.weightedAverageScore,
            vulnerabilities: riskAssessment.vulnerabilityScores.map(vuln => ({
                title: vuln.originalVulnerability.title,
                type: vuln.originalVulnerability.type,
                severity: {
                    score: vuln.finalScore,
                    level: vuln.severityLevel.label,
                    color: vuln.severityLevel.color
                },
                description: vuln.originalVulnerability.description,
                remediation: vuln.remediation,
                explanation: vuln.explanation
            })),
            summary: riskAssessment.summary
        };
    }

    /**
     * Generate overall risk indicator section
     * @private
     */
    _generateOverallRiskIndicator(riskAssessment) {
        const { overallScore, severityLevel, weightedAverageScore } = riskAssessment;
        const color = this.colorMap[severityLevel.label] || '#666666';

        return `
        <div class="overall-risk">
            <div class="risk-gauge" style="background-color: ${color};">
                <div class="risk-gauge-inner">
                    <div class="risk-score">${overallScore.toFixed(1)}</div>
                    <div class="risk-label">${severityLevel.label}</div>
                </div>
            </div>
            <div class="risk-details">
                <h3>Overall Risk Assessment</h3>
                <p>${riskAssessment.summary}</p>
                <p><strong>Max Risk Score:</strong> ${overallScore.toFixed(1)} (${severityLevel.label})</p>
                <p><strong>Weighted Average Score:</strong> ${weightedAverageScore.toFixed(1)}</p>
                <p class="explanation-toggle" onclick="toggleExplanation('scoring-explanation')">How is this score calculated?</p>
                <div id="scoring-explanation" class="explanation-section" style="display: none;">
                    <p>The overall risk score is calculated using the CVSS framework, which considers both the severity of vulnerabilities and their likelihood of exploitation.</p>
                    <p>The max risk approach takes the highest individual vulnerability score as the overall contract risk, while the weighted average provides a view of the contract's general security posture.</p>
                    <p><strong>Severity Levels:</strong></p>
                    <ul>
                        <li><span class="severity-indicator" style="background-color: #990000;"></span> Critical: 9.0-10.0</li>
                        <li><span class="severity-indicator" style="background-color: #ff0000;"></span> High: 7.0-8.9</li>
                        <li><span class="severity-indicator" style="background-color: #ff9900;"></span> Medium: 4.0-6.9</li>
                        <li><span class="severity-indicator" style="background-color: #ffcc00;"></span> Low: 0.1-3.9</li>
                        <li><span class="severity-indicator" style="background-color: #009900;"></span> None: 0.0</li>
                    </ul>
                </div>
            </div>
        </div>
        `;
    }

    /**
     * Generate vulnerability table
     * @private
     */
    _generateVulnerabilityTable(vulnerabilityScores) {
        if (!vulnerabilityScores || vulnerabilityScores.length === 0) {
            return '<p>No vulnerabilities detected.</p>';
        }

        const tableRows = vulnerabilityScores.map((vuln, index) => {
            const color = this.colorMap[vuln.severityLevel.label] || '#666666';

            return `
            <tr>
                <td>
                    <span class="severity-indicator" style="background-color: ${color};"></span>
                    ${vuln.severityLevel.label}
                </td>
                <td>${vuln.finalScore.toFixed(1)}</td>
                <td>${vuln.originalVulnerability.title}</td>
                <td>${vuln.originalVulnerability.type}</td>
                <td>
                    <span class="explanation-toggle" onclick="toggleExplanation('vuln-explanation-${index}')">Details</span>
                    <div id="vuln-explanation-${index}" class="explanation-section" style="display: none;">
                        <p>${vuln.originalVulnerability.description}</p>
                        <p><strong>Base Score:</strong> ${vuln.baseScore.toFixed(1)}</p>
                        <p><strong>Likelihood Score:</strong> ${vuln.likelihoodScore.toFixed(1)}</p>
                        <p><strong>Final Score:</strong> ${vuln.finalScore.toFixed(1)}</p>
                        <p>${vuln.explanation.baseScoreExplanation}</p>
                        <p>${vuln.explanation.likelihoodExplanation}</p>
                        <p>${vuln.explanation.weightingExplanation}</p>
                    </div>
                </td>
            </tr>
            `;
        }).join('');

        return `
        <table class="vuln-table">
            <thead>
                <tr>
                    <th>Severity</th>
                    <th>Score</th>
                    <th>Vulnerability</th>
                    <th>Type</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                ${tableRows}
            </tbody>
        </table>
        `;
    }

    /**
     * Generate remediation section
     * @private
     */
    _generateRemediationSection(vulnerabilityScores) {
        if (!vulnerabilityScores || vulnerabilityScores.length === 0) {
            return '';
        }

        // Group by severity for prioritized remediation
        const criticalVulns = vulnerabilityScores.filter(v => v.severityLevel.label === 'Critical');
        const highVulns = vulnerabilityScores.filter(v => v.severityLevel.label === 'High');
        const mediumVulns = vulnerabilityScores.filter(v => v.severityLevel.label === 'Medium');
        const lowVulns = vulnerabilityScores.filter(v => v.severityLevel.label === 'Low');

        // Generate remediation items for each vulnerability, prioritized by severity
        const remediationItems = [
            ...this._generateRemediationItems(criticalVulns, 'Critical'),
            ...this._generateRemediationItems(highVulns, 'High'),
            ...this._generateRemediationItems(mediumVulns, 'Medium'),
            ...this._generateRemediationItems(lowVulns, 'Low')
        ].join('');

        return `
        <div class="remediation-section">
            <h3>Recommended Remediations</h3>
            ${remediationItems}
        </div>
        `;
    }

    /**
     * Generate remediation items for a group of vulnerabilities
     * @private
     */
    _generateRemediationItems(vulnerabilities, severityLabel) {
        if (!vulnerabilities || vulnerabilities.length === 0) {
            return [];
        }

        const color = this.colorMap[severityLabel] || '#666666';

        return vulnerabilities.map(vuln => {
            const remediationList = vuln.remediation.map(item =>
                `<li>${item}</li>`
            ).join('');

            return `
            <div class="remediation-item" style="border-left-color: ${color};">
                <div class="remediation-title">
                    <span class="severity-indicator" style="background-color: ${color};"></span>
                    ${vuln.originalVulnerability.title}
                </div>
                <p>${vuln.originalVulnerability.description}</p>
                <div class="remediation-list">
                    <strong>Recommended actions:</strong>
                    <ul>
                        ${remediationList}
                    </ul>
                </div>
            </div>
            `;
        });
    }
}

module.exports = RiskDashboard;