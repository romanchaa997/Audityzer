/**
 * Vulnerability Dashboard Generator
 * Creates interactive HTML dashboards for displaying vulnerability reports
 */

const fs = require('fs-extra');
const path = require('path');
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');

// Configuration
const config = {
  outputDir: path.join(process.cwd(), 'reports', 'visualizations'),
  colors: {
    critical: '#FF2D55',
    high: '#FF9500',
    medium: '#FFCC00',
    low: '#34C759',
    info: '#5AC8FA',
    text: '#333333',
    background: '#FFFFFF',
    gridLines: '#EEEEEE',
    darkMode: {
      text: '#FFFFFF',
      background: '#1A1A1A',
      gridLines: '#333333',
    },
  },
  darkMode: false,
};

/**
 * Ensure the output directory exists
 */
function ensureOutputDir() {
  fs.ensureDirSync(config.outputDir);
}

/**
 * Generate a vulnerability dashboard HTML page from a vulnerability report
 * @param {Object} report - Vulnerability analysis report
 * @param {string} outputPath - Path to save the dashboard HTML
 * @returns {Promise<string>} Path to the generated dashboard
 */
async function generateVulnerabilityDashboard(report, outputPath) {
  ensureOutputDir();

  // Determine output path if not provided
  if (!outputPath) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    outputPath = path.join(config.outputDir, `vulnerability-dashboard-${timestamp}.html`);
  }

  // Generate charts
  const severityChartPath = await generateSeverityDonutChart(report);
  const timelineChartPath = await generateDetectionTimelineChart(report);

  // Create HTML content
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Web3 Security Analysis Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --text-color: ${config.darkMode ? config.colors.darkMode.text : config.colors.text};
      --background-color: ${config.darkMode ? config.colors.darkMode.background : config.colors.background};
      --grid-lines: ${config.darkMode ? config.colors.darkMode.gridLines : config.colors.gridLines};
      --critical-color: ${config.colors.critical};
      --high-color: ${config.colors.high};
      --medium-color: ${config.colors.medium};
      --low-color: ${config.colors.low};
      --info-color: ${config.colors.info};
    }
    
    body {
      background-color: var(--background-color);
      color: var(--text-color);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      padding: 20px;
    }
    
    .dashboard-header {
      margin-bottom: 30px;
      border-bottom: 1px solid var(--grid-lines);
      padding-bottom: 15px;
    }
    
    .vulnerability-card {
      border-radius: 8px;
      margin-bottom: 20px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    
    .card-header-critical { background-color: var(--critical-color); color: white; }
    .card-header-high { background-color: var(--high-color); color: white; }
    .card-header-medium { background-color: var(--medium-color); color: #333; }
    .card-header-low { background-color: var(--low-color); color: white; }
    .card-header-info { background-color: var(--info-color); color: white; }
    
    .chart-container {
      height: 300px;
      max-width: 100%;
      margin-bottom: 30px;
    }
    
    .remediation-section {
      background-color: rgba(240, 240, 240, 0.3);
      border-radius: 8px;
      padding: 15px;
      margin-top: 10px;
    }
    
    .code-block {
      background-color: #272822;
      color: #f8f8f2;
      border-radius: 4px;
      padding: 15px;
      overflow-x: auto;
      font-family: 'Courier New', Courier, monospace;
      margin-top: 10px;
    }
    
    .confidence-badge {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 12px;
      background-color: rgba(255, 255, 255, 0.3);
    }
    
    .stats-card {
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
    
    .vulnerability-table {
      width: 100%;
      margin-top: 20px;
    }
    
    .vulnerability-table th,
    .vulnerability-table td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid var(--grid-lines);
    }
    
    .filter-section {
      margin-bottom: 20px;
      padding: 15px;
      background-color: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
    }
    
    @media (prefers-color-scheme: dark) {
      body:not(.light-mode) {
        --text-color: ${config.colors.darkMode.text};
        --background-color: ${config.colors.darkMode.background};
        --grid-lines: ${config.colors.darkMode.gridLines};
      }
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div class="dashboard-header">
      <div class="row align-items-center">
        <div class="col-md-8">
          <h1>Web3 Security Analysis Dashboard</h1>
          <p class="text-muted">
            Analysis ID: ${report.analysisId || 'N/A'} | 
            Generated: ${new Date(report.timestamp).toLocaleString()} | 
            Contract: ${report.contractName || 'Unknown'}
          </p>
        </div>
        <div class="col-md-4 text-end">
          <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="darkModeToggle" ${config.darkMode ? 'checked' : ''}>
            <label class="form-check-label" for="darkModeToggle">Dark Mode</label>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-lg-4">
        <div class="stats-card">
          <h3>Vulnerability Summary</h3>
          <div class="row mt-3">
            <div class="col-6">
              <div class="d-flex align-items-center mb-3">
                <div style="width: 20px; height: 20px; background-color: var(--critical-color); margin-right: 10px; border-radius: 3px;"></div>
                <span>Critical: ${report.stats?.criticalIssues || 0}</span>
              </div>
              <div class="d-flex align-items-center mb-3">
                <div style="width: 20px; height: 20px; background-color: var(--high-color); margin-right: 10px; border-radius: 3px;"></div>
                <span>High: ${report.stats?.highIssues || 0}</span>
              </div>
              <div class="d-flex align-items-center">
                <div style="width: 20px; height: 20px; background-color: var(--medium-color); margin-right: 10px; border-radius: 3px;"></div>
                <span>Medium: ${report.stats?.mediumIssues || 0}</span>
              </div>
            </div>
            <div class="col-6">
              <div class="d-flex align-items-center mb-3">
                <div style="width: 20px; height: 20px; background-color: var(--low-color); margin-right: 10px; border-radius: 3px;"></div>
                <span>Low: ${report.stats?.lowIssues || 0}</span>
              </div>
              <div class="d-flex align-items-center mb-3">
                <div style="width: 20px; height: 20px; background-color: var(--info-color); margin-right: 10px; border-radius: 3px;"></div>
                <span>Info: ${report.stats?.infoIssues || 0}</span>
              </div>
              <div class="d-flex align-items-center">
                <strong>Total: ${report.stats?.totalIssues || 0}</strong>
              </div>
            </div>
          </div>
        </div>
        
        <div class="chart-container">
          <canvas id="severityChart"></canvas>
        </div>
        
        <div class="filter-section">
          <h4>Filters</h4>
          <div class="mb-3">
            <label class="form-label">Severity</label>
            <select class="form-select" id="severityFilter">
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
              <option value="info">Info</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Vulnerability Type</label>
            <select class="form-select" id="typeFilter">
              <option value="all">All Types</option>
              ${generateVulnerabilityTypeOptions(report)}
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Confidence</label>
            <input type="range" class="form-range" id="confidenceFilter" min="0" max="100" value="50">
            <div class="d-flex justify-content-between">
              <small>50%</small>
              <small id="confidenceValue">50%</small>
              <small>100%</small>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-8">
        <div class="chart-container mb-4">
          <canvas id="timelineChart"></canvas>
        </div>
        
        <h3>Detected Vulnerabilities</h3>
        <div id="vulnerabilitiesContainer">
          ${generateVulnerabilityCards(report)}
        </div>
      </div>
    </div>
    
    ${
      report.remediations
        ? `
    <div class="row mt-4">
      <div class="col-12">
        <h3>Remediation Suggestions</h3>
        <div id="remediationsContainer">
          ${generateRemediationCards(report)}
        </div>
      </div>
    </div>
    `
        : ''
    }
    
    <footer class="mt-5 pt-3 text-center text-muted">
      <p>Generated by Web3 Security Test Kit | ${new Date().toISOString().split('T')[0]}</p>
    </footer>
  </div>
  
  <script>
    // Initialize charts
    document.addEventListener('DOMContentLoaded', function() {
      // Severity Chart
      const severityCtx = document.getElementById('severityChart').getContext('2d');
      const severityChart = new Chart(severityCtx, {
        type: 'doughnut',
        data: {
          labels: ['Critical', 'High', 'Medium', 'Low', 'Info'],
          datasets: [{
            data: [
              ${report.stats?.criticalIssues || 0},
              ${report.stats?.highIssues || 0},
              ${report.stats?.mediumIssues || 0},
              ${report.stats?.lowIssues || 0},
              ${report.stats?.infoIssues || 0}
            ],
            backgroundColor: [
              '${config.colors.critical}',
              '${config.colors.high}',
              '${config.colors.medium}',
              '${config.colors.low}',
              '${config.colors.info}'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: '${config.darkMode ? config.colors.darkMode.text : config.colors.text}'
              }
            },
            title: {
              display: true,
              text: 'Vulnerabilities by Severity',
              color: '${config.darkMode ? config.colors.darkMode.text : config.colors.text}'
            }
          }
        }
      });
      
      // Timeline Chart - Will be populated dynamically
      initTimelineChart();
      
      // Set up filters
      document.getElementById('severityFilter').addEventListener('change', filterVulnerabilities);
      document.getElementById('typeFilter').addEventListener('change', filterVulnerabilities);
      document.getElementById('confidenceFilter').addEventListener('input', function() {
        document.getElementById('confidenceValue').textContent = this.value + '%';
        filterVulnerabilities();
      });
      
      // Dark mode toggle
      document.getElementById('darkModeToggle').addEventListener('change', function() {
        document.body.classList.toggle('light-mode', !this.checked);
        document.body.classList.toggle('dark-mode', this.checked);
        updateChartColors(severityChart, timelineChart, this.checked);
      });
    });
    
    function initTimelineChart() {
      const timelineCtx = document.getElementById('timelineChart').getContext('2d');
      window.timelineChart = new Chart(timelineCtx, {
        type: 'bar',
        data: {
          labels: ${JSON.stringify(generateTimelineLabels(report))},
          datasets: [
            {
              label: 'Critical',
              data: ${JSON.stringify(generateTimelineData(report, 'critical'))},
              backgroundColor: '${config.colors.critical}'
            },
            {
              label: 'High',
              data: ${JSON.stringify(generateTimelineData(report, 'high'))},
              backgroundColor: '${config.colors.high}'
            },
            {
              label: 'Medium',
              data: ${JSON.stringify(generateTimelineData(report, 'medium'))},
              backgroundColor: '${config.colors.medium}'
            },
            {
              label: 'Low',
              data: ${JSON.stringify(generateTimelineData(report, 'low'))},
              backgroundColor: '${config.colors.low}'
            },
            {
              label: 'Info',
              data: ${JSON.stringify(generateTimelineData(report, 'info'))},
              backgroundColor: '${config.colors.info}'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              stacked: true,
              grid: {
                color: '${config.darkMode ? config.colors.darkMode.gridLines : config.colors.gridLines}'
              },
              ticks: {
                color: '${config.darkMode ? config.colors.darkMode.text : config.colors.text}'
              }
            },
            y: {
              stacked: true,
              grid: {
                color: '${config.darkMode ? config.colors.darkMode.gridLines : config.colors.gridLines}'
              },
              ticks: {
                color: '${config.darkMode ? config.colors.darkMode.text : config.colors.text}'
              }
            }
          },
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: '${config.darkMode ? config.colors.darkMode.text : config.colors.text}'
              }
            },
            title: {
              display: true,
              text: 'Vulnerabilities Over Time',
              color: '${config.darkMode ? config.colors.darkMode.text : config.colors.text}'
            }
          }
        }
      });
    }
    
    function updateChartColors(severityChart, timelineChart, darkMode) {
      // Update text and grid colors based on mode
      const textColor = darkMode ? '${config.colors.darkMode.text}' : '${config.colors.text}';
      const gridColor = darkMode ? '${config.colors.darkMode.gridLines}' : '${config.colors.gridLines}';
      
      // Update severity chart
      severityChart.options.plugins.legend.labels.color = textColor;
      severityChart.options.plugins.title.color = textColor;
      severityChart.update();
      
      // Update timeline chart
      timelineChart.options.scales.x.grid.color = gridColor;
      timelineChart.options.scales.y.grid.color = gridColor;
      timelineChart.options.scales.x.ticks.color = textColor;
      timelineChart.options.scales.y.ticks.color = textColor;
      timelineChart.options.plugins.legend.labels.color = textColor;
      timelineChart.options.plugins.title.color = textColor;
      timelineChart.update();
    }
    
    function filterVulnerabilities() {
      const severity = document.getElementById('severityFilter').value;
      const type = document.getElementById('typeFilter').value;
      const confidence = parseInt(document.getElementById('confidenceFilter').value) / 100;
      
      const cards = document.querySelectorAll('.vulnerability-card');
      
      cards.forEach(card => {
        const cardSeverity = card.getAttribute('data-severity');
        const cardType = card.getAttribute('data-type');
        const cardConfidence = parseFloat(card.getAttribute('data-confidence'));
        
        const severityMatch = severity === 'all' || cardSeverity === severity;
        const typeMatch = type === 'all' || cardType === type;
        const confidenceMatch = cardConfidence >= confidence;
        
        if (severityMatch && typeMatch && confidenceMatch) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }
  </script>
</body>
</html>
  `;

  // Write HTML to file
  fs.writeFileSync(outputPath, html, 'utf8');

  return outputPath;
}

/**
 * Generate HTML for vulnerability cards
 * @param {Object} report - Vulnerability report
 * @returns {string} HTML string of vulnerability cards
 */
function generateVulnerabilityCards(report) {
  if (!report.vulnerabilities || report.vulnerabilities.length === 0) {
    return '<div class="alert alert-info">No vulnerabilities detected</div>';
  }

  return report.vulnerabilities
    .map(vuln => {
      const severity = vuln.severity || 'medium';
      const confidence = vuln.confidence || 0.5;
      const confidencePercent = Math.round(confidence * 100);

      return `
      <div class="vulnerability-card" data-severity="${severity}" data-type="${vuln.patternId || 'unknown'}" data-confidence="${confidence}">
        <div class="card-header card-header-${severity}">
          <h5 class="mb-0">${vuln.name || 'Unknown Vulnerability'}</h5>
          <span class="confidence-badge">${confidencePercent}% Confidence</span>
        </div>
        <div class="card-body">
          <p>${vuln.description || 'No description available'}</p>
          
          ${
            vuln.location
              ? `
          <div class="mt-3">
            <h6>Location</h6>
            <p class="mb-1">Line: ${vuln.location.line}, Column: ${vuln.location.column}</p>
            <div class="code-block">
              ${escapeHtml(vuln.location.snippet || vuln.code || 'No code available')}
            </div>
          </div>
          `
              : ''
          }
          
          ${
            vuln.cwe
              ? `
          <div class="mt-3">
            <h6>CWE Reference</h6>
            <p><a href="https://cwe.mitre.org/data/definitions/${vuln.cwe.replace('CWE-', '')}.html" target="_blank">${vuln.cwe}</a></p>
          </div>
          `
              : ''
          }
        </div>
      </div>
    `;
    })
    .join('');
}

/**
 * Generate HTML for remediation cards
 * @param {Object} report - Vulnerability report with remediations
 * @returns {string} HTML string of remediation cards
 */
function generateRemediationCards(report) {
  if (!report.remediations || report.remediations.length === 0) {
    return '<div class="alert alert-info">No remediation suggestions available</div>';
  }

  return report.remediations
    .map(rem => {
      const vulnName = rem.vulnerabilityName || 'Unknown Issue';

      return `
      <div class="card mb-4">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">${rem.title || `Fix for ${vulnName}`}</h5>
        </div>
        <div class="card-body">
          <p>${rem.description || 'No description available'}</p>
          
          ${
            rem.solutions && rem.solutions.length > 0
              ? `
          <h6 class="mt-4">Recommended Solutions</h6>
          <div class="accordion" id="solutions-${rem.remediationId}">
            ${rem.solutions
              .map(
                (solution, idx) => `
              <div class="accordion-item">
                <h2 class="accordion-header">
                  <button class="accordion-button ${idx > 0 ? 'collapsed' : ''}" type="button" data-bs-toggle="collapse" data-bs-target="#solution-${rem.remediationId}-${idx}">
                    ${solution.title || `Solution ${idx + 1}`}
                  </button>
                </h2>
                <div id="solution-${rem.remediationId}-${idx}" class="accordion-collapse collapse ${idx === 0 ? 'show' : ''}" data-bs-parent="#solutions-${rem.remediationId}">
                  <div class="accordion-body">
                    <p>${solution.description || 'No description available'}</p>
                    ${
                      solution.code
                        ? `
                    <h6>Implementation</h6>
                    <div class="code-block">
                      ${escapeHtml(solution.code)}
                    </div>
                    `
                        : ''
                    }
                  </div>
                </div>
              </div>
            `
              )
              .join('')}
          </div>
          `
              : ''
          }
          
          ${
            rem.references && rem.references.length > 0
              ? `
          <h6 class="mt-4">References</h6>
          <ul>
            ${rem.references
              .map(
                ref => `
              <li><a href="${ref.url}" target="_blank">${ref.title}</a></li>
            `
              )
              .join('')}
          </ul>
          `
              : ''
          }
        </div>
      </div>
    `;
    })
    .join('');
}

/**
 * Generate severity donut chart
 * @param {Object} report - Vulnerability report
 * @returns {Promise<string>} Path to generated chart image
 */
async function generateSeverityDonutChart(report) {
  const width = 400;
  const height = 400;
  const canvasRenderService = new ChartJSNodeCanvas({ width, height });

  const data = {
    labels: ['Critical', 'High', 'Medium', 'Low', 'Info'],
    datasets: [
      {
        data: [
          report.stats?.criticalIssues || 0,
          report.stats?.highIssues || 0,
          report.stats?.mediumIssues || 0,
          report.stats?.lowIssues || 0,
          report.stats?.infoIssues || 0,
        ],
        backgroundColor: [
          config.colors.critical,
          config.colors.high,
          config.colors.medium,
          config.colors.low,
          config.colors.info,
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    plugins: {
      legend: {
        position: 'bottom',
      },
      title: {
        display: true,
        text: 'Vulnerabilities by Severity',
      },
    },
  };

  const configuration = {
    type: 'doughnut',
    data,
    options,
  };

  const image = await canvasRenderService.renderToBuffer(configuration);
  const imagePath = path.join(config.outputDir, `severity-chart-${Date.now()}.png`);

  fs.writeFileSync(imagePath, image);
  return imagePath;
}

/**
 * Generate timeline bar chart
 * @param {Object} report - Vulnerability report
 * @returns {Promise<string>} Path to generated chart image
 */
async function generateDetectionTimelineChart(report) {
  const width = 800;
  const height = 400;
  const canvasRenderService = new ChartJSNodeCanvas({ width, height });

  const labels = generateTimelineLabels(report);

  const data = {
    labels,
    datasets: [
      {
        label: 'Critical',
        data: generateTimelineData(report, 'critical'),
        backgroundColor: config.colors.critical,
      },
      {
        label: 'High',
        data: generateTimelineData(report, 'high'),
        backgroundColor: config.colors.high,
      },
      {
        label: 'Medium',
        data: generateTimelineData(report, 'medium'),
        backgroundColor: config.colors.medium,
      },
      {
        label: 'Low',
        data: generateTimelineData(report, 'low'),
        backgroundColor: config.colors.low,
      },
      {
        label: 'Info',
        data: generateTimelineData(report, 'info'),
        backgroundColor: config.colors.info,
      },
    ],
  };

  const options = {
    responsive: true,
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true,
      },
    },
    plugins: {
      legend: {
        position: 'bottom',
      },
      title: {
        display: true,
        text: 'Vulnerabilities Over Time',
      },
    },
  };

  const configuration = {
    type: 'bar',
    data,
    options,
  };

  const image = await canvasRenderService.renderToBuffer(configuration);
  const imagePath = path.join(config.outputDir, `timeline-chart-${Date.now()}.png`);

  fs.writeFileSync(imagePath, image);
  return imagePath;
}

/**
 * Generate timeline labels for chart
 * @param {Object} report - Vulnerability report
 * @returns {Array} Array of timeline labels
 */
function generateTimelineLabels(report) {
  if (!report.vulnerabilities || report.vulnerabilities.length === 0) {
    return ['No Data'];
  }

  // Get unique dates from vulnerability detections
  const dateMap = new Map();

  report.vulnerabilities.forEach(vuln => {
    if (vuln.detectedAt) {
      const date = new Date(vuln.detectedAt).toISOString().split('T')[0];
      dateMap.set(date, true);
    }
  });

  // If no dates found, return current date
  if (dateMap.size === 0) {
    return [new Date().toISOString().split('T')[0]];
  }

  // Sort dates
  return Array.from(dateMap.keys()).sort();
}

/**
 * Generate timeline data for chart
 * @param {Object} report - Vulnerability report
 * @param {string} severity - Severity level to filter by
 * @returns {Array} Array of timeline data points
 */
function generateTimelineData(report, severity) {
  const labels = generateTimelineLabels(report);

  if (labels[0] === 'No Data') {
    return [0];
  }

  // Count vulnerabilities by date and severity
  const data = new Array(labels.length).fill(0);

  report.vulnerabilities.forEach(vuln => {
    if (vuln.detectedAt && vuln.severity === severity) {
      const date = new Date(vuln.detectedAt).toISOString().split('T')[0];
      const index = labels.indexOf(date);
      if (index !== -1) {
        data[index]++;
      }
    }
  });

  return data;
}

/**
 * Generate vulnerability type options for filter dropdown
 * @param {Object} report - Vulnerability report
 * @returns {string} HTML string of option elements
 */
function generateVulnerabilityTypeOptions(report) {
  if (!report.vulnerabilities || report.vulnerabilities.length === 0) {
    return '';
  }

  // Get unique vulnerability types
  const types = new Set();

  report.vulnerabilities.forEach(vuln => {
    const type = vuln.patternId || vuln.type || 'unknown';
    types.add(type);
  });

  // Sort and generate options
  return Array.from(types)
    .sort()
    .map(type => {
      return `<option value="${type}">${formatVulnerabilityType(type)}</option>`;
    })
    .join('');
}

/**
 * Format vulnerability type for display
 * @param {string} type - Vulnerability type ID
 * @returns {string} Formatted type name
 */
function formatVulnerabilityType(type) {
  return type
    .replace(/_/g, ' ')
    .replace(/([A-Z])/g, ' $1')
    .replace(/\s+/g, ' ')
    .trim()
    .toLowerCase()
    .replace(/\b\w/g, c => c.toUpperCase());
}

/**
 * Escape HTML special characters
 * @param {string} unsafe - Unsafe string
 * @returns {string} HTML escaped string
 */
function escapeHtml(unsafe) {
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

module.exports = {
  generateVulnerabilityDashboard,
  generateSeverityDonutChart,
  generateDetectionTimelineChart,
  config,
};
