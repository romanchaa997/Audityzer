/**
 * Vulnerability Templates
 *
 * Pre-defined templates for common Web3 security vulnerabilities.
 * These templates can be used to create standardized bug reports across platforms.
 */

class VulnerabilityTemplates {
  /**
   * Get vulnerability templates by category
   * @param {string} category - Vulnerability category or 'all' for all categories
   * @returns {Object} Vulnerability templates
   */
  static getTemplates(category = 'all') {
    // Get all templates
    const allTemplates = {
      ...this.accessControlTemplates,
      ...this.logicTemplates,
      ...this.reentrancyTemplates,
      ...this.frontRunningTemplates,
      ...this.oracleTemplates,
      ...this.bridgeTemplates,
      ...this.l2Templates,
      ...this.defiTemplates,
      ...this.nftTemplates,
    };

    // Return templates for specific category or all
    if (category === 'all') {
      return allTemplates;
    }

    const categoryMap = {
      'access-control': this.accessControlTemplates,
      logic: this.logicTemplates,
      reentrancy: this.reentrancyTemplates,
      'front-running': this.frontRunningTemplates,
      oracle: this.oracleTemplates,
      bridge: this.bridgeTemplates,
      l2: this.l2Templates,
      defi: this.defiTemplates,
      nft: this.nftTemplates,
    };

    return categoryMap[category] || {};
  }

  /**
   * Access Control Vulnerability Templates
   */
  static get accessControlTemplates() {
    return {
      'missing-access-control': {
        title: 'Missing Access Control on Critical Function',
        description:
          'A critical function that should be restricted to privileged roles is missing access control checks.',
        impact:
          'Attackers can call the function to perform unauthorized actions, potentially leading to theft of funds or compromise of contract integrity.',
        severity: 'high',
        category: 'access-control',
        steps: [
          'Identify the vulnerable function that lacks access control',
          'Create a proof of concept calling the function from an unprivileged account',
          'Demonstrate the impact of the unauthorized access',
        ],
        recommendation:
          'Implement proper access control using modifiers such as `onlyOwner` or a role-based system to restrict function access to authorized addresses only.',
      },
      'incorrect-access-validation': {
        title: 'Incorrect Validation in Access Control Mechanism',
        description:
          'The access control implementation validates permissions incorrectly, allowing unauthorized access.',
        impact:
          'Attackers can bypass the faulty validation to gain unauthorized access to restricted functions.',
        severity: 'critical',
        category: 'access-control',
        steps: [
          'Identify the flawed validation logic in the access control mechanism',
          'Create a proof of concept that exploits the flaw to bypass restrictions',
          'Demonstrate unauthorized access to restricted functionality',
        ],
        recommendation:
          "Fix the validation logic to properly check the caller's permissions against the required role or privilege level.",
      },
      'privileged-role-vulnerability': {
        title: 'Privileged Role Vulnerability',
        description:
          'A privileged role in the contract can perform actions that could potentially compromise the system.',
        impact:
          'If a privileged account is compromised or acts maliciously, critical contract functionality or user funds could be at risk.',
        severity: 'medium',
        category: 'access-control',
        steps: [
          'Identify the privileged role and its capabilities',
          'Demonstrate how these capabilities could be misused',
          'Show the potential impact of such misuse',
        ],
        recommendation:
          'Implement timelocks, multi-signature requirements, or privilege separation to mitigate the risk of a single privileged account compromising the system.',
      },
    };
  }

  /**
   * Logic Vulnerability Templates
   */
  static get logicTemplates() {
    return {
      'logic-error': {
        title: 'Logic Error in Contract Function',
        description:
          'A function in the contract contains a logic error that leads to unexpected behavior.',
        impact:
          'The logic error causes the contract to behave incorrectly, potentially resulting in financial loss or system corruption.',
        severity: 'high',
        category: 'logic',
        steps: [
          'Identify the function with the logic error',
          'Explain the expected vs. actual behavior',
          'Create a proof of concept demonstrating the impact',
        ],
        recommendation:
          'Correct the logic error by fixing the identified faulty condition or calculation.',
      },
      'unchecked-external-call': {
        title: 'Unchecked External Call Result',
        description:
          'The contract makes an external call but does not properly check the result, assuming the call succeeded.',
        impact:
          'Failed external calls can result in incorrect contract state or unexpected behavior, potentially leading to loss of funds.',
        severity: 'medium',
        category: 'logic',
        steps: [
          'Identify the external call that does not check its result',
          'Demonstrate a scenario where the call fails but the contract continues execution',
          'Show the resulting impact on contract state or functionality',
        ],
        recommendation:
          'Always check the return value of external calls and handle failure cases appropriately.',
      },
      'incorrect-calculation': {
        title: 'Incorrect Mathematical Calculation',
        description:
          'A mathematical calculation in the contract produces incorrect results due to bugs, overflow/underflow, or precision issues.',
        impact:
          'The incorrect calculation results in financial discrepancies, potentially causing loss of funds or unfair distribution.',
        severity: 'high',
        category: 'logic',
        steps: [
          'Identify the function containing the incorrect calculation',
          'Explain the mathematical error and expected result',
          'Demonstrate the impact with a proof of concept',
        ],
        recommendation:
          'Fix the mathematical formula and consider using libraries like SafeMath or native overflow protections in Solidity 0.8.x. For precision issues, ensure proper scaling and rounding.',
      },
    };
  }

  /**
   * Reentrancy Vulnerability Templates
   */
  static get reentrancyTemplates() {
    return {
      'single-function-reentrancy': {
        title: 'Single Function Reentrancy Vulnerability',
        description:
          'A function in the contract is vulnerable to reentrancy attacks due to performing external calls before updating the contract state.',
        impact:
          'Attackers can reenter the function and manipulate the contract state, potentially draining funds or corrupting state.',
        severity: 'critical',
        category: 'reentrancy',
        steps: [
          'Identify the vulnerable function making external calls before state updates',
          'Create a malicious contract that reenters the vulnerable function',
          'Demonstrate how the reentrancy can be exploited to drain funds or manipulate state',
        ],
        recommendation:
          "Follow the checks-effects-interactions pattern by performing all state changes before making external calls. Consider using reentrancy guards like OpenZeppelin's ReentrancyGuard.",
      },
      'cross-function-reentrancy': {
        title: 'Cross-Function Reentrancy Vulnerability',
        description:
          'The contract is vulnerable to cross-function reentrancy where an attacker can reenter a different function than the one containing the external call.',
        impact:
          'Attackers can exploit shared state across functions to manipulate the contract in unintended ways.',
        severity: 'critical',
        category: 'reentrancy',
        steps: [
          'Identify the functions sharing state that can be exploited',
          'Create a malicious contract that exploits the relationship between these functions',
          'Demonstrate how an external call in one function can lead to reentrancy in another',
        ],
        recommendation:
          'Use a reentrancy guard for all state-modifying functions that share vulnerable state. Ensure all state updates happen before external calls.',
      },
      'cross-contract-reentrancy': {
        title: 'Cross-Contract Reentrancy Vulnerability',
        description:
          'The contract is vulnerable to reentrancy attacks involving multiple contracts in its ecosystem.',
        impact:
          'Attackers can exploit interactions between contracts to perform unauthorized operations or drain funds.',
        severity: 'critical',
        category: 'reentrancy',
        steps: [
          'Identify the vulnerable interaction pattern between contracts',
          'Create a proof of concept exploiting this cross-contract vulnerability',
          'Demonstrate the impact on the system',
        ],
        recommendation:
          'Use reentrancy guards consistently across all contracts. Consider the entire transaction flow when designing state updates and external calls.',
      },
    };
  }

  /**
   * Front-Running Vulnerability Templates
   */
  static get frontRunningTemplates() {
    return {
      'transaction-ordering-dependence': {
        title: 'Transaction Ordering Dependence (TOD) Vulnerability',
        description:
          'The contract assumes a specific transaction ordering that can be manipulated by miners or other users.',
        impact:
          'Attackers can manipulate transaction ordering to gain unfair advantages, potentially extracting value from other users.',
        severity: 'medium',
        category: 'front-running',
        steps: [
          'Identify the function vulnerable to transaction ordering manipulation',
          'Explain how transaction order affects the outcome',
          'Demonstrate a scenario where front-running results in value extraction',
        ],
        recommendation:
          'Implement commit-reveal schemes, batched auctions, or minimum/maximum bounds to mitigate the impact of transaction ordering.',
      },
      'mev-vulnerability': {
        title: 'Maximal Extractable Value (MEV) Vulnerability',
        description:
          'The contract is vulnerable to MEV extraction due to predictable state changes that can be exploited.',
        impact:
          'Searchers can extract value from the protocol by front-running, sandwiching, or backrunning transactions.',
        severity: 'medium',
        category: 'front-running',
        steps: [
          'Identify the MEV opportunity in the contract',
          'Explain the mechanism that allows value extraction',
          'Demonstrate how a searcher could profit from this vulnerability',
        ],
        recommendation:
          'Consider implementing MEV protection mechanisms such as private mempools, timelock delays, or fair sequencing services.',
      },
      'price-oracle-front-running': {
        title: 'Price Oracle Front-Running Vulnerability',
        description:
          'The contract relies on price oracle updates that can be front-run to gain an unfair advantage.',
        impact:
          'Attackers can exploit knowledge of upcoming price changes to make risk-free profits at the expense of other users.',
        severity: 'high',
        category: 'front-running',
        steps: [
          'Identify the oracle dependency in the contract',
          'Explain how knowledge of pending oracle updates can be exploited',
          'Demonstrate a front-running attack against the oracle-dependent function',
        ],
        recommendation:
          'Use time-weighted average prices (TWAP), multi-block confirmation periods, or flash loan protection to make oracle front-running more difficult.',
      },
    };
  }

  /**
   * Oracle Vulnerability Templates
   */
  static get oracleTemplates() {
    return {
      'oracle-manipulation': {
        title: 'Price Oracle Manipulation Vulnerability',
        description:
          'The price oracle used by the contract can be manipulated to provide incorrect price data.',
        impact:
          'Attackers can exploit the manipulated price to drain funds from the protocol by borrowing at inflated collateral values or liquidating positions unfairly.',
        severity: 'critical',
        category: 'oracle',
        steps: [
          'Identify the vulnerable oracle integration',
          'Explain how the price can be manipulated',
          'Create a proof of concept demonstrating price manipulation',
          'Show the impact on the protocol',
        ],
        recommendation:
          'Use time-weighted average prices (TWAP) over multiple blocks, multiple independent oracles, or volume-weighted price sources. Implement circuit breakers for suspicious price movements.',
      },
      'stale-price-data': {
        title: 'Stale Oracle Price Data Vulnerability',
        description:
          'The contract uses oracle data without checking if it has become stale or outdated.',
        impact:
          'Outdated price information can lead to incorrect valuations, enabling attacks or causing unfair liquidations.',
        severity: 'high',
        category: 'oracle',
        steps: [
          'Identify where the contract uses oracle data without freshness checks',
          'Demonstrate how stale data can be exploited',
          'Show the potential impact on users and the protocol',
        ],
        recommendation:
          'Implement maximum age checks for oracle data. Require frequent updates during periods of high volatility.',
      },
      'flash-loan-oracle-attack': {
        title: 'Flash Loan Oracle Attack Vulnerability',
        description:
          'The contract relies on on-chain price oracles that can be manipulated using flash loans.',
        impact:
          'Attackers can use flash loans to temporarily manipulate prices and exploit the protocol.',
        severity: 'critical',
        category: 'oracle',
        steps: [
          'Identify the on-chain price source vulnerable to manipulation',
          'Explain how a flash loan can be used to manipulate this price',
          'Create a proof of concept using flash loans to exploit the protocol',
        ],
        recommendation:
          'Avoid using on-chain DEX prices directly. Implement TWAP, multiple oracle sources, and flash loan resistance checks.',
      },
    };
  }

  /**
   * Bridge Vulnerability Templates
   */
  static get bridgeTemplates() {
    return {
      'bridge-validation-bypass': {
        title: 'Cross-Chain Bridge Validation Bypass',
        description:
          'The cross-chain bridge implementation has vulnerabilities that allow bypassing validation of cross-chain messages.',
        impact:
          'Attackers can forge cross-chain messages to steal assets or manipulate contract states across chains.',
        severity: 'critical',
        category: 'bridge',
        steps: [
          'Identify the vulnerability in the bridge validation mechanism',
          'Explain how the validation can be bypassed',
          'Demonstrate forged cross-chain messages being accepted',
        ],
        recommendation:
          'Strengthen signature verification, implement multi-signature requirements, enforce proper sequence checking, and add additional validation layers.',
      },
      'bridge-token-theft': {
        title: 'Bridge Token Theft Vulnerability',
        description:
          'The bridge contains vulnerabilities that allow unauthorized withdrawal of locked tokens.',
        impact:
          'Attackers can drain locked tokens from the bridge contract, causing significant financial loss.',
        severity: 'critical',
        category: 'bridge',
        steps: [
          'Identify the vulnerability in token withdrawal mechanism',
          'Explain the attack vector',
          'Demonstrate unauthorized token withdrawal',
        ],
        recommendation:
          'Implement proper access controls, stricter validation of withdrawal requests, timelock mechanisms, and withdrawal limits.',
      },
      'bridge-replay-attack': {
        title: 'Bridge Replay Attack Vulnerability',
        description:
          'The bridge does not properly protect against replay attacks, allowing the same message to be executed multiple times.',
        impact:
          'Attackers can replay valid messages to mint tokens or execute actions multiple times, leading to inflation or state corruption.',
        severity: 'critical',
        category: 'bridge',
        steps: [
          'Identify the lack of proper replay protection',
          'Explain how a valid message can be replayed',
          'Demonstrate multiple executions of the same message',
        ],
        recommendation:
          'Implement nonce tracking for messages, use unique identifiers for each transfer, and maintain a registry of processed message IDs.',
      },
    };
  }

  /**
   * L2 Vulnerability Templates
   */
  static get l2Templates() {
    return {
      'l2-fee-manipulation': {
        title: 'L2 Fee Manipulation Vulnerability',
        description:
          'The contract does not properly handle L2-specific fee mechanisms, making it vulnerable to fee manipulation.',
        impact: 'Attackers can exploit fee mechanics to drain funds or cause denial of service.',
        severity: 'high',
        category: 'l2',
        steps: [
          'Identify the vulnerable fee handling mechanism',
          'Explain how L2 fees differ from L1 and how this creates a vulnerability',
          'Demonstrate exploitation of the fee handling',
        ],
        recommendation:
          'Properly account for L2-specific fee models, implement ceiling/floor for fees, and consider fee subsidization patterns.',
      },
      'l2-sequencer-dependence': {
        title: 'L2 Sequencer Dependence Vulnerability',
        description:
          'The contract makes critical assumptions about sequencer availability or ordering that can be exploited.',
        impact:
          'Malicious sequencers or sequencer downtime can lead to contract exploitation or denial of service.',
        severity: 'medium',
        category: 'l2',
        steps: [
          'Identify the sequencer dependency in the contract',
          'Explain how sequencer behavior affects contract security',
          'Demonstrate exploitation scenarios under different sequencer conditions',
        ],
        recommendation:
          'Implement sequencer failure fallback mechanisms, avoid critical time-dependent logic, and design for graceful degradation during sequencer issues.',
      },
      'l1-l2-message-failure': {
        title: 'L1-L2 Message Handling Failure',
        description:
          'The contract does not properly handle failures in cross-layer messaging, leading to stuck funds or inconsistent state.',
        impact:
          'Users can lose funds or experience indefinite delays when cross-layer messages fail.',
        severity: 'high',
        category: 'l2',
        steps: [
          'Identify the vulnerable cross-layer message handling',
          'Explain the failure scenario and its impact',
          'Demonstrate how funds or state can become stuck',
        ],
        recommendation:
          'Implement proper error handling for cross-layer messages, provide manual recovery mechanisms, and design for message retry capabilities.',
      },
    };
  }

  /**
   * DeFi Vulnerability Templates
   */
  static get defiTemplates() {
    return {
      'flash-loan-attack': {
        title: 'Flash Loan Attack Vulnerability',
        description:
          'The protocol is vulnerable to manipulation using flash loans to exploit temporary state changes.',
        impact:
          'Attackers can use flash loans to temporarily manipulate pools, prices, or other protocol state to extract value.',
        severity: 'critical',
        category: 'defi',
        steps: [
          'Identify the vulnerable component that can be manipulated with flash loans',
          'Explain the attack vector and mechanism',
          'Provide a proof of concept demonstrating the attack',
        ],
        recommendation:
          'Implement manipulation resistance through TIMELOCKs, use time-weighted values, add circuit breakers, and consider flash loan awareness in critical functions.',
      },
      'economic-attack': {
        title: 'Economic Design Vulnerability',
        description:
          "The protocol's economic design contains flaws that can be exploited for profit.",
        impact:
          'Attackers can extract value from the protocol by exploiting economic incentive misalignments.',
        severity: 'high',
        category: 'defi',
        steps: [
          'Identify the economic vulnerability',
          'Explain the incentive misalignment',
          'Demonstrate how the attack works and its profitability',
        ],
        recommendation:
          'Revise economic parameters, align incentives properly, implement caps or limits, and conduct economic simulations to test the design.',
      },
      'sandwich-attack-vulnerability': {
        title: 'Sandwich Attack Vulnerability',
        description:
          'The protocol is vulnerable to sandwich attacks where transactions can be front-run and back-run for profit.',
        impact:
          'Users experience excessive slippage and value extraction when interacting with the protocol.',
        severity: 'medium',
        category: 'defi',
        steps: [
          'Identify the vulnerable trading function',
          'Explain how a sandwich attack would work',
          'Demonstrate the profit potential for attackers and loss for users',
        ],
        recommendation:
          'Implement slippage protection, consider batch auctions or other MEV-resistant mechanisms, and use private mempools when applicable.',
      },
    };
  }

  /**
   * NFT Vulnerability Templates
   */
  static get nftTemplates() {
    return {
      'nft-theft': {
        title: 'NFT Theft Vulnerability',
        description:
          'The NFT contract contains vulnerabilities that allow unauthorized transfer of NFTs.',
        impact: 'Attackers can steal NFTs from legitimate owners without authorization.',
        severity: 'critical',
        category: 'nft',
        steps: [
          'Identify the vulnerability in the transfer mechanism',
          'Explain how authorization can be bypassed',
          'Demonstrate unauthorized NFT transfer',
        ],
        recommendation:
          "Strengthen access controls, implement proper authorization checks, and consider using established patterns like OpenZeppelin's ERC721 implementation.",
      },
      'nft-metadata-manipulation': {
        title: 'NFT Metadata Manipulation Vulnerability',
        description:
          "The NFT metadata can be manipulated or is stored in an insecure way, allowing attackers to change the NFT's properties.",
        impact:
          'The value and identity of NFTs can be changed, potentially causing financial loss to owners.',
        severity: 'high',
        category: 'nft',
        steps: [
          'Identify the vulnerable metadata storage or handling',
          'Explain how metadata can be manipulated',
          'Demonstrate changing metadata without proper authorization',
        ],
        recommendation:
          'Use immutable metadata or secure decentralized storage, implement proper access controls for metadata changes, and consider on-chain commitment to off-chain data.',
      },
      'nft-enumeration-dos': {
        title: 'NFT Enumeration Denial of Service',
        description:
          'The NFT contract implements enumeration (ERC721Enumerable) in a way that can lead to high gas costs and denial of service.',
        impact:
          'As the number of NFTs grows, certain operations become prohibitively expensive, potentially making the contract unusable.',
        severity: 'medium',
        category: 'nft',
        steps: [
          'Identify the vulnerable enumeration implementation',
          'Explain how gas costs scale with number of NFTs',
          'Demonstrate the high gas costs with a large number of NFTs',
        ],
        recommendation:
          'Consider alternative enumeration designs, implement pagination, or use off-chain indexing to reduce gas costs.',
      },
    };
  }
}

exports.VulnerabilityTemplates = VulnerabilityTemplates;
