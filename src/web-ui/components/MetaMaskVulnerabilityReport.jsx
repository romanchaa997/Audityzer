import React, { useState, useEffect } from 'react';
import '../styles/MetaMaskVulnerabilityReport.css';

/**
 * Component to display MetaMask vulnerability test results
 */
const MetaMaskVulnerabilityReport = ({ testResults, onRunTests }) => {
  const [expandedSection, setExpandedSection] = useState(null);
  const [filtering, setFiltering] = useState({ severity: 'all', type: 'all' });

  // Extract unique vulnerability types from results for filtering
  const vulnerabilityTypes = testResults?.vulnerabilities
    ? [...new Set(testResults.vulnerabilities.map(v => v.type))]
    : [];

  // Filter vulnerabilities based on current filtering settings
  const filteredVulnerabilities = testResults?.vulnerabilities
    ? testResults.vulnerabilities.filter(v => {
        const severityMatch =
          filtering.severity === 'all' ||
          v.severity.toLowerCase() === filtering.severity.toLowerCase();
        const typeMatch = filtering.type === 'all' || v.type === filtering.type;
        return severityMatch && typeMatch;
      })
    : [];

  const toggleSection = section => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  // Severity level badge with appropriate color
  const SeverityBadge = ({ severity }) => {
    const severityClass =
      {
        Critical: 'critical',
        High: 'high',
        Medium: 'medium',
        Low: 'low',
        Informational: 'info',
      }[severity] || 'info';

    return <span className={`severity-badge ${severityClass}`}>{severity}</span>;
  };

  // Calculate summary statistics
  const calculateStats = () => {
    if (!testResults?.vulnerabilities) return {};

    const stats = {
      total: testResults.vulnerabilities.length,
      bySeverity: {
        Critical: 0,
        High: 0,
        Medium: 0,
        Low: 0,
        Informational: 0,
      },
      byType: {},
    };

    testResults.vulnerabilities.forEach(v => {
      // Count by severity
      stats.bySeverity[v.severity] = (stats.bySeverity[v.severity] || 0) + 1;

      // Count by type
      stats.byType[v.type] = (stats.byType[v.type] || 0) + 1;
    });

    return stats;
  };

  const stats = calculateStats();

  // Format code snippets with line numbers
  const formatCodeSnippet = snippet => {
    if (!snippet) return null;

    return (
      <div className="code-snippet">
        <pre>
          {snippet.split('\n').map((line, i) => (
            <div key={i} className="code-line">
              <span className="line-number">{i + 1}</span>
              <span className="line-content">{line}</span>
            </div>
          ))}
        </pre>
      </div>
    );
  };

  // If no test results yet, show placeholder
  if (!testResults) {
    return (
      <div className="metamask-vulnerability-report empty-state">
        <h2>MetaMask Vulnerability Scanner</h2>
        <p>Run tests to scan for potential security issues in MetaMask.</p>
        <button className="primary-button" onClick={onRunTests}>
          Run Security Tests
        </button>
      </div>
    );
  }

  return (
    <div className="metamask-vulnerability-report">
      <div className="report-header">
        <h2>MetaMask Security Scan Results</h2>
        <div className="report-summary">
          <div className="summary-item">
            <span className="summary-label">Total Issues:</span>
            <span className="summary-value">{stats.total || 0}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Critical:</span>
            <span className="summary-value critical">{stats.bySeverity?.Critical || 0}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">High:</span>
            <span className="summary-value high">{stats.bySeverity?.High || 0}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Medium:</span>
            <span className="summary-value medium">{stats.bySeverity?.Medium || 0}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Low:</span>
            <span className="summary-value low">{stats.bySeverity?.Low || 0}</span>
          </div>
        </div>
      </div>

      <div className="filters">
        <div className="filter-group">
          <label>Severity:</label>
          <select
            value={filtering.severity}
            onChange={e => setFiltering({ ...filtering, severity: e.target.value })}
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
            <option value="informational">Informational</option>
          </select>
        </div>

        <div className="filter-group">
          <label>Type:</label>
          <select
            value={filtering.type}
            onChange={e => setFiltering({ ...filtering, type: e.target.value })}
          >
            <option value="all">All Types</option>
            {vulnerabilityTypes.map(type => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
        </div>

        <button className="scan-button" onClick={onRunTests}>
          Run New Scan
        </button>
      </div>

      <div className="vulnerabilities-list">
        {filteredVulnerabilities.length === 0 ? (
          <div className="no-vulnerabilities">No vulnerabilities match your filters.</div>
        ) : (
          filteredVulnerabilities.map((vuln, index) => (
            <div
              key={index}
              className={`vulnerability-item ${vuln.severity.toLowerCase()}`}
              onClick={() => toggleSection(`vuln-${index}`)}
            >
              <div className="vulnerability-header">
                <div className="vulnerability-title">
                  <h3>{vuln.type}</h3>
                  <SeverityBadge severity={vuln.severity} />
                </div>
                <div className="vulnerability-location">
                  {vuln.location && <span className="location-badge">{vuln.location}</span>}
                  <span className="expand-icon">
                    {expandedSection === `vuln-${index}` ? '▼' : '▶'}
                  </span>
                </div>
              </div>

              {expandedSection === `vuln-${index}` && (
                <div className="vulnerability-details">
                  <div className="detail-section">
                    <h4>Description</h4>
                    <p>{vuln.description}</p>
                  </div>

                  {vuln.attack_vector && (
                    <div className="detail-section">
                      <h4>Attack Vector</h4>
                      <p>{vuln.attack_vector}</p>
                    </div>
                  )}

                  {vuln.code_snippet && (
                    <div className="detail-section">
                      <h4>Code Snippet</h4>
                      {formatCodeSnippet(vuln.code_snippet)}
                    </div>
                  )}

                  {vuln.recommendation && (
                    <div className="detail-section">
                      <h4>Recommendation</h4>
                      <p>{vuln.recommendation}</p>
                    </div>
                  )}

                  <div className="detail-section">
                    <h4>Bounty Potential</h4>
                    <p>
                      {vuln.severity === 'Critical'
                        ? 'High bounty potential'
                        : vuln.severity === 'High'
                          ? 'Medium-high bounty potential'
                          : vuln.severity === 'Medium'
                            ? 'Medium bounty potential'
                            : 'Low bounty potential'}
                    </p>
                  </div>
                </div>
              )}
            </div>
          ))
        )}
      </div>

      {testResults.summary && (
        <div className="report-overall-summary">
          <h3>Overall Assessment</h3>
          <p>{testResults.summary}</p>
        </div>
      )}
    </div>
  );
};

export default MetaMaskVulnerabilityReport;
