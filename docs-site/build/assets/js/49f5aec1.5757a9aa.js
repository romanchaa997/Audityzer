"use strict";(self.webpackChunkweb3fuzzforge_docs=self.webpackChunkweb3fuzzforge_docs||[]).push([[139],{1299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"advanced-guides","title":"Advanced Guides","description":"Fuzzing Web3 Applications","source":"@site/docs/advanced-guides.md","sourceDirName":".","slug":"/advanced-guides","permalink":"/docs/advanced-guides","draft":false,"unlisted":false,"editUrl":"https://github.com/web3fuzzforge/web3-security-test-kit/edit/main/docs-site/docs/advanced-guides.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Commands Reference","permalink":"/docs/commands-reference"},"next":{"title":"Real Wallet Integration","permalink":"/docs/real-wallet-integration"}}');var i=t(4848),l=t(8453);const r={sidebar_position:5},a="Advanced Guides",d={},o=[{value:"Fuzzing Web3 Applications",id:"fuzzing-web3-applications",level:2},{value:"Wallet Support",id:"wallet-support",level:2},{value:"Self-Contained Tests",id:"self-contained-tests",level:2},{value:"Troubleshooting UI Visibility",id:"troubleshooting-ui-visibility",level:2},{value:"Cross-Chain Testing",id:"cross-chain-testing",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"advanced-guides",children:"Advanced Guides"})}),"\n",(0,i.jsx)(n.h2,{id:"fuzzing-web3-applications",children:"Fuzzing Web3 Applications"}),"\n",(0,i.jsx)(n.p,{children:"Web3FuzzForge includes powerful fuzzing capabilities to discover edge cases and potential vulnerabilities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"web3fuzzforge generate tx --wallet metamask --out ./tests/security-tx-test.js --fuzz\n"})}),"\n",(0,i.jsx)(n.p,{children:"This generates a test with fuzzing capabilities that will:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test different input combinations"}),"\n",(0,i.jsx)(n.li,{children:"Try various transaction parameters"}),"\n",(0,i.jsx)(n.li,{children:"Attempt invalid state transitions"}),"\n",(0,i.jsx)(n.li,{children:"Test error handling paths"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more targeted fuzzing, use the dedicated ",(0,i.jsx)(n.code,{children:"fuzz"})," command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"web3fuzzforge fuzz --target=transaction-flow --wallet=metamask\n"})}),"\n",(0,i.jsx)(n.h2,{id:"wallet-support",children:"Wallet Support"}),"\n",(0,i.jsx)(n.p,{children:"Web3FuzzForge supports multiple wallets for comprehensive testing:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Wallet"}),(0,i.jsx)(n.th,{children:"Support Level"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MetaMask"}),(0,i.jsx)(n.td,{children:"Full"}),(0,i.jsx)(n.td,{children:"Complete automation of all interactions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Coinbase Wallet"}),(0,i.jsx)(n.td,{children:"Full"}),(0,i.jsx)(n.td,{children:"Complete support for all operations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Phantom"}),(0,i.jsx)(n.td,{children:"Full"}),(0,i.jsx)(n.td,{children:"Complete support for Solana dApps"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"WalletConnect"}),(0,i.jsx)(n.td,{children:"Partial"}),(0,i.jsx)(n.td,{children:"Connection and basic transactions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Rabby"}),(0,i.jsx)(n.td,{children:"Partial"}),(0,i.jsx)(n.td,{children:"Basic support for common operations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Trust Wallet"}),(0,i.jsx)(n.td,{children:"Basic"}),(0,i.jsx)(n.td,{children:"Connection testing only"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Each wallet requires different automation approaches. See the wallet-specific guides for detailed information:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"real-wallet-integration",children:"MetaMask Integration Guide"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"mobile-wallets",children:"Coinbase Wallet Guide"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"mobile-wallets",children:"Phantom Wallet Guide"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"self-contained-tests",children:"Self-Contained Tests"}),"\n",(0,i.jsx)(n.p,{children:"For more reliable testing that doesn't depend on external servers, use self-contained tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Generate a self-contained test\r\nweb3fuzzforge generate connect --wallet metamask --out ./tests/self-contained.test.js --self-contained\r\n\r\n# Run the test\r\n$env:SELF_CONTAINED="true"; npx playwright test tests/self-contained.test.js --headed\n'})}),"\n",(0,i.jsx)(n.p,{children:"Self-contained tests provide:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No need for mock servers"}),"\n",(0,i.jsx)(n.li,{children:"Faster test execution"}),"\n",(0,i.jsx)(n.li,{children:"More consistent results"}),"\n",(0,i.jsx)(n.li,{children:"Environment-independent operation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting-ui-visibility",children:"Troubleshooting UI Visibility"}),"\n",(0,i.jsx)(n.p,{children:"If you encounter UI visibility issues, use these specialized techniques:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { forceShowWalletUI } = require('./utils/wallet-snapshot');\r\n\r\n// Use direct content checking instead of visibility assertions\r\nconst walletAddress = await page.locator('.wallet-address').textContent();\r\nexpect(walletAddress).toContain('0x123...');\r\n\r\n// Force UI elements to show programmatically\r\nawait page.evaluate(() => {\r\n  const walletInfo = document.getElementById('wallet-info');\r\n  if (walletInfo) walletInfo.style.display = 'block';\r\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cross-chain-testing",children:"Cross-Chain Testing"}),"\n",(0,i.jsx)(n.p,{children:"For testing dApps that support multiple chains:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"web3fuzzforge generate tx --wallet metamask --out ./tests/cross-chain.test.js --chains=ethereum,polygon,arbitrum\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will generate tests that verify your dApp functions correctly when:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Switching between networks"}),"\n",(0,i.jsx)(n.li,{children:"Processing cross-chain transactions"}),"\n",(0,i.jsx)(n.li,{children:"Handling different RPC endpoints"}),"\n",(0,i.jsx)(n.li,{children:"Displaying chain-specific information"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"cross-chain-testing",children:"Cross-Chain Testing Guide"})," for more details."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},l=s.createContext(i);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);