"use strict";(self.webpackChunkweb3fuzzforge_docs=self.webpackChunkweb3fuzzforge_docs||[]).push([[769],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const s={},l=i.createContext(s);function a(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:t},e.children)}},9954:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"real-wallet-integration","title":"Real Wallet Integration","description":"While Web3FuzzForge primarily uses mocked wallet behavior for testing, there are scenarios where testing with real wallets provides additional coverage and security verification.","source":"@site/docs/real-wallet-integration.md","sourceDirName":".","slug":"/real-wallet-integration","permalink":"/docs/real-wallet-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/web3fuzzforge/web3-security-test-kit/edit/main/docs-site/docs/real-wallet-integration.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Advanced Guides","permalink":"/docs/advanced-guides"},"next":{"title":"Mobile Wallet Testing","permalink":"/docs/mobile-wallets"}}');var s=n(4848),l=n(8453);const a={sidebar_position:1},r="Real Wallet Integration",o={},c=[{value:"Why Test with Real Wallets",id:"why-test-with-real-wallets",level:2},{value:"Approaches to Real Wallet Testing",id:"approaches-to-real-wallet-testing",level:2},{value:"1. Controlled Test Wallets",id:"1-controlled-test-wallets",level:3},{value:"2. Sandboxed Environment",id:"2-sandboxed-environment",level:3},{value:"3. Hybrid Testing Approach",id:"3-hybrid-testing-approach",level:3},{value:"Configuring Real Wallet Tests",id:"configuring-real-wallet-tests",level:2},{value:"MetaMask Integration",id:"metamask-integration",level:3},{value:"WalletConnect Integration",id:"walletconnect-integration",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Future Improvements",id:"future-improvements",level:2},{value:"Community Examples",id:"community-examples",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"real-wallet-integration",children:"Real Wallet Integration"})}),"\n",(0,s.jsx)(t.p,{children:"While Web3FuzzForge primarily uses mocked wallet behavior for testing, there are scenarios where testing with real wallets provides additional coverage and security verification."}),"\n",(0,s.jsx)(t.h2,{id:"why-test-with-real-wallets",children:"Why Test with Real Wallets"}),"\n",(0,s.jsx)(t.p,{children:"Testing with real wallets provides several benefits:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Complete Validation"}),": Ensure your application works with actual wallet implementations, not just mocks"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"UI/UX Verification"}),": Test the complete user experience including wallet popups and interfaces"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"RPC Communication"}),": Verify actual blockchain communication patterns"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Security Boundary Testing"}),": Check cross-domain security measures in production wallets"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Version Compatibility"}),": Ensure compatibility with different wallet versions"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"approaches-to-real-wallet-testing",children:"Approaches to Real Wallet Testing"}),"\n",(0,s.jsx)(t.h3,{id:"1-controlled-test-wallets",children:"1. Controlled Test Wallets"}),"\n",(0,s.jsx)(t.p,{children:"Create dedicated test wallets with:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Minimal funds on test networks"}),"\n",(0,s.jsx)(t.li,{children:"No access to production assets"}),"\n",(0,s.jsx)(t.li,{children:"Clear separation from development wallets"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"test('Test with actual MetaMask wallet', async ({ page, context }) => {\n  // Launch browser with MetaMask extension installed\n  // Extension path needs to be configured in playwright.config.js\n\n  // Navigate to your MetaMask setup page\n  await page.goto('chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/home.html');\n\n  // Import test wallet using seed phrase\n  await page.fill('#seed-phrase', 'your test wallet seed phrase');\n\n  // Set test wallet password\n  await page.fill('#password', 'your-secure-test-password');\n\n  // Continue with test...\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"2-sandboxed-environment",children:"2. Sandboxed Environment"}),"\n",(0,s.jsx)(t.p,{children:"Set up an isolated testing environment:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Docker containers with browser + wallet extensions"}),"\n",(0,s.jsx)(t.li,{children:"Virtual machines with controlled network access"}),"\n",(0,s.jsx)(t.li,{children:"CI/CD pipeline with ephemeral wallets"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"3-hybrid-testing-approach",children:"3. Hybrid Testing Approach"}),"\n",(0,s.jsx)(t.p,{children:"Combine real and mocked wallet testing:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Use mocks for fast unit and integration tests"}),"\n",(0,s.jsx)(t.li,{children:"Use real wallets for key security verification tests"}),"\n",(0,s.jsx)(t.li,{children:"Use real wallets for final acceptance tests"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"configuring-real-wallet-tests",children:"Configuring Real Wallet Tests"}),"\n",(0,s.jsx)(t.h3,{id:"metamask-integration",children:"MetaMask Integration"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// In your playwright.config.js\nconst config = {\n  use: {\n    // Launch options to include the MetaMask extension\n    launchOptions: {\n      args: [\n        `--disable-extensions-except=${path.join(__dirname, 'path/to/metamask')}`,\n        `--load-extension=${path.join(__dirname, 'path/to/metamask')}`,\n      ],\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(t.h3,{id:"walletconnect-integration",children:"WalletConnect Integration"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"test('Test with real WalletConnect', async ({ page }) => {\n  // Navigate to your dApp\n  await page.goto('https://your-dapp.com');\n\n  // Click connect button to trigger WalletConnect\n  await page.click('#connect-wallet');\n\n  // Get WalletConnect QR code\n  const qrCodeData = await page.evaluate(() => {\n    return document.querySelector('.walletconnect-qrcode').getAttribute('data-qrcode');\n  });\n\n  // In a real test, you'd use a QR code scanner or direct URI handling\n  // For testing purposes, you can use a mobile device automation tool\n  // to scan this QR and confirm the connection\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(t.p,{children:"When testing with real wallets:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Never use production wallets"})," or wallets with real assets"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Create specific test wallets"})," with minimal permissions"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Use test networks"})," like Sepolia, Mumbai, or Devnet"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Rotate test wallet credentials"})," regularly"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Store test wallet credentials securely"})," using vault solutions or CI/CD secrets"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Limit network access"})," to prevent accidental interactions with production networks"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,s.jsx)(t.p,{children:"We're working on the following improvements for real wallet testing:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Automated wallet initialization"}),": Scripts to create and fund test wallets automatically"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Docker images"})," with pre-installed wallets for consistent testing environments"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Mobile wallet automation"})," for both Android and iOS testing"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"WalletConnect QR code handling"})," for automated WalletConnect tests"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Multi-chain test suite"})," for cross-chain application testing"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"community-examples",children:"Community Examples"}),"\n",(0,s.jsxs)(t.p,{children:["Check out our ",(0,s.jsx)(t.a,{href:"community-test-examples",children:"community-test-examples"})," section for contributed examples of real wallet testing setups from the Web3FuzzForge community."]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);