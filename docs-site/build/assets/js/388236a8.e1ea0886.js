"use strict";(self.webpackChunkweb3fuzzforge_docs=self.webpackChunkweb3fuzzforge_docs||[]).push([[444],{5215:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"wallet-state-snapshots","title":"Wallet State Snapshot Framework","description":"The wallet state snapshot framework allows you to save and restore wallet states during tests. This feature makes it easier to test complex scenarios without repeating setup steps.","source":"@site/docs/wallet-state-snapshots.md","sourceDirName":".","slug":"/wallet-state-snapshots","permalink":"/docs/wallet-state-snapshots","draft":false,"unlisted":false,"editUrl":"https://github.com/web3fuzzforge/web3-security-test-kit/edit/main/docs-site/docs/wallet-state-snapshots.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"mainSidebar","previous":{"title":"Mobile Wallet Testing","permalink":"/docs/mobile-wallets"},"next":{"title":"Cross-Chain Testing","permalink":"/docs/cross-chain-testing"}}');var n=a(4848),l=a(8453);const i={sidebar_position:7},r="Wallet State Snapshot Framework",o={},c=[{value:"Key Functions",id:"key-functions",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"saveWalletState",id:"savewalletstate",level:3},{value:"restoreWalletState",id:"restorewalletstate",level:3},{value:"setupWalletState",id:"setupwalletstate",level:3},{value:"Benefits",id:"benefits",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Test Transaction Flows",id:"test-transaction-flows",level:3},{value:"Test Network Switching",id:"test-network-switching",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"wallet-state-snapshot-framework",children:"Wallet State Snapshot Framework"})}),"\n",(0,n.jsx)(t.p,{children:"The wallet state snapshot framework allows you to save and restore wallet states during tests. This feature makes it easier to test complex scenarios without repeating setup steps."}),"\n",(0,n.jsx)(t.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"saveWalletState(page, customData?)"}),": Captures the current state of the wallet"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"restoreWalletState(page, state)"}),": Restores a previously saved wallet state"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"setupWalletState(page, options?)"}),": Sets up a wallet with specific options and returns its state"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"const { test } = require('@playwright/test');\nconst { saveWalletState, restoreWalletState, setupWalletState } = require('../utils/walletMocks');\n\ntest('Test with wallet state snapshots', async ({ page }) => {\n  // Set up initial wallet state (automatically connects)\n  const initialState = await setupWalletState(page, {\n    chainId: '0x1', // Ethereum Mainnet\n  });\n\n  // Perform some actions that change the wallet state\n  await page.goto('https://your-dapp.com');\n  await page.click('#connect-button');\n\n  // Save the current state with custom data\n  const connectedState = await saveWalletState(page, {\n    isConnected: true,\n    setupComplete: true,\n  });\n\n  // Later, restore to this exact state\n  await restoreWalletState(page, connectedState);\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,n.jsx)(t.h3,{id:"savewalletstate",children:"saveWalletState"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"function saveWalletState(page: Page, customData?: Record<string, any>): Promise<WalletState>;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Captures the current wallet state including:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Selected address"}),"\n",(0,n.jsx)(t.li,{children:"Chain ID"}),"\n",(0,n.jsx)(t.li,{children:"Connected status"}),"\n",(0,n.jsx)(t.li,{children:"Balance information"}),"\n",(0,n.jsx)(t.li,{children:"Custom data provided"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"restorewalletstate",children:"restoreWalletState"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"function restoreWalletState(page: Page, state: WalletState): Promise<void>;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Restores all aspects of the wallet state:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Reconnects if needed"}),"\n",(0,n.jsx)(t.li,{children:"Sets the correct chain ID"}),"\n",(0,n.jsx)(t.li,{children:"Restores address selection"}),"\n",(0,n.jsx)(t.li,{children:"Makes custom data available"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"setupwalletstate",children:"setupWalletState"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"function setupWalletState(\n  page: Page,\n  options?: {\n    address?: string;\n    chainId?: string;\n    balance?: string;\n    connected?: boolean;\n  }\n): Promise<WalletState>;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a fresh wallet state with specified options."}),"\n",(0,n.jsx)(t.h2,{id:"benefits",children:"Benefits"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Speeds up test runs by avoiding repetitive setup"}),"\n",(0,n.jsx)(t.li,{children:"Creates reusable checkpoints for complex test flows"}),"\n",(0,n.jsx)(t.li,{children:"Allows testing wallet state transitions precisely"}),"\n",(0,n.jsx)(t.li,{children:"Supports custom data storage with wallet states"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,n.jsx)(t.h3,{id:"test-transaction-flows",children:"Test Transaction Flows"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"// Set up initial state\nawait setupWalletState(page);\n\n// Complete a transaction\nawait page.click('#send-button');\nawait page.click('#confirm-button');\n\n// Save post-transaction state\nconst postTxState = await saveWalletState(page, { txComplete: true });\n\n// Reset to fresh state for next test\nawait setupWalletState(page);\n\n// ... or restore the post-transaction state\nawait restoreWalletState(page, postTxState);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"test-network-switching",children:"Test Network Switching"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"// Start on Ethereum Mainnet\nconst mainnetState = await setupWalletState(page, { chainId: '0x1' });\n\n// Switch to Polygon\nawait page.evaluate(async () => {\n  await window.ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: '0x89' }],\n  });\n});\n\n// Save Polygon state\nconst polygonState = await saveWalletState(page);\n\n// Restore back to Mainnet instantly\nawait restoreWalletState(page, mainnetState);\n"})})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var s=a(6540);const n={},l=s.createContext(n);function i(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);