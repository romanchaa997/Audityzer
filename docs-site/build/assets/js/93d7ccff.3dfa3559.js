"use strict";(self.webpackChunkweb3fuzzforge_docs=self.webpackChunkweb3fuzzforge_docs||[]).push([[370],{7118:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"cross-chain-testing","title":"Cross-Chain Testing","description":"As multi-chain dApps become increasingly common, comprehensive testing across different blockchain networks is critical. Web3FuzzForge provides tools and patterns for testing cross-chain functionality.","source":"@site/docs/cross-chain-testing.md","sourceDirName":".","slug":"/cross-chain-testing","permalink":"/docs/cross-chain-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/web3fuzzforge/web3-security-test-kit/edit/main/docs-site/docs/cross-chain-testing.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Wallet State Snapshot Framework","permalink":"/docs/wallet-state-snapshots"},"next":{"title":"Security Testing","permalink":"/docs/security-testing"}}');var a=t(4848),s=t(8453);const r={sidebar_position:3},o="Cross-Chain Testing",c={},l=[{value:"Cross-Chain Testing Overview",id:"cross-chain-testing-overview",level:2},{value:"Supported Blockchain Networks",id:"supported-blockchain-networks",level:2},{value:"Test Templates for Multi-Chain dApps",id:"test-templates-for-multi-chain-dapps",level:2},{value:"Network Switching Tests",id:"network-switching-tests",level:3},{value:"Cross-Chain State Consistency",id:"cross-chain-state-consistency",level:3},{value:"Bridge Transaction Testing",id:"bridge-transaction-testing",level:3},{value:"Chain-Specific Considerations",id:"chain-specific-considerations",level:2},{value:"EVM Chain Testing",id:"evm-chain-testing",level:3},{value:"Non-EVM Chain Testing",id:"non-evm-chain-testing",level:3},{value:"Best Practices for Cross-Chain Testing",id:"best-practices-for-cross-chain-testing",level:2},{value:"Community Contribution",id:"community-contribution",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"cross-chain-testing",children:"Cross-Chain Testing"})}),"\n",(0,a.jsx)(n.p,{children:"As multi-chain dApps become increasingly common, comprehensive testing across different blockchain networks is critical. Web3FuzzForge provides tools and patterns for testing cross-chain functionality."}),"\n",(0,a.jsx)(n.h2,{id:"cross-chain-testing-overview",children:"Cross-Chain Testing Overview"}),"\n",(0,a.jsx)(n.p,{children:"Cross-chain testing involves verifying that your application functions correctly when:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Switching between different blockchain networks"}),"\n",(0,a.jsx)(n.li,{children:"Processing transactions on multiple chains simultaneously"}),"\n",(0,a.jsx)(n.li,{children:"Handling cross-chain bridging operations"}),"\n",(0,a.jsx)(n.li,{children:"Maintaining consistent state across multiple networks"}),"\n",(0,a.jsx)(n.li,{children:"Supporting wallets with varying chain capabilities"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"supported-blockchain-networks",children:"Supported Blockchain Networks"}),"\n",(0,a.jsx)(n.p,{children:"Web3FuzzForge test templates can be configured for multiple networks:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Network"}),(0,a.jsx)(n.th,{children:"Chain ID"}),(0,a.jsx)(n.th,{children:"Test Networks"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Ethereum"}),(0,a.jsx)(n.td,{children:"0x1"}),(0,a.jsx)(n.td,{children:"Sepolia (0xaa36a7), Goerli (0x5)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Polygon"}),(0,a.jsx)(n.td,{children:"0x89"}),(0,a.jsx)(n.td,{children:"Mumbai (0x13881)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Arbitrum"}),(0,a.jsx)(n.td,{children:"0xa4b1"}),(0,a.jsx)(n.td,{children:"Arbitrum Goerli (0x66eed)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Optimism"}),(0,a.jsx)(n.td,{children:"0xa"}),(0,a.jsx)(n.td,{children:"Optimism Goerli (0x1a4)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"BNB Chain"}),(0,a.jsx)(n.td,{children:"0x38"}),(0,a.jsx)(n.td,{children:"BSC Testnet (0x61)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Avalanche"}),(0,a.jsx)(n.td,{children:"0xa86a"}),(0,a.jsx)(n.td,{children:"Fuji (0xa869)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Solana"}),(0,a.jsx)(n.td,{children:"N/A"}),(0,a.jsx)(n.td,{children:"Devnet, Testnet"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"test-templates-for-multi-chain-dapps",children:"Test Templates for Multi-Chain dApps"}),"\n",(0,a.jsx)(n.h3,{id:"network-switching-tests",children:"Network Switching Tests"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"test('Test network switching', async ({ page }) => {\n  // Set up initial wallet state on Ethereum\n  await setupWalletState(page, {\n    chainId: '0x1', // Ethereum Mainnet\n  });\n\n  // Verify we're on Ethereum\n  const initialChainId = await page.evaluate(() => {\n    return window.ethereum.request({ method: 'eth_chainId' });\n  });\n  expect(initialChainId).toBe('0x1');\n\n  // Switch to Polygon\n  await page.evaluate(() => {\n    return window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0x89' }], // Polygon\n    });\n  });\n\n  // Verify the app handles the network switch\n  await page.waitForSelector('[data-testid=\"network-polygon\"]');\n\n  // Verify chain ID update\n  const newChainId = await page.evaluate(() => {\n    return window.ethereum.request({ method: 'eth_chainId' });\n  });\n  expect(newChainId).toBe('0x89');\n\n  // Test app functionality on the new network\n  await page.click('#transaction-button');\n  // ... Continue testing on Polygon\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cross-chain-state-consistency",children:"Cross-Chain State Consistency"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"test('Test cross-chain state consistency', async ({ page }) => {\n  // Set up wallet state\n  const walletState = await setupWalletState(page);\n\n  // Interact with app on Ethereum\n  await page.evaluate(() => {\n    return window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0x1' }],\n    });\n  });\n\n  // Record application state\n  const ethereumState = await page.evaluate(() => {\n    return {\n      balance: document.querySelector('#balance').textContent,\n      nfts: document.querySelector('#nft-count').textContent,\n    };\n  });\n\n  // Switch to Polygon\n  await page.evaluate(() => {\n    return window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0x89' }],\n    });\n  });\n\n  // Wait for app to update\n  await page.waitForSelector('[data-testid=\"network-polygon\"]');\n\n  // Compare relevant state that should be consistent\n  const polygonState = await page.evaluate(() => {\n    return {\n      userAddress: document.querySelector('#user-address').textContent,\n      // Other relevant state to compare\n    };\n  });\n\n  // Verify address stays consistent across chains\n  expect(polygonState.userAddress).toBe(walletState.selectedAddress);\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bridge-transaction-testing",children:"Bridge Transaction Testing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"test('Test cross-chain bridge transaction', async ({ page }) => {\n  // Start on Ethereum\n  await setupWalletState(page, { chainId: '0x1' });\n\n  // Navigate to bridge UI\n  await page.goto('https://your-dapp.com/bridge');\n\n  // Configure source chain (Ethereum)\n  await page.selectOption('#source-chain', 'ethereum');\n\n  // Configure destination chain (Polygon)\n  await page.selectOption('#destination-chain', 'polygon');\n\n  // Input amount to bridge\n  await page.fill('#bridge-amount', '0.01');\n\n  // Initiate bridge transaction\n  await page.click('#bridge-button');\n\n  // Approve transaction in wallet\n  await page.click('[data-testid=\"confirm-transaction\"]');\n\n  // Verify transaction started\n  await page.waitForSelector('[data-testid=\"transaction-pending\"]');\n\n  // Mock transaction completion (in real testing, you might wait longer or use events)\n  await page.evaluate(() => {\n    // Simulating a completed transaction\n    document\n      .querySelector('[data-testid=\"transaction-pending\"]')\n      .setAttribute('data-testid', 'transaction-complete');\n  });\n\n  // Verify bridge transaction completes\n  await page.waitForSelector('[data-testid=\"transaction-complete\"]');\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"chain-specific-considerations",children:"Chain-Specific Considerations"}),"\n",(0,a.jsx)(n.h3,{id:"evm-chain-testing",children:"EVM Chain Testing"}),"\n",(0,a.jsx)(n.p,{children:"For Ethereum Virtual Machine (EVM) compatible chains:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Helper function to test on multiple EVM chains\nasync function testOnChain(page, chainId, chainName) {\n  // Switch to specified chain\n  await page.evaluate(id => {\n    return window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: id }],\n    });\n  }, chainId);\n\n  // Verify chain switch\n  const currentChain = await page.evaluate(() => {\n    return window.ethereum.request({ method: 'eth_chainId' });\n  });\n  expect(currentChain).toBe(chainId);\n\n  console.log(`Testing on ${chainName}...`);\n\n  // App-specific testing on this chain\n  // ...\n}\n\ntest('Multi-chain EVM test', async ({ page }) => {\n  await setupWalletState(page);\n\n  // Test on multiple EVM chains\n  await testOnChain(page, '0x1', 'Ethereum Mainnet');\n  await testOnChain(page, '0x89', 'Polygon');\n  await testOnChain(page, '0xa4b1', 'Arbitrum');\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"non-evm-chain-testing",children:"Non-EVM Chain Testing"}),"\n",(0,a.jsx)(n.p,{children:"For non-EVM chains like Solana:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"test('Test Solana interactions', async ({ page }) => {\n  // Set up Phantom wallet with Solana\n  await setupPhantomWallet(page, { network: 'mainnet-beta' });\n\n  // Navigate to Solana dApp\n  await page.goto('https://your-solana-dapp.com');\n\n  // Connect Phantom wallet\n  await page.click('#connect-wallet');\n  await page.click('[data-testid=\"phantom-connect\"]');\n\n  // Verify connection to Phantom\n  const isConnected = await page.evaluate(() => {\n    return window.solana && window.solana.isConnected;\n  });\n  expect(isConnected).toBeTruthy();\n\n  // Test Solana-specific functionality\n  // ...\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-for-cross-chain-testing",children:"Best Practices for Cross-Chain Testing"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test on Testnets First"}),": Always use test networks before mainnet"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use Test Wallets"}),": Create specific test wallets for each chain"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Isolate Chain-Specific Code"}),": Test chain-specific logic in isolation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Verify Network Events"}),": Ensure your app correctly handles network change events"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Chain ID Detection"}),": Verify your app correctly identifies the current chain"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test RPC Endpoints"}),": Verify your app works with different RPC providers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Mock Bridge Delays"}),": Bridges can take minutes to hours in reality; mock these for testing"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"community-contribution",children:"Community Contribution"}),"\n",(0,a.jsx)(n.p,{children:"We welcome community contributions of cross-chain test examples, particularly for:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Layer 2 rollups (zkSync, StarkNet)"}),"\n",(0,a.jsx)(n.li,{children:"Newer EVM chains (Celo, Fantom, etc.)"}),"\n",(0,a.jsx)(n.li,{children:"Non-EVM chains (Solana, Cosmos, Polkadot)"}),"\n",(0,a.jsx)(n.li,{children:"Cross-chain bridges"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Submit your examples to the ",(0,a.jsx)(n.code,{children:"web3fuzzforge-community-tests/cross-chain/"})," directory with proper documentation."]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);