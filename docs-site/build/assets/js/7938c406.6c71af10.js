"use strict";(self.webpackChunkweb3fuzzforge_docs=self.webpackChunkweb3fuzzforge_docs||[]).push([[893],{65:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"mobile-wallets","title":"Mobile Wallet Testing","description":"Mobile wallets are increasingly important in the Web3 ecosystem. Web3FuzzForge is expanding support for testing mobile wallet interactions to provide comprehensive coverage for multi-platform applications.","source":"@site/docs/mobile-wallets.md","sourceDirName":".","slug":"/mobile-wallets","permalink":"/docs/mobile-wallets","draft":false,"unlisted":false,"editUrl":"https://github.com/web3fuzzforge/web3-security-test-kit/edit/main/docs-site/docs/mobile-wallets.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Real Wallet Integration","permalink":"/docs/real-wallet-integration"},"next":{"title":"Wallet State Snapshot Framework","permalink":"/docs/wallet-state-snapshots"}}');var l=n(4848),o=n(8453);const a={sidebar_position:2},s="Mobile Wallet Testing",r={},c=[{value:"Current Mobile Wallet Support",id:"current-mobile-wallet-support",level:2},{value:"Mobile Wallet Testing Challenges",id:"mobile-wallet-testing-challenges",level:2},{value:"WalletConnect Mobile Testing",id:"walletconnect-mobile-testing",level:2},{value:"Basic WalletConnect Flow",id:"basic-walletconnect-flow",level:3},{value:"Appium Integration",id:"appium-integration",level:2},{value:"Deep Link Testing",id:"deep-link-testing",level:2},{value:"Upcoming Mobile Testing Features",id:"upcoming-mobile-testing-features",level:2},{value:"Community Mobile Testing Examples",id:"community-mobile-testing-examples",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"mobile-wallet-testing",children:"Mobile Wallet Testing"})}),"\n",(0,l.jsx)(t.p,{children:"Mobile wallets are increasingly important in the Web3 ecosystem. Web3FuzzForge is expanding support for testing mobile wallet interactions to provide comprehensive coverage for multi-platform applications."}),"\n",(0,l.jsx)(t.h2,{id:"current-mobile-wallet-support",children:"Current Mobile Wallet Support"}),"\n",(0,l.jsx)(t.p,{children:"Web3FuzzForge currently offers the following mobile wallet testing capabilities:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Basic WalletConnect QR code generation detection"}),"\n",(0,l.jsx)(t.li,{children:"Documentation for manual mobile wallet testing"}),"\n",(0,l.jsx)(t.li,{children:"Test templates for mobile-responsive dApp behavior"}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"mobile-wallet-testing-challenges",children:"Mobile Wallet Testing Challenges"}),"\n",(0,l.jsx)(t.p,{children:"Testing mobile wallets presents unique challenges:"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Device Access"}),": Tests need access to physical or virtual mobile devices"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Wallet App Automation"}),": Mobile wallet apps have varying levels of automation support"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Deep Link Handling"}),": Managing wallet connection through deep links requires special handling"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"QR Code Interaction"}),": Tests need to generate and read QR codes"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Multi-Platform Code"}),": Tests must manage both browser and mobile app contexts"]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"walletconnect-mobile-testing",children:"WalletConnect Mobile Testing"}),"\n",(0,l.jsx)(t.h3,{id:"basic-walletconnect-flow",children:"Basic WalletConnect Flow"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-javascript",children:"test('WalletConnect mobile wallet connection', async ({ page }) => {\n  // Navigate to your dApp\n  await page.goto('https://your-dapp.com');\n\n  // Click connect button to trigger WalletConnect\n  await page.click('#connect-wallet');\n\n  // Get WalletConnect QR code or URI\n  const wcUri = await page.evaluate(() => {\n    return document.querySelector('[data-testid=\"wc-uri\"]').textContent;\n  });\n\n  // In a full mobile automation test, you would:\n  // 1. Launch mobile wallet app on emulator or real device\n  // 2. Send the wcUri to the mobile device\n  // 3. Open the URI in the wallet app\n  // 4. Approve the connection request in the wallet\n\n  // Wait for connection to complete\n  await page.waitForSelector('[data-testid=\"wallet-connected\"]');\n\n  // Verify the connection was successful\n  const isConnected = await page.evaluate(() => {\n    return window.ethereum.isConnected();\n  });\n\n  expect(isConnected).toBeTruthy();\n});\n"})}),"\n",(0,l.jsx)(t.h2,{id:"appium-integration",children:"Appium Integration"}),"\n",(0,l.jsx)(t.p,{children:"For comprehensive mobile wallet testing, integrate Appium with Playwright:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-javascript",children:"const { remote } = require('webdriverio');\nconst { test } = require('@playwright/test');\n\ntest('Test with mobile wallet using Appium', async ({ page }) => {\n  // Start browser test with Playwright\n  await page.goto('https://your-dapp.com');\n\n  // Get WalletConnect URI\n  await page.click('#connect-wallet');\n  const wcUri = await page.evaluate(() => {\n    return document.querySelector('[data-testid=\"wc-uri\"]').textContent;\n  });\n\n  // Initialize Appium client for mobile device\n  const mobileClient = await remote({\n    capabilities: {\n      platformName: 'Android',\n      'appium:deviceName': 'Android Emulator',\n      'appium:app': '/path/to/wallet-app.apk',\n      // Other Appium capabilities...\n    },\n  });\n\n  // Use the mobile client to open the wallet app\n  await mobileClient.$('//android.widget.Button[@text=\"Scan\"]').click();\n\n  // Send the WalletConnect URI to the device\n  // This step varies depending on your setup\n\n  // Approve the connection in the wallet app\n  await mobileClient.$('//android.widget.Button[@text=\"Connect\"]').click();\n\n  // Return to the browser test to verify connection\n  await page.waitForSelector('[data-testid=\"wallet-connected\"]');\n\n  // Clean up the mobile session\n  await mobileClient.deleteSession();\n});\n"})}),"\n",(0,l.jsx)(t.h2,{id:"deep-link-testing",children:"Deep Link Testing"}),"\n",(0,l.jsx)(t.p,{children:"For testing deep links with mobile wallets:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-javascript",children:"test('Test wallet deep links', async ({ page, context }) => {\n  // Start your dApp\n  await page.goto('https://your-dapp.com');\n\n  // Set up listener for new pages (deep links often open new tabs)\n  const pagePromise = context.waitForEvent('page');\n\n  // Click connect button that triggers deep link\n  await page.click('#connect-with-deep-link');\n\n  // Handle the new page or redirect\n  const newPage = await pagePromise;\n  await newPage.waitForLoadState();\n\n  // Check if the deep link has the correct format\n  const url = newPage.url();\n  expect(url).toMatch(/metamask:\\/\\/|phantom:\\/\\/|coinbase-wallet:\\/\\//);\n\n  // In a real test with a mobile device, you'd then:\n  // 1. Intercept the deep link\n  // 2. Open it on the mobile device\n  // 3. Complete the wallet interaction\n});\n"})}),"\n",(0,l.jsx)(t.h2,{id:"upcoming-mobile-testing-features",children:"Upcoming Mobile Testing Features"}),"\n",(0,l.jsx)(t.p,{children:"We're working on the following improvements:"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Mobile Device Farm Integration"}),": Connect to device clouds for testing across multiple real devices"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Automated QR Code Testing"}),": Tools to automatically read and process WalletConnect QR codes"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"React Native Wallet Testing"}),": Specific utilities for testing React Native wallets"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Cross-Platform Test Orchestration"}),": Coordinate tests across browser and mobile devices"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"iOS Wallet Support"}),": Expanded support for iOS-based mobile wallets"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Mobile Wallet State Snapshots"}),": Extend our wallet state snapshot framework to mobile wallets"]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"community-mobile-testing-examples",children:"Community Mobile Testing Examples"}),"\n",(0,l.jsx)(t.p,{children:"We encourage community contributions of mobile wallet testing examples. To contribute:"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:["Create a test example in the ",(0,l.jsx)(t.code,{children:"web3fuzzforge-community-tests/mobile-wallets/"})," directory"]}),"\n",(0,l.jsx)(t.li,{children:"Include detailed setup instructions for mobile devices or emulators"}),"\n",(0,l.jsx)(t.li,{children:"Document any required plugins or extensions"}),"\n",(0,l.jsx)(t.li,{children:"Submit a pull request with your example"}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"Join our efforts to expand mobile wallet testing coverage and make the Web3 ecosystem more secure on all platforms!"})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(6540);const l={},o=i.createContext(l);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);