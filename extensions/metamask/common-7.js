LavaPack.loadBundle(
  [
    [
      3154,
      { '@sentry-internal/browser-utils': 3100, '@sentry/core': 3175, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry-internal/browser-utils'),
                  i = e('@sentry/core'),
                  o = e('@sentry/utils');
                n.makeFetchTransport = function (e, t = r.getNativeImplementation('fetch')) {
                  let n = 0,
                    s = 0;
                  return i.createTransport(e, function (i) {
                    const a = i.body.length;
                    (n += a), s++;
                    const c = {
                      body: i.body,
                      method: 'POST',
                      referrerPolicy: 'origin',
                      headers: e.headers,
                      keepalive: n <= 6e4 && s < 15,
                      ...e.fetchOptions,
                    };
                    if (!t)
                      return (
                        r.clearCachedImplementation('fetch'),
                        o.rejectedSyncPromise('No fetch implementation available')
                      );
                    try {
                      return t(e.url, c).then(
                        e => (
                          (n -= a),
                          s--,
                          {
                            statusCode: e.status,
                            headers: {
                              'x-sentry-rate-limits': e.headers.get('X-Sentry-Rate-Limits'),
                              'retry-after': e.headers.get('Retry-After'),
                            },
                          }
                        )
                      );
                    } catch (e) {
                      return (
                        r.clearCachedImplementation('fetch'),
                        (n -= a),
                        s--,
                        o.rejectedSyncPromise(e)
                      );
                    }
                  });
                };
              };
            };
      },
      {
        package: '@sentry/browser',
        file: 'node_modules/@sentry/browser/build/npm/cjs/transports/fetch.js',
      },
    ],
    [
      3155,
      { './fetch.js': 3154, '@sentry/core': 3175, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/core'),
                  i = e('@sentry/utils'),
                  o = e('./fetch.js');
                function s(e) {
                  return new Promise((t, n) => {
                    (e.oncomplete = e.onsuccess = () => t(e.result)),
                      (e.onabort = e.onerror = () => n(e.error));
                  });
                }
                function a(e, t) {
                  const n = indexedDB.open(e);
                  n.onupgradeneeded = () => n.result.createObjectStore(t);
                  const r = s(n);
                  return e => r.then(n => e(n.transaction(t, 'readwrite').objectStore(t)));
                }
                function c(e) {
                  return s(e.getAllKeys());
                }
                function u(e, t, n) {
                  return e(e =>
                    c(e).then(r => {
                      if (!(r.length >= n))
                        return e.put(t, Math.max(...r, 0) + 1), s(e.transaction);
                    })
                  );
                }
                function p(e, t, n) {
                  return e(e =>
                    c(e).then(r => {
                      if (!(r.length >= n))
                        return e.put(t, Math.min(...r, 0) - 1), s(e.transaction);
                    })
                  );
                }
                function l(e) {
                  return e(e =>
                    c(e).then(t => {
                      const n = t[0];
                      return null == n
                        ? undefined
                        : s(e.get(n)).then(t => (e.delete(n), s(e.transaction).then(() => t)));
                    })
                  );
                }
                function d(e) {
                  let t;
                  function n() {
                    return (
                      t == undefined &&
                        (t = a(e.dbName || 'sentry-offline', e.storeName || 'queue')),
                      t
                    );
                  }
                  return {
                    push: async t => {
                      try {
                        const r = await i.serializeEnvelope(t);
                        await u(n(), r, e.maxQueueSize || 30);
                      } catch (e) {}
                    },
                    unshift: async t => {
                      try {
                        const r = await i.serializeEnvelope(t);
                        await p(n(), r, e.maxQueueSize || 30);
                      } catch (e) {}
                    },
                    shift: async () => {
                      try {
                        const e = await l(n());
                        if (e) return i.parseEnvelope(e);
                      } catch (e) {}
                      return undefined;
                    },
                  };
                }
                (n.createStore = a),
                  (n.makeBrowserOfflineTransport = function (e = o.makeFetchTransport) {
                    return (function (e) {
                      return t => e({ ...t, createStore: d });
                    })(r.makeOfflineTransport(e));
                  }),
                  (n.push = u),
                  (n.shift = l),
                  (n.unshift = p);
              };
            };
      },
      {
        package: '@sentry/browser',
        file: 'node_modules/@sentry/browser/build/npm/cjs/transports/offline.js',
      },
    ],
    [
      3156,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                n.createUserFeedbackEnvelope = function (e, { metadata: t, tunnel: n, dsn: i }) {
                  const o = {
                      event_id: e.event_id,
                      sent_at: new Date().toISOString(),
                      ...(t && t.sdk && { sdk: { name: t.sdk.name, version: t.sdk.version } }),
                      ...(!!n && !!i && { dsn: r.dsnToString(i) }),
                    },
                    s = (function (e) {
                      return [{ type: 'user_report' }, e];
                    })(e);
                  return r.createEnvelope(o, [s]);
                };
              };
            };
      },
      {
        package: '@sentry/browser',
        file: 'node_modules/@sentry/browser/build/npm/cjs/userfeedback.js',
      },
    ],
    [
      3157,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                n.lazyLoadIntegration = async function (e, t) {
                  throw new Error(
                    "Use of @sentry/browser's lazyLoadIntegration function is not supported by MetaMask Extension"
                  );
                };
              };
            };
      },
      {
        package: '@sentry/browser',
        file: 'node_modules/@sentry/browser/build/npm/cjs/utils/lazyLoadIntegration.js',
      },
    ],
    [
      3158,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = '7';
                function o(e) {
                  const t = e.protocol ? `${e.protocol}:` : '',
                    n = e.port ? `:${e.port}` : '';
                  return `${t}//${e.host}${n}${e.path ? `/${e.path}` : ''}/api/`;
                }
                (n.getEnvelopeEndpointWithUrlEncodedAuth = function (e, t, n) {
                  return (
                    t ||
                    `${(function (e) {
                      return `${o(e)}${e.projectId}/envelope/`;
                    })(e)}?${(function (e, t) {
                      return r.urlEncode({
                        sentry_key: e.publicKey,
                        sentry_version: i,
                        ...(t && { sentry_client: `${t.name}/${t.version}` }),
                      });
                    })(e, n)}`
                  );
                }),
                  (n.getReportDialogEndpoint = function (e, t) {
                    const n = r.makeDsn(e);
                    if (!n) return '';
                    const i = `${o(n)}embed/error-page/`;
                    let s = `dsn=${r.dsnToString(n)}`;
                    for (const e in t)
                      if ('dsn' !== e && 'onClose' !== e)
                        if ('user' === e) {
                          const e = t.user;
                          if (!e) continue;
                          e.name && (s += `&name=${encodeURIComponent(e.name)}`),
                            e.email && (s += `&email=${encodeURIComponent(e.email)}`);
                        } else s += `&${encodeURIComponent(e)}=${encodeURIComponent(t[e])}`;
                    return `${i}?${s}`;
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/api.js',
      },
    ],
    [
      3159,
      { '../carrier.js': 3163, './stackStrategy.js': 3160 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../carrier.js'),
                  i = e('./stackStrategy.js');
                (n.getAsyncContextStrategy = function (e) {
                  const t = r.getSentryCarrier(e);
                  return t.acs ? t.acs : i.getStackAsyncContextStrategy();
                }),
                  (n.setAsyncContextStrategy = function (e) {
                    const t = r.getMainCarrier();
                    r.getSentryCarrier(t).acs = e;
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/asyncContext/index.js',
      },
    ],
    [
      3160,
      {
        '../carrier.js': 3163,
        '../defaultScopes.js': 3168,
        '../scope.js': 3201,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../defaultScopes.js'),
                  o = e('../scope.js'),
                  s = e('../carrier.js');
                class a {
                  constructor(e, t) {
                    let n, r;
                    (n = e || new o.Scope()),
                      (r = t || new o.Scope()),
                      (this._stack = [{ scope: n }]),
                      (this._isolationScope = r);
                  }
                  withScope(e) {
                    const t = this._pushScope();
                    let n;
                    try {
                      n = e(t);
                    } catch (e) {
                      throw (this._popScope(), e);
                    }
                    return r.isThenable(n)
                      ? n.then(
                          e => (this._popScope(), e),
                          e => {
                            throw (this._popScope(), e);
                          }
                        )
                      : (this._popScope(), n);
                  }
                  getClient() {
                    return this.getStackTop().client;
                  }
                  getScope() {
                    return this.getStackTop().scope;
                  }
                  getIsolationScope() {
                    return this._isolationScope;
                  }
                  getStackTop() {
                    return this._stack[this._stack.length - 1];
                  }
                  _pushScope() {
                    const e = this.getScope().clone();
                    return this._stack.push({ client: this.getClient(), scope: e }), e;
                  }
                  _popScope() {
                    return !(this._stack.length <= 1) && !!this._stack.pop();
                  }
                }
                function c() {
                  const e = s.getMainCarrier(),
                    t = s.getSentryCarrier(e);
                  return (t.stack =
                    t.stack || new a(i.getDefaultCurrentScope(), i.getDefaultIsolationScope()));
                }
                function u(e) {
                  return c().withScope(e);
                }
                function p(e, t) {
                  const n = c();
                  return n.withScope(() => ((n.getStackTop().scope = e), t(e)));
                }
                function l(e) {
                  return c().withScope(() => e(c().getIsolationScope()));
                }
                (n.AsyncContextStack = a),
                  (n.getStackAsyncContextStrategy = function () {
                    return {
                      withIsolationScope: l,
                      withScope: u,
                      withSetScope: p,
                      withSetIsolationScope: (e, t) => l(t),
                      getCurrentScope: () => c().getScope(),
                      getIsolationScope: () => c().getIsolationScope(),
                    };
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js',
      },
    ],
    [
      3161,
      {
        './api.js': 3158,
        './currentScopes.js': 3166,
        './debug-build.js': 3167,
        './envelope.js': 3169,
        './integration.js': 3176,
        './session.js': 3205,
        './tracing/dynamicSamplingContext.js': 3207,
        './utils/parseSampleRate.js': 3229,
        './utils/prepareEvent.js': 3230,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./api.js'),
                  o = e('./currentScopes.js'),
                  s = e('./debug-build.js'),
                  a = e('./envelope.js'),
                  c = e('./integration.js'),
                  u = e('./session.js'),
                  p = e('./tracing/dynamicSamplingContext.js'),
                  l = e('./utils/parseSampleRate.js'),
                  d = e('./utils/prepareEvent.js'),
                  _ = "Not capturing exception because it's already been captured.";
                function T(e) {
                  return e.type === undefined;
                }
                function y(e) {
                  return 'transaction' === e.type;
                }
                n.BaseClient = class {
                  constructor(e) {
                    if (
                      ((this._options = e),
                      (this._integrations = {}),
                      (this._numProcessing = 0),
                      (this._outcomes = {}),
                      (this._hooks = {}),
                      (this._eventProcessors = []),
                      e.dsn
                        ? (this._dsn = r.makeDsn(e.dsn))
                        : s.DEBUG_BUILD &&
                          r.logger.warn('No DSN provided, client will not send events.'),
                      this._dsn)
                    ) {
                      const t = i.getEnvelopeEndpointWithUrlEncodedAuth(
                        this._dsn,
                        e.tunnel,
                        e._metadata ? e._metadata.sdk : undefined
                      );
                      this._transport = e.transport({
                        tunnel: this._options.tunnel,
                        recordDroppedEvent: this.recordDroppedEvent.bind(this),
                        ...e.transportOptions,
                        url: t,
                      });
                    }
                  }
                  captureException(e, t, n) {
                    const i = r.uuid4();
                    if (r.checkOrSetAlreadyCaught(e)) return s.DEBUG_BUILD && r.logger.log(_), i;
                    const o = { event_id: i, ...t };
                    return (
                      this._process(
                        this.eventFromException(e, o).then(e => this._captureEvent(e, o, n))
                      ),
                      o.event_id
                    );
                  }
                  captureMessage(e, t, n, i) {
                    const o = { event_id: r.uuid4(), ...n },
                      s = r.isParameterizedString(e) ? e : String(e),
                      a = r.isPrimitive(e)
                        ? this.eventFromMessage(s, t, o)
                        : this.eventFromException(e, o);
                    return this._process(a.then(e => this._captureEvent(e, o, i))), o.event_id;
                  }
                  captureEvent(e, t, n) {
                    const i = r.uuid4();
                    if (t && t.originalException && r.checkOrSetAlreadyCaught(t.originalException))
                      return s.DEBUG_BUILD && r.logger.log(_), i;
                    const o = { event_id: i, ...t },
                      a = (e.sdkProcessingMetadata || {}).capturedSpanScope;
                    return this._process(this._captureEvent(e, o, a || n)), o.event_id;
                  }
                  captureSession(e) {
                    'string' != typeof e.release
                      ? s.DEBUG_BUILD &&
                        r.logger.warn('Discarded session because of missing or non-string release')
                      : (this.sendSession(e), u.updateSession(e, { init: !1 }));
                  }
                  getDsn() {
                    return this._dsn;
                  }
                  getOptions() {
                    return this._options;
                  }
                  getSdkMetadata() {
                    return this._options._metadata;
                  }
                  getTransport() {
                    return this._transport;
                  }
                  flush(e) {
                    const t = this._transport;
                    return t
                      ? (this.emit('flush'),
                        this._isClientDoneProcessing(e).then(n => t.flush(e).then(e => n && e)))
                      : r.resolvedSyncPromise(!0);
                  }
                  close(e) {
                    return this.flush(e).then(
                      e => ((this.getOptions().enabled = !1), this.emit('close'), e)
                    );
                  }
                  getEventProcessors() {
                    return this._eventProcessors;
                  }
                  addEventProcessor(e) {
                    this._eventProcessors.push(e);
                  }
                  init() {
                    (this._isEnabled() ||
                      this._options.integrations.some(({ name: e }) =>
                        e.startsWith('Spotlight')
                      )) &&
                      this._setupIntegrations();
                  }
                  getIntegrationByName(e) {
                    return this._integrations[e];
                  }
                  addIntegration(e) {
                    const t = this._integrations[e.name];
                    c.setupIntegration(this, e, this._integrations),
                      t || c.afterSetupIntegrations(this, [e]);
                  }
                  sendEvent(e, t = {}) {
                    this.emit('beforeSendEvent', e, t);
                    let n = a.createEventEnvelope(
                      e,
                      this._dsn,
                      this._options._metadata,
                      this._options.tunnel
                    );
                    for (const e of t.attachments || [])
                      n = r.addItemToEnvelope(n, r.createAttachmentEnvelopeItem(e));
                    const i = this.sendEnvelope(n);
                    i && i.then(t => this.emit('afterSendEvent', e, t), null);
                  }
                  sendSession(e) {
                    const t = a.createSessionEnvelope(
                      e,
                      this._dsn,
                      this._options._metadata,
                      this._options.tunnel
                    );
                    this.sendEnvelope(t);
                  }
                  recordDroppedEvent(e, t, n) {
                    if (this._options.sendClientReports) {
                      const i = 'number' == typeof n ? n : 1,
                        o = `${e}:${t}`;
                      s.DEBUG_BUILD &&
                        r.logger.log(`Recording outcome: "${o}"${i > 1 ? ` (${i} times)` : ''}`),
                        (this._outcomes[o] = (this._outcomes[o] || 0) + i);
                    }
                  }
                  on(e, t) {
                    const n = (this._hooks[e] = this._hooks[e] || []);
                    return (
                      n.push(t),
                      () => {
                        const e = n.indexOf(t);
                        e > -1 && n.splice(e, 1);
                      }
                    );
                  }
                  emit(e, ...t) {
                    const n = this._hooks[e];
                    n && n.forEach(e => e(...t));
                  }
                  sendEnvelope(e) {
                    return (
                      this.emit('beforeEnvelope', e),
                      this._isEnabled() && this._transport
                        ? this._transport
                            .send(e)
                            .then(
                              null,
                              e => (
                                s.DEBUG_BUILD && r.logger.error('Error while sending event:', e), e
                              )
                            )
                        : (s.DEBUG_BUILD && r.logger.error('Transport disabled'),
                          r.resolvedSyncPromise({}))
                    );
                  }
                  _setupIntegrations() {
                    const { integrations: e } = this._options;
                    (this._integrations = c.setupIntegrations(this, e)),
                      c.afterSetupIntegrations(this, e);
                  }
                  _updateSessionFromEvent(e, t) {
                    let n = !1,
                      r = !1;
                    const i = t.exception && t.exception.values;
                    if (i) {
                      r = !0;
                      for (const e of i) {
                        const t = e.mechanism;
                        if (t && !1 === t.handled) {
                          n = !0;
                          break;
                        }
                      }
                    }
                    const o = 'ok' === e.status;
                    ((o && 0 === e.errors) || (o && n)) &&
                      (u.updateSession(e, {
                        ...(n && { status: 'crashed' }),
                        errors: e.errors || Number(r || n),
                      }),
                      this.captureSession(e));
                  }
                  _isClientDoneProcessing(e) {
                    return new r.SyncPromise(t => {
                      let n = 0;
                      const r = setInterval(() => {
                        0 == this._numProcessing
                          ? (clearInterval(r), t(!0))
                          : ((n += 1), e && n >= e && (clearInterval(r), t(!1)));
                      }, 1);
                    });
                  }
                  _isEnabled() {
                    return !1 !== this.getOptions().enabled && this._transport !== undefined;
                  }
                  _prepareEvent(e, t, n, i = o.getIsolationScope()) {
                    const s = this.getOptions(),
                      a = Object.keys(this._integrations);
                    return (
                      !t.integrations && a.length > 0 && (t.integrations = a),
                      this.emit('preprocessEvent', e, t),
                      e.type || i.setLastEventId(e.event_id || t.event_id),
                      d.prepareEvent(s, e, t, n, this, i).then(e => {
                        if (null === e) return e;
                        const t = {
                          ...i.getPropagationContext(),
                          ...(n ? n.getPropagationContext() : undefined),
                        };
                        if (!(e.contexts && e.contexts.trace) && t) {
                          const { traceId: n, spanId: i, parentSpanId: o, dsc: s } = t;
                          e.contexts = {
                            trace: r.dropUndefinedKeys({
                              trace_id: n,
                              span_id: i,
                              parent_span_id: o,
                            }),
                            ...e.contexts,
                          };
                          const a = s || p.getDynamicSamplingContextFromClient(n, this);
                          e.sdkProcessingMetadata = {
                            dynamicSamplingContext: a,
                            ...e.sdkProcessingMetadata,
                          };
                        }
                        return e;
                      })
                    );
                  }
                  _captureEvent(e, t = {}, n) {
                    return this._processEvent(e, t, n).then(
                      e => e.event_id,
                      e => {
                        if (s.DEBUG_BUILD) {
                          const t = e;
                          'log' === t.logLevel ? r.logger.log(t.message) : r.logger.warn(t);
                        }
                        return undefined;
                      }
                    );
                  }
                  _processEvent(e, t, n) {
                    const i = this.getOptions(),
                      { sampleRate: o } = i,
                      s = y(e),
                      a = T(e),
                      c = e.type || 'error',
                      u = `before send for type \`${c}\``,
                      p = void 0 === o ? undefined : l.parseSampleRate(o);
                    if (a && 'number' == typeof p && Math.random() > p)
                      return (
                        this.recordDroppedEvent('sample_rate', 'error', e),
                        r.rejectedSyncPromise(
                          new r.SentryError(
                            `Discarding event because it's not included in the random sample (sampling rate = ${o})`,
                            'log'
                          )
                        )
                      );
                    const d = 'replay_event' === c ? 'replay' : c,
                      _ = (e.sdkProcessingMetadata || {}).capturedSpanIsolationScope;
                    return this._prepareEvent(e, t, n, _)
                      .then(n => {
                        if (null === n)
                          throw (
                            (this.recordDroppedEvent('event_processor', d, e),
                            new r.SentryError(
                              'An event processor returned `null`, will not send event.',
                              'log'
                            ))
                          );
                        if (t.data && !0 === t.data.__sentry__) return n;
                        const o = (function (e, t, n, r) {
                          const { beforeSend: i, beforeSendTransaction: o, beforeSendSpan: s } = t;
                          if (T(n) && i) return i(n, r);
                          if (y(n)) {
                            if (n.spans && s) {
                              const t = [];
                              for (const r of n.spans) {
                                const n = s(r);
                                n ? t.push(n) : e.recordDroppedEvent('before_send', 'span');
                              }
                              n.spans = t;
                            }
                            if (o) {
                              if (n.spans) {
                                const e = n.spans.length;
                                n.sdkProcessingMetadata = {
                                  ...n.sdkProcessingMetadata,
                                  spanCountBeforeProcessing: e,
                                };
                              }
                              return o(n, r);
                            }
                          }
                          return n;
                        })(this, i, n, t);
                        return (function (e, t) {
                          const n = `${t} must return \`null\` or a valid event.`;
                          if (r.isThenable(e))
                            return e.then(
                              e => {
                                if (!r.isPlainObject(e) && null !== e) throw new r.SentryError(n);
                                return e;
                              },
                              e => {
                                throw new r.SentryError(`${t} rejected with ${e}`);
                              }
                            );
                          if (!r.isPlainObject(e) && null !== e) throw new r.SentryError(n);
                          return e;
                        })(o, u);
                      })
                      .then(i => {
                        if (null === i) {
                          if ((this.recordDroppedEvent('before_send', d, e), s)) {
                            const t = 1 + (e.spans || []).length;
                            this.recordDroppedEvent('before_send', 'span', t);
                          }
                          throw new r.SentryError(
                            `${u} returned \`null\`, will not send event.`,
                            'log'
                          );
                        }
                        const o = n && n.getSession();
                        if ((!s && o && this._updateSessionFromEvent(o, i), s)) {
                          const e =
                            ((i.sdkProcessingMetadata &&
                              i.sdkProcessingMetadata.spanCountBeforeProcessing) ||
                              0) - (i.spans ? i.spans.length : 0);
                          e > 0 && this.recordDroppedEvent('before_send', 'span', e);
                        }
                        const a = i.transaction_info;
                        if (s && a && i.transaction !== e.transaction) {
                          const e = 'custom';
                          i.transaction_info = { ...a, source: e };
                        }
                        return this.sendEvent(i, t), i;
                      })
                      .then(null, e => {
                        if (e instanceof r.SentryError) throw e;
                        throw (
                          (this.captureException(e, {
                            data: { __sentry__: !0 },
                            originalException: e,
                          }),
                          new r.SentryError(
                            `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: ${e}`
                          ))
                        );
                      });
                  }
                  _process(e) {
                    this._numProcessing++,
                      e.then(
                        e => (this._numProcessing--, e),
                        e => (this._numProcessing--, e)
                      );
                  }
                  _clearOutcomes() {
                    const e = this._outcomes;
                    return (
                      (this._outcomes = {}),
                      Object.entries(e).map(([e, t]) => {
                        const [n, r] = e.split(':');
                        return { reason: n, category: r, quantity: t };
                      })
                    );
                  }
                  _flushOutcomes() {
                    s.DEBUG_BUILD && r.logger.log('Flushing outcomes...');
                    const e = this._clearOutcomes();
                    if (0 === e.length)
                      return void (s.DEBUG_BUILD && r.logger.log('No outcomes to send'));
                    if (!this._dsn)
                      return void (
                        s.DEBUG_BUILD && r.logger.log('No dsn provided, will not send outcomes')
                      );
                    s.DEBUG_BUILD && r.logger.log('Sending outcomes:', e);
                    const t = r.createClientReportEnvelope(
                      e,
                      this._options.tunnel && r.dsnToString(this._dsn)
                    );
                    this.sendEnvelope(t);
                  }
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/baseclient.js',
      },
    ],
    [
      3162,
      { './currentScopes.js': 3166, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js'),
                  o = 100;
                n.addBreadcrumb = function (e, t) {
                  const n = i.getClient(),
                    s = i.getIsolationScope();
                  if (!n) return;
                  const { beforeBreadcrumb: a = null, maxBreadcrumbs: c = o } = n.getOptions();
                  if (c <= 0) return;
                  const u = { timestamp: r.dateTimestampInSeconds(), ...e },
                    p = a ? r.consoleSandbox(() => a(u, t)) : u;
                  null !== p &&
                    (n.emit && n.emit('beforeAddBreadcrumb', p, t), s.addBreadcrumb(p, c));
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/breadcrumbs.js',
      },
    ],
    [
      3163,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                function i(e) {
                  const t = (e.__SENTRY__ = e.__SENTRY__ || {});
                  return (
                    (t.version = t.version || r.SDK_VERSION),
                    (t[r.SDK_VERSION] = t[r.SDK_VERSION] || {})
                  );
                }
                (n.getMainCarrier = function () {
                  return i(r.GLOBAL_OBJ), r.GLOBAL_OBJ;
                }),
                  (n.getSentryCarrier = i);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/carrier.js',
      },
    ],
    [
      3164,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                n.createCheckInEnvelope = function (e, t, n, i, o) {
                  const s = { sent_at: new Date().toISOString() };
                  n && n.sdk && (s.sdk = { name: n.sdk.name, version: n.sdk.version }),
                    i && o && (s.dsn = r.dsnToString(o)),
                    t && (s.trace = r.dropUndefinedKeys(t));
                  const a = (function (e) {
                    return [{ type: 'check_in' }, e];
                  })(e);
                  return r.createEnvelope(s, [a]);
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/checkin.js',
      },
    ],
    [
      3165,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                n.DEFAULT_ENVIRONMENT = 'production';
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/constants.js',
      },
    ],
    [
      3166,
      {
        './asyncContext/index.js': 3159,
        './carrier.js': 3163,
        './scope.js': 3201,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./asyncContext/index.js'),
                  o = e('./carrier.js'),
                  s = e('./scope.js');
                function a() {
                  const e = o.getMainCarrier();
                  return i.getAsyncContextStrategy(e).getCurrentScope();
                }
                (n.getClient = function () {
                  return a().getClient();
                }),
                  (n.getCurrentScope = a),
                  (n.getGlobalScope = function () {
                    return r.getGlobalSingleton('globalScope', () => new s.Scope());
                  }),
                  (n.getIsolationScope = function () {
                    const e = o.getMainCarrier();
                    return i.getAsyncContextStrategy(e).getIsolationScope();
                  }),
                  (n.withIsolationScope = function (...e) {
                    const t = o.getMainCarrier(),
                      n = i.getAsyncContextStrategy(t);
                    if (2 === e.length) {
                      const [t, r] = e;
                      return t ? n.withSetIsolationScope(t, r) : n.withIsolationScope(r);
                    }
                    return n.withIsolationScope(e[0]);
                  }),
                  (n.withScope = function (...e) {
                    const t = o.getMainCarrier(),
                      n = i.getAsyncContextStrategy(t);
                    if (2 === e.length) {
                      const [t, r] = e;
                      return t ? n.withSetScope(t, r) : n.withScope(r);
                    }
                    return n.withScope(e[0]);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/currentScopes.js',
      },
    ],
    [
      3167,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
                n.DEBUG_BUILD = r;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/debug-build.js',
      },
    ],
    [
      3168,
      { './scope.js': 3201, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./scope.js');
                (n.getDefaultCurrentScope = function () {
                  return r.getGlobalSingleton('defaultCurrentScope', () => new i.Scope());
                }),
                  (n.getDefaultIsolationScope = function () {
                    return r.getGlobalSingleton('defaultIsolationScope', () => new i.Scope());
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/defaultScopes.js',
      },
    ],
    [
      3169,
      {
        './tracing/dynamicSamplingContext.js': 3207,
        './utils/spanUtils.js': 3233,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./tracing/dynamicSamplingContext.js'),
                  o = e('./utils/spanUtils.js');
                (n.createEventEnvelope = function (e, t, n, i) {
                  const o = r.getSdkMetadataForEnvelopeHeader(n),
                    s = e.type && 'replay_event' !== e.type ? e.type : 'event';
                  !(function (e, t) {
                    t &&
                      ((e.sdk = e.sdk || {}),
                      (e.sdk.name = e.sdk.name || t.name),
                      (e.sdk.version = e.sdk.version || t.version),
                      (e.sdk.integrations = [
                        ...(e.sdk.integrations || []),
                        ...(t.integrations || []),
                      ]),
                      (e.sdk.packages = [...(e.sdk.packages || []), ...(t.packages || [])]));
                  })(e, n && n.sdk);
                  const a = r.createEventEnvelopeHeaders(e, o, i, t);
                  delete e.sdkProcessingMetadata;
                  const c = [{ type: s }, e];
                  return r.createEnvelope(a, [c]);
                }),
                  (n.createSessionEnvelope = function (e, t, n, i) {
                    const o = r.getSdkMetadataForEnvelopeHeader(n),
                      s = {
                        sent_at: new Date().toISOString(),
                        ...(o && { sdk: o }),
                        ...(!!i && t && { dsn: r.dsnToString(t) }),
                      },
                      a =
                        'aggregates' in e
                          ? [{ type: 'sessions' }, e]
                          : [{ type: 'session' }, e.toJSON()];
                    return r.createEnvelope(s, [a]);
                  }),
                  (n.createSpanEnvelope = function (e, t) {
                    const n = i.getDynamicSamplingContextFromSpan(e[0]),
                      s = t && t.getDsn(),
                      a = t && t.getOptions().tunnel,
                      c = {
                        sent_at: new Date().toISOString(),
                        ...((function (e) {
                          return !!e.trace_id && !!e.public_key;
                        })(n) && { trace: n }),
                        ...(!!a && s && { dsn: r.dsnToString(s) }),
                      },
                      u = t && t.getOptions().beforeSendSpan,
                      p = u ? e => u(o.spanToJSON(e)) : e => o.spanToJSON(e),
                      l = [];
                    for (const t of e) {
                      const e = p(t);
                      e && l.push(r.createSpanEnvelopeItem(e));
                    }
                    return r.createEnvelope(c, l);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/envelope.js',
      },
    ],
    [
      3170,
      { './debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./debug-build.js');
                n.notifyEventProcessors = function e(t, n, o, s = 0) {
                  return new r.SyncPromise((a, c) => {
                    const u = t[s];
                    if (null === n || 'function' != typeof u) a(n);
                    else {
                      const p = u({ ...n }, o);
                      i.DEBUG_BUILD &&
                        u.id &&
                        null === p &&
                        r.logger.log(`Event processor "${u.id}" dropped event`),
                        r.isThenable(p)
                          ? p.then(n => e(t, n, o, s + 1).then(a)).then(null, c)
                          : e(t, p, o, s + 1)
                              .then(a)
                              .then(null, c);
                    }
                  });
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/eventProcessors.js',
      },
    ],
    [
      3171,
      {
        './constants.js': 3165,
        './currentScopes.js': 3166,
        './debug-build.js': 3167,
        './session.js': 3205,
        './utils/prepareEvent.js': 3230,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./constants.js'),
                  o = e('./currentScopes.js'),
                  s = e('./debug-build.js'),
                  a = e('./session.js'),
                  c = e('./utils/prepareEvent.js');
                function u(e, t) {
                  const n = o.getCurrentScope(),
                    i = o.getClient();
                  if (i) {
                    if (i.captureCheckIn) return i.captureCheckIn(e, t, n);
                    s.DEBUG_BUILD &&
                      r.logger.warn(
                        'Cannot capture check-in. Client does not support sending check-ins.'
                      );
                  } else
                    s.DEBUG_BUILD && r.logger.warn('Cannot capture check-in. No client defined.');
                  return r.uuid4();
                }
                function p() {
                  const e = o.getIsolationScope(),
                    t = o.getCurrentScope(),
                    n = t.getSession() || e.getSession();
                  n && a.closeSession(n), l(), e.setSession(), t.setSession();
                }
                function l() {
                  const e = o.getIsolationScope(),
                    t = o.getCurrentScope(),
                    n = o.getClient(),
                    r = t.getSession() || e.getSession();
                  r && n && n.captureSession(r);
                }
                (n.addEventProcessor = function (e) {
                  o.getIsolationScope().addEventProcessor(e);
                }),
                  (n.captureCheckIn = u),
                  (n.captureEvent = function (e, t) {
                    return o.getCurrentScope().captureEvent(e, t);
                  }),
                  (n.captureException = function (e, t) {
                    return o
                      .getCurrentScope()
                      .captureException(e, c.parseEventHintOrCaptureContext(t));
                  }),
                  (n.captureMessage = function (e, t) {
                    const n = 'string' == typeof t ? t : undefined,
                      r = 'string' != typeof t ? { captureContext: t } : undefined;
                    return o.getCurrentScope().captureMessage(e, n, r);
                  }),
                  (n.captureSession = function (e = !1) {
                    e ? p() : l();
                  }),
                  (n.close = async function (e) {
                    const t = o.getClient();
                    return t
                      ? t.close(e)
                      : (s.DEBUG_BUILD &&
                          r.logger.warn('Cannot flush events and disable SDK. No client defined.'),
                        Promise.resolve(!1));
                  }),
                  (n.endSession = p),
                  (n.flush = async function (e) {
                    const t = o.getClient();
                    return t
                      ? t.flush(e)
                      : (s.DEBUG_BUILD && r.logger.warn('Cannot flush events. No client defined.'),
                        Promise.resolve(!1));
                  }),
                  (n.isEnabled = function () {
                    const e = o.getClient();
                    return !!e && !1 !== e.getOptions().enabled && !!e.getTransport();
                  }),
                  (n.isInitialized = function () {
                    return !!o.getClient();
                  }),
                  (n.lastEventId = function () {
                    return o.getIsolationScope().lastEventId();
                  }),
                  (n.setContext = function (e, t) {
                    o.getIsolationScope().setContext(e, t);
                  }),
                  (n.setExtra = function (e, t) {
                    o.getIsolationScope().setExtra(e, t);
                  }),
                  (n.setExtras = function (e) {
                    o.getIsolationScope().setExtras(e);
                  }),
                  (n.setTag = function (e, t) {
                    o.getIsolationScope().setTag(e, t);
                  }),
                  (n.setTags = function (e) {
                    o.getIsolationScope().setTags(e);
                  }),
                  (n.setUser = function (e) {
                    o.getIsolationScope().setUser(e);
                  }),
                  (n.startSession = function (e) {
                    const t = o.getClient(),
                      n = o.getIsolationScope(),
                      s = o.getCurrentScope(),
                      { release: c, environment: u = i.DEFAULT_ENVIRONMENT } =
                        (t && t.getOptions()) || {},
                      { userAgent: l } = r.GLOBAL_OBJ.navigator || {},
                      d = a.makeSession({
                        release: c,
                        environment: u,
                        user: s.getUser() || n.getUser(),
                        ...(l && { userAgent: l }),
                        ...e,
                      }),
                      _ = n.getSession();
                    return (
                      _ && 'ok' === _.status && a.updateSession(_, { status: 'exited' }),
                      p(),
                      n.setSession(d),
                      s.setSession(d),
                      d
                    );
                  }),
                  (n.withMonitor = function (e, t, n) {
                    const i = u({ monitorSlug: e, status: 'in_progress' }, n),
                      s = r.timestampInSeconds();
                    function a(t) {
                      u({
                        monitorSlug: e,
                        status: t,
                        checkInId: i,
                        duration: r.timestampInSeconds() - s,
                      });
                    }
                    return o.withIsolationScope(() => {
                      let e;
                      try {
                        e = t();
                      } catch (e) {
                        throw (a('error'), e);
                      }
                      return (
                        r.isThenable(e)
                          ? Promise.resolve(e).then(
                              () => {
                                a('ok');
                              },
                              () => {
                                a('error');
                              }
                            )
                          : a('ok'),
                        e
                      );
                    });
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/exports.js',
      },
    ],
    [
      3172,
      { './currentScopes.js': 3166, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js');
                n.captureFeedback = function (e, t = {}, n = i.getCurrentScope()) {
                  const {
                      message: o,
                      name: s,
                      email: a,
                      url: c,
                      source: u,
                      associatedEventId: p,
                      tags: l,
                    } = e,
                    d = {
                      contexts: {
                        feedback: r.dropUndefinedKeys({
                          contact_email: a,
                          name: s,
                          message: o,
                          url: c,
                          source: u,
                          associated_event_id: p,
                        }),
                      },
                      type: 'feedback',
                      level: 'info',
                      tags: l,
                    },
                    _ = (n && n.getClient()) || i.getClient();
                  return _ && _.emit('beforeSendFeedback', d, t), n.captureEvent(d, t);
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/feedback.js',
      },
    ],
    [
      3173,
      {
        './currentScopes.js': 3166,
        './debug-build.js': 3167,
        './semanticAttributes.js': 3203,
        './tracing/dynamicSamplingContext.js': 3207,
        './tracing/errors.js': 3208,
        './tracing/sentryNonRecordingSpan.js': 3214,
        './tracing/spanstatus.js': 3216,
        './tracing/trace.js': 3217,
        './utils/hasTracingEnabled.js': 3225,
        './utils/spanUtils.js': 3233,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js'),
                  o = e('./semanticAttributes.js');
                e('./tracing/errors.js'), e('./debug-build.js');
                const s = e('./utils/hasTracingEnabled.js'),
                  a = e('./utils/spanUtils.js'),
                  c = e('./tracing/sentryNonRecordingSpan.js'),
                  u = e('./tracing/spanstatus.js'),
                  p = e('./tracing/trace.js'),
                  l = e('./tracing/dynamicSamplingContext.js');
                function d(e, t, n, o, s) {
                  const c = i.getIsolationScope(),
                    {
                      traceId: u,
                      spanId: p,
                      sampled: d,
                      dsc: _,
                    } = { ...c.getPropagationContext(), ...n.getPropagationContext() },
                    T = s ? a.spanToTraceHeader(s) : r.generateSentryTraceHeader(u, p, d),
                    y = r.dynamicSamplingContextToSentryBaggageHeader(
                      _ ||
                        (s
                          ? l.getDynamicSamplingContextFromSpan(s)
                          : l.getDynamicSamplingContextFromClient(u, t))
                    ),
                    E =
                      o.headers ||
                      ('undefined' != typeof Request && r.isInstanceOf(e, Request)
                        ? e.headers
                        : undefined);
                  if (E) {
                    if ('undefined' != typeof Headers && r.isInstanceOf(E, Headers)) {
                      const e = new Headers(E);
                      return (
                        e.append('sentry-trace', T), y && e.append(r.BAGGAGE_HEADER_NAME, y), e
                      );
                    }
                    if (Array.isArray(E)) {
                      const e = [...E, ['sentry-trace', T]];
                      return y && e.push([r.BAGGAGE_HEADER_NAME, y]), e;
                    }
                    {
                      const e = 'baggage' in E ? E.baggage : undefined,
                        t = [];
                      return (
                        Array.isArray(e) ? t.push(...e) : e && t.push(e),
                        y && t.push(y),
                        { ...E, 'sentry-trace': T, baggage: t.length > 0 ? t.join(',') : undefined }
                      );
                    }
                  }
                  return { 'sentry-trace': T, baggage: y };
                }
                (n.addTracingHeadersToFetchRequest = d),
                  (n.instrumentFetchRequest = function (e, t, n, l, _ = 'auto.http.browser') {
                    if (!e.fetchData) return undefined;
                    const T = s.hasTracingEnabled() && t(e.fetchData.url);
                    if (e.endTimestamp && T) {
                      const t = e.fetchData.__span;
                      if (!t) return;
                      const n = l[t];
                      return (
                        n &&
                          (!(function (e, t) {
                            if (t.response) {
                              u.setHttpStatus(e, t.response.status);
                              const n =
                                t.response &&
                                t.response.headers &&
                                t.response.headers.get('content-length');
                              if (n) {
                                const t = parseInt(n);
                                t > 0 && e.setAttribute('http.response_content_length', t);
                              }
                            } else
                              t.error &&
                                e.setStatus({
                                  code: u.SPAN_STATUS_ERROR,
                                  message: 'internal_error',
                                });
                            e.end();
                          })(n, e),
                          delete l[t]),
                        undefined
                      );
                    }
                    const y = i.getCurrentScope(),
                      E = i.getClient(),
                      { method: m, url: g } = e.fetchData,
                      S = (function (e) {
                        try {
                          return new URL(e).href;
                        } catch (e) {
                          return undefined;
                        }
                      })(g),
                      h = S ? r.parseUrl(S).host : undefined,
                      O = !!a.getActiveSpan(),
                      f =
                        T && O
                          ? p.startInactiveSpan({
                              name: `${m} ${g}`,
                              attributes: {
                                url: g,
                                type: 'fetch',
                                'http.method': m,
                                'http.url': S,
                                'server.address': h,
                                [o.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: _,
                                [o.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',
                              },
                            })
                          : new c.SentryNonRecordingSpan();
                    if (
                      ((e.fetchData.__span = f.spanContext().spanId),
                      (l[f.spanContext().spanId] = f),
                      n(e.fetchData.url) && E)
                    ) {
                      const t = e.args[0];
                      e.args[1] = e.args[1] || {};
                      const n = e.args[1];
                      n.headers = d(t, E, y, n, s.hasTracingEnabled() && O ? f : undefined);
                    }
                    return f;
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/fetch.js',
      },
    ],
    [
      3174,
      { './breadcrumbs.js': 3162, './currentScopes.js': 3166, './exports.js': 3171 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./breadcrumbs.js'),
                  i = e('./currentScopes.js'),
                  o = e('./exports.js');
                function s() {
                  return {
                    bindClient(e) {
                      i.getCurrentScope().setClient(e);
                    },
                    withScope: i.withScope,
                    getClient: () => i.getClient(),
                    getScope: i.getCurrentScope,
                    getIsolationScope: i.getIsolationScope,
                    captureException: (e, t) => i.getCurrentScope().captureException(e, t),
                    captureMessage: (e, t, n) => i.getCurrentScope().captureMessage(e, t, n),
                    captureEvent: o.captureEvent,
                    addBreadcrumb: r.addBreadcrumb,
                    setUser: o.setUser,
                    setTags: o.setTags,
                    setTag: o.setTag,
                    setExtra: o.setExtra,
                    setExtras: o.setExtras,
                    setContext: o.setContext,
                    getIntegration(e) {
                      const t = i.getClient();
                      return (t && t.getIntegrationByName(e.id)) || null;
                    },
                    startSession: o.startSession,
                    endSession: o.endSession,
                    captureSession(e) {
                      if (e) return o.endSession();
                      !(function () {
                        const e = i.getCurrentScope(),
                          t = i.getClient(),
                          n = e.getSession();
                        t && n && t.captureSession(n);
                      })();
                    },
                  };
                }
                const a = s;
                (n.getCurrentHub = a), (n.getCurrentHubShim = s);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/getCurrentHubShim.js',
      },
    ],
    [
      3175,
      {
        './api.js': 3158,
        './asyncContext/index.js': 3159,
        './baseclient.js': 3161,
        './breadcrumbs.js': 3162,
        './carrier.js': 3163,
        './checkin.js': 3164,
        './constants.js': 3165,
        './currentScopes.js': 3166,
        './defaultScopes.js': 3168,
        './envelope.js': 3169,
        './eventProcessors.js': 3170,
        './exports.js': 3171,
        './feedback.js': 3172,
        './fetch.js': 3173,
        './getCurrentHubShim.js': 3174,
        './integration.js': 3176,
        './integrations/captureconsole.js': 3177,
        './integrations/debug.js': 3178,
        './integrations/dedupe.js': 3179,
        './integrations/extraerrordata.js': 3180,
        './integrations/functiontostring.js': 3181,
        './integrations/inboundfilters.js': 3182,
        './integrations/linkederrors.js': 3183,
        './integrations/metadata.js': 3184,
        './integrations/requestdata.js': 3185,
        './integrations/rewriteframes.js': 3186,
        './integrations/sessiontiming.js': 3187,
        './integrations/third-party-errors-filter.js': 3188,
        './integrations/zoderrors.js': 3189,
        './metrics/browser-aggregator.js': 3192,
        './metrics/exports-default.js': 3195,
        './metrics/exports.js': 3196,
        './metrics/metric-summary.js': 3198,
        './profiling.js': 3200,
        './scope.js': 3201,
        './sdk.js': 3202,
        './semanticAttributes.js': 3203,
        './server-runtime-client.js': 3204,
        './session.js': 3205,
        './sessionflusher.js': 3206,
        './tracing/dynamicSamplingContext.js': 3207,
        './tracing/errors.js': 3208,
        './tracing/hubextensions.js': 3209,
        './tracing/idleSpan.js': 3210,
        './tracing/logSpans.js': 3211,
        './tracing/measurement.js': 3212,
        './tracing/sampling.js': 3213,
        './tracing/sentryNonRecordingSpan.js': 3214,
        './tracing/sentrySpan.js': 3215,
        './tracing/spanstatus.js': 3216,
        './tracing/trace.js': 3217,
        './tracing/utils.js': 3218,
        './transports/base.js': 3219,
        './transports/multiplexed.js': 3220,
        './transports/offline.js': 3221,
        './trpc.js': 3222,
        './utils/applyScopeDataToEvent.js': 3223,
        './utils/handleCallbackErrors.js': 3224,
        './utils/hasTracingEnabled.js': 3225,
        './utils/isSentryRequestUrl.js': 3226,
        './utils/meta.js': 3227,
        './utils/parameterize.js': 3228,
        './utils/parseSampleRate.js': 3229,
        './utils/prepareEvent.js': 3230,
        './utils/sdkMetadata.js': 3231,
        './utils/spanUtils.js': 3233,
        './utils/traceData.js': 3234,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./tracing/errors.js'),
                  i = e('./tracing/utils.js'),
                  o = e('./tracing/hubextensions.js'),
                  s = e('./tracing/idleSpan.js'),
                  a = e('./tracing/sentrySpan.js'),
                  c = e('./tracing/sentryNonRecordingSpan.js'),
                  u = e('./tracing/spanstatus.js'),
                  p = e('./tracing/trace.js'),
                  l = e('./tracing/dynamicSamplingContext.js'),
                  d = e('./tracing/measurement.js'),
                  _ = e('./tracing/sampling.js'),
                  T = e('./tracing/logSpans.js'),
                  y = e('./semanticAttributes.js'),
                  E = e('./envelope.js'),
                  m = e('./exports.js'),
                  g = e('./currentScopes.js'),
                  S = e('./defaultScopes.js'),
                  h = e('./asyncContext/index.js'),
                  O = e('./carrier.js'),
                  f = e('./session.js'),
                  R = e('./sessionflusher.js'),
                  A = e('./scope.js'),
                  b = e('./eventProcessors.js'),
                  N = e('./api.js'),
                  I = e('./baseclient.js'),
                  C = e('./server-runtime-client.js'),
                  v = e('./sdk.js'),
                  P = e('./transports/base.js'),
                  w = e('./transports/offline.js'),
                  D = e('./transports/multiplexed.js'),
                  x = e('./integration.js'),
                  M = e('./utils/applyScopeDataToEvent.js'),
                  L = e('./utils/prepareEvent.js'),
                  j = e('./checkin.js'),
                  U = e('./utils/hasTracingEnabled.js'),
                  B = e('./utils/isSentryRequestUrl.js'),
                  k = e('./utils/handleCallbackErrors.js'),
                  F = e('./utils/parameterize.js'),
                  z = e('./utils/spanUtils.js'),
                  G = e('./utils/parseSampleRate.js'),
                  H = e('./utils/sdkMetadata.js'),
                  V = e('./utils/traceData.js'),
                  $ = e('./utils/meta.js'),
                  W = e('./constants.js'),
                  q = e('./breadcrumbs.js'),
                  K = e('./integrations/functiontostring.js'),
                  Y = e('./integrations/inboundfilters.js'),
                  X = e('./integrations/linkederrors.js'),
                  J = e('./integrations/metadata.js'),
                  Q = e('./integrations/requestdata.js'),
                  Z = e('./integrations/captureconsole.js'),
                  ee = e('./integrations/debug.js'),
                  te = e('./integrations/dedupe.js'),
                  ne = e('./integrations/extraerrordata.js'),
                  re = e('./integrations/rewriteframes.js'),
                  ie = e('./integrations/sessiontiming.js'),
                  oe = e('./integrations/zoderrors.js'),
                  se = e('./integrations/third-party-errors-filter.js'),
                  ae = e('./metrics/exports.js'),
                  ce = e('./profiling.js'),
                  ue = e('./metrics/exports-default.js'),
                  pe = e('./metrics/browser-aggregator.js'),
                  le = e('./metrics/metric-summary.js'),
                  de = e('./fetch.js'),
                  _e = e('./trpc.js'),
                  Te = e('./feedback.js'),
                  ye = e('./getCurrentHubShim.js'),
                  Ee = e('@sentry/utils');
                (n.registerSpanErrorInstrumentation = r.registerSpanErrorInstrumentation),
                  (n.getCapturedScopesOnSpan = i.getCapturedScopesOnSpan),
                  (n.setCapturedScopesOnSpan = i.setCapturedScopesOnSpan),
                  (n.addTracingExtensions = o.addTracingExtensions),
                  (n.TRACING_DEFAULTS = s.TRACING_DEFAULTS),
                  (n.startIdleSpan = s.startIdleSpan),
                  (n.SentrySpan = a.SentrySpan),
                  (n.SentryNonRecordingSpan = c.SentryNonRecordingSpan),
                  (n.SPAN_STATUS_ERROR = u.SPAN_STATUS_ERROR),
                  (n.SPAN_STATUS_OK = u.SPAN_STATUS_OK),
                  (n.SPAN_STATUS_UNSET = u.SPAN_STATUS_UNSET),
                  (n.getSpanStatusFromHttpCode = u.getSpanStatusFromHttpCode),
                  (n.setHttpStatus = u.setHttpStatus),
                  (n.continueTrace = p.continueTrace),
                  (n.startInactiveSpan = p.startInactiveSpan),
                  (n.startNewTrace = p.startNewTrace),
                  (n.startSpan = p.startSpan),
                  (n.startSpanManual = p.startSpanManual),
                  (n.suppressTracing = p.suppressTracing),
                  (n.withActiveSpan = p.withActiveSpan),
                  (n.getDynamicSamplingContextFromClient = l.getDynamicSamplingContextFromClient),
                  (n.getDynamicSamplingContextFromSpan = l.getDynamicSamplingContextFromSpan),
                  (n.spanToBaggageHeader = l.spanToBaggageHeader),
                  (n.setMeasurement = d.setMeasurement),
                  (n.timedEventsToMeasurements = d.timedEventsToMeasurements),
                  (n.sampleSpan = _.sampleSpan),
                  (n.logSpanEnd = T.logSpanEnd),
                  (n.logSpanStart = T.logSpanStart),
                  (n.SEMANTIC_ATTRIBUTE_CACHE_HIT = y.SEMANTIC_ATTRIBUTE_CACHE_HIT),
                  (n.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = y.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE),
                  (n.SEMANTIC_ATTRIBUTE_CACHE_KEY = y.SEMANTIC_ATTRIBUTE_CACHE_KEY),
                  (n.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = y.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME),
                  (n.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD =
                    y.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD),
                  (n.SEMANTIC_ATTRIBUTE_PROFILE_ID = y.SEMANTIC_ATTRIBUTE_PROFILE_ID),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON =
                    y.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT =
                    y.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE =
                    y.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_OP = y.SEMANTIC_ATTRIBUTE_SENTRY_OP),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = y.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE =
                    y.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = y.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),
                  (n.SEMANTIC_ATTRIBUTE_URL_FULL = y.SEMANTIC_ATTRIBUTE_URL_FULL),
                  (n.createEventEnvelope = E.createEventEnvelope),
                  (n.createSessionEnvelope = E.createSessionEnvelope),
                  (n.createSpanEnvelope = E.createSpanEnvelope),
                  (n.addEventProcessor = m.addEventProcessor),
                  (n.captureCheckIn = m.captureCheckIn),
                  (n.captureEvent = m.captureEvent),
                  (n.captureException = m.captureException),
                  (n.captureMessage = m.captureMessage),
                  (n.captureSession = m.captureSession),
                  (n.close = m.close),
                  (n.endSession = m.endSession),
                  (n.flush = m.flush),
                  (n.isEnabled = m.isEnabled),
                  (n.isInitialized = m.isInitialized),
                  (n.lastEventId = m.lastEventId),
                  (n.setContext = m.setContext),
                  (n.setExtra = m.setExtra),
                  (n.setExtras = m.setExtras),
                  (n.setTag = m.setTag),
                  (n.setTags = m.setTags),
                  (n.setUser = m.setUser),
                  (n.startSession = m.startSession),
                  (n.withMonitor = m.withMonitor),
                  (n.getClient = g.getClient),
                  (n.getCurrentScope = g.getCurrentScope),
                  (n.getGlobalScope = g.getGlobalScope),
                  (n.getIsolationScope = g.getIsolationScope),
                  (n.withIsolationScope = g.withIsolationScope),
                  (n.withScope = g.withScope),
                  (n.getDefaultCurrentScope = S.getDefaultCurrentScope),
                  (n.getDefaultIsolationScope = S.getDefaultIsolationScope),
                  (n.setAsyncContextStrategy = h.setAsyncContextStrategy),
                  (n.getMainCarrier = O.getMainCarrier),
                  (n.closeSession = f.closeSession),
                  (n.makeSession = f.makeSession),
                  (n.updateSession = f.updateSession),
                  (n.SessionFlusher = R.SessionFlusher),
                  (n.Scope = A.Scope),
                  (n.notifyEventProcessors = b.notifyEventProcessors),
                  (n.getEnvelopeEndpointWithUrlEncodedAuth =
                    N.getEnvelopeEndpointWithUrlEncodedAuth),
                  (n.getReportDialogEndpoint = N.getReportDialogEndpoint),
                  (n.BaseClient = I.BaseClient),
                  (n.ServerRuntimeClient = C.ServerRuntimeClient),
                  (n.initAndBind = v.initAndBind),
                  (n.setCurrentClient = v.setCurrentClient),
                  (n.createTransport = P.createTransport),
                  (n.makeOfflineTransport = w.makeOfflineTransport),
                  (n.makeMultiplexedTransport = D.makeMultiplexedTransport),
                  (n.addIntegration = x.addIntegration),
                  (n.defineIntegration = x.defineIntegration),
                  (n.getIntegrationsToSetup = x.getIntegrationsToSetup),
                  (n.applyScopeDataToEvent = M.applyScopeDataToEvent),
                  (n.mergeScopeData = M.mergeScopeData),
                  (n.prepareEvent = L.prepareEvent),
                  (n.createCheckInEnvelope = j.createCheckInEnvelope),
                  (n.hasTracingEnabled = U.hasTracingEnabled),
                  (n.isSentryRequestUrl = B.isSentryRequestUrl),
                  (n.handleCallbackErrors = k.handleCallbackErrors),
                  (n.parameterize = F.parameterize),
                  (n.addChildSpanToSpan = z.addChildSpanToSpan),
                  (n.getActiveSpan = z.getActiveSpan),
                  (n.getRootSpan = z.getRootSpan),
                  (n.getSpanDescendants = z.getSpanDescendants),
                  (n.getStatusMessage = z.getStatusMessage),
                  (n.spanIsSampled = z.spanIsSampled),
                  (n.spanTimeInputToSeconds = z.spanTimeInputToSeconds),
                  (n.spanToJSON = z.spanToJSON),
                  (n.spanToTraceContext = z.spanToTraceContext),
                  (n.spanToTraceHeader = z.spanToTraceHeader),
                  (n.parseSampleRate = G.parseSampleRate),
                  (n.applySdkMetadata = H.applySdkMetadata),
                  (n.getTraceData = V.getTraceData),
                  (n.getTraceMetaTags = $.getTraceMetaTags),
                  (n.DEFAULT_ENVIRONMENT = W.DEFAULT_ENVIRONMENT),
                  (n.addBreadcrumb = q.addBreadcrumb),
                  (n.functionToStringIntegration = K.functionToStringIntegration),
                  (n.inboundFiltersIntegration = Y.inboundFiltersIntegration),
                  (n.linkedErrorsIntegration = X.linkedErrorsIntegration),
                  (n.moduleMetadataIntegration = J.moduleMetadataIntegration),
                  (n.requestDataIntegration = Q.requestDataIntegration),
                  (n.captureConsoleIntegration = Z.captureConsoleIntegration),
                  (n.debugIntegration = ee.debugIntegration),
                  (n.dedupeIntegration = te.dedupeIntegration),
                  (n.extraErrorDataIntegration = ne.extraErrorDataIntegration),
                  (n.rewriteFramesIntegration = re.rewriteFramesIntegration),
                  (n.sessionTimingIntegration = ie.sessionTimingIntegration),
                  (n.zodErrorsIntegration = oe.zodErrorsIntegration),
                  (n.thirdPartyErrorFilterIntegration = se.thirdPartyErrorFilterIntegration),
                  (n.metrics = ae.metrics),
                  (n.profiler = ce.profiler),
                  (n.metricsDefault = ue.metricsDefault),
                  (n.BrowserMetricsAggregator = pe.BrowserMetricsAggregator),
                  (n.getMetricSummaryJsonForSpan = le.getMetricSummaryJsonForSpan),
                  (n.addTracingHeadersToFetchRequest = de.addTracingHeadersToFetchRequest),
                  (n.instrumentFetchRequest = de.instrumentFetchRequest),
                  (n.trpcMiddleware = _e.trpcMiddleware),
                  (n.captureFeedback = Te.captureFeedback),
                  (n.getCurrentHub = ye.getCurrentHub),
                  (n.getCurrentHubShim = ye.getCurrentHubShim),
                  (n.SDK_VERSION = Ee.SDK_VERSION);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/index.js',
      },
    ],
    [
      3176,
      { './currentScopes.js': 3166, './debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js'),
                  o = e('./debug-build.js'),
                  s = [];
                function a(e, t, n) {
                  if (n[t.name])
                    o.DEBUG_BUILD &&
                      r.logger.log(
                        `Integration skipped because it was already installed: ${t.name}`
                      );
                  else {
                    if (
                      ((n[t.name] = t),
                      -1 === s.indexOf(t.name) &&
                        'function' == typeof t.setupOnce &&
                        (t.setupOnce(), s.push(t.name)),
                      t.setup && 'function' == typeof t.setup && t.setup(e),
                      'function' == typeof t.preprocessEvent)
                    ) {
                      const n = t.preprocessEvent.bind(t);
                      e.on('preprocessEvent', (t, r) => n(t, r, e));
                    }
                    if ('function' == typeof t.processEvent) {
                      const n = t.processEvent.bind(t),
                        r = Object.assign((t, r) => n(t, r, e), { id: t.name });
                      e.addEventProcessor(r);
                    }
                    o.DEBUG_BUILD && r.logger.log(`Integration installed: ${t.name}`);
                  }
                }
                (n.addIntegration = function (e) {
                  const t = i.getClient();
                  t
                    ? t.addIntegration(e)
                    : o.DEBUG_BUILD &&
                      r.logger.warn(
                        `Cannot add integration "${e.name}" because no SDK Client is available.`
                      );
                }),
                  (n.afterSetupIntegrations = function (e, t) {
                    for (const n of t) n && n.afterAllSetup && n.afterAllSetup(e);
                  }),
                  (n.defineIntegration = function (e) {
                    return e;
                  }),
                  (n.getIntegrationsToSetup = function (e) {
                    const t = e.defaultIntegrations || [],
                      n = e.integrations;
                    let i;
                    t.forEach(e => {
                      e.isDefaultInstance = !0;
                    }),
                      (i = Array.isArray(n)
                        ? [...t, ...n]
                        : 'function' == typeof n
                          ? r.arrayify(n(t))
                          : t);
                    const o = (function (e) {
                        const t = {};
                        return (
                          e.forEach(e => {
                            const { name: n } = e,
                              r = t[n];
                            (r && !r.isDefaultInstance && e.isDefaultInstance) || (t[n] = e);
                          }),
                          Object.values(t)
                        );
                      })(i),
                      s = o.findIndex(e => 'Debug' === e.name);
                    if (s > -1) {
                      const [e] = o.splice(s, 1);
                      o.push(e);
                    }
                    return o;
                  }),
                  (n.installedIntegrations = s),
                  (n.setupIntegration = a),
                  (n.setupIntegrations = function (e, t) {
                    const n = {};
                    return (
                      t.forEach(t => {
                        t && a(e, t, n);
                      }),
                      n
                    );
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integration.js',
      },
    ],
    [
      3177,
      {
        '../currentScopes.js': 3166,
        '../exports.js': 3171,
        '../integration.js': 3176,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../currentScopes.js'),
                  o = e('../exports.js'),
                  s = e('../integration.js'),
                  a = s.defineIntegration((e = {}) => {
                    const t = e.levels || r.CONSOLE_LEVELS;
                    return {
                      name: 'CaptureConsole',
                      setup(e) {
                        'console' in r.GLOBAL_OBJ &&
                          r.addConsoleInstrumentationHandler(({ args: n, level: s }) => {
                            i.getClient() === e &&
                              t.includes(s) &&
                              (function (e, t) {
                                const n = {
                                  level: r.severityLevelFromString(t),
                                  extra: { arguments: e },
                                };
                                i.withScope(i => {
                                  if (
                                    (i.addEventProcessor(
                                      e => (
                                        (e.logger = 'console'),
                                        r.addExceptionMechanism(e, {
                                          handled: !1,
                                          type: 'console',
                                        }),
                                        e
                                      )
                                    ),
                                    'assert' === t)
                                  ) {
                                    if (!e[0]) {
                                      const t = `Assertion failed: ${r.safeJoin(e.slice(1), ' ') || 'console.assert'}`;
                                      i.setExtra('arguments', e.slice(1)), o.captureMessage(t, n);
                                    }
                                    return;
                                  }
                                  const s = e.find(e => e instanceof Error);
                                  if (s) return void o.captureException(s, n);
                                  const a = r.safeJoin(e, ' ');
                                  o.captureMessage(a, n);
                                });
                              })(n, s);
                          });
                      },
                    };
                  });
                n.captureConsoleIntegration = a;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/captureconsole.js',
      },
    ],
    [
      3178,
      { '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = i.defineIntegration((e = {}) => {
                    const t = { debugger: !1, stringify: !1, ...e };
                    return {
                      name: 'Debug',
                      setup(e) {
                        e.on('beforeSendEvent', (e, n) => {
                          t.debugger,
                            r.consoleSandbox(() => {
                              t.stringify
                                ? (console.log(JSON.stringify(e, null, 2)),
                                  n &&
                                    Object.keys(n).length &&
                                    console.log(JSON.stringify(n, null, 2)))
                                : (console.log(e), n && Object.keys(n).length && console.log(n));
                            });
                        });
                      },
                    };
                  });
                n.debugIntegration = o;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/debug.js',
      },
    ],
    [
      3179,
      { '../debug-build.js': 3167, '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = e('../debug-build.js'),
                  s = i.defineIntegration(() => {
                    let e;
                    return {
                      name: 'Dedupe',
                      processEvent(t) {
                        if (t.type) return t;
                        try {
                          if (a(t, e))
                            return (
                              o.DEBUG_BUILD &&
                                r.logger.warn(
                                  'Event dropped due to being a duplicate of previously captured event.'
                                ),
                              null
                            );
                        } catch (e) {}
                        return (e = t);
                      },
                    };
                  });
                function a(e, t) {
                  return (
                    !!t &&
                    (!!(function (e, t) {
                      const n = e.message,
                        r = t.message;
                      if (!n && !r) return !1;
                      if ((n && !r) || (!n && r)) return !1;
                      if (n !== r) return !1;
                      if (!u(e, t)) return !1;
                      if (!c(e, t)) return !1;
                      return !0;
                    })(e, t) ||
                      !!(function (e, t) {
                        const n = p(t),
                          r = p(e);
                        if (!n || !r) return !1;
                        if (n.type !== r.type || n.value !== r.value) return !1;
                        if (!u(e, t)) return !1;
                        if (!c(e, t)) return !1;
                        return !0;
                      })(e, t))
                  );
                }
                function c(e, t) {
                  let n = r.getFramesFromEvent(e),
                    i = r.getFramesFromEvent(t);
                  if (!n && !i) return !0;
                  if ((n && !i) || (!n && i)) return !1;
                  if (i.length !== n.length) return !1;
                  for (let e = 0; e < i.length; e++) {
                    const t = i[e],
                      r = n[e];
                    if (
                      t.filename !== r.filename ||
                      t.lineno !== r.lineno ||
                      t.colno !== r.colno ||
                      t.function !== r.function
                    )
                      return !1;
                  }
                  return !0;
                }
                function u(e, t) {
                  let n = e.fingerprint,
                    r = t.fingerprint;
                  if (!n && !r) return !0;
                  if ((n && !r) || (!n && r)) return !1;
                  try {
                    return !(n.join('') !== r.join(''));
                  } catch (e) {
                    return !1;
                  }
                }
                function p(e) {
                  return e.exception && e.exception.values && e.exception.values[0];
                }
                (n._shouldDropEvent = a), (n.dedupeIntegration = s);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/dedupe.js',
      },
    ],
    [
      3180,
      { '../debug-build.js': 3167, '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = e('../debug-build.js'),
                  s = i.defineIntegration((e = {}) => {
                    const { depth: t = 3, captureErrorCause: n = !0 } = e;
                    return {
                      name: 'ExtraErrorData',
                      processEvent(e, i, s) {
                        const { maxValueLength: a = 250 } = s.getOptions();
                        return (function (e, t = {}, n, i, s) {
                          if (!t.originalException || !r.isError(t.originalException)) return e;
                          const a =
                              t.originalException.name || t.originalException.constructor.name,
                            c = (function (e, t, n) {
                              try {
                                const i = [
                                    'name',
                                    'message',
                                    'stack',
                                    'line',
                                    'column',
                                    'fileName',
                                    'lineNumber',
                                    'columnNumber',
                                    'toJSON',
                                  ],
                                  o = {};
                                for (const t of Object.keys(e)) {
                                  if (-1 !== i.indexOf(t)) continue;
                                  const s = e[t];
                                  o[t] =
                                    r.isError(s) || 'string' == typeof s
                                      ? r.truncate(`${s}`, n)
                                      : s;
                                }
                                if (
                                  (t &&
                                    e.cause !== undefined &&
                                    (o.cause = r.isError(e.cause) ? e.cause.toString() : e.cause),
                                  'function' == typeof e.toJSON)
                                ) {
                                  const t = e.toJSON();
                                  for (const e of Object.keys(t)) {
                                    const n = t[e];
                                    o[e] = r.isError(n) ? n.toString() : n;
                                  }
                                }
                                return o;
                              } catch (e) {
                                o.DEBUG_BUILD &&
                                  r.logger.error(
                                    'Unable to extract extra data from the Error object:',
                                    e
                                  );
                              }
                              return null;
                            })(t.originalException, i, s);
                          if (c) {
                            const t = { ...e.contexts },
                              i = r.normalize(c, n);
                            return (
                              r.isPlainObject(i) &&
                                (r.addNonEnumerableProperty(i, '__sentry_skip_normalization__', !0),
                                (t[a] = i)),
                              { ...e, contexts: t }
                            );
                          }
                          return e;
                        })(e, i, t, n, a);
                      },
                    };
                  });
                n.extraErrorDataIntegration = s;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js',
      },
    ],
    [
      3181,
      { '../currentScopes.js': 3166, '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../currentScopes.js'),
                  o = e('../integration.js');
                let s;
                const a = new WeakMap(),
                  c = o.defineIntegration(() => ({
                    name: 'FunctionToString',
                    setupOnce() {
                      s = Function.prototype.toString;
                      try {
                        Function.prototype.toString = function (...e) {
                          const t = r.getOriginalFunction(this),
                            n = a.has(i.getClient()) && t !== undefined ? t : this;
                          return s.apply(n, e);
                        };
                      } catch (e) {}
                    },
                    setup(e) {
                      a.set(e, !0);
                    },
                  }));
                n.functionToStringIntegration = c;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/functiontostring.js',
      },
    ],
    [
      3182,
      { '../debug-build.js': 3167, '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js'),
                  o = e('../integration.js'),
                  s = [
                    /^Script error\.?$/,
                    /^Javascript error: Script error\.? on line 0$/,
                    /^ResizeObserver loop completed with undelivered notifications.$/,
                    /^Cannot redefine property: googletag$/,
                    "undefined is not an object (evaluating 'a.L')",
                    'can\'t redefine non-configurable property "solana"',
                    "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)",
                    "Can't find variable: _AutofillCallbackHandler",
                  ],
                  a = o.defineIntegration((e = {}) => ({
                    name: 'InboundFilters',
                    processEvent(t, n, o) {
                      const a = o.getOptions(),
                        u = (function (e = {}, t = {}) {
                          return {
                            allowUrls: [...(e.allowUrls || []), ...(t.allowUrls || [])],
                            denyUrls: [...(e.denyUrls || []), ...(t.denyUrls || [])],
                            ignoreErrors: [
                              ...(e.ignoreErrors || []),
                              ...(t.ignoreErrors || []),
                              ...(e.disableErrorDefaults ? [] : s),
                            ],
                            ignoreTransactions: [
                              ...(e.ignoreTransactions || []),
                              ...(t.ignoreTransactions || []),
                            ],
                            ignoreInternal: e.ignoreInternal === undefined || e.ignoreInternal,
                          };
                        })(e, a);
                      return (function (e, t) {
                        if (
                          t.ignoreInternal &&
                          (function (e) {
                            try {
                              return 'SentryError' === e.exception.values[0].type;
                            } catch (e) {}
                            return !1;
                          })(e)
                        )
                          return (
                            i.DEBUG_BUILD &&
                              r.logger.warn(
                                `Event dropped due to being internal Sentry Error.\nEvent: ${r.getEventDescription(e)}`
                              ),
                            !0
                          );
                        if (
                          (function (e, t) {
                            if (e.type || !t || !t.length) return !1;
                            return (function (e) {
                              const t = [];
                              e.message && t.push(e.message);
                              let n;
                              try {
                                n = e.exception.values[e.exception.values.length - 1];
                              } catch (e) {}
                              n &&
                                n.value &&
                                (t.push(n.value), n.type && t.push(`${n.type}: ${n.value}`));
                              return t;
                            })(e).some(e => r.stringMatchesSomePattern(e, t));
                          })(e, t.ignoreErrors)
                        )
                          return (
                            i.DEBUG_BUILD &&
                              r.logger.warn(
                                `Event dropped due to being matched by \`ignoreErrors\` option.\nEvent: ${r.getEventDescription(e)}`
                              ),
                            !0
                          );
                        if (
                          (function (e) {
                            if (e.type) return !1;
                            if (
                              !e.exception ||
                              !e.exception.values ||
                              0 === e.exception.values.length
                            )
                              return !1;
                            return (
                              !e.message &&
                              !e.exception.values.some(
                                e => e.stacktrace || (e.type && 'Error' !== e.type) || e.value
                              )
                            );
                          })(e)
                        )
                          return (
                            i.DEBUG_BUILD &&
                              r.logger.warn(
                                `Event dropped due to not having an error message, error type or stacktrace.\nEvent: ${r.getEventDescription(e)}`
                              ),
                            !0
                          );
                        if (
                          (function (e, t) {
                            if ('transaction' !== e.type || !t || !t.length) return !1;
                            const n = e.transaction;
                            return !!n && r.stringMatchesSomePattern(n, t);
                          })(e, t.ignoreTransactions)
                        )
                          return (
                            i.DEBUG_BUILD &&
                              r.logger.warn(
                                `Event dropped due to being matched by \`ignoreTransactions\` option.\nEvent: ${r.getEventDescription(e)}`
                              ),
                            !0
                          );
                        if (
                          (function (e, t) {
                            if (!t || !t.length) return !1;
                            const n = c(e);
                            return !!n && r.stringMatchesSomePattern(n, t);
                          })(e, t.denyUrls)
                        )
                          return (
                            i.DEBUG_BUILD &&
                              r.logger.warn(
                                `Event dropped due to being matched by \`denyUrls\` option.\nEvent: ${r.getEventDescription(e)}.\nUrl: ${c(e)}`
                              ),
                            !0
                          );
                        if (
                          !(function (e, t) {
                            if (!t || !t.length) return !0;
                            const n = c(e);
                            return !n || r.stringMatchesSomePattern(n, t);
                          })(e, t.allowUrls)
                        )
                          return (
                            i.DEBUG_BUILD &&
                              r.logger.warn(
                                `Event dropped due to not being matched by \`allowUrls\` option.\nEvent: ${r.getEventDescription(e)}.\nUrl: ${c(e)}`
                              ),
                            !0
                          );
                        return !1;
                      })(t, u)
                        ? null
                        : t;
                    },
                  }));
                function c(e) {
                  try {
                    let t;
                    try {
                      t = e.exception.values[0].stacktrace.frames;
                    } catch (e) {}
                    return t
                      ? (function (e = []) {
                          for (let t = e.length - 1; t >= 0; t--) {
                            const n = e[t];
                            if (n && '<anonymous>' !== n.filename && '[native code]' !== n.filename)
                              return n.filename || null;
                          }
                          return null;
                        })(t)
                      : null;
                  } catch (t) {
                    return (
                      i.DEBUG_BUILD &&
                        r.logger.error(`Cannot extract url for event ${r.getEventDescription(e)}`),
                      null
                    );
                  }
                }
                n.inboundFiltersIntegration = a;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js',
      },
    ],
    [
      3183,
      { '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = i.defineIntegration((e = {}) => {
                    const t = e.limit || 5,
                      n = e.key || 'cause';
                    return {
                      name: 'LinkedErrors',
                      preprocessEvent(e, i, o) {
                        const s = o.getOptions();
                        r.applyAggregateErrorsToEvent(
                          r.exceptionFromError,
                          s.stackParser,
                          s.maxValueLength,
                          n,
                          t,
                          e,
                          i
                        );
                      },
                    };
                  });
                n.linkedErrorsIntegration = o;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/linkederrors.js',
      },
    ],
    [
      3184,
      { '../integration.js': 3176, '../metadata.js': 3190, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = e('../metadata.js'),
                  s = i.defineIntegration(() => ({
                    name: 'ModuleMetadata',
                    setup(e) {
                      e.on('beforeEnvelope', e => {
                        r.forEachEnvelopeItem(e, (e, t) => {
                          if ('event' === t) {
                            const t = Array.isArray(e) ? e[1] : undefined;
                            t && (o.stripMetadataFromStackFrames(t), (e[1] = t));
                          }
                        });
                      }),
                        e.on('applyFrameMetadata', t => {
                          if (t.type) return;
                          const n = e.getOptions().stackParser;
                          o.addMetadataToStackFrames(n, t);
                        });
                    },
                  }));
                n.moduleMetadataIntegration = s;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/metadata.js',
      },
    ],
    [
      3185,
      { '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = {
                    include: {
                      cookies: !0,
                      data: !0,
                      headers: !0,
                      ip: !1,
                      query_string: !0,
                      url: !0,
                      user: { id: !0, username: !0, email: !0 },
                    },
                    transactionNamingScheme: 'methodPath',
                  },
                  s = i.defineIntegration((e = {}) => {
                    const t = {
                      ...o,
                      ...e,
                      include: {
                        ...o.include,
                        ...e.include,
                        user:
                          e.include && 'boolean' == typeof e.include.user
                            ? e.include.user
                            : { ...o.include.user, ...(e.include || {}).user },
                      },
                    };
                    return {
                      name: 'RequestData',
                      processEvent(e) {
                        const { sdkProcessingMetadata: n = {} } = e,
                          i = n.request;
                        if (!i) return e;
                        const o = (function (e) {
                          const {
                              transactionNamingScheme: t,
                              include: { ip: n, user: r, ...i },
                            } = e,
                            o = ['method'];
                          for (const [e, t] of Object.entries(i)) t && o.push(e);
                          let s;
                          if (r === undefined) s = !0;
                          else if ('boolean' == typeof r) s = r;
                          else {
                            const e = [];
                            for (const [t, n] of Object.entries(r)) n && e.push(t);
                            s = e;
                          }
                          return {
                            include: {
                              ip: n,
                              user: s,
                              request: 0 !== o.length ? o : undefined,
                              transaction: t,
                            },
                          };
                        })(t);
                        return r.addRequestDataToEvent(e, i, o);
                      },
                    };
                  });
                n.requestDataIntegration = s;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/requestdata.js',
      },
    ],
    [
      3186,
      { '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = i.defineIntegration((e = {}) => {
                    const t = e.root,
                      n = e.prefix || 'app:///',
                      i = 'window' in r.GLOBAL_OBJ && r.GLOBAL_OBJ.window !== undefined,
                      o = e.iteratee || s({ isBrowser: i, root: t, prefix: n });
                    return {
                      name: 'RewriteFrames',
                      processEvent(e) {
                        let t = e;
                        return (
                          e.exception &&
                            Array.isArray(e.exception.values) &&
                            (t = (function (e) {
                              try {
                                return {
                                  ...e,
                                  exception: {
                                    ...e.exception,
                                    values: e.exception.values.map(e => {
                                      return {
                                        ...e,
                                        ...(e.stacktrace && {
                                          stacktrace:
                                            ((t = e.stacktrace),
                                            {
                                              ...t,
                                              frames: t && t.frames && t.frames.map(e => o(e)),
                                            }),
                                        }),
                                      };
                                      var t;
                                    }),
                                  },
                                };
                              } catch (t) {
                                return e;
                              }
                            })(t)),
                          t
                        );
                      },
                    };
                  });
                function s({ isBrowser: e, root: t, prefix: n }) {
                  return i => {
                    if (!i.filename) return i;
                    const o =
                        /^[a-zA-Z]:\\/.test(i.filename) ||
                        (i.filename.includes('\\') && !i.filename.includes('/')),
                      s = /^\//.test(i.filename);
                    if (e) {
                      if (t) {
                        const e = i.filename;
                        0 === e.indexOf(t) && (i.filename = e.replace(t, n));
                      }
                    } else if (o || s) {
                      const e = o
                          ? i.filename.replace(/^[a-zA-Z]:/, '').replace(/\\/g, '/')
                          : i.filename,
                        s = t ? r.relative(t, e) : r.basename(e);
                      i.filename = `${n}${s}`;
                    }
                    return i;
                  };
                }
                (n.generateIteratee = s), (n.rewriteFramesIntegration = o);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js',
      },
    ],
    [
      3187,
      { '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = i.defineIntegration(() => {
                    const e = 1e3 * r.timestampInSeconds();
                    return {
                      name: 'SessionTiming',
                      processEvent(t) {
                        const n = 1e3 * r.timestampInSeconds();
                        return {
                          ...t,
                          extra: {
                            ...t.extra,
                            'session:start': e,
                            'session:duration': n - e,
                            'session:end': n,
                          },
                        };
                      },
                    };
                  });
                n.sessionTimingIntegration = o;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js',
      },
    ],
    [
      3188,
      { '../integration.js': 3176, '../metadata.js': 3190, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js'),
                  o = e('../metadata.js'),
                  s = i.defineIntegration(e => ({
                    name: 'ThirdPartyErrorsFilter',
                    setup(e) {
                      e.on('beforeEnvelope', e => {
                        r.forEachEnvelopeItem(e, (e, t) => {
                          if ('event' === t) {
                            const t = Array.isArray(e) ? e[1] : undefined;
                            t && (o.stripMetadataFromStackFrames(t), (e[1] = t));
                          }
                        });
                      }),
                        e.on('applyFrameMetadata', t => {
                          if (t.type) return;
                          const n = e.getOptions().stackParser;
                          o.addMetadataToStackFrames(n, t);
                        });
                    },
                    processEvent(t) {
                      const n = (function (e) {
                        const t = r.getFramesFromEvent(e);
                        if (!t) return undefined;
                        return t
                          .filter(e => !!e.filename)
                          .map(e =>
                            e.module_metadata
                              ? Object.keys(e.module_metadata)
                                  .filter(e => e.startsWith(a))
                                  .map(e => e.slice(a.length))
                              : []
                          );
                      })(t);
                      if (n) {
                        if (
                          n[
                            'drop-error-if-contains-third-party-frames' === e.behaviour ||
                            'apply-tag-if-contains-third-party-frames' === e.behaviour
                              ? 'some'
                              : 'every'
                          ](t => !t.some(t => e.filterKeys.includes(t)))
                        ) {
                          if (
                            'drop-error-if-contains-third-party-frames' === e.behaviour ||
                            'drop-error-if-exclusively-contains-third-party-frames' === e.behaviour
                          )
                            return null;
                          t.tags = { ...t.tags, third_party_code: !0 };
                        }
                      }
                      return t;
                    },
                  }));
                const a = '_sentryBundlerPluginAppKey:';
                n.thirdPartyErrorFilterIntegration = s;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js',
      },
    ],
    [
      3189,
      { '../integration.js': 3176, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../integration.js');
                function o(e) {
                  return {
                    ...e,
                    path: 'path' in e && Array.isArray(e.path) ? e.path.join('.') : undefined,
                    keys: 'keys' in e ? JSON.stringify(e.keys) : undefined,
                    unionErrors: 'unionErrors' in e ? JSON.stringify(e.unionErrors) : undefined,
                  };
                }
                function s(e) {
                  const t = new Set();
                  for (const n of e.issues) n.path && n.path[0] && t.add(n.path[0]);
                  const n = Array.from(t);
                  return `Failed to validate keys: ${r.truncate(n.join(', '), 100)}`;
                }
                function a(e, t, n) {
                  return t.exception &&
                    t.exception.values &&
                    n &&
                    n.originalException &&
                    ((i = n.originalException),
                    r.isError(i) && 'ZodError' === i.name && Array.isArray(i.errors)) &&
                    0 !== n.originalException.issues.length
                    ? {
                        ...t,
                        exception: {
                          ...t.exception,
                          values: [
                            { ...t.exception.values[0], value: s(n.originalException) },
                            ...t.exception.values.slice(1),
                          ],
                        },
                        extra: {
                          ...t.extra,
                          'zoderror.issues': n.originalException.errors.slice(0, e).map(o),
                        },
                      }
                    : t;
                  var i;
                }
                const c = i.defineIntegration((e = {}) => {
                  const t = e.limit || 10;
                  return { name: 'ZodErrors', processEvent: (e, n) => a(t, e, n) };
                });
                (n.applyZodErrorsToEvent = a), (n.zodErrorsIntegration = c);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/integrations/zoderrors.js',
      },
    ],
    [
      3190,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = new Map(),
                  o = new Set();
                function s(e, t) {
                  return (
                    (function (e) {
                      if (r.GLOBAL_OBJ._sentryModuleMetadata)
                        for (const t of Object.keys(r.GLOBAL_OBJ._sentryModuleMetadata)) {
                          const n = r.GLOBAL_OBJ._sentryModuleMetadata[t];
                          if (o.has(t)) continue;
                          o.add(t);
                          const s = e(t);
                          for (const e of s.reverse())
                            if (e.filename) {
                              i.set(e.filename, n);
                              break;
                            }
                        }
                    })(e),
                    i.get(t)
                  );
                }
                (n.addMetadataToStackFrames = function (e, t) {
                  try {
                    t.exception.values.forEach(t => {
                      if (t.stacktrace)
                        for (const n of t.stacktrace.frames || []) {
                          if (!n.filename || n.module_metadata) continue;
                          const t = s(e, n.filename);
                          t && (n.module_metadata = t);
                        }
                    });
                  } catch (e) {}
                }),
                  (n.getMetadataForUrl = s),
                  (n.stripMetadataFromStackFrames = function (e) {
                    try {
                      e.exception.values.forEach(e => {
                        if (e.stacktrace)
                          for (const t of e.stacktrace.frames || []) delete t.module_metadata;
                      });
                    } catch (e) {}
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metadata.js',
      },
    ],
    [
      3191,
      {
        '../utils/spanUtils.js': 3233,
        './constants.js': 3193,
        './envelope.js': 3194,
        './instance.js': 3197,
        './utils.js': 3199,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../utils/spanUtils.js'),
                  o = e('./constants.js'),
                  s = e('./envelope.js'),
                  a = e('./instance.js'),
                  c = e('./utils.js');
                n.MetricsAggregator = class {
                  constructor(e) {
                    (this._client = e),
                      (this._buckets = new Map()),
                      (this._bucketsTotalWeight = 0),
                      (this._interval = setInterval(() => this._flush(), o.DEFAULT_FLUSH_INTERVAL)),
                      this._interval.unref && this._interval.unref(),
                      (this._flushShift = Math.floor(
                        (Math.random() * o.DEFAULT_FLUSH_INTERVAL) / 1e3
                      )),
                      (this._forceFlush = !1);
                  }
                  add(e, t, n, s = 'none', u = {}, p = r.timestampInSeconds()) {
                    const l = Math.floor(p),
                      d = c.sanitizeMetricKey(t),
                      _ = c.sanitizeTags(u),
                      T = c.sanitizeUnit(s),
                      y = c.getBucketKey(e, d, T, _);
                    let E = this._buckets.get(y);
                    const m = E && e === o.SET_METRIC_TYPE ? E.metric.weight : 0;
                    E
                      ? (E.metric.add(n), E.timestamp < l && (E.timestamp = l))
                      : ((E = {
                          metric: new a.METRIC_MAP[e](n),
                          timestamp: l,
                          metricType: e,
                          name: d,
                          unit: T,
                          tags: _,
                        }),
                        this._buckets.set(y, E));
                    const g = 'string' == typeof n ? E.metric.weight - m : n;
                    i.updateMetricSummaryOnActiveSpan(e, d, g, T, u, y),
                      (this._bucketsTotalWeight += E.metric.weight),
                      this._bucketsTotalWeight >= o.MAX_WEIGHT && this.flush();
                  }
                  flush() {
                    (this._forceFlush = !0), this._flush();
                  }
                  close() {
                    (this._forceFlush = !0), clearInterval(this._interval), this._flush();
                  }
                  _flush() {
                    if (this._forceFlush)
                      return (
                        (this._forceFlush = !1),
                        (this._bucketsTotalWeight = 0),
                        this._captureMetrics(this._buckets),
                        void this._buckets.clear()
                      );
                    const e =
                        Math.floor(r.timestampInSeconds()) -
                        o.DEFAULT_FLUSH_INTERVAL / 1e3 -
                        this._flushShift,
                      t = new Map();
                    for (const [n, r] of this._buckets)
                      r.timestamp <= e &&
                        (t.set(n, r), (this._bucketsTotalWeight -= r.metric.weight));
                    for (const [e] of t) this._buckets.delete(e);
                    this._captureMetrics(t);
                  }
                  _captureMetrics(e) {
                    if (e.size > 0) {
                      const t = Array.from(e).map(([, e]) => e);
                      s.captureAggregateMetrics(this._client, t);
                    }
                  }
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/aggregator.js',
      },
    ],
    [
      3192,
      {
        '../utils/spanUtils.js': 3233,
        './constants.js': 3193,
        './envelope.js': 3194,
        './instance.js': 3197,
        './utils.js': 3199,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../utils/spanUtils.js'),
                  o = e('./constants.js'),
                  s = e('./envelope.js'),
                  a = e('./instance.js'),
                  c = e('./utils.js');
                n.BrowserMetricsAggregator = class {
                  constructor(e) {
                    (this._client = e),
                      (this._buckets = new Map()),
                      (this._interval = setInterval(
                        () => this.flush(),
                        o.DEFAULT_BROWSER_FLUSH_INTERVAL
                      ));
                  }
                  add(e, t, n, s = 'none', u = {}, p = r.timestampInSeconds()) {
                    const l = Math.floor(p),
                      d = c.sanitizeMetricKey(t),
                      _ = c.sanitizeTags(u),
                      T = c.sanitizeUnit(s),
                      y = c.getBucketKey(e, d, T, _);
                    let E = this._buckets.get(y);
                    const m = E && e === o.SET_METRIC_TYPE ? E.metric.weight : 0;
                    E
                      ? (E.metric.add(n), E.timestamp < l && (E.timestamp = l))
                      : ((E = {
                          metric: new a.METRIC_MAP[e](n),
                          timestamp: l,
                          metricType: e,
                          name: d,
                          unit: T,
                          tags: _,
                        }),
                        this._buckets.set(y, E));
                    const g = 'string' == typeof n ? E.metric.weight - m : n;
                    i.updateMetricSummaryOnActiveSpan(e, d, g, T, u, y);
                  }
                  flush() {
                    if (0 === this._buckets.size) return;
                    const e = Array.from(this._buckets.values());
                    s.captureAggregateMetrics(this._client, e), this._buckets.clear();
                  }
                  close() {
                    clearInterval(this._interval), this.flush();
                  }
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js',
      },
    ],
    [
      3193,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                (n.COUNTER_METRIC_TYPE = 'c'),
                  (n.DEFAULT_BROWSER_FLUSH_INTERVAL = 5e3),
                  (n.DEFAULT_FLUSH_INTERVAL = 1e4),
                  (n.DISTRIBUTION_METRIC_TYPE = 'd'),
                  (n.GAUGE_METRIC_TYPE = 'g'),
                  (n.MAX_WEIGHT = 1e4),
                  (n.SET_METRIC_TYPE = 's');
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/constants.js',
      },
    ],
    [
      3194,
      { './utils.js': 3199, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./utils.js');
                function o(e, t, n, o) {
                  const s = { sent_at: new Date().toISOString() };
                  n && n.sdk && (s.sdk = { name: n.sdk.name, version: n.sdk.version }),
                    o && t && (s.dsn = r.dsnToString(t));
                  const a = (function (e) {
                    const t = i.serializeMetricBuckets(e);
                    return [{ type: 'statsd', length: t.length }, t];
                  })(e);
                  return r.createEnvelope(s, [a]);
                }
                (n.captureAggregateMetrics = function (e, t) {
                  r.logger.log(`Flushing aggregated metrics, number of metrics: ${t.length}`);
                  const n = o(t, e.getDsn(), e.getSdkMetadata(), e.getOptions().tunnel);
                  e.sendEnvelope(n);
                }),
                  (n.createMetricEnvelope = o);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/envelope.js',
      },
    ],
    [
      3195,
      { './aggregator.js': 3191, './exports.js': 3196 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./aggregator.js'),
                  i = e('./exports.js');
                const o = {
                  increment: function (e, t = 1, n) {
                    i.metrics.increment(r.MetricsAggregator, e, t, n);
                  },
                  distribution: function (e, t, n) {
                    i.metrics.distribution(r.MetricsAggregator, e, t, n);
                  },
                  set: function (e, t, n) {
                    i.metrics.set(r.MetricsAggregator, e, t, n);
                  },
                  gauge: function (e, t, n) {
                    i.metrics.gauge(r.MetricsAggregator, e, t, n);
                  },
                  timing: function (e, t, n = 'second', o) {
                    return i.metrics.timing(r.MetricsAggregator, e, t, n, o);
                  },
                  getMetricsAggregatorForClient: function (e) {
                    return i.metrics.getMetricsAggregatorForClient(e, r.MetricsAggregator);
                  },
                };
                n.metricsDefault = o;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/exports-default.js',
      },
    ],
    [
      3196,
      {
        '../currentScopes.js': 3166,
        '../debug-build.js': 3167,
        '../tracing/errors.js': 3208,
        '../tracing/trace.js': 3217,
        '../utils/handleCallbackErrors.js': 3224,
        '../utils/spanUtils.js': 3233,
        './constants.js': 3193,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../currentScopes.js'),
                  o = e('../debug-build.js');
                e('../tracing/errors.js');
                const s = e('../utils/spanUtils.js'),
                  a = e('../tracing/trace.js'),
                  c = e('../utils/handleCallbackErrors.js'),
                  u = e('./constants.js');
                function p(e, t) {
                  const n = r.getGlobalSingleton('globalMetricsAggregators', () => new WeakMap()),
                    i = n.get(e);
                  if (i) return i;
                  const o = new t(e);
                  return (
                    e.on('flush', () => o.flush()), e.on('close', () => o.close()), n.set(e, o), o
                  );
                }
                function l(e, t, n, a, c = {}) {
                  const u = c.client || i.getClient();
                  if (!u) return;
                  const l = s.getActiveSpan(),
                    d = l ? s.getRootSpan(l) : undefined,
                    _ = d && s.spanToJSON(d).description,
                    { unit: T, tags: y, timestamp: E } = c,
                    { release: m, environment: g } = u.getOptions(),
                    S = {};
                  m && (S.release = m),
                    g && (S.environment = g),
                    _ && (S.transaction = _),
                    o.DEBUG_BUILD && r.logger.log(`Adding value of ${a} to ${t} metric ${n}`);
                  p(u, e).add(t, n, a, T, { ...S, ...y }, E);
                }
                function d(e, t, n, r) {
                  l(e, u.DISTRIBUTION_METRIC_TYPE, t, T(n), r);
                }
                const _ = {
                  increment: function (e, t, n = 1, r) {
                    l(e, u.COUNTER_METRIC_TYPE, t, T(n), r);
                  },
                  distribution: d,
                  set: function (e, t, n, r) {
                    l(e, u.SET_METRIC_TYPE, t, n, r);
                  },
                  gauge: function (e, t, n, r) {
                    l(e, u.GAUGE_METRIC_TYPE, t, T(n), r);
                  },
                  timing: function (e, t, n, i = 'second', o) {
                    if ('function' == typeof n) {
                      const i = r.timestampInSeconds();
                      return a.startSpanManual(
                        { op: 'metrics.timing', name: t, startTime: i, onlyIfParent: !0 },
                        s =>
                          c.handleCallbackErrors(
                            () => n(),
                            () => {},
                            () => {
                              const n = r.timestampInSeconds();
                              d(e, t, n - i, { ...o, unit: 'second' }), s.end(n);
                            }
                          )
                      );
                    }
                    d(e, t, n, { ...o, unit: i });
                  },
                  getMetricsAggregatorForClient: p,
                };
                function T(e) {
                  return 'string' == typeof e ? parseInt(e) : e;
                }
                n.metrics = _;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/exports.js',
      },
    ],
    [
      3197,
      { './constants.js': 3193, './utils.js': 3199 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./constants.js'),
                  i = e('./utils.js');
                class o {
                  constructor(e) {
                    this._value = e;
                  }
                  get weight() {
                    return 1;
                  }
                  add(e) {
                    this._value += e;
                  }
                  toString() {
                    return `${this._value}`;
                  }
                }
                class s {
                  constructor(e) {
                    (this._last = e),
                      (this._min = e),
                      (this._max = e),
                      (this._sum = e),
                      (this._count = 1);
                  }
                  get weight() {
                    return 5;
                  }
                  add(e) {
                    (this._last = e),
                      e < this._min && (this._min = e),
                      e > this._max && (this._max = e),
                      (this._sum += e),
                      this._count++;
                  }
                  toString() {
                    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;
                  }
                }
                class a {
                  constructor(e) {
                    this._value = [e];
                  }
                  get weight() {
                    return this._value.length;
                  }
                  add(e) {
                    this._value.push(e);
                  }
                  toString() {
                    return this._value.join(':');
                  }
                }
                class c {
                  constructor(e) {
                    (this.first = e), (this._value = new Set([e]));
                  }
                  get weight() {
                    return this._value.size;
                  }
                  add(e) {
                    this._value.add(e);
                  }
                  toString() {
                    return Array.from(this._value)
                      .map(e => ('string' == typeof e ? i.simpleHash(e) : e))
                      .join(':');
                  }
                }
                const u = {
                  [r.COUNTER_METRIC_TYPE]: o,
                  [r.GAUGE_METRIC_TYPE]: s,
                  [r.DISTRIBUTION_METRIC_TYPE]: a,
                  [r.SET_METRIC_TYPE]: c,
                };
                (n.CounterMetric = o),
                  (n.DistributionMetric = a),
                  (n.GaugeMetric = s),
                  (n.METRIC_MAP = u),
                  (n.SetMetric = c);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/instance.js',
      },
    ],
    [
      3198,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = '_sentryMetrics';
                (n.getMetricSummaryJsonForSpan = function (e) {
                  const t = e[i];
                  if (!t) return undefined;
                  const n = {};
                  for (const [, [e, i]] of t) {
                    (n[e] || (n[e] = [])).push(r.dropUndefinedKeys(i));
                  }
                  return n;
                }),
                  (n.updateMetricSummaryOnSpan = function (e, t, n, r, o, s, a) {
                    const c = e[i] || (e[i] = new Map()),
                      u = `${t}:${n}@${o}`,
                      p = c.get(a);
                    if (p) {
                      const [, e] = p;
                      c.set(a, [
                        u,
                        {
                          min: Math.min(e.min, r),
                          max: Math.max(e.max, r),
                          count: (e.count += 1),
                          sum: (e.sum += r),
                          tags: e.tags,
                        },
                      ]);
                    } else c.set(a, [u, { min: r, max: r, count: 1, sum: r, tags: s }]);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/metric-summary.js',
      },
    ],
    [
      3199,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                function i(e) {
                  return e.replace(/[^\w\-./]+/gi, '');
                }
                const o = [
                  ['\n', '\\n'],
                  ['\r', '\\r'],
                  ['\t', '\\t'],
                  ['\\', '\\\\'],
                  ['|', '\\u{7c}'],
                  [',', '\\u{2c}'],
                ];
                function s(e) {
                  return [...e].reduce(
                    (e, t) =>
                      e +
                      (function (e) {
                        for (const [t, n] of o) if (e === t) return n;
                        return e;
                      })(t),
                    ''
                  );
                }
                (n.getBucketKey = function (e, t, n, i) {
                  return `${e}${t}${n}${Object.entries(r.dropUndefinedKeys(i)).sort((e, t) => e[0].localeCompare(t[0]))}`;
                }),
                  (n.sanitizeMetricKey = function (e) {
                    return e.replace(/[^\w\-.]+/gi, '_');
                  }),
                  (n.sanitizeTags = function (e) {
                    const t = {};
                    for (const n in e)
                      if (Object.prototype.hasOwnProperty.call(e, n)) {
                        t[i(n)] = s(String(e[n]));
                      }
                    return t;
                  }),
                  (n.sanitizeUnit = function (e) {
                    return e.replace(/[^\w]+/gi, '_');
                  }),
                  (n.serializeMetricBuckets = function (e) {
                    let t = '';
                    for (const n of e) {
                      const e = Object.entries(n.tags),
                        r = e.length > 0 ? `|#${e.map(([e, t]) => `${e}:${t}`).join(',')}` : '';
                      t += `${n.name}@${n.unit}:${n.metric}|${n.metricType}${r}|T${n.timestamp}\n`;
                    }
                    return t;
                  }),
                  (n.simpleHash = function (e) {
                    let t = 0;
                    for (let n = 0; n < e.length; n++) {
                      (t = (t << 5) - t + e.charCodeAt(n)), (t &= t);
                    }
                    return t >>> 0;
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/metrics/utils.js',
      },
    ],
    [
      3200,
      { './currentScopes.js': 3166, './debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js'),
                  o = e('./debug-build.js');
                function s(e) {
                  return (
                    !!e &&
                    void 0 !== e._profiler &&
                    'function' == typeof e._profiler.start &&
                    'function' == typeof e._profiler.stop
                  );
                }
                const a = {
                  startProfiler: function () {
                    const e = i.getClient();
                    if (!e)
                      return void (
                        o.DEBUG_BUILD &&
                        r.logger.warn('No Sentry client available, profiling is not started')
                      );
                    const t = e.getIntegrationByName('ProfilingIntegration');
                    t
                      ? s(t)
                        ? t._profiler.start()
                        : o.DEBUG_BUILD &&
                          r.logger.warn('Profiler is not available on profiling integration.')
                      : o.DEBUG_BUILD && r.logger.warn('ProfilingIntegration is not available');
                  },
                  stopProfiler: function () {
                    const e = i.getClient();
                    if (!e)
                      return void (
                        o.DEBUG_BUILD &&
                        r.logger.warn('No Sentry client available, profiling is not started')
                      );
                    const t = e.getIntegrationByName('ProfilingIntegration');
                    t
                      ? s(t)
                        ? t._profiler.stop()
                        : o.DEBUG_BUILD &&
                          r.logger.warn('Profiler is not available on profiling integration.')
                      : o.DEBUG_BUILD && r.logger.warn('ProfilingIntegration is not available');
                  },
                };
                n.profiler = a;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/profiling.js',
      },
    ],
    [
      3201,
      { './session.js': 3205, './utils/spanOnScope.js': 3232, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./session.js'),
                  o = e('./utils/spanOnScope.js');
                class s {
                  constructor() {
                    (this._notifyingListeners = !1),
                      (this._scopeListeners = []),
                      (this._eventProcessors = []),
                      (this._breadcrumbs = []),
                      (this._attachments = []),
                      (this._user = {}),
                      (this._tags = {}),
                      (this._extra = {}),
                      (this._contexts = {}),
                      (this._sdkProcessingMetadata = {}),
                      (this._propagationContext = r.generatePropagationContext());
                  }
                  clone() {
                    const e = new s();
                    return (
                      (e._breadcrumbs = [...this._breadcrumbs]),
                      (e._tags = { ...this._tags }),
                      (e._extra = { ...this._extra }),
                      (e._contexts = { ...this._contexts }),
                      (e._user = this._user),
                      (e._level = this._level),
                      (e._session = this._session),
                      (e._transactionName = this._transactionName),
                      (e._fingerprint = this._fingerprint),
                      (e._eventProcessors = [...this._eventProcessors]),
                      (e._requestSession = this._requestSession),
                      (e._attachments = [...this._attachments]),
                      (e._sdkProcessingMetadata = { ...this._sdkProcessingMetadata }),
                      (e._propagationContext = { ...this._propagationContext }),
                      (e._client = this._client),
                      (e._lastEventId = this._lastEventId),
                      o._setSpanForScope(e, o._getSpanForScope(this)),
                      e
                    );
                  }
                  setClient(e) {
                    this._client = e;
                  }
                  setLastEventId(e) {
                    this._lastEventId = e;
                  }
                  getClient() {
                    return this._client;
                  }
                  lastEventId() {
                    return this._lastEventId;
                  }
                  addScopeListener(e) {
                    this._scopeListeners.push(e);
                  }
                  addEventProcessor(e) {
                    return this._eventProcessors.push(e), this;
                  }
                  setUser(e) {
                    return (
                      (this._user = e || {
                        email: undefined,
                        id: undefined,
                        ip_address: undefined,
                        username: undefined,
                      }),
                      this._session && i.updateSession(this._session, { user: e }),
                      this._notifyScopeListeners(),
                      this
                    );
                  }
                  getUser() {
                    return this._user;
                  }
                  getRequestSession() {
                    return this._requestSession;
                  }
                  setRequestSession(e) {
                    return (this._requestSession = e), this;
                  }
                  setTags(e) {
                    return (
                      (this._tags = { ...this._tags, ...e }), this._notifyScopeListeners(), this
                    );
                  }
                  setTag(e, t) {
                    return (
                      (this._tags = { ...this._tags, [e]: t }), this._notifyScopeListeners(), this
                    );
                  }
                  setExtras(e) {
                    return (
                      (this._extra = { ...this._extra, ...e }), this._notifyScopeListeners(), this
                    );
                  }
                  setExtra(e, t) {
                    return (
                      (this._extra = { ...this._extra, [e]: t }), this._notifyScopeListeners(), this
                    );
                  }
                  setFingerprint(e) {
                    return (this._fingerprint = e), this._notifyScopeListeners(), this;
                  }
                  setLevel(e) {
                    return (this._level = e), this._notifyScopeListeners(), this;
                  }
                  setTransactionName(e) {
                    return (this._transactionName = e), this._notifyScopeListeners(), this;
                  }
                  setContext(e, t) {
                    return (
                      null === t ? delete this._contexts[e] : (this._contexts[e] = t),
                      this._notifyScopeListeners(),
                      this
                    );
                  }
                  setSession(e) {
                    return (
                      e ? (this._session = e) : delete this._session,
                      this._notifyScopeListeners(),
                      this
                    );
                  }
                  getSession() {
                    return this._session;
                  }
                  update(e) {
                    if (!e) return this;
                    const t = 'function' == typeof e ? e(this) : e,
                      [n, i] =
                        t instanceof a
                          ? [t.getScopeData(), t.getRequestSession()]
                          : r.isPlainObject(t)
                            ? [e, e.requestSession]
                            : [],
                      {
                        tags: o,
                        extra: s,
                        user: c,
                        contexts: u,
                        level: p,
                        fingerprint: l = [],
                        propagationContext: d,
                      } = n || {};
                    return (
                      (this._tags = { ...this._tags, ...o }),
                      (this._extra = { ...this._extra, ...s }),
                      (this._contexts = { ...this._contexts, ...u }),
                      c && Object.keys(c).length && (this._user = c),
                      p && (this._level = p),
                      l.length && (this._fingerprint = l),
                      d && (this._propagationContext = d),
                      i && (this._requestSession = i),
                      this
                    );
                  }
                  clear() {
                    return (
                      (this._breadcrumbs = []),
                      (this._tags = {}),
                      (this._extra = {}),
                      (this._user = {}),
                      (this._contexts = {}),
                      (this._level = undefined),
                      (this._transactionName = undefined),
                      (this._fingerprint = undefined),
                      (this._requestSession = undefined),
                      (this._session = undefined),
                      o._setSpanForScope(this, undefined),
                      (this._attachments = []),
                      (this._propagationContext = r.generatePropagationContext()),
                      this._notifyScopeListeners(),
                      this
                    );
                  }
                  addBreadcrumb(e, t) {
                    const n = 'number' == typeof t ? t : 100;
                    if (n <= 0) return this;
                    const i = { timestamp: r.dateTimestampInSeconds(), ...e },
                      o = this._breadcrumbs;
                    return (
                      o.push(i),
                      (this._breadcrumbs = o.length > n ? o.slice(-n) : o),
                      this._notifyScopeListeners(),
                      this
                    );
                  }
                  getLastBreadcrumb() {
                    return this._breadcrumbs[this._breadcrumbs.length - 1];
                  }
                  clearBreadcrumbs() {
                    return (this._breadcrumbs = []), this._notifyScopeListeners(), this;
                  }
                  addAttachment(e) {
                    return this._attachments.push(e), this;
                  }
                  clearAttachments() {
                    return (this._attachments = []), this;
                  }
                  getScopeData() {
                    return {
                      breadcrumbs: this._breadcrumbs,
                      attachments: this._attachments,
                      contexts: this._contexts,
                      tags: this._tags,
                      extra: this._extra,
                      user: this._user,
                      level: this._level,
                      fingerprint: this._fingerprint || [],
                      eventProcessors: this._eventProcessors,
                      propagationContext: this._propagationContext,
                      sdkProcessingMetadata: this._sdkProcessingMetadata,
                      transactionName: this._transactionName,
                      span: o._getSpanForScope(this),
                    };
                  }
                  setSDKProcessingMetadata(e) {
                    return (
                      (this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...e }), this
                    );
                  }
                  setPropagationContext(e) {
                    return (this._propagationContext = e), this;
                  }
                  getPropagationContext() {
                    return this._propagationContext;
                  }
                  captureException(e, t) {
                    const n = t && t.event_id ? t.event_id : r.uuid4();
                    if (!this._client)
                      return (
                        r.logger.warn(
                          'No client configured on scope - will not capture exception!'
                        ),
                        n
                      );
                    const i = new Error('Sentry syntheticException');
                    return (
                      this._client.captureException(
                        e,
                        { originalException: e, syntheticException: i, ...t, event_id: n },
                        this
                      ),
                      n
                    );
                  }
                  captureMessage(e, t, n) {
                    const i = n && n.event_id ? n.event_id : r.uuid4();
                    if (!this._client)
                      return (
                        r.logger.warn('No client configured on scope - will not capture message!'),
                        i
                      );
                    const o = new Error(e);
                    return (
                      this._client.captureMessage(
                        e,
                        t,
                        { originalException: e, syntheticException: o, ...n, event_id: i },
                        this
                      ),
                      i
                    );
                  }
                  captureEvent(e, t) {
                    const n = t && t.event_id ? t.event_id : r.uuid4();
                    return this._client
                      ? (this._client.captureEvent(e, { ...t, event_id: n }, this), n)
                      : (r.logger.warn('No client configured on scope - will not capture event!'),
                        n);
                  }
                  _notifyScopeListeners() {
                    this._notifyingListeners ||
                      ((this._notifyingListeners = !0),
                      this._scopeListeners.forEach(e => {
                        e(this);
                      }),
                      (this._notifyingListeners = !1));
                  }
                }
                const a = s;
                n.Scope = a;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/scope.js',
      },
    ],
    [
      3202,
      { './currentScopes.js': 3166, './debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js'),
                  o = e('./debug-build.js');
                function s(e) {
                  i.getCurrentScope().setClient(e);
                }
                (n.initAndBind = function (e, t) {
                  !0 === t.debug &&
                    (o.DEBUG_BUILD
                      ? r.logger.enable()
                      : r.consoleSandbox(() => {
                          console.warn(
                            '[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.'
                          );
                        })),
                    i.getCurrentScope().update(t.initialScope);
                  const n = new e(t);
                  return s(n), n.init(), n;
                }),
                  (n.setCurrentClient = s);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/sdk.js',
      },
    ],
    [
      3203,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                (n.SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit'),
                  (n.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size'),
                  (n.SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key'),
                  (n.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time'),
                  (n.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method'),
                  (n.SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON =
                    'sentry.idle_span_finish_reason'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate'),
                  (n.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source'),
                  (n.SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full');
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/semanticAttributes.js',
      },
    ],
    [
      3204,
      {
        './baseclient.js': 3161,
        './checkin.js': 3164,
        './currentScopes.js': 3166,
        './debug-build.js': 3167,
        './sessionflusher.js': 3206,
        './tracing/dynamicSamplingContext.js': 3207,
        './tracing/errors.js': 3208,
        './utils/spanOnScope.js': 3232,
        './utils/spanUtils.js': 3233,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./baseclient.js'),
                  o = e('./checkin.js'),
                  s = e('./currentScopes.js'),
                  a = e('./debug-build.js'),
                  c = e('./sessionflusher.js'),
                  u = e('./tracing/errors.js'),
                  p = e('./utils/spanOnScope.js'),
                  l = e('./utils/spanUtils.js'),
                  d = e('./tracing/dynamicSamplingContext.js');
                class _ extends i.BaseClient {
                  constructor(e) {
                    u.registerSpanErrorInstrumentation(), super(e);
                  }
                  eventFromException(e, t) {
                    return r.resolvedSyncPromise(
                      r.eventFromUnknownInput(this, this._options.stackParser, e, t)
                    );
                  }
                  eventFromMessage(e, t = 'info', n) {
                    return r.resolvedSyncPromise(
                      r.eventFromMessage(
                        this._options.stackParser,
                        e,
                        t,
                        n,
                        this._options.attachStacktrace
                      )
                    );
                  }
                  captureException(e, t, n) {
                    if (this._options.autoSessionTracking && this._sessionFlusher) {
                      const e = s.getIsolationScope().getRequestSession();
                      e && 'ok' === e.status && (e.status = 'errored');
                    }
                    return super.captureException(e, t, n);
                  }
                  captureEvent(e, t, n) {
                    if (this._options.autoSessionTracking && this._sessionFlusher) {
                      if (
                        'exception' === (e.type || 'exception') &&
                        e.exception &&
                        e.exception.values &&
                        e.exception.values.length > 0
                      ) {
                        const e = s.getIsolationScope().getRequestSession();
                        e && 'ok' === e.status && (e.status = 'errored');
                      }
                    }
                    return super.captureEvent(e, t, n);
                  }
                  close(e) {
                    return this._sessionFlusher && this._sessionFlusher.close(), super.close(e);
                  }
                  initSessionFlusher() {
                    const { release: e, environment: t } = this._options;
                    e
                      ? (this._sessionFlusher = new c.SessionFlusher(this, {
                          release: e,
                          environment: t,
                        }))
                      : a.DEBUG_BUILD &&
                        r.logger.warn(
                          'Cannot initialise an instance of SessionFlusher if no release is provided!'
                        );
                  }
                  captureCheckIn(e, t, n) {
                    const i = 'checkInId' in e && e.checkInId ? e.checkInId : r.uuid4();
                    if (!this._isEnabled())
                      return (
                        a.DEBUG_BUILD &&
                          r.logger.warn('SDK not enabled, will not capture checkin.'),
                        i
                      );
                    const s = this.getOptions(),
                      { release: c, environment: u, tunnel: p } = s,
                      l = {
                        check_in_id: i,
                        monitor_slug: e.monitorSlug,
                        status: e.status,
                        release: c,
                        environment: u,
                      };
                    'duration' in e && (l.duration = e.duration),
                      t &&
                        (l.monitor_config = {
                          schedule: t.schedule,
                          checkin_margin: t.checkinMargin,
                          max_runtime: t.maxRuntime,
                          timezone: t.timezone,
                          failure_issue_threshold: t.failureIssueThreshold,
                          recovery_threshold: t.recoveryThreshold,
                        });
                    const [d, _] = this._getTraceInfoFromScope(n);
                    _ && (l.contexts = { trace: _ });
                    const T = o.createCheckInEnvelope(
                      l,
                      d,
                      this.getSdkMetadata(),
                      p,
                      this.getDsn()
                    );
                    return (
                      a.DEBUG_BUILD && r.logger.info('Sending checkin:', e.monitorSlug, e.status),
                      this.sendEnvelope(T),
                      i
                    );
                  }
                  _captureRequestSession() {
                    this._sessionFlusher
                      ? this._sessionFlusher.incrementSessionStatusCount()
                      : a.DEBUG_BUILD &&
                        r.logger.warn(
                          'Discarded request mode session because autoSessionTracking option was disabled'
                        );
                  }
                  _prepareEvent(e, t, n, r) {
                    return (
                      this._options.platform && (e.platform = e.platform || this._options.platform),
                      this._options.runtime &&
                        (e.contexts = {
                          ...e.contexts,
                          runtime: (e.contexts || {}).runtime || this._options.runtime,
                        }),
                      this._options.serverName &&
                        (e.server_name = e.server_name || this._options.serverName),
                      super._prepareEvent(e, t, n, r)
                    );
                  }
                  _getTraceInfoFromScope(e) {
                    if (!e) return [undefined, undefined];
                    const t = p._getSpanForScope(e);
                    if (t) {
                      const e = l.getRootSpan(t);
                      return [d.getDynamicSamplingContextFromSpan(e), l.spanToTraceContext(e)];
                    }
                    const {
                        traceId: n,
                        spanId: r,
                        parentSpanId: i,
                        dsc: o,
                      } = e.getPropagationContext(),
                      s = { trace_id: n, span_id: r, parent_span_id: i };
                    return o ? [o, s] : [d.getDynamicSamplingContextFromClient(n, this), s];
                  }
                }
                n.ServerRuntimeClient = _;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/server-runtime-client.js',
      },
    ],
    [
      3205,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                function i(e, t = {}) {
                  if (
                    (t.user &&
                      (!e.ipAddress && t.user.ip_address && (e.ipAddress = t.user.ip_address),
                      e.did || t.did || (e.did = t.user.id || t.user.email || t.user.username)),
                    (e.timestamp = t.timestamp || r.timestampInSeconds()),
                    t.abnormal_mechanism && (e.abnormal_mechanism = t.abnormal_mechanism),
                    t.ignoreDuration && (e.ignoreDuration = t.ignoreDuration),
                    t.sid && (e.sid = 32 === t.sid.length ? t.sid : r.uuid4()),
                    t.init !== undefined && (e.init = t.init),
                    !e.did && t.did && (e.did = `${t.did}`),
                    'number' == typeof t.started && (e.started = t.started),
                    e.ignoreDuration)
                  )
                    e.duration = undefined;
                  else if ('number' == typeof t.duration) e.duration = t.duration;
                  else {
                    const t = e.timestamp - e.started;
                    e.duration = t >= 0 ? t : 0;
                  }
                  t.release && (e.release = t.release),
                    t.environment && (e.environment = t.environment),
                    !e.ipAddress && t.ipAddress && (e.ipAddress = t.ipAddress),
                    !e.userAgent && t.userAgent && (e.userAgent = t.userAgent),
                    'number' == typeof t.errors && (e.errors = t.errors),
                    t.status && (e.status = t.status);
                }
                (n.closeSession = function (e, t) {
                  let n = {};
                  t ? (n = { status: t }) : 'ok' === e.status && (n = { status: 'exited' }),
                    i(e, n);
                }),
                  (n.makeSession = function (e) {
                    const t = r.timestampInSeconds(),
                      n = {
                        sid: r.uuid4(),
                        init: !0,
                        timestamp: t,
                        started: t,
                        duration: 0,
                        status: 'ok',
                        errors: 0,
                        ignoreDuration: !1,
                        toJSON: () =>
                          (function (e) {
                            return r.dropUndefinedKeys({
                              sid: `${e.sid}`,
                              init: e.init,
                              started: new Date(1e3 * e.started).toISOString(),
                              timestamp: new Date(1e3 * e.timestamp).toISOString(),
                              status: e.status,
                              errors: e.errors,
                              did:
                                'number' == typeof e.did || 'string' == typeof e.did
                                  ? `${e.did}`
                                  : undefined,
                              duration: e.duration,
                              abnormal_mechanism: e.abnormal_mechanism,
                              attrs: {
                                release: e.release,
                                environment: e.environment,
                                ip_address: e.ipAddress,
                                user_agent: e.userAgent,
                              },
                            });
                          })(n),
                      };
                    return e && i(n, e), n;
                  }),
                  (n.updateSession = i);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/session.js',
      },
    ],
    [
      3206,
      { './currentScopes.js': 3166, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js');
                n.SessionFlusher = class {
                  constructor(e, t) {
                    (this._client = e),
                      (this.flushTimeout = 60),
                      (this._pendingAggregates = new Map()),
                      (this._isEnabled = !0),
                      (this._intervalId = setInterval(() => this.flush(), 1e3 * this.flushTimeout)),
                      this._intervalId.unref && this._intervalId.unref(),
                      (this._sessionAttrs = t);
                  }
                  flush() {
                    const e = this.getSessionAggregates();
                    0 !== e.aggregates.length &&
                      ((this._pendingAggregates = new Map()), this._client.sendSession(e));
                  }
                  getSessionAggregates() {
                    const e = Array.from(this._pendingAggregates.values()),
                      t = { attrs: this._sessionAttrs, aggregates: e };
                    return r.dropUndefinedKeys(t);
                  }
                  close() {
                    clearInterval(this._intervalId), (this._isEnabled = !1), this.flush();
                  }
                  incrementSessionStatusCount() {
                    if (!this._isEnabled) return;
                    const e = i.getIsolationScope(),
                      t = e.getRequestSession();
                    t &&
                      t.status &&
                      (this._incrementSessionStatusCount(t.status, new Date()),
                      e.setRequestSession(undefined));
                  }
                  _incrementSessionStatusCount(e, t) {
                    const n = new Date(t).setSeconds(0, 0);
                    let r = this._pendingAggregates.get(n);
                    switch (
                      (r ||
                        ((r = { started: new Date(n).toISOString() }),
                        this._pendingAggregates.set(n, r)),
                      e)
                    ) {
                      case 'errored':
                        return (r.errored = (r.errored || 0) + 1), r.errored;
                      case 'ok':
                        return (r.exited = (r.exited || 0) + 1), r.exited;
                      default:
                        return (r.crashed = (r.crashed || 0) + 1), r.crashed;
                    }
                  }
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/sessionflusher.js',
      },
    ],
    [
      3207,
      {
        '../constants.js': 3165,
        '../currentScopes.js': 3166,
        '../semanticAttributes.js': 3203,
        '../utils/hasTracingEnabled.js': 3225,
        '../utils/spanUtils.js': 3233,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../constants.js'),
                  o = e('../currentScopes.js'),
                  s = e('../semanticAttributes.js'),
                  a = e('../utils/hasTracingEnabled.js'),
                  c = e('../utils/spanUtils.js'),
                  u = '_frozenDsc';
                function p(e, t) {
                  const n = t.getOptions(),
                    { publicKey: o } = t.getDsn() || {},
                    s = r.dropUndefinedKeys({
                      environment: n.environment || i.DEFAULT_ENVIRONMENT,
                      release: n.release,
                      public_key: o,
                      trace_id: e,
                    });
                  return t.emit('createDsc', s), s;
                }
                function l(e) {
                  const t = o.getClient();
                  if (!t) return {};
                  const n = p(c.spanToJSON(e).trace_id || '', t),
                    i = c.getRootSpan(e),
                    l = i[u];
                  if (l) return l;
                  const d = i.spanContext().traceState,
                    _ = d && d.get('sentry.dsc'),
                    T = _ && r.baggageHeaderToDynamicSamplingContext(_);
                  if (T) return T;
                  const y = c.spanToJSON(i),
                    E = y.data || {},
                    m = E[s.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];
                  null != m && (n.sample_rate = `${m}`);
                  const g = E[s.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
                    S = y.description;
                  return (
                    'url' !== g && S && (n.transaction = S),
                    a.hasTracingEnabled() && (n.sampled = String(c.spanIsSampled(i))),
                    t.emit('createDsc', n, i),
                    n
                  );
                }
                (n.freezeDscOnSpan = function (e, t) {
                  const n = e;
                  r.addNonEnumerableProperty(n, u, t);
                }),
                  (n.getDynamicSamplingContextFromClient = p),
                  (n.getDynamicSamplingContextFromSpan = l),
                  (n.spanToBaggageHeader = function (e) {
                    const t = l(e);
                    return r.dynamicSamplingContextToSentryBaggageHeader(t);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js',
      },
    ],
    [
      3208,
      {
        '../debug-build.js': 3167,
        '../utils/spanUtils.js': 3233,
        './spanstatus.js': 3216,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js'),
                  o = e('../utils/spanUtils.js'),
                  s = e('./spanstatus.js');
                let a = !1;
                function c() {
                  const e = o.getActiveSpan(),
                    t = e && o.getRootSpan(e);
                  if (t) {
                    const e = 'internal_error';
                    i.DEBUG_BUILD &&
                      r.logger.log(`[Tracing] Root span: ${e} -> Global error occured`),
                      t.setStatus({ code: s.SPAN_STATUS_ERROR, message: e });
                  }
                }
                (c.tag = 'sentry_tracingErrorCallback'),
                  (n.registerSpanErrorInstrumentation = function () {
                    a ||
                      ((a = !0),
                      r.addGlobalErrorInstrumentationHandler(c),
                      r.addGlobalUnhandledRejectionInstrumentationHandler(c));
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/errors.js',
      },
    ],
    [
      3209,
      { './errors.js': 3208 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./errors.js');
                n.addTracingExtensions = function () {
                  r.registerSpanErrorInstrumentation();
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/hubextensions.js',
      },
    ],
    [
      3210,
      {
        '../currentScopes.js': 3166,
        '../debug-build.js': 3167,
        '../semanticAttributes.js': 3203,
        '../utils/hasTracingEnabled.js': 3225,
        '../utils/spanOnScope.js': 3232,
        '../utils/spanUtils.js': 3233,
        './sentryNonRecordingSpan.js': 3214,
        './spanstatus.js': 3216,
        './trace.js': 3217,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../currentScopes.js'),
                  o = e('../debug-build.js'),
                  s = e('../semanticAttributes.js'),
                  a = e('../utils/hasTracingEnabled.js'),
                  c = e('../utils/spanOnScope.js'),
                  u = e('../utils/spanUtils.js'),
                  p = e('./sentryNonRecordingSpan.js'),
                  l = e('./spanstatus.js'),
                  d = e('./trace.js'),
                  _ = { idleTimeout: 1e3, finalTimeout: 3e4, childSpanTimeout: 15e3 };
                (n.TRACING_DEFAULTS = _),
                  (n.startIdleSpan = function (e, t = {}) {
                    const n = new Map();
                    let T,
                      y = !1,
                      E = 'externalFinish',
                      m = !t.disableAutoFinish;
                    const g = [],
                      {
                        idleTimeout: S = _.idleTimeout,
                        finalTimeout: h = _.finalTimeout,
                        childSpanTimeout: O = _.childSpanTimeout,
                        beforeSpanEnd: f,
                      } = t,
                      R = i.getClient();
                    if (!R || !a.hasTracingEnabled()) return new p.SentryNonRecordingSpan();
                    const A = i.getCurrentScope(),
                      b = u.getActiveSpan(),
                      N = (function (e) {
                        const t = d.startInactiveSpan(e);
                        return (
                          c._setSpanForScope(i.getCurrentScope(), t),
                          o.DEBUG_BUILD && r.logger.log('[Tracing] Started span is an idle span'),
                          t
                        );
                      })(e);
                    function I() {
                      T && (clearTimeout(T), (T = undefined));
                    }
                    function C(e) {
                      I(),
                        (T = setTimeout(() => {
                          !y && 0 === n.size && m && ((E = 'idleTimeout'), N.end(e));
                        }, S));
                    }
                    function v(e) {
                      T = setTimeout(() => {
                        !y && m && ((E = 'heartbeatFailed'), N.end(e));
                      }, O);
                    }
                    function P(e) {
                      (y = !0), n.clear(), g.forEach(e => e()), c._setSpanForScope(A, b);
                      const t = u.spanToJSON(N),
                        { start_timestamp: i } = t;
                      if (!i) return;
                      (t.data || {})[s.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON] ||
                        N.setAttribute(s.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, E),
                        r.logger.log(`[Tracing] Idle span "${t.op}" finished`);
                      const a = u.getSpanDescendants(N).filter(e => e !== N);
                      let p = 0;
                      a.forEach(t => {
                        t.isRecording() &&
                          (t.setStatus({ code: l.SPAN_STATUS_ERROR, message: 'cancelled' }),
                          t.end(e),
                          o.DEBUG_BUILD &&
                            r.logger.log(
                              '[Tracing] Cancelling span since span ended early',
                              JSON.stringify(t, undefined, 2)
                            ));
                        const n = u.spanToJSON(t),
                          { timestamp: i = 0, start_timestamp: s = 0 } = n,
                          a = s <= e,
                          c = i - s <= (h + S) / 1e3;
                        if (o.DEBUG_BUILD) {
                          const e = JSON.stringify(t, undefined, 2);
                          a
                            ? c ||
                              r.logger.log(
                                '[Tracing] Discarding span since it finished after idle span final timeout',
                                e
                              )
                            : r.logger.log(
                                '[Tracing] Discarding span since it happened after idle span was finished',
                                e
                              );
                        }
                        (c && a) || (u.removeChildSpanFromSpan(N, t), p++);
                      }),
                        p > 0 && N.setAttribute('sentry.idle_span_discarded_spans', p);
                    }
                    return (
                      (N.end = new Proxy(N.end, {
                        apply(e, t, n) {
                          f && f(N);
                          const [i, ...o] = n,
                            s = i || r.timestampInSeconds(),
                            a = u.spanTimeInputToSeconds(s),
                            c = u.getSpanDescendants(N).filter(e => e !== N);
                          if (!c.length) return P(a), Reflect.apply(e, t, [a, ...o]);
                          const p = c.map(e => u.spanToJSON(e).timestamp).filter(e => !!e),
                            l = p.length ? Math.max(...p) : undefined,
                            d = u.spanToJSON(N).start_timestamp,
                            _ = Math.min(
                              d ? d + h / 1e3 : Infinity,
                              Math.max(d || -Infinity, Math.min(a, l || Infinity))
                            );
                          return P(_), Reflect.apply(e, t, [_, ...o]);
                        },
                      })),
                      g.push(
                        R.on('spanStart', e => {
                          if (y || e === N || u.spanToJSON(e).timestamp) return;
                          var t;
                          u.getSpanDescendants(N).includes(e) &&
                            ((t = e.spanContext().spanId),
                            I(),
                            n.set(t, !0),
                            v(r.timestampInSeconds() + O / 1e3));
                        })
                      ),
                      g.push(
                        R.on('spanEnd', e => {
                          var t;
                          y ||
                            ((t = e.spanContext().spanId),
                            n.has(t) && n.delete(t),
                            0 === n.size && C(r.timestampInSeconds() + S / 1e3));
                        })
                      ),
                      g.push(
                        R.on('idleSpanEnableAutoFinish', e => {
                          e === N && ((m = !0), C(), n.size && v());
                        })
                      ),
                      t.disableAutoFinish || C(),
                      setTimeout(() => {
                        y ||
                          (N.setStatus({ code: l.SPAN_STATUS_ERROR, message: 'deadline_exceeded' }),
                          (E = 'finalTimeout'),
                          N.end());
                      }, h),
                      N
                    );
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/idleSpan.js',
      },
    ],
    [
      3211,
      { '../debug-build.js': 3167, '../utils/spanUtils.js': 3233, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js'),
                  o = e('../utils/spanUtils.js');
                (n.logSpanEnd = function (e) {
                  if (!i.DEBUG_BUILD) return;
                  const { description: t = '< unknown name >', op: n = '< unknown op >' } =
                      o.spanToJSON(e),
                    { spanId: s } = e.spanContext(),
                    a = `[Tracing] Finishing "${n}" ${o.getRootSpan(e) === e ? 'root ' : ''}span "${t}" with ID ${s}`;
                  r.logger.log(a);
                }),
                  (n.logSpanStart = function (e) {
                    if (!i.DEBUG_BUILD) return;
                    const {
                        description: t = '< unknown name >',
                        op: n = '< unknown op >',
                        parent_span_id: s,
                      } = o.spanToJSON(e),
                      { spanId: a } = e.spanContext(),
                      c = o.spanIsSampled(e),
                      u = o.getRootSpan(e),
                      p = u === e,
                      l = `[Tracing] Starting ${c ? 'sampled' : 'unsampled'} ${p ? 'root ' : ''}span`,
                      d = [`op: ${n}`, `name: ${t}`, `ID: ${a}`];
                    if ((s && d.push(`parent ID: ${s}`), !p)) {
                      const { op: e, description: t } = o.spanToJSON(u);
                      d.push(`root ID: ${u.spanContext().spanId}`),
                        e && d.push(`root op: ${e}`),
                        t && d.push(`root description: ${t}`);
                    }
                    r.logger.log(`${l}\n  ${d.join('\n  ')}`);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/logSpans.js',
      },
    ],
    [
      3212,
      { '../semanticAttributes.js': 3203, '../utils/spanUtils.js': 3233 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../semanticAttributes.js'),
                  i = e('../utils/spanUtils.js');
                (n.setMeasurement = function (e, t, n, o = i.getActiveSpan()) {
                  const s = o && i.getRootSpan(o);
                  s &&
                    s.addEvent(e, {
                      [r.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: t,
                      [r.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: n,
                    });
                }),
                  (n.timedEventsToMeasurements = function (e) {
                    if (!e || 0 === e.length) return undefined;
                    const t = {};
                    return (
                      e.forEach(e => {
                        const n = e.attributes || {},
                          i = n[r.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT],
                          o = n[r.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];
                        'string' == typeof i &&
                          'number' == typeof o &&
                          (t[e.name] = { value: o, unit: i });
                      }),
                      t
                    );
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/measurement.js',
      },
    ],
    [
      3213,
      {
        '../debug-build.js': 3167,
        '../utils/hasTracingEnabled.js': 3225,
        '../utils/parseSampleRate.js': 3229,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js'),
                  o = e('../utils/hasTracingEnabled.js'),
                  s = e('../utils/parseSampleRate.js');
                n.sampleSpan = function (e, t) {
                  if (!o.hasTracingEnabled(e)) return [!1];
                  let n;
                  n =
                    'function' == typeof e.tracesSampler
                      ? e.tracesSampler(t)
                      : t.parentSampled !== undefined
                        ? t.parentSampled
                        : void 0 !== e.tracesSampleRate
                          ? e.tracesSampleRate
                          : 1;
                  const a = s.parseSampleRate(n);
                  return a === undefined
                    ? (i.DEBUG_BUILD &&
                        r.logger.warn(
                          '[Tracing] Discarding transaction because of invalid sample rate.'
                        ),
                      [!1])
                    : a
                      ? Math.random() < a
                        ? [!0, a]
                        : (i.DEBUG_BUILD &&
                            r.logger.log(
                              `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(n)})`
                            ),
                          [!1, a])
                      : (i.DEBUG_BUILD &&
                          r.logger.log(
                            '[Tracing] Discarding transaction because ' +
                              ('function' == typeof e.tracesSampler
                                ? 'tracesSampler returned 0 or false'
                                : 'a negative sampling decision was inherited or tracesSampleRate is set to 0')
                          ),
                        [!1, a]);
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/sampling.js',
      },
    ],
    [
      3214,
      { '../utils/spanUtils.js': 3233, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../utils/spanUtils.js');
                n.SentryNonRecordingSpan = class {
                  constructor(e = {}) {
                    (this._traceId = e.traceId || r.uuid4()),
                      (this._spanId = e.spanId || r.uuid4().substring(16));
                  }
                  spanContext() {
                    return {
                      spanId: this._spanId,
                      traceId: this._traceId,
                      traceFlags: i.TRACE_FLAG_NONE,
                    };
                  }
                  end(e) {}
                  setAttribute(e, t) {
                    return this;
                  }
                  setAttributes(e) {
                    return this;
                  }
                  setStatus(e) {
                    return this;
                  }
                  updateName(e) {
                    return this;
                  }
                  isRecording() {
                    return !1;
                  }
                  addEvent(e, t, n) {
                    return this;
                  }
                  addLink(e) {
                    return this;
                  }
                  addLinks(e) {
                    return this;
                  }
                  recordException(e, t) {}
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js',
      },
    ],
    [
      3215,
      {
        '../currentScopes.js': 3166,
        '../debug-build.js': 3167,
        '../envelope.js': 3169,
        '../metrics/metric-summary.js': 3198,
        '../semanticAttributes.js': 3203,
        '../utils/spanUtils.js': 3233,
        './dynamicSamplingContext.js': 3207,
        './logSpans.js': 3211,
        './measurement.js': 3212,
        './utils.js': 3218,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../currentScopes.js'),
                  o = e('../debug-build.js'),
                  s = e('../envelope.js'),
                  a = e('../metrics/metric-summary.js'),
                  c = e('../semanticAttributes.js'),
                  u = e('../utils/spanUtils.js'),
                  p = e('./dynamicSamplingContext.js'),
                  l = e('./logSpans.js'),
                  d = e('./measurement.js'),
                  _ = e('./utils.js');
                class T {
                  constructor(e = {}) {
                    (this._traceId = e.traceId || r.uuid4()),
                      (this._spanId = e.spanId || r.uuid4().substring(16)),
                      (this._startTime = e.startTimestamp || r.timestampInSeconds()),
                      (this._attributes = {}),
                      this.setAttributes({
                        [c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',
                        [c.SEMANTIC_ATTRIBUTE_SENTRY_OP]: e.op,
                        ...e.attributes,
                      }),
                      (this._name = e.name),
                      e.parentSpanId && (this._parentSpanId = e.parentSpanId),
                      'sampled' in e && (this._sampled = e.sampled),
                      e.endTimestamp && (this._endTime = e.endTimestamp),
                      (this._events = []),
                      (this._isStandaloneSpan = e.isStandalone),
                      this._endTime && this._onSpanEnded();
                  }
                  addLink(e) {
                    return this;
                  }
                  addLinks(e) {
                    return this;
                  }
                  recordException(e, t) {}
                  spanContext() {
                    const { _spanId: e, _traceId: t, _sampled: n } = this;
                    return {
                      spanId: e,
                      traceId: t,
                      traceFlags: n ? u.TRACE_FLAG_SAMPLED : u.TRACE_FLAG_NONE,
                    };
                  }
                  setAttribute(e, t) {
                    return (
                      t === undefined ? delete this._attributes[e] : (this._attributes[e] = t), this
                    );
                  }
                  setAttributes(e) {
                    return Object.keys(e).forEach(t => this.setAttribute(t, e[t])), this;
                  }
                  updateStartTime(e) {
                    this._startTime = u.spanTimeInputToSeconds(e);
                  }
                  setStatus(e) {
                    return (this._status = e), this;
                  }
                  updateName(e) {
                    return (this._name = e), this;
                  }
                  end(e) {
                    this._endTime ||
                      ((this._endTime = u.spanTimeInputToSeconds(e)),
                      l.logSpanEnd(this),
                      this._onSpanEnded());
                  }
                  getSpanJSON() {
                    return r.dropUndefinedKeys({
                      data: this._attributes,
                      description: this._name,
                      op: this._attributes[c.SEMANTIC_ATTRIBUTE_SENTRY_OP],
                      parent_span_id: this._parentSpanId,
                      span_id: this._spanId,
                      start_timestamp: this._startTime,
                      status: u.getStatusMessage(this._status),
                      timestamp: this._endTime,
                      trace_id: this._traceId,
                      origin: this._attributes[c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
                      _metrics_summary: a.getMetricSummaryJsonForSpan(this),
                      profile_id: this._attributes[c.SEMANTIC_ATTRIBUTE_PROFILE_ID],
                      exclusive_time: this._attributes[c.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],
                      measurements: d.timedEventsToMeasurements(this._events),
                      is_segment:
                        (this._isStandaloneSpan && u.getRootSpan(this) === this) || undefined,
                      segment_id: this._isStandaloneSpan
                        ? u.getRootSpan(this).spanContext().spanId
                        : undefined,
                    });
                  }
                  isRecording() {
                    return !this._endTime && !!this._sampled;
                  }
                  addEvent(e, t, n) {
                    o.DEBUG_BUILD && r.logger.log('[Tracing] Adding an event to span:', e);
                    const i = y(t) ? t : n || r.timestampInSeconds(),
                      s = y(t) ? {} : t || {},
                      a = { name: e, time: u.spanTimeInputToSeconds(i), attributes: s };
                    return this._events.push(a), this;
                  }
                  isStandaloneSpan() {
                    return !!this._isStandaloneSpan;
                  }
                  _onSpanEnded() {
                    const e = i.getClient();
                    e && e.emit('spanEnd', this);
                    if (!(this._isStandaloneSpan || this === u.getRootSpan(this))) return;
                    if (this._isStandaloneSpan)
                      return void (this._sampled
                        ? (function (e) {
                            const t = i.getClient();
                            if (!t) return;
                            const n = e[1];
                            if (!n || 0 === n.length)
                              return void t.recordDroppedEvent('before_send', 'span');
                            const s = t.getTransport();
                            s &&
                              s.send(e).then(null, e => {
                                o.DEBUG_BUILD && r.logger.error('Error while sending span:', e);
                              });
                          })(s.createSpanEnvelope([this], e))
                        : (o.DEBUG_BUILD &&
                            r.logger.log(
                              '[Tracing] Discarding standalone span because its trace was not chosen to be sampled.'
                            ),
                          e && e.recordDroppedEvent('sample_rate', 'span')));
                    const t = this._convertSpanToTransaction();
                    if (t) {
                      (_.getCapturedScopesOnSpan(this).scope || i.getCurrentScope()).captureEvent(
                        t
                      );
                    }
                  }
                  _convertSpanToTransaction() {
                    if (!E(u.spanToJSON(this))) return undefined;
                    this._name ||
                      (o.DEBUG_BUILD &&
                        r.logger.warn(
                          'Transaction has no name, falling back to `<unlabeled transaction>`.'
                        ),
                      (this._name = '<unlabeled transaction>'));
                    const { scope: e, isolationScope: t } = _.getCapturedScopesOnSpan(this),
                      n = (e || i.getCurrentScope()).getClient() || i.getClient();
                    if (!0 !== this._sampled)
                      return (
                        o.DEBUG_BUILD &&
                          r.logger.log(
                            '[Tracing] Discarding transaction because its trace was not chosen to be sampled.'
                          ),
                        n && n.recordDroppedEvent('sample_rate', 'transaction'),
                        undefined
                      );
                    const s = u
                        .getSpanDescendants(this)
                        .filter(
                          e =>
                            e !== this &&
                            !(function (e) {
                              return e instanceof T && e.isStandaloneSpan();
                            })(e)
                        )
                        .map(e => u.spanToJSON(e))
                        .filter(E),
                      l = this._attributes[c.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
                      y = {
                        contexts: { trace: u.spanToTransactionTraceContext(this) },
                        spans:
                          s.length > 1e3
                            ? s.sort((e, t) => e.start_timestamp - t.start_timestamp).slice(0, 1e3)
                            : s,
                        start_timestamp: this._startTime,
                        timestamp: this._endTime,
                        transaction: this._name,
                        type: 'transaction',
                        sdkProcessingMetadata: {
                          capturedSpanScope: e,
                          capturedSpanIsolationScope: t,
                          ...r.dropUndefinedKeys({
                            dynamicSamplingContext: p.getDynamicSamplingContextFromSpan(this),
                          }),
                        },
                        _metrics_summary: a.getMetricSummaryJsonForSpan(this),
                        ...(l && { transaction_info: { source: l } }),
                      },
                      m = d.timedEventsToMeasurements(this._events);
                    return (
                      m &&
                        Object.keys(m).length &&
                        (o.DEBUG_BUILD &&
                          r.logger.log(
                            '[Measurements] Adding measurements to transaction event',
                            JSON.stringify(m, undefined, 2)
                          ),
                        (y.measurements = m)),
                      y
                    );
                  }
                }
                function y(e) {
                  return (e && 'number' == typeof e) || e instanceof Date || Array.isArray(e);
                }
                function E(e) {
                  return !!(e.start_timestamp && e.timestamp && e.span_id && e.trace_id);
                }
                n.SentrySpan = T;
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js',
      },
    ],
    [
      3216,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = 1,
                  i = 2;
                function o(e) {
                  if (e < 400 && e >= 100) return { code: r };
                  if (e >= 400 && e < 500)
                    switch (e) {
                      case 401:
                        return { code: i, message: 'unauthenticated' };
                      case 403:
                        return { code: i, message: 'permission_denied' };
                      case 404:
                        return { code: i, message: 'not_found' };
                      case 409:
                        return { code: i, message: 'already_exists' };
                      case 413:
                        return { code: i, message: 'failed_precondition' };
                      case 429:
                        return { code: i, message: 'resource_exhausted' };
                      case 499:
                        return { code: i, message: 'cancelled' };
                      default:
                        return { code: i, message: 'invalid_argument' };
                    }
                  if (e >= 500 && e < 600)
                    switch (e) {
                      case 501:
                        return { code: i, message: 'unimplemented' };
                      case 503:
                        return { code: i, message: 'unavailable' };
                      case 504:
                        return { code: i, message: 'deadline_exceeded' };
                      default:
                        return { code: i, message: 'internal_error' };
                    }
                  return { code: i, message: 'unknown_error' };
                }
                (n.SPAN_STATUS_ERROR = i),
                  (n.SPAN_STATUS_OK = r),
                  (n.SPAN_STATUS_UNSET = 0),
                  (n.getSpanStatusFromHttpCode = o),
                  (n.setHttpStatus = function (e, t) {
                    e.setAttribute('http.response.status_code', t);
                    const n = o(t);
                    'unknown_error' !== n.message && e.setStatus(n);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/spanstatus.js',
      },
    ],
    [
      3217,
      {
        '../asyncContext/index.js': 3159,
        '../carrier.js': 3163,
        '../currentScopes.js': 3166,
        '../debug-build.js': 3167,
        '../semanticAttributes.js': 3203,
        '../utils/handleCallbackErrors.js': 3224,
        '../utils/hasTracingEnabled.js': 3225,
        '../utils/spanOnScope.js': 3232,
        '../utils/spanUtils.js': 3233,
        './dynamicSamplingContext.js': 3207,
        './logSpans.js': 3211,
        './sampling.js': 3213,
        './sentryNonRecordingSpan.js': 3214,
        './sentrySpan.js': 3215,
        './spanstatus.js': 3216,
        './utils.js': 3218,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../carrier.js'),
                  o = e('../currentScopes.js'),
                  s = e('../asyncContext/index.js'),
                  a = e('../debug-build.js'),
                  c = e('../semanticAttributes.js'),
                  u = e('../utils/handleCallbackErrors.js'),
                  p = e('../utils/hasTracingEnabled.js'),
                  l = e('../utils/spanOnScope.js'),
                  d = e('../utils/spanUtils.js'),
                  _ = e('./dynamicSamplingContext.js'),
                  T = e('./logSpans.js'),
                  y = e('./sampling.js'),
                  E = e('./sentryNonRecordingSpan.js'),
                  m = e('./sentrySpan.js'),
                  g = e('./spanstatus.js'),
                  S = e('./utils.js'),
                  h = '__SENTRY_SUPPRESS_TRACING__';
                function O(e, t) {
                  const n = A();
                  return n.withActiveSpan
                    ? n.withActiveSpan(e, t)
                    : o.withScope(n => (l._setSpanForScope(n, e || undefined), t(n)));
                }
                function f({ parentSpan: e, spanArguments: t, forceTransaction: n, scope: r }) {
                  if (!p.hasTracingEnabled()) return new E.SentryNonRecordingSpan();
                  const i = o.getIsolationScope();
                  let s;
                  if (e && !n)
                    (s = (function (e, t, n) {
                      const { spanId: r, traceId: i } = e.spanContext(),
                        s = !t.getScopeData().sdkProcessingMetadata[h] && d.spanIsSampled(e),
                        a = s
                          ? new m.SentrySpan({ ...n, parentSpanId: r, traceId: i, sampled: s })
                          : new E.SentryNonRecordingSpan({ traceId: i });
                      d.addChildSpanToSpan(e, a);
                      const c = o.getClient();
                      c && (c.emit('spanStart', a), n.endTimestamp && c.emit('spanEnd', a));
                      return a;
                    })(e, r, t)),
                      d.addChildSpanToSpan(e, s);
                  else if (e) {
                    const n = _.getDynamicSamplingContextFromSpan(e),
                      { traceId: i, spanId: o } = e.spanContext(),
                      a = d.spanIsSampled(e);
                    (s = b({ traceId: i, parentSpanId: o, ...t }, r, a)), _.freezeDscOnSpan(s, n);
                  } else {
                    const {
                      traceId: e,
                      dsc: n,
                      parentSpanId: o,
                      sampled: a,
                    } = { ...i.getPropagationContext(), ...r.getPropagationContext() };
                    (s = b({ traceId: e, parentSpanId: o, ...t }, r, a)),
                      n && _.freezeDscOnSpan(s, n);
                  }
                  return T.logSpanStart(s), S.setCapturedScopesOnSpan(s, r, i), s;
                }
                function R(e) {
                  const t = { isStandalone: (e.experimental || {}).standalone, ...e };
                  if (e.startTime) {
                    const n = { ...t };
                    return (
                      (n.startTimestamp = d.spanTimeInputToSeconds(e.startTime)),
                      delete n.startTime,
                      n
                    );
                  }
                  return t;
                }
                function A() {
                  const e = i.getMainCarrier();
                  return s.getAsyncContextStrategy(e);
                }
                function b(e, t, n) {
                  const r = o.getClient(),
                    i = (r && r.getOptions()) || {},
                    { name: s = '', attributes: a } = e,
                    [u, p] = t.getScopeData().sdkProcessingMetadata[h]
                      ? [!1]
                      : y.sampleSpan(i, {
                          name: s,
                          parentSampled: n,
                          attributes: a,
                          transactionContext: { name: s, parentSampled: n },
                        }),
                    l = new m.SentrySpan({
                      ...e,
                      attributes: {
                        [c.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',
                        ...e.attributes,
                      },
                      sampled: u,
                    });
                  return (
                    p !== undefined && l.setAttribute(c.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, p),
                    r && r.emit('spanStart', l),
                    l
                  );
                }
                function N(e) {
                  const t = l._getSpanForScope(e);
                  if (!t) return undefined;
                  const n = o.getClient();
                  return (n ? n.getOptions() : {}).parentSpanIsAlwaysRootSpan
                    ? d.getRootSpan(t)
                    : t;
                }
                function I(e) {
                  return e !== undefined ? t => O(e, t) : e => e();
                }
                (n.continueTrace = ({ sentryTrace: e, baggage: t }, n) =>
                  o.withScope(i => {
                    const o = r.propagationContextFromHeaders(e, t);
                    return i.setPropagationContext(o), n();
                  })),
                  (n.startInactiveSpan = function (e) {
                    const t = A();
                    if (t.startInactiveSpan) return t.startInactiveSpan(e);
                    const n = R(e),
                      { forceTransaction: r, parentSpan: i } = e;
                    return (
                      e.scope
                        ? t => o.withScope(e.scope, t)
                        : i !== undefined
                          ? e => O(i, e)
                          : e => e()
                    )(() => {
                      const t = o.getCurrentScope(),
                        i = N(t);
                      return e.onlyIfParent && !i
                        ? new E.SentryNonRecordingSpan()
                        : f({ parentSpan: i, spanArguments: n, forceTransaction: r, scope: t });
                    });
                  }),
                  (n.startNewTrace = function (e) {
                    return o.withScope(
                      t => (
                        t.setPropagationContext(r.generatePropagationContext()),
                        a.DEBUG_BUILD &&
                          r.logger.info(
                            `Starting a new trace with id ${t.getPropagationContext().traceId}`
                          ),
                        O(null, e)
                      )
                    );
                  }),
                  (n.startSpan = function (e, t) {
                    const n = A();
                    if (n.startSpan) return n.startSpan(e, t);
                    const r = R(e),
                      { forceTransaction: i, parentSpan: s } = e;
                    return o.withScope(e.scope, () =>
                      I(s)(() => {
                        const n = o.getCurrentScope(),
                          s = N(n),
                          a =
                            e.onlyIfParent && !s
                              ? new E.SentryNonRecordingSpan()
                              : f({
                                  parentSpan: s,
                                  spanArguments: r,
                                  forceTransaction: i,
                                  scope: n,
                                });
                        return (
                          l._setSpanForScope(n, a),
                          u.handleCallbackErrors(
                            () => t(a),
                            () => {
                              const { status: e } = d.spanToJSON(a);
                              !a.isRecording() ||
                                (e && 'ok' !== e) ||
                                a.setStatus({
                                  code: g.SPAN_STATUS_ERROR,
                                  message: 'internal_error',
                                });
                            },
                            () => a.end()
                          )
                        );
                      })
                    );
                  }),
                  (n.startSpanManual = function (e, t) {
                    const n = A();
                    if (n.startSpanManual) return n.startSpanManual(e, t);
                    const r = R(e),
                      { forceTransaction: i, parentSpan: s } = e;
                    return o.withScope(e.scope, () =>
                      I(s)(() => {
                        const n = o.getCurrentScope(),
                          s = N(n),
                          a =
                            e.onlyIfParent && !s
                              ? new E.SentryNonRecordingSpan()
                              : f({
                                  parentSpan: s,
                                  spanArguments: r,
                                  forceTransaction: i,
                                  scope: n,
                                });
                        function c() {
                          a.end();
                        }
                        return (
                          l._setSpanForScope(n, a),
                          u.handleCallbackErrors(
                            () => t(a, c),
                            () => {
                              const { status: e } = d.spanToJSON(a);
                              !a.isRecording() ||
                                (e && 'ok' !== e) ||
                                a.setStatus({
                                  code: g.SPAN_STATUS_ERROR,
                                  message: 'internal_error',
                                });
                            }
                          )
                        );
                      })
                    );
                  }),
                  (n.suppressTracing = function (e) {
                    const t = A();
                    return t.suppressTracing
                      ? t.suppressTracing(e)
                      : o.withScope(t => (t.setSDKProcessingMetadata({ [h]: !0 }), e()));
                  }),
                  (n.withActiveSpan = O);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/trace.js',
      },
    ],
    [
      3218,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = '_sentryScope',
                  o = '_sentryIsolationScope';
                (n.stripUrlQueryAndFragment = r.stripUrlQueryAndFragment),
                  (n.getCapturedScopesOnSpan = function (e) {
                    return { scope: e[i], isolationScope: e[o] };
                  }),
                  (n.setCapturedScopesOnSpan = function (e, t, n) {
                    e && (r.addNonEnumerableProperty(e, o, n), r.addNonEnumerableProperty(e, i, t));
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/tracing/utils.js',
      },
    ],
    [
      3219,
      { '../debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js');
                function o(e, t) {
                  return 'event' !== t && 'transaction' !== t
                    ? undefined
                    : Array.isArray(e)
                      ? e[1]
                      : undefined;
                }
                (n.DEFAULT_TRANSPORT_BUFFER_SIZE = 64),
                  (n.createTransport = function (
                    e,
                    t,
                    n = r.makePromiseBuffer(e.bufferSize || 64)
                  ) {
                    let s = {};
                    return {
                      send: function (a) {
                        const c = [];
                        if (
                          (r.forEachEnvelopeItem(a, (t, n) => {
                            const i = r.envelopeItemTypeToDataCategory(n);
                            if (r.isRateLimited(s, i)) {
                              const r = o(t, n);
                              e.recordDroppedEvent('ratelimit_backoff', i, r);
                            } else c.push(t);
                          }),
                          0 === c.length)
                        )
                          return r.resolvedSyncPromise({});
                        const u = r.createEnvelope(a[0], c),
                          p = t => {
                            r.forEachEnvelopeItem(u, (n, i) => {
                              const s = o(n, i);
                              e.recordDroppedEvent(t, r.envelopeItemTypeToDataCategory(i), s);
                            });
                          };
                        return n
                          .add(() =>
                            t({ body: r.serializeEnvelope(u) }).then(
                              e => (
                                e.statusCode !== undefined &&
                                  (e.statusCode < 200 || e.statusCode >= 300) &&
                                  i.DEBUG_BUILD &&
                                  r.logger.warn(
                                    `Sentry responded with status code ${e.statusCode} to sent event.`
                                  ),
                                (s = r.updateRateLimits(s, e)),
                                e
                              ),
                              e => {
                                throw (p('network_error'), e);
                              }
                            )
                          )
                          .then(
                            e => e,
                            e => {
                              if (e instanceof r.SentryError)
                                return (
                                  i.DEBUG_BUILD &&
                                    r.logger.error('Skipped sending event because buffer is full.'),
                                  p('queue_overflow'),
                                  r.resolvedSyncPromise({})
                                );
                              throw e;
                            }
                          );
                      },
                      flush: e => n.drain(e),
                    };
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/transports/base.js',
      },
    ],
    [
      3220,
      { '../api.js': 3158, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../api.js');
                function o(e, t) {
                  let n;
                  return (
                    r.forEachEnvelopeItem(
                      e,
                      (e, r) => (t.includes(r) && (n = Array.isArray(e) ? e[1] : undefined), !!n)
                    ),
                    n
                  );
                }
                (n.eventFromEnvelope = o),
                  (n.makeMultiplexedTransport = function (e, t) {
                    return n => {
                      const s = e(n),
                        a = new Map();
                      function c(t, s) {
                        const c = s ? `${t}:${s}` : t;
                        let u = a.get(c);
                        if (!u) {
                          const p = r.dsnFromString(t);
                          if (!p) return undefined;
                          const l = i.getEnvelopeEndpointWithUrlEncodedAuth(p, n.tunnel);
                          (u = s
                            ? (function (e, t) {
                                return n => {
                                  const r = e(n);
                                  return {
                                    ...r,
                                    send: async e => {
                                      const n = o(e, [
                                        'event',
                                        'transaction',
                                        'profile',
                                        'replay_event',
                                      ]);
                                      return n && (n.release = t), r.send(e);
                                    },
                                  };
                                };
                              })(
                                e,
                                s
                              )({ ...n, url: l })
                            : e({ ...n, url: l })),
                            a.set(c, u);
                        }
                        return [t, u];
                      }
                      return {
                        send: async function (e) {
                          const n = t({
                              envelope: e,
                              getEvent: function (t) {
                                const n = t && t.length ? t : ['event'];
                                return o(e, n);
                              },
                            })
                              .map(e =>
                                'string' == typeof e ? c(e, undefined) : c(e.dsn, e.release)
                              )
                              .filter(e => !!e),
                            i = n.length ? n : [['', s]];
                          return (
                            await Promise.all(
                              i.map(([t, n]) =>
                                n.send(
                                  (function (e, t) {
                                    return r.createEnvelope(t ? { ...e[0], dsn: t } : e[0], e[1]);
                                  })(e, t)
                                )
                              )
                            )
                          )[0];
                        },
                        flush: async function (e) {
                          const t = [...a.values(), s];
                          return (await Promise.all(t.map(t => t.flush(e)))).every(e => e);
                        },
                      };
                    };
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/transports/multiplexed.js',
      },
    ],
    [
      3221,
      { '../debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js'),
                  o = 5e3;
                (n.MIN_DELAY = 100),
                  (n.START_DELAY = o),
                  (n.makeOfflineTransport = function (e) {
                    function t(...e) {
                      i.DEBUG_BUILD && r.logger.info('[Offline]:', ...e);
                    }
                    return n => {
                      const i = e(n);
                      if (!n.createStore) throw new Error('No `createStore` function was provided');
                      const s = n.createStore(n);
                      let a,
                        c = o;
                      function u(e) {
                        a && clearTimeout(a),
                          (a = setTimeout(async () => {
                            a = undefined;
                            const e = await s.shift();
                            e &&
                              (t('Attempting to send previously queued event'),
                              (e[0].sent_at = new Date().toISOString()),
                              l(e, !0).catch(e => {
                                t('Failed to retry sending', e);
                              }));
                          }, e)),
                          'number' != typeof a && a.unref && a.unref();
                      }
                      function p() {
                        a || (u(c), (c = Math.min(2 * c, 36e5)));
                      }
                      async function l(e, a = !1) {
                        if (
                          !a &&
                          r.envelopeContainsItemType(e, ['replay_event', 'replay_recording'])
                        )
                          return await s.push(e), u(100), {};
                        try {
                          const t = await i.send(e);
                          let n = 100;
                          if (t)
                            if (t.headers && t.headers['retry-after'])
                              n = r.parseRetryAfterHeader(t.headers['retry-after']);
                            else if (t.headers && t.headers['x-sentry-rate-limits']) n = 6e4;
                            else if ((t.statusCode || 0) >= 400) return t;
                          return u(n), (c = o), t;
                        } catch (i) {
                          if (
                            await (function (e, t, i) {
                              return (
                                !r.envelopeContainsItemType(e, ['client_report']) &&
                                (!n.shouldStore || n.shouldStore(e, t, i))
                              );
                            })(e, i, c)
                          )
                            return (
                              a ? await s.unshift(e) : await s.push(e),
                              p(),
                              t('Error sending. Event queued.', i),
                              {}
                            );
                          throw i;
                        }
                      }
                      return n.flushAtStartup && p(), { send: l, flush: e => i.flush(e) };
                    };
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/transports/offline.js',
      },
    ],
    [
      3222,
      {
        './currentScopes.js': 3166,
        './debug-build.js': 3167,
        './exports.js': 3171,
        './semanticAttributes.js': 3203,
        './tracing/errors.js': 3208,
        './tracing/trace.js': 3217,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('./currentScopes.js'),
                  o = e('./exports.js'),
                  s = e('./semanticAttributes.js');
                e('./tracing/errors.js'), e('./debug-build.js');
                const a = e('./tracing/trace.js'),
                  c = { mechanism: { handled: !1, data: { function: 'trpcMiddleware' } } };
                n.trpcMiddleware = function (e = {}) {
                  return async function (t) {
                    const { path: n, type: u, next: p, rawInput: l, getRawInput: d } = t,
                      _ = i.getClient(),
                      T = _ && _.getOptions(),
                      y = { procedure_type: u };
                    if (
                      (e.attachRpcInput !== undefined ? e.attachRpcInput : T && T.sendDefaultPii) &&
                      (l !== undefined && (y.input = r.normalize(l)),
                      d !== undefined && 'function' == typeof d)
                    )
                      try {
                        const e = await d();
                        y.input = r.normalize(e);
                      } catch (e) {}
                    return (
                      o.setContext('trpc', y),
                      a.startSpanManual(
                        {
                          name: `trpc/${n}`,
                          op: 'rpc.server',
                          attributes: {
                            [s.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',
                            [s.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc',
                          },
                        },
                        async e => {
                          try {
                            const t = await p();
                            return (
                              (function (e) {
                                'object' == typeof e &&
                                  null !== e &&
                                  'ok' in e &&
                                  !e.ok &&
                                  'error' in e &&
                                  o.captureException(e.error, c);
                              })(t),
                              e.end(),
                              t
                            );
                          } catch (t) {
                            throw (o.captureException(t, c), e.end(), t);
                          }
                        }
                      )
                    );
                  };
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/trpc.js',
      },
    ],
    [
      3223,
      {
        '../tracing/dynamicSamplingContext.js': 3207,
        './spanUtils.js': 3233,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../tracing/dynamicSamplingContext.js'),
                  o = e('./spanUtils.js');
                function s(e, t, n) {
                  if (n && Object.keys(n).length) {
                    e[t] = { ...e[t] };
                    for (const r in n)
                      Object.prototype.hasOwnProperty.call(n, r) && (e[t][r] = n[r]);
                  }
                }
                (n.applyScopeDataToEvent = function (e, t) {
                  const { fingerprint: n, span: s, breadcrumbs: a, sdkProcessingMetadata: c } = t;
                  !(function (e, t) {
                    const {
                        extra: n,
                        tags: i,
                        user: o,
                        contexts: s,
                        level: a,
                        transactionName: c,
                      } = t,
                      u = r.dropUndefinedKeys(n);
                    u && Object.keys(u).length && (e.extra = { ...u, ...e.extra });
                    const p = r.dropUndefinedKeys(i);
                    p && Object.keys(p).length && (e.tags = { ...p, ...e.tags });
                    const l = r.dropUndefinedKeys(o);
                    l && Object.keys(l).length && (e.user = { ...l, ...e.user });
                    const d = r.dropUndefinedKeys(s);
                    d && Object.keys(d).length && (e.contexts = { ...d, ...e.contexts });
                    a && (e.level = a);
                    c && 'transaction' !== e.type && (e.transaction = c);
                  })(e, t),
                    s &&
                      (function (e, t) {
                        (e.contexts = { trace: o.spanToTraceContext(t), ...e.contexts }),
                          (e.sdkProcessingMetadata = {
                            dynamicSamplingContext: i.getDynamicSamplingContextFromSpan(t),
                            ...e.sdkProcessingMetadata,
                          });
                        const n = o.getRootSpan(t),
                          r = o.spanToJSON(n).description;
                        r && !e.transaction && 'transaction' === e.type && (e.transaction = r);
                      })(e, s),
                    (function (e, t) {
                      (e.fingerprint = e.fingerprint ? r.arrayify(e.fingerprint) : []),
                        t && (e.fingerprint = e.fingerprint.concat(t));
                      e.fingerprint && !e.fingerprint.length && delete e.fingerprint;
                    })(e, n),
                    (function (e, t) {
                      const n = [...(e.breadcrumbs || []), ...t];
                      e.breadcrumbs = n.length ? n : undefined;
                    })(e, a),
                    (function (e, t) {
                      e.sdkProcessingMetadata = { ...e.sdkProcessingMetadata, ...t };
                    })(e, c);
                }),
                  (n.mergeAndOverwriteScopeData = s),
                  (n.mergeScopeData = function (e, t) {
                    const {
                      extra: n,
                      tags: r,
                      user: i,
                      contexts: o,
                      level: a,
                      sdkProcessingMetadata: c,
                      breadcrumbs: u,
                      fingerprint: p,
                      eventProcessors: l,
                      attachments: d,
                      propagationContext: _,
                      transactionName: T,
                      span: y,
                    } = t;
                    s(e, 'extra', n),
                      s(e, 'tags', r),
                      s(e, 'user', i),
                      s(e, 'contexts', o),
                      s(e, 'sdkProcessingMetadata', c),
                      a && (e.level = a),
                      T && (e.transactionName = T),
                      y && (e.span = y),
                      u.length && (e.breadcrumbs = [...e.breadcrumbs, ...u]),
                      p.length && (e.fingerprint = [...e.fingerprint, ...p]),
                      l.length && (e.eventProcessors = [...e.eventProcessors, ...l]),
                      d.length && (e.attachments = [...e.attachments, ...d]),
                      (e.propagationContext = { ...e.propagationContext, ..._ });
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js',
      },
    ],
    [
      3224,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                n.handleCallbackErrors = function (e, t, n = () => {}) {
                  let i;
                  try {
                    i = e();
                  } catch (e) {
                    throw (t(e), n(), e);
                  }
                  return (function (e, t, n) {
                    if (r.isThenable(e))
                      return e.then(
                        e => (n(), e),
                        e => {
                          throw (t(e), n(), e);
                        }
                      );
                    return n(), e;
                  })(i, t, n);
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js',
      },
    ],
    [
      3225,
      { '../currentScopes.js': 3166 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../currentScopes.js');
                n.hasTracingEnabled = function (e) {
                  if ('boolean' == typeof __SENTRY_TRACING__ && !__SENTRY_TRACING__) return !1;
                  const t = r.getClient(),
                    n = e || (t && t.getOptions());
                  return (
                    !!n && (n.enableTracing || 'tracesSampleRate' in n || 'tracesSampler' in n)
                  );
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js',
      },
    ],
    [
      3226,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                function r(e) {
                  return '/' === e[e.length - 1] ? e.slice(0, -1) : e;
                }
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.isSentryRequestUrl = function (e, t) {
                    const n = t && t.getDsn(),
                      i = t && t.getOptions().tunnel;
                    return (
                      (function (e, t) {
                        return !!t && e.includes(t.host);
                      })(e, n) ||
                      (function (e, t) {
                        if (!t) return !1;
                        return r(e) === r(t);
                      })(e, i)
                    );
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js',
      },
    ],
    [
      3227,
      { './traceData.js': 3234 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./traceData.js');
                n.getTraceMetaTags = function () {
                  return Object.entries(r.getTraceData())
                    .map(([e, t]) => `<meta name="${e}" content="${t}"/>`)
                    .join('\n');
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/meta.js',
      },
    ],
    [
      3228,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.parameterize = function (e, ...t) {
                    const n = new String(String.raw(e, ...t));
                    return (
                      (n.__sentry_template_string__ = e
                        .join('\0')
                        .replace(/%/g, '%%')
                        .replace(/\0/g, '%s')),
                      (n.__sentry_template_values__ = t),
                      n
                    );
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/parameterize.js',
      },
    ],
    [
      3229,
      { '../debug-build.js': 3167, '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../debug-build.js');
                n.parseSampleRate = function (e) {
                  if ('boolean' == typeof e) return Number(e);
                  const t = 'string' == typeof e ? parseFloat(e) : e;
                  return 'number' != typeof t || isNaN(t) || t < 0 || t > 1
                    ? (i.DEBUG_BUILD &&
                        r.logger.warn(
                          `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e)} of type ${JSON.stringify(typeof e)}.`
                        ),
                      undefined)
                    : t;
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js',
      },
    ],
    [
      3230,
      {
        '../constants.js': 3165,
        '../currentScopes.js': 3166,
        '../eventProcessors.js': 3170,
        '../scope.js': 3201,
        './applyScopeDataToEvent.js': 3223,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../constants.js'),
                  o = e('../currentScopes.js'),
                  s = e('../eventProcessors.js'),
                  a = e('../scope.js'),
                  c = e('./applyScopeDataToEvent.js');
                const u = new WeakMap();
                function p(e, t) {
                  const n = r.GLOBAL_OBJ._sentryDebugIds;
                  if (!n) return;
                  let i;
                  const o = u.get(t);
                  o ? (i = o) : ((i = new Map()), u.set(t, i));
                  const s = Object.entries(n).reduce((e, [n, r]) => {
                    let o;
                    const s = i.get(n);
                    s ? (o = s) : ((o = t(n)), i.set(n, o));
                    for (let t = o.length - 1; t >= 0; t--) {
                      const n = o[t];
                      if (n.filename) {
                        e[n.filename] = r;
                        break;
                      }
                    }
                    return e;
                  }, {});
                  try {
                    e.exception.values.forEach(e => {
                      e.stacktrace.frames.forEach(e => {
                        e.filename && (e.debug_id = s[e.filename]);
                      });
                    });
                  } catch (e) {}
                }
                function l(e) {
                  const t = {};
                  try {
                    e.exception.values.forEach(e => {
                      e.stacktrace.frames.forEach(e => {
                        e.debug_id &&
                          (e.abs_path
                            ? (t[e.abs_path] = e.debug_id)
                            : e.filename && (t[e.filename] = e.debug_id),
                          delete e.debug_id);
                      });
                    });
                  } catch (e) {}
                  if (0 === Object.keys(t).length) return;
                  (e.debug_meta = e.debug_meta || {}),
                    (e.debug_meta.images = e.debug_meta.images || []);
                  const n = e.debug_meta.images;
                  Object.entries(t).forEach(([e, t]) => {
                    n.push({ type: 'sourcemap', code_file: e, debug_id: t });
                  });
                }
                function d(e, t) {
                  if (!t) return e;
                  const n = e ? e.clone() : new a.Scope();
                  return n.update(t), n;
                }
                const _ = [
                  'user',
                  'level',
                  'extra',
                  'contexts',
                  'tags',
                  'fingerprint',
                  'requestSession',
                  'propagationContext',
                ];
                (n.applyDebugIds = p),
                  (n.applyDebugMeta = l),
                  (n.parseEventHintOrCaptureContext = function (e) {
                    return e
                      ? (function (e) {
                          return e instanceof a.Scope || 'function' == typeof e;
                        })(e) ||
                        (function (e) {
                          return Object.keys(e).some(e => _.includes(e));
                        })(e)
                        ? { captureContext: e }
                        : e
                      : undefined;
                  }),
                  (n.prepareEvent = function (e, t, n, a, u, _) {
                    const { normalizeDepth: T = 3, normalizeMaxBreadth: y = 1e3 } = e,
                      E = {
                        ...t,
                        event_id: t.event_id || n.event_id || r.uuid4(),
                        timestamp: t.timestamp || r.dateTimestampInSeconds(),
                      },
                      m = n.integrations || e.integrations.map(e => e.name);
                    !(function (e, t) {
                      const { environment: n, release: o, dist: s, maxValueLength: a = 250 } = t;
                      'environment' in e ||
                        (e.environment = 'environment' in t ? n : i.DEFAULT_ENVIRONMENT);
                      e.release === undefined && o !== undefined && (e.release = o);
                      e.dist === undefined && s !== undefined && (e.dist = s);
                      e.message && (e.message = r.truncate(e.message, a));
                      const c = e.exception && e.exception.values && e.exception.values[0];
                      c && c.value && (c.value = r.truncate(c.value, a));
                      const u = e.request;
                      u && u.url && (u.url = r.truncate(u.url, a));
                    })(E, e),
                      (function (e, t) {
                        t.length > 0 &&
                          ((e.sdk = e.sdk || {}),
                          (e.sdk.integrations = [...(e.sdk.integrations || []), ...t]));
                      })(E, m),
                      u && u.emit('applyFrameMetadata', t),
                      t.type === undefined && p(E, e.stackParser);
                    const g = d(a, n.captureContext);
                    n.mechanism && r.addExceptionMechanism(E, n.mechanism);
                    const S = u ? u.getEventProcessors() : [],
                      h = o.getGlobalScope().getScopeData();
                    if (_) {
                      const e = _.getScopeData();
                      c.mergeScopeData(h, e);
                    }
                    if (g) {
                      const e = g.getScopeData();
                      c.mergeScopeData(h, e);
                    }
                    const O = [...(n.attachments || []), ...h.attachments];
                    O.length && (n.attachments = O), c.applyScopeDataToEvent(E, h);
                    const f = [...S, ...h.eventProcessors];
                    return s.notifyEventProcessors(f, E, n).then(
                      e => (
                        e && l(e),
                        'number' == typeof T && T > 0
                          ? (function (e, t, n) {
                              if (!e) return null;
                              const i = {
                                ...e,
                                ...(e.breadcrumbs && {
                                  breadcrumbs: e.breadcrumbs.map(e => ({
                                    ...e,
                                    ...(e.data && { data: r.normalize(e.data, t, n) }),
                                  })),
                                }),
                                ...(e.user && { user: r.normalize(e.user, t, n) }),
                                ...(e.contexts && { contexts: r.normalize(e.contexts, t, n) }),
                                ...(e.extra && { extra: r.normalize(e.extra, t, n) }),
                              };
                              e.contexts &&
                                e.contexts.trace &&
                                i.contexts &&
                                ((i.contexts.trace = e.contexts.trace),
                                e.contexts.trace.data &&
                                  (i.contexts.trace.data = r.normalize(
                                    e.contexts.trace.data,
                                    t,
                                    n
                                  )));
                              e.spans &&
                                (i.spans = e.spans.map(e => ({
                                  ...e,
                                  ...(e.data && { data: r.normalize(e.data, t, n) }),
                                })));
                              return i;
                            })(e, T, y)
                          : e
                      )
                    );
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/prepareEvent.js',
      },
    ],
    [
      3231,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils');
                n.applySdkMetadata = function (e, t, n = [t], i = 'npm') {
                  const o = e._metadata || {};
                  o.sdk ||
                    (o.sdk = {
                      name: `sentry.javascript.${t}`,
                      packages: n.map(e => ({ name: `${i}:@sentry/${e}`, version: r.SDK_VERSION })),
                      version: r.SDK_VERSION,
                    }),
                    (e._metadata = o);
                };
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js',
      },
    ],
    [
      3232,
      { '@sentry/utils': 3256 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = '_sentrySpan';
                (n._getSpanForScope = function (e) {
                  return e[i];
                }),
                  (n._setSpanForScope = function (e, t) {
                    t ? r.addNonEnumerableProperty(e, i, t) : delete e[i];
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/spanOnScope.js',
      },
    ],
    [
      3233,
      {
        '../asyncContext/index.js': 3159,
        '../carrier.js': 3163,
        '../currentScopes.js': 3166,
        '../metrics/metric-summary.js': 3198,
        '../semanticAttributes.js': 3203,
        '../tracing/spanstatus.js': 3216,
        './spanOnScope.js': 3232,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../asyncContext/index.js'),
                  o = e('../carrier.js'),
                  s = e('../currentScopes.js'),
                  a = e('../metrics/metric-summary.js'),
                  c = e('../semanticAttributes.js'),
                  u = e('../tracing/spanstatus.js'),
                  p = e('./spanOnScope.js'),
                  l = 1;
                function d(e) {
                  return 'number' == typeof e
                    ? _(e)
                    : Array.isArray(e)
                      ? e[0] + e[1] / 1e9
                      : e instanceof Date
                        ? _(e.getTime())
                        : r.timestampInSeconds();
                }
                function _(e) {
                  return e > 9999999999 ? e / 1e3 : e;
                }
                function T(e) {
                  if (
                    (function (e) {
                      return 'function' == typeof e.getSpanJSON;
                    })(e)
                  )
                    return e.getSpanJSON();
                  try {
                    const { spanId: t, traceId: n } = e.spanContext();
                    if (
                      (function (e) {
                        const t = e;
                        return !!(t.attributes && t.startTime && t.name && t.endTime && t.status);
                      })(e)
                    ) {
                      const {
                        attributes: i,
                        startTime: o,
                        name: s,
                        endTime: u,
                        parentSpanId: p,
                        status: l,
                      } = e;
                      return r.dropUndefinedKeys({
                        span_id: t,
                        trace_id: n,
                        data: i,
                        description: s,
                        parent_span_id: p,
                        start_timestamp: d(o),
                        timestamp: d(u) || undefined,
                        status: E(l),
                        op: i[c.SEMANTIC_ATTRIBUTE_SENTRY_OP],
                        origin: i[c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
                        _metrics_summary: a.getMetricSummaryJsonForSpan(e),
                      });
                    }
                    return { span_id: t, trace_id: n };
                  } catch (e) {
                    return {};
                  }
                }
                function y(e) {
                  const { traceFlags: t } = e.spanContext();
                  return t === l;
                }
                function E(e) {
                  return e && e.code !== u.SPAN_STATUS_UNSET
                    ? e.code === u.SPAN_STATUS_OK
                      ? 'ok'
                      : e.message || 'unknown_error'
                    : undefined;
                }
                const m = '_sentryChildSpans',
                  g = '_sentryRootSpan';
                function S() {
                  const e = o.getMainCarrier(),
                    t = i.getAsyncContextStrategy(e);
                  return t.getActiveSpan
                    ? t.getActiveSpan()
                    : p._getSpanForScope(s.getCurrentScope());
                }
                (n.TRACE_FLAG_NONE = 0),
                  (n.TRACE_FLAG_SAMPLED = l),
                  (n.addChildSpanToSpan = function (e, t) {
                    const n = e[g] || e;
                    r.addNonEnumerableProperty(t, g, n),
                      e[m] ? e[m].add(t) : r.addNonEnumerableProperty(e, m, new Set([t]));
                  }),
                  (n.getActiveSpan = S),
                  (n.getRootSpan = function (e) {
                    return e[g] || e;
                  }),
                  (n.getSpanDescendants = function (e) {
                    const t = new Set();
                    return (
                      (function e(n) {
                        if (!t.has(n) && y(n)) {
                          t.add(n);
                          const r = n[m] ? Array.from(n[m]) : [];
                          for (const t of r) e(t);
                        }
                      })(e),
                      Array.from(t)
                    );
                  }),
                  (n.getStatusMessage = E),
                  (n.removeChildSpanFromSpan = function (e, t) {
                    e[m] && e[m].delete(t);
                  }),
                  (n.spanIsSampled = y),
                  (n.spanTimeInputToSeconds = d),
                  (n.spanToJSON = T),
                  (n.spanToTraceContext = function (e) {
                    const { spanId: t, traceId: n } = e.spanContext(),
                      { parent_span_id: i } = T(e);
                    return r.dropUndefinedKeys({ parent_span_id: i, span_id: t, trace_id: n });
                  }),
                  (n.spanToTraceHeader = function (e) {
                    const { traceId: t, spanId: n } = e.spanContext(),
                      i = y(e);
                    return r.generateSentryTraceHeader(t, n, i);
                  }),
                  (n.spanToTransactionTraceContext = function (e) {
                    const { spanId: t, traceId: n } = e.spanContext(),
                      { data: i, op: o, parent_span_id: s, status: a, origin: c } = T(e);
                    return r.dropUndefinedKeys({
                      parent_span_id: s,
                      span_id: t,
                      trace_id: n,
                      data: i,
                      op: o,
                      status: a,
                      origin: c,
                    });
                  }),
                  (n.updateMetricSummaryOnActiveSpan = function (e, t, n, r, i, o) {
                    const s = S();
                    s && a.updateMetricSummaryOnSpan(s, e, t, n, r, i, o);
                  });
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/spanUtils.js',
      },
    ],
    [
      3234,
      {
        '../asyncContext/index.js': 3159,
        '../carrier.js': 3163,
        '../currentScopes.js': 3166,
        '../debug-build.js': 3167,
        '../exports.js': 3171,
        '../tracing/dynamicSamplingContext.js': 3207,
        '../tracing/errors.js': 3208,
        './spanUtils.js': 3233,
        '@sentry/utils': 3256,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('@sentry/utils'),
                  i = e('../asyncContext/index.js'),
                  o = e('../carrier.js'),
                  s = e('../currentScopes.js'),
                  a = e('../exports.js');
                e('../tracing/errors.js'), e('../debug-build.js');
                const c = e('./spanUtils.js'),
                  u = e('../tracing/dynamicSamplingContext.js');
                function p(e) {
                  if (!e || !e.length) return !1;
                  const t = "[-!#$%&'*+.^_`|~A-Za-z0-9]+",
                    n = '[!#-+-./0-9:<=>?@A-Z\\[\\]a-z{-}]+',
                    r = '\\s*';
                  return new RegExp(`^${t}${r}=${r}${n}(${r},${r}${t}${r}=${r}${n})*$`).test(e);
                }
                (n.getTraceData = function () {
                  if (!a.isEnabled()) return {};
                  const e = o.getMainCarrier(),
                    t = i.getAsyncContextStrategy(e);
                  if (t.getTraceData) return t.getTraceData();
                  const n = s.getClient(),
                    l = s.getCurrentScope(),
                    d = c.getActiveSpan(),
                    { dsc: _, sampled: T, traceId: y } = l.getPropagationContext(),
                    E = d && c.getRootSpan(d),
                    m = d ? c.spanToTraceHeader(d) : r.generateSentryTraceHeader(y, undefined, T),
                    g = E
                      ? u.getDynamicSamplingContextFromSpan(E)
                      : _ || (n ? u.getDynamicSamplingContextFromClient(y, n) : undefined),
                    S = r.dynamicSamplingContextToSentryBaggageHeader(g);
                  if (!r.TRACEPARENT_REGEXP.test(m))
                    return (
                      r.logger.warn('Invalid sentry-trace data. Cannot generate trace data'), {}
                    );
                  const h = p(S);
                  return (
                    h || r.logger.warn('Invalid baggage data. Not returning "baggage" value'),
                    { 'sentry-trace': m, ...(h && { baggage: S }) }
                  );
                }),
                  (n.isValidBaggageString = p);
              };
            };
      },
      {
        package: '@sentry/browser>@sentry/core',
        file: 'node_modules/@sentry/core/build/cjs/utils/traceData.js',
      },
    ],
    [
      3235,
      { './is.js': 3262, './string.js': 3279 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./is.js'),
                  i = e('./string.js');
                function o(e, t, n, i, c, u, p, l) {
                  if (u.length >= n + 1) return u;
                  let d = [...u];
                  if (r.isInstanceOf(i[c], Error)) {
                    s(p, l);
                    const r = e(t, i[c]),
                      u = d.length;
                    a(r, c, u, l), (d = o(e, t, n, i[c], c, [r, ...d], r, u));
                  }
                  return (
                    Array.isArray(i.errors) &&
                      i.errors.forEach((i, u) => {
                        if (r.isInstanceOf(i, Error)) {
                          s(p, l);
                          const r = e(t, i),
                            _ = d.length;
                          a(r, `errors[${u}]`, _, l), (d = o(e, t, n, i, c, [r, ...d], r, _));
                        }
                      }),
                    d
                  );
                }
                function s(e, t) {
                  (e.mechanism = e.mechanism || { type: 'generic', handled: !0 }),
                    (e.mechanism = {
                      ...e.mechanism,
                      ...('AggregateError' === e.type && { is_exception_group: !0 }),
                      exception_id: t,
                    });
                }
                function a(e, t, n, r) {
                  (e.mechanism = e.mechanism || { type: 'generic', handled: !0 }),
                    (e.mechanism = {
                      ...e.mechanism,
                      type: 'chained',
                      source: t,
                      exception_id: n,
                      parent_id: r,
                    });
                }
                n.applyAggregateErrorsToEvent = function (e, t, n = 250, s, a, c, u) {
                  if (
                    !(
                      c.exception &&
                      c.exception.values &&
                      u &&
                      r.isInstanceOf(u.originalException, Error)
                    )
                  )
                    return;
                  const p =
                    c.exception.values.length > 0
                      ? c.exception.values[c.exception.values.length - 1]
                      : undefined;
                  var l, d;
                  p &&
                    (c.exception.values =
                      ((l = o(e, t, a, u.originalException, s, c.exception.values, p, 0)),
                      (d = n),
                      l.map(e => (e.value && (e.value = i.truncate(e.value, d)), e))));
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/aggregate-errors.js',
      },
    ],
    [
      3236,
      { './node-stack-trace.js': 3268, './object.js': 3271, './stacktrace.js': 3278 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./node-stack-trace.js'),
                  i = e('./object.js'),
                  o = e('./stacktrace.js');
                (n.callFrameToStackFrame = function (e, t, n) {
                  const s = t ? t.replace(/^file:\/\//, '') : undefined,
                    a = e.location.columnNumber ? e.location.columnNumber + 1 : undefined,
                    c = e.location.lineNumber ? e.location.lineNumber + 1 : undefined;
                  return i.dropUndefinedKeys({
                    filename: s,
                    module: n(s),
                    function: e.functionName || o.UNKNOWN_FUNCTION,
                    colno: a,
                    lineno: c,
                    in_app: s ? r.filenameIsInApp(s) : undefined,
                  });
                }),
                  (n.watchdogTimer = function (e, t, n, r) {
                    const i = e();
                    let o = !1,
                      s = !0;
                    return (
                      setInterval(() => {
                        const e = i.getTimeMs();
                        !1 === o && e > t + n && ((o = !0), s && r()), e < t + n && (o = !1);
                      }, 20),
                      {
                        poll: () => {
                          i.reset();
                        },
                        enabled: e => {
                          s = e;
                        },
                      }
                    );
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/anr.js' },
    ],
    [
      3237,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.flatten = function (e) {
                    const t = [],
                      n = e => {
                        e.forEach(e => {
                          Array.isArray(e) ? n(e) : t.push(e);
                        });
                      };
                    return n(e), t;
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/array.js' },
    ],
    [
      3238,
      { './debug-build.js': 3250, './is.js': 3262, './logger.js': 3264 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./debug-build.js'),
                  i = e('./is.js'),
                  o = e('./logger.js'),
                  s = 'sentry-',
                  a = /^sentry-/,
                  c = 8192;
                function u(e) {
                  return e && (i.isString(e) || Array.isArray(e))
                    ? Array.isArray(e)
                      ? e.reduce((e, t) => {
                          const n = p(t);
                          return (
                            Object.entries(n).forEach(([t, n]) => {
                              e[t] = n;
                            }),
                            e
                          );
                        }, {})
                      : p(e)
                    : undefined;
                }
                function p(e) {
                  return e
                    .split(',')
                    .map(e => e.split('=').map(e => decodeURIComponent(e.trim())))
                    .reduce((e, [t, n]) => (t && n && (e[t] = n), e), {});
                }
                (n.BAGGAGE_HEADER_NAME = 'baggage'),
                  (n.MAX_BAGGAGE_STRING_LENGTH = c),
                  (n.SENTRY_BAGGAGE_KEY_PREFIX = s),
                  (n.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = a),
                  (n.baggageHeaderToDynamicSamplingContext = function (e) {
                    const t = u(e);
                    if (!t) return undefined;
                    const n = Object.entries(t).reduce((e, [t, n]) => {
                      if (t.match(a)) {
                        e[t.slice(7)] = n;
                      }
                      return e;
                    }, {});
                    return Object.keys(n).length > 0 ? n : undefined;
                  }),
                  (n.dynamicSamplingContextToSentryBaggageHeader = function (e) {
                    return e
                      ? (function (e) {
                          if (0 === Object.keys(e).length) return undefined;
                          return Object.entries(e).reduce((e, [t, n], i) => {
                            const s = `${encodeURIComponent(t)}=${encodeURIComponent(n)}`,
                              a = 0 === i ? s : `${e},${s}`;
                            return a.length > c
                              ? (r.DEBUG_BUILD &&
                                  o.logger.warn(
                                    `Not adding key: ${t} with val: ${n} to baggage header due to exceeding baggage size limits.`
                                  ),
                                e)
                              : a;
                          }, '');
                        })(
                          Object.entries(e).reduce((e, [t, n]) => (n && (e[`${s}${t}`] = n), e), {})
                        )
                      : undefined;
                  }),
                  (n.parseBaggageHeader = u);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/baggage.js' },
    ],
    [
      3239,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getBreadcrumbLogLevelFromHttpStatusCode = function (e) {
                    return e === undefined
                      ? undefined
                      : e >= 400 && e < 500
                        ? 'warning'
                        : e >= 500
                          ? 'error'
                          : undefined;
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/breadcrumb-log-level.js',
      },
    ],
    [
      3240,
      { './is.js': 3262, './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./is.js'),
                  i = e('./worldwide.js').GLOBAL_OBJ;
                function o(e, t) {
                  const n = e,
                    o = [];
                  if (!n || !n.tagName) return '';
                  if (i.HTMLElement && n instanceof HTMLElement && n.dataset) {
                    if (n.dataset.sentryComponent) return n.dataset.sentryComponent;
                    if (n.dataset.sentryElement) return n.dataset.sentryElement;
                  }
                  o.push(n.tagName.toLowerCase());
                  const s =
                    t && t.length
                      ? t.filter(e => n.getAttribute(e)).map(e => [e, n.getAttribute(e)])
                      : null;
                  if (s && s.length)
                    s.forEach(e => {
                      o.push(`[${e[0]}="${e[1]}"]`);
                    });
                  else {
                    n.id && o.push(`#${n.id}`);
                    const e = n.className;
                    if (e && r.isString(e)) {
                      const t = e.split(/\s+/);
                      for (const e of t) o.push(`.${e}`);
                    }
                  }
                  const a = ['aria-label', 'type', 'name', 'title', 'alt'];
                  for (const e of a) {
                    const t = n.getAttribute(e);
                    t && o.push(`[${e}="${t}"]`);
                  }
                  return o.join('');
                }
                (n.getComponentName = function (e) {
                  if (!i.HTMLElement) return null;
                  let t = e;
                  for (let e = 0; e < 5; e++) {
                    if (!t) return null;
                    if (t instanceof HTMLElement) {
                      if (t.dataset.sentryComponent) return t.dataset.sentryComponent;
                      if (t.dataset.sentryElement) return t.dataset.sentryElement;
                    }
                    t = t.parentNode;
                  }
                  return null;
                }),
                  (n.getDomElement = function (e) {
                    return i.document && i.document.querySelector
                      ? i.document.querySelector(e)
                      : null;
                  }),
                  (n.getLocationHref = function () {
                    try {
                      return i.document.location.href;
                    } catch (e) {
                      return '';
                    }
                  }),
                  (n.htmlTreeAsString = function (e, t = {}) {
                    if (!e) return '<unknown>';
                    try {
                      let n = e;
                      const r = 5,
                        i = [];
                      let s = 0,
                        a = 0;
                      const c = ' > ',
                        u = c.length;
                      let p;
                      const l = Array.isArray(t) ? t : t.keyAttrs,
                        d = (!Array.isArray(t) && t.maxStringLength) || 80;
                      for (
                        ;
                        n &&
                        s++ < r &&
                        ((p = o(n, l)),
                        !('html' === p || (s > 1 && a + i.length * u + p.length >= d)));

                      )
                        i.push(p), (a += p.length), (n = n.parentNode);
                      return i.reverse().join(c);
                    } catch (e) {
                      return '<unknown>';
                    }
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/browser.js' },
    ],
    [
      3241,
      { './_nullishCoalesce.js': 3244 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./_nullishCoalesce.js');
                n._asyncNullishCoalesce = async function (e, t) {
                  return r._nullishCoalesce(e, t);
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/buildPolyfills/_asyncNullishCoalesce.js',
      },
    ],
    [
      3242,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n._asyncOptionalChain = async function (e) {
                    let t = undefined,
                      n = e[0],
                      r = 1;
                    for (; r < e.length; ) {
                      const i = e[r],
                        o = e[r + 1];
                      if (((r += 2), ('optionalAccess' === i || 'optionalCall' === i) && null == n))
                        return;
                      'access' === i || 'optionalAccess' === i
                        ? ((t = n), (n = await o(n)))
                        : ('call' !== i && 'optionalCall' !== i) ||
                          ((n = await o((...e) => n.call(t, ...e))), (t = undefined));
                    }
                    return n;
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/buildPolyfills/_asyncOptionalChain.js',
      },
    ],
    [
      3243,
      { './_asyncOptionalChain.js': 3242 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./_asyncOptionalChain.js');
                n._asyncOptionalChainDelete = async function (e) {
                  const t = await r._asyncOptionalChain(e);
                  return null == t || t;
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/buildPolyfills/_asyncOptionalChainDelete.js',
      },
    ],
    [
      3244,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n._nullishCoalesce = function (e, t) {
                    return null != e ? e : t();
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/buildPolyfills/_nullishCoalesce.js',
      },
    ],
    [
      3245,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n._optionalChain = function (e) {
                    let t = undefined,
                      n = e[0],
                      r = 1;
                    for (; r < e.length; ) {
                      const i = e[r],
                        o = e[r + 1];
                      if (((r += 2), ('optionalAccess' === i || 'optionalCall' === i) && null == n))
                        return;
                      'access' === i || 'optionalAccess' === i
                        ? ((t = n), (n = o(n)))
                        : ('call' !== i && 'optionalCall' !== i) ||
                          ((n = o((...e) => n.call(t, ...e))), (t = undefined));
                    }
                    return n;
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/buildPolyfills/_optionalChain.js',
      },
    ],
    [
      3246,
      { './_optionalChain.js': 3245 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./_optionalChain.js');
                n._optionalChainDelete = function (e) {
                  const t = r._optionalChain(e);
                  return null == t || t;
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/buildPolyfills/_optionalChainDelete.js',
      },
    ],
    [
      3247,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.makeFifoCache = function (e) {
                    let t = [],
                      n = {};
                    return {
                      add(r, i) {
                        for (; t.length >= e; ) {
                          const e = t.shift();
                          e !== undefined && delete n[e];
                        }
                        n[r] && this.delete(r), t.push(r), (n[r] = i);
                      },
                      clear() {
                        (n = {}), (t = []);
                      },
                      get: e => n[e],
                      size: () => t.length,
                      delete(e) {
                        if (!n[e]) return !1;
                        delete n[e];
                        for (let n = 0; n < t.length; n++)
                          if (t[n] === e) {
                            t.splice(n, 1);
                            break;
                          }
                        return !0;
                      },
                    };
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/cache.js' },
    ],
    [
      3248,
      { './envelope.js': 3253, './time.js': 3282 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./envelope.js'),
                  i = e('./time.js');
                n.createClientReportEnvelope = function (e, t, n) {
                  const o = [
                    { type: 'client_report' },
                    { timestamp: n || i.dateTimestampInSeconds(), discarded_events: e },
                  ];
                  return r.createEnvelope(t ? { dsn: t } : {}, [o]);
                };
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/clientreport.js' },
    ],
    [
      3249,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.parseCookie = function (e) {
                    const t = {};
                    let n = 0;
                    for (; n < e.length; ) {
                      const r = e.indexOf('=', n);
                      if (-1 === r) break;
                      let i = e.indexOf(';', n);
                      if (-1 === i) i = e.length;
                      else if (i < r) {
                        n = e.lastIndexOf(';', r - 1) + 1;
                        continue;
                      }
                      const o = e.slice(n, r).trim();
                      if (undefined === t[o]) {
                        let n = e.slice(r + 1, i).trim();
                        34 === n.charCodeAt(0) && (n = n.slice(1, -1));
                        try {
                          t[o] = -1 !== n.indexOf('%') ? decodeURIComponent(n) : n;
                        } catch (e) {
                          t[o] = n;
                        }
                      }
                      n = i + 1;
                    }
                    return t;
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/cookie.js' },
    ],
    [
      3250,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
                n.DEBUG_BUILD = r;
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/debug-build.js' },
    ],
    [
      3251,
      { './debug-build.js': 3250, './logger.js': 3264 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./debug-build.js'),
                  i = e('./logger.js'),
                  o = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
                function s(e) {
                  const t = o.exec(e);
                  if (!t)
                    return (
                      i.consoleSandbox(() => {
                        console.error(`Invalid Sentry Dsn: ${e}`);
                      }),
                      undefined
                    );
                  const [n, r, s = '', c = '', u = '', p = ''] = t.slice(1);
                  let l = '',
                    d = p;
                  const _ = d.split('/');
                  if ((_.length > 1 && ((l = _.slice(0, -1).join('/')), (d = _.pop())), d)) {
                    const e = d.match(/^\d+/);
                    e && (d = e[0]);
                  }
                  return a({
                    host: c,
                    pass: s,
                    path: l,
                    projectId: d,
                    port: u,
                    protocol: n,
                    publicKey: r,
                  });
                }
                function a(e) {
                  return {
                    protocol: e.protocol,
                    publicKey: e.publicKey || '',
                    pass: e.pass || '',
                    host: e.host,
                    port: e.port || '',
                    path: e.path || '',
                    projectId: e.projectId,
                  };
                }
                (n.dsnFromString = s),
                  (n.dsnToString = function (e, t = !1) {
                    const {
                      host: n,
                      path: r,
                      pass: i,
                      port: o,
                      projectId: s,
                      protocol: a,
                      publicKey: c,
                    } = e;
                    return `${a}://${c}${t && i ? `:${i}` : ''}@${n}${o ? `:${o}` : ''}/${r ? `${r}/` : r}${s}`;
                  }),
                  (n.makeDsn = function (e) {
                    const t = 'string' == typeof e ? s(e) : a(e);
                    return t &&
                      (function (e) {
                        if (!r.DEBUG_BUILD) return !0;
                        const { port: t, projectId: n, protocol: o } = e;
                        return !(
                          ['protocol', 'publicKey', 'host', 'projectId'].find(
                            t => !e[t] && (i.logger.error(`Invalid Sentry Dsn: ${t} missing`), !0)
                          ) ||
                          (n.match(/^\d+$/)
                            ? (function (e) {
                                return 'http' === e || 'https' === e;
                              })(o)
                              ? t &&
                                isNaN(parseInt(t, 10)) &&
                                (i.logger.error(`Invalid Sentry Dsn: Invalid port ${t}`), 1)
                              : (i.logger.error(`Invalid Sentry Dsn: Invalid protocol ${o}`), 1)
                            : (i.logger.error(`Invalid Sentry Dsn: Invalid projectId ${n}`), 1))
                        );
                      })(t)
                      ? t
                      : undefined;
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/dsn.js' },
    ],
    [
      3252,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getSDKSource = function () {
                    return 'npm';
                  }),
                  (n.isBrowserBundle = function () {
                    return (
                      'undefined' != typeof __SENTRY_BROWSER_BUNDLE__ && !!__SENTRY_BROWSER_BUNDLE__
                    );
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/env.js' },
    ],
    [
      3253,
      { './dsn.js': 3251, './normalize.js': 3270, './object.js': 3271, './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./dsn.js'),
                  i = e('./normalize.js'),
                  o = e('./object.js'),
                  s = e('./worldwide.js');
                function a(e, t) {
                  const n = e[1];
                  for (const e of n) {
                    if (t(e, e[0].type)) return !0;
                  }
                  return !1;
                }
                function c(e) {
                  return s.GLOBAL_OBJ.__SENTRY__ && s.GLOBAL_OBJ.__SENTRY__.encodePolyfill
                    ? s.GLOBAL_OBJ.__SENTRY__.encodePolyfill(e)
                    : new TextEncoder().encode(e);
                }
                const u = {
                  session: 'session',
                  sessions: 'session',
                  attachment: 'attachment',
                  transaction: 'transaction',
                  event: 'error',
                  client_report: 'internal',
                  user_report: 'default',
                  profile: 'profile',
                  profile_chunk: 'profile',
                  replay_event: 'replay',
                  replay_recording: 'replay',
                  check_in: 'monitor',
                  feedback: 'feedback',
                  span: 'span',
                  statsd: 'metric_bucket',
                };
                (n.addItemToEnvelope = function (e, t) {
                  const [n, r] = e;
                  return [n, [...r, t]];
                }),
                  (n.createAttachmentEnvelopeItem = function (e) {
                    const t = 'string' == typeof e.data ? c(e.data) : e.data;
                    return [
                      o.dropUndefinedKeys({
                        type: 'attachment',
                        length: t.length,
                        filename: e.filename,
                        content_type: e.contentType,
                        attachment_type: e.attachmentType,
                      }),
                      t,
                    ];
                  }),
                  (n.createEnvelope = function (e, t = []) {
                    return [e, t];
                  }),
                  (n.createEventEnvelopeHeaders = function (e, t, n, i) {
                    const s =
                      e.sdkProcessingMetadata && e.sdkProcessingMetadata.dynamicSamplingContext;
                    return {
                      event_id: e.event_id,
                      sent_at: new Date().toISOString(),
                      ...(t && { sdk: t }),
                      ...(!!n && i && { dsn: r.dsnToString(i) }),
                      ...(s && { trace: o.dropUndefinedKeys({ ...s }) }),
                    };
                  }),
                  (n.createSpanEnvelopeItem = function (e) {
                    return [{ type: 'span' }, e];
                  }),
                  (n.envelopeContainsItemType = function (e, t) {
                    return a(e, (e, n) => t.includes(n));
                  }),
                  (n.envelopeItemTypeToDataCategory = function (e) {
                    return u[e];
                  }),
                  (n.forEachEnvelopeItem = a),
                  (n.getSdkMetadataForEnvelopeHeader = function (e) {
                    if (!e || !e.sdk) return;
                    const { name: t, version: n } = e.sdk;
                    return { name: t, version: n };
                  }),
                  (n.parseEnvelope = function (e) {
                    let t = 'string' == typeof e ? c(e) : e;
                    function n(e) {
                      const n = t.subarray(0, e);
                      return (t = t.subarray(e + 1)), n;
                    }
                    function r() {
                      let e = t.indexOf(10);
                      return (
                        e < 0 && (e = t.length),
                        JSON.parse(
                          ((r = n(e)),
                          s.GLOBAL_OBJ.__SENTRY__ && s.GLOBAL_OBJ.__SENTRY__.decodePolyfill
                            ? s.GLOBAL_OBJ.__SENTRY__.decodePolyfill(r)
                            : new TextDecoder().decode(r))
                        )
                      );
                      var r;
                    }
                    const i = r(),
                      o = [];
                    for (; t.length; ) {
                      const e = r(),
                        t = 'number' == typeof e.length ? e.length : undefined;
                      o.push([e, t ? n(t) : r()]);
                    }
                    return [i, o];
                  }),
                  (n.serializeEnvelope = function (e) {
                    const [t, n] = e;
                    let r = JSON.stringify(t);
                    function o(e) {
                      'string' == typeof r
                        ? (r = 'string' == typeof e ? r + e : [c(r), e])
                        : r.push('string' == typeof e ? c(e) : e);
                    }
                    for (const e of n) {
                      const [t, n] = e;
                      if (
                        (o(`\n${JSON.stringify(t)}\n`),
                        'string' == typeof n || n instanceof Uint8Array)
                      )
                        o(n);
                      else {
                        let e;
                        try {
                          e = JSON.stringify(n);
                        } catch (t) {
                          e = JSON.stringify(i.normalize(n));
                        }
                        o(e);
                      }
                    }
                    return 'string' == typeof r
                      ? r
                      : (function (e) {
                          const t = e.reduce((e, t) => e + t.length, 0),
                            n = new Uint8Array(t);
                          let r = 0;
                          for (const t of e) n.set(t, r), (r += t.length);
                          return n;
                        })(r);
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/envelope.js' },
    ],
    [
      3254,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                class r extends Error {
                  constructor(e, t = 'warn') {
                    super(e),
                      (this.message = e),
                      (this.name = new.target.prototype.constructor.name),
                      Object.setPrototypeOf(this, new.target.prototype),
                      (this.logLevel = t);
                  }
                }
                n.SentryError = r;
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/error.js' },
    ],
    [
      3255,
      { './is.js': 3262, './misc.js': 3267, './normalize.js': 3270, './object.js': 3271 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./is.js'),
                  i = e('./misc.js'),
                  o = e('./normalize.js'),
                  s = e('./object.js');
                function a(e, t) {
                  return e(t.stack || '', 1);
                }
                function c(e, t) {
                  const n = { type: t.name || t.constructor.name, value: t.message },
                    r = a(e, t);
                  return r.length && (n.stacktrace = { frames: r }), n;
                }
                function u(e) {
                  if ('name' in e && 'string' == typeof e.name) {
                    let t = `'${e.name}' captured as exception`;
                    return (
                      'message' in e &&
                        'string' == typeof e.message &&
                        (t += ` with message '${e.message}'`),
                      t
                    );
                  }
                  if ('message' in e && 'string' == typeof e.message) return e.message;
                  const t = s.extractExceptionKeysForMessage(e);
                  if (r.isErrorEvent(e))
                    return `Event \`ErrorEvent\` captured as exception with message \`${e.message}\``;
                  const n = (function (e) {
                    try {
                      const t = Object.getPrototypeOf(e);
                      return t ? t.constructor.name : undefined;
                    } catch (e) {}
                  })(e);
                  return `${n && 'Object' !== n ? `'${n}'` : 'Object'} captured as exception with keys: ${t}`;
                }
                function p(e, t, n, i) {
                  if (r.isError(n)) return [n, undefined];
                  if (((t.synthetic = !0), r.isPlainObject(n))) {
                    const t = e && e.getOptions().normalizeDepth,
                      r = { __serialized__: o.normalizeToSize(n, t) },
                      s = (function (e) {
                        for (const t in e)
                          if (Object.prototype.hasOwnProperty.call(e, t)) {
                            const n = e[t];
                            if (n instanceof Error) return n;
                          }
                        return undefined;
                      })(n);
                    if (s) return [s, r];
                    const a = u(n),
                      c = (i && i.syntheticException) || new Error(a);
                    return (c.message = a), [c, r];
                  }
                  const s = (i && i.syntheticException) || new Error(n);
                  return (s.message = `${n}`), [s, undefined];
                }
                (n.eventFromMessage = function (e, t, n = 'info', i, o) {
                  const s = { event_id: i && i.event_id, level: n };
                  if (o && i && i.syntheticException) {
                    const n = a(e, i.syntheticException);
                    n.length &&
                      (s.exception = { values: [{ value: t, stacktrace: { frames: n } }] });
                  }
                  if (r.isParameterizedString(t)) {
                    const { __sentry_template_string__: e, __sentry_template_values__: n } = t;
                    return (s.logentry = { message: e, params: n }), s;
                  }
                  return (s.message = t), s;
                }),
                  (n.eventFromUnknownInput = function (e, t, n, r) {
                    const o = (r && r.data && r.data.mechanism) || { handled: !0, type: 'generic' },
                      [s, a] = p(e, o, n, r),
                      u = { exception: { values: [c(t, s)] } };
                    return (
                      a && (u.extra = a),
                      i.addExceptionTypeValue(u, undefined, undefined),
                      i.addExceptionMechanism(u, o),
                      { ...u, event_id: r && r.event_id }
                    );
                  }),
                  (n.exceptionFromError = c),
                  (n.parseStackFrames = a);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/eventbuilder.js' },
    ],
    [
      3256,
      {
        './aggregate-errors.js': 3235,
        './anr.js': 3236,
        './array.js': 3237,
        './baggage.js': 3238,
        './breadcrumb-log-level.js': 3239,
        './browser.js': 3240,
        './buildPolyfills/_asyncNullishCoalesce.js': 3241,
        './buildPolyfills/_asyncOptionalChain.js': 3242,
        './buildPolyfills/_asyncOptionalChainDelete.js': 3243,
        './buildPolyfills/_nullishCoalesce.js': 3244,
        './buildPolyfills/_optionalChain.js': 3245,
        './buildPolyfills/_optionalChainDelete.js': 3246,
        './cache.js': 3247,
        './clientreport.js': 3248,
        './dsn.js': 3251,
        './env.js': 3252,
        './envelope.js': 3253,
        './error.js': 3254,
        './eventbuilder.js': 3255,
        './instrument/console.js': 3257,
        './instrument/fetch.js': 3258,
        './instrument/globalError.js': 3259,
        './instrument/globalUnhandledRejection.js': 3260,
        './instrument/handlers.js': 3261,
        './is.js': 3262,
        './isBrowser.js': 3263,
        './logger.js': 3264,
        './lru.js': 3265,
        './memo.js': 3266,
        './misc.js': 3267,
        './node-stack-trace.js': 3268,
        './node.js': 3269,
        './normalize.js': 3270,
        './object.js': 3271,
        './path.js': 3272,
        './promisebuffer.js': 3273,
        './propagationContext.js': 3274,
        './ratelimit.js': 3275,
        './requestdata.js': 3276,
        './severity.js': 3277,
        './stacktrace.js': 3278,
        './string.js': 3279,
        './supports.js': 3280,
        './syncpromise.js': 3281,
        './time.js': 3282,
        './tracing.js': 3283,
        './url.js': 3284,
        './vendor/escapeStringForRegex.js': 3285,
        './vendor/supportsHistory.js': 3287,
        './version.js': 3288,
        './worldwide.js': 3289,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./aggregate-errors.js'),
                  i = e('./array.js'),
                  o = e('./breadcrumb-log-level.js'),
                  s = e('./browser.js'),
                  a = e('./dsn.js'),
                  c = e('./error.js'),
                  u = e('./worldwide.js'),
                  p = e('./instrument/console.js'),
                  l = e('./instrument/fetch.js'),
                  d = e('./instrument/globalError.js'),
                  _ = e('./instrument/globalUnhandledRejection.js'),
                  T = e('./instrument/handlers.js'),
                  y = e('./is.js'),
                  E = e('./isBrowser.js'),
                  m = e('./logger.js'),
                  g = e('./memo.js'),
                  S = e('./misc.js'),
                  h = e('./node.js'),
                  O = e('./normalize.js'),
                  f = e('./object.js'),
                  R = e('./path.js'),
                  A = e('./promisebuffer.js'),
                  b = e('./requestdata.js'),
                  N = e('./severity.js'),
                  I = e('./stacktrace.js'),
                  C = e('./node-stack-trace.js'),
                  v = e('./string.js'),
                  P = e('./supports.js'),
                  w = e('./syncpromise.js'),
                  D = e('./time.js'),
                  x = e('./tracing.js'),
                  M = e('./env.js'),
                  L = e('./envelope.js'),
                  j = e('./clientreport.js'),
                  U = e('./ratelimit.js'),
                  B = e('./baggage.js'),
                  k = e('./url.js'),
                  F = e('./cache.js'),
                  z = e('./eventbuilder.js'),
                  G = e('./anr.js'),
                  H = e('./lru.js'),
                  V = e('./buildPolyfills/_asyncNullishCoalesce.js'),
                  $ = e('./buildPolyfills/_asyncOptionalChain.js'),
                  W = e('./buildPolyfills/_asyncOptionalChainDelete.js'),
                  q = e('./buildPolyfills/_nullishCoalesce.js'),
                  K = e('./buildPolyfills/_optionalChain.js'),
                  Y = e('./buildPolyfills/_optionalChainDelete.js'),
                  X = e('./propagationContext.js'),
                  J = e('./version.js'),
                  Q = e('./vendor/escapeStringForRegex.js'),
                  Z = e('./vendor/supportsHistory.js');
                (n.applyAggregateErrorsToEvent = r.applyAggregateErrorsToEvent),
                  (n.flatten = i.flatten),
                  (n.getBreadcrumbLogLevelFromHttpStatusCode =
                    o.getBreadcrumbLogLevelFromHttpStatusCode),
                  (n.getComponentName = s.getComponentName),
                  (n.getDomElement = s.getDomElement),
                  (n.getLocationHref = s.getLocationHref),
                  (n.htmlTreeAsString = s.htmlTreeAsString),
                  (n.dsnFromString = a.dsnFromString),
                  (n.dsnToString = a.dsnToString),
                  (n.makeDsn = a.makeDsn),
                  (n.SentryError = c.SentryError),
                  (n.GLOBAL_OBJ = u.GLOBAL_OBJ),
                  (n.getGlobalSingleton = u.getGlobalSingleton),
                  (n.addConsoleInstrumentationHandler = p.addConsoleInstrumentationHandler),
                  (n.addFetchEndInstrumentationHandler = l.addFetchEndInstrumentationHandler),
                  (n.addFetchInstrumentationHandler = l.addFetchInstrumentationHandler),
                  (n.addGlobalErrorInstrumentationHandler = d.addGlobalErrorInstrumentationHandler),
                  (n.addGlobalUnhandledRejectionInstrumentationHandler =
                    _.addGlobalUnhandledRejectionInstrumentationHandler),
                  (n.addHandler = T.addHandler),
                  (n.maybeInstrument = T.maybeInstrument),
                  (n.resetInstrumentationHandlers = T.resetInstrumentationHandlers),
                  (n.triggerHandlers = T.triggerHandlers),
                  (n.isDOMError = y.isDOMError),
                  (n.isDOMException = y.isDOMException),
                  (n.isElement = y.isElement),
                  (n.isError = y.isError),
                  (n.isErrorEvent = y.isErrorEvent),
                  (n.isEvent = y.isEvent),
                  (n.isInstanceOf = y.isInstanceOf),
                  (n.isParameterizedString = y.isParameterizedString),
                  (n.isPlainObject = y.isPlainObject),
                  (n.isPrimitive = y.isPrimitive),
                  (n.isRegExp = y.isRegExp),
                  (n.isString = y.isString),
                  (n.isSyntheticEvent = y.isSyntheticEvent),
                  (n.isThenable = y.isThenable),
                  (n.isVueViewModel = y.isVueViewModel),
                  (n.isBrowser = E.isBrowser),
                  (n.CONSOLE_LEVELS = m.CONSOLE_LEVELS),
                  (n.consoleSandbox = m.consoleSandbox),
                  (n.logger = m.logger),
                  (n.originalConsoleMethods = m.originalConsoleMethods),
                  (n.memoBuilder = g.memoBuilder),
                  (n.addContextToFrame = S.addContextToFrame),
                  (n.addExceptionMechanism = S.addExceptionMechanism),
                  (n.addExceptionTypeValue = S.addExceptionTypeValue),
                  (n.arrayify = S.arrayify),
                  (n.checkOrSetAlreadyCaught = S.checkOrSetAlreadyCaught),
                  (n.getEventDescription = S.getEventDescription),
                  (n.parseSemver = S.parseSemver),
                  (n.uuid4 = S.uuid4),
                  (n.dynamicRequire = h.dynamicRequire),
                  (n.isNodeEnv = h.isNodeEnv),
                  (n.loadModule = h.loadModule),
                  (n.normalize = O.normalize),
                  (n.normalizeToSize = O.normalizeToSize),
                  (n.normalizeUrlToBase = O.normalizeUrlToBase),
                  (n.addNonEnumerableProperty = f.addNonEnumerableProperty),
                  (n.convertToPlainObject = f.convertToPlainObject),
                  (n.dropUndefinedKeys = f.dropUndefinedKeys),
                  (n.extractExceptionKeysForMessage = f.extractExceptionKeysForMessage),
                  (n.fill = f.fill),
                  (n.getOriginalFunction = f.getOriginalFunction),
                  (n.markFunctionWrapped = f.markFunctionWrapped),
                  (n.objectify = f.objectify),
                  (n.urlEncode = f.urlEncode),
                  (n.basename = R.basename),
                  (n.dirname = R.dirname),
                  (n.isAbsolute = R.isAbsolute),
                  (n.join = R.join),
                  (n.normalizePath = R.normalizePath),
                  (n.relative = R.relative),
                  (n.resolve = R.resolve),
                  (n.makePromiseBuffer = A.makePromiseBuffer),
                  (n.DEFAULT_USER_INCLUDES = b.DEFAULT_USER_INCLUDES),
                  (n.addRequestDataToEvent = b.addRequestDataToEvent),
                  (n.extractPathForTransaction = b.extractPathForTransaction),
                  (n.extractRequestData = b.extractRequestData),
                  (n.winterCGHeadersToDict = b.winterCGHeadersToDict),
                  (n.winterCGRequestToRequestData = b.winterCGRequestToRequestData),
                  (n.severityLevelFromString = N.severityLevelFromString),
                  (n.validSeverityLevels = N.validSeverityLevels),
                  (n.UNKNOWN_FUNCTION = I.UNKNOWN_FUNCTION),
                  (n.createStackParser = I.createStackParser),
                  (n.getFramesFromEvent = I.getFramesFromEvent),
                  (n.getFunctionName = I.getFunctionName),
                  (n.stackParserFromStackParserOptions = I.stackParserFromStackParserOptions),
                  (n.stripSentryFramesAndReverse = I.stripSentryFramesAndReverse),
                  (n.filenameIsInApp = C.filenameIsInApp),
                  (n.node = C.node),
                  (n.nodeStackLineParser = C.nodeStackLineParser),
                  (n.isMatchingPattern = v.isMatchingPattern),
                  (n.safeJoin = v.safeJoin),
                  (n.snipLine = v.snipLine),
                  (n.stringMatchesSomePattern = v.stringMatchesSomePattern),
                  (n.truncate = v.truncate),
                  (n.isNativeFunction = P.isNativeFunction),
                  (n.supportsDOMError = P.supportsDOMError),
                  (n.supportsDOMException = P.supportsDOMException),
                  (n.supportsErrorEvent = P.supportsErrorEvent),
                  (n.supportsFetch = P.supportsFetch),
                  (n.supportsNativeFetch = P.supportsNativeFetch),
                  (n.supportsReferrerPolicy = P.supportsReferrerPolicy),
                  (n.supportsReportingObserver = P.supportsReportingObserver),
                  (n.SyncPromise = w.SyncPromise),
                  (n.rejectedSyncPromise = w.rejectedSyncPromise),
                  (n.resolvedSyncPromise = w.resolvedSyncPromise),
                  Object.defineProperty(n, '_browserPerformanceTimeOriginMode', {
                    enumerable: !0,
                    get: () => D._browserPerformanceTimeOriginMode,
                  }),
                  (n.browserPerformanceTimeOrigin = D.browserPerformanceTimeOrigin),
                  (n.dateTimestampInSeconds = D.dateTimestampInSeconds),
                  (n.timestampInSeconds = D.timestampInSeconds),
                  (n.TRACEPARENT_REGEXP = x.TRACEPARENT_REGEXP),
                  (n.extractTraceparentData = x.extractTraceparentData),
                  (n.generateSentryTraceHeader = x.generateSentryTraceHeader),
                  (n.propagationContextFromHeaders = x.propagationContextFromHeaders),
                  (n.getSDKSource = M.getSDKSource),
                  (n.isBrowserBundle = M.isBrowserBundle),
                  (n.addItemToEnvelope = L.addItemToEnvelope),
                  (n.createAttachmentEnvelopeItem = L.createAttachmentEnvelopeItem),
                  (n.createEnvelope = L.createEnvelope),
                  (n.createEventEnvelopeHeaders = L.createEventEnvelopeHeaders),
                  (n.createSpanEnvelopeItem = L.createSpanEnvelopeItem),
                  (n.envelopeContainsItemType = L.envelopeContainsItemType),
                  (n.envelopeItemTypeToDataCategory = L.envelopeItemTypeToDataCategory),
                  (n.forEachEnvelopeItem = L.forEachEnvelopeItem),
                  (n.getSdkMetadataForEnvelopeHeader = L.getSdkMetadataForEnvelopeHeader),
                  (n.parseEnvelope = L.parseEnvelope),
                  (n.serializeEnvelope = L.serializeEnvelope),
                  (n.createClientReportEnvelope = j.createClientReportEnvelope),
                  (n.DEFAULT_RETRY_AFTER = U.DEFAULT_RETRY_AFTER),
                  (n.disabledUntil = U.disabledUntil),
                  (n.isRateLimited = U.isRateLimited),
                  (n.parseRetryAfterHeader = U.parseRetryAfterHeader),
                  (n.updateRateLimits = U.updateRateLimits),
                  (n.BAGGAGE_HEADER_NAME = B.BAGGAGE_HEADER_NAME),
                  (n.MAX_BAGGAGE_STRING_LENGTH = B.MAX_BAGGAGE_STRING_LENGTH),
                  (n.SENTRY_BAGGAGE_KEY_PREFIX = B.SENTRY_BAGGAGE_KEY_PREFIX),
                  (n.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = B.SENTRY_BAGGAGE_KEY_PREFIX_REGEX),
                  (n.baggageHeaderToDynamicSamplingContext =
                    B.baggageHeaderToDynamicSamplingContext),
                  (n.dynamicSamplingContextToSentryBaggageHeader =
                    B.dynamicSamplingContextToSentryBaggageHeader),
                  (n.parseBaggageHeader = B.parseBaggageHeader),
                  (n.getNumberOfUrlSegments = k.getNumberOfUrlSegments),
                  (n.getSanitizedUrlString = k.getSanitizedUrlString),
                  (n.parseUrl = k.parseUrl),
                  (n.stripUrlQueryAndFragment = k.stripUrlQueryAndFragment),
                  (n.makeFifoCache = F.makeFifoCache),
                  (n.eventFromMessage = z.eventFromMessage),
                  (n.eventFromUnknownInput = z.eventFromUnknownInput),
                  (n.exceptionFromError = z.exceptionFromError),
                  (n.parseStackFrames = z.parseStackFrames),
                  (n.callFrameToStackFrame = G.callFrameToStackFrame),
                  (n.watchdogTimer = G.watchdogTimer),
                  (n.LRUMap = H.LRUMap),
                  (n._asyncNullishCoalesce = V._asyncNullishCoalesce),
                  (n._asyncOptionalChain = $._asyncOptionalChain),
                  (n._asyncOptionalChainDelete = W._asyncOptionalChainDelete),
                  (n._nullishCoalesce = q._nullishCoalesce),
                  (n._optionalChain = K._optionalChain),
                  (n._optionalChainDelete = Y._optionalChainDelete),
                  (n.generatePropagationContext = X.generatePropagationContext),
                  (n.SDK_VERSION = J.SDK_VERSION),
                  (n.escapeStringForRegex = Q.escapeStringForRegex),
                  (n.supportsHistory = Z.supportsHistory);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/index.js' },
    ],
    [
      3257,
      {
        '../logger.js': 3264,
        '../object.js': 3271,
        '../worldwide.js': 3289,
        './handlers.js': 3261,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../logger.js'),
                  i = e('../object.js'),
                  o = e('../worldwide.js'),
                  s = e('./handlers.js');
                function a() {
                  'console' in o.GLOBAL_OBJ &&
                    r.CONSOLE_LEVELS.forEach(function (e) {
                      e in o.GLOBAL_OBJ.console &&
                        i.fill(o.GLOBAL_OBJ.console, e, function (t) {
                          return (
                            (r.originalConsoleMethods[e] = t),
                            function (...t) {
                              const n = { args: t, level: e };
                              s.triggerHandlers('console', n);
                              const i = r.originalConsoleMethods[e];
                              i && i.apply(o.GLOBAL_OBJ.console, t);
                            }
                          );
                        });
                    });
                }
                n.addConsoleInstrumentationHandler = function (e) {
                  const t = 'console';
                  s.addHandler(t, e), s.maybeInstrument(t, a);
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/instrument/console.js',
      },
    ],
    [
      3258,
      {
        '../is.js': 3262,
        '../object.js': 3271,
        '../supports.js': 3280,
        '../time.js': 3282,
        '../worldwide.js': 3289,
        './handlers.js': 3261,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../is.js'),
                  i = e('../object.js'),
                  o = e('../supports.js'),
                  s = e('../time.js'),
                  a = e('../worldwide.js'),
                  c = e('./handlers.js');
                function u(e, t = !1) {
                  (t && !o.supportsNativeFetch()) ||
                    i.fill(a.GLOBAL_OBJ, 'fetch', function (t) {
                      return function (...n) {
                        const { method: o, url: u } = _(n),
                          p = {
                            args: n,
                            fetchData: { method: o, url: u },
                            startTimestamp: 1e3 * s.timestampInSeconds(),
                          };
                        e || c.triggerHandlers('fetch', { ...p });
                        const l = new Error().stack;
                        return t.apply(a.GLOBAL_OBJ, n).then(
                          async t => (
                            e
                              ? e(t)
                              : c.triggerHandlers('fetch', {
                                  ...p,
                                  endTimestamp: 1e3 * s.timestampInSeconds(),
                                  response: t,
                                }),
                            t
                          ),
                          e => {
                            throw (
                              (c.triggerHandlers('fetch', {
                                ...p,
                                endTimestamp: 1e3 * s.timestampInSeconds(),
                                error: e,
                              }),
                              r.isError(e) &&
                                e.stack === undefined &&
                                ((e.stack = l), i.addNonEnumerableProperty(e, 'framesToPop', 1)),
                              e)
                            );
                          }
                        );
                      };
                    });
                }
                function p(e) {
                  let t;
                  try {
                    t = e.clone();
                  } catch (e) {
                    return;
                  }
                  !(async function (e, t) {
                    if (e && e.body) {
                      const n = e.body,
                        r = n.getReader(),
                        i = setTimeout(() => {
                          n.cancel().then(null, () => {});
                        }, 9e4);
                      let o = !0;
                      for (; o; ) {
                        let e;
                        try {
                          e = setTimeout(() => {
                            n.cancel().then(null, () => {});
                          }, 5e3);
                          const { done: i } = await r.read();
                          clearTimeout(e), i && (t(), (o = !1));
                        } catch (e) {
                          o = !1;
                        } finally {
                          clearTimeout(e);
                        }
                      }
                      clearTimeout(i), r.releaseLock(), n.cancel().then(null, () => {});
                    }
                  })(t, () => {
                    c.triggerHandlers('fetch-body-resolved', {
                      endTimestamp: 1e3 * s.timestampInSeconds(),
                      response: e,
                    });
                  });
                }
                function l(e, t) {
                  return !!e && 'object' == typeof e && !!e[t];
                }
                function d(e) {
                  return 'string' == typeof e
                    ? e
                    : e
                      ? l(e, 'url')
                        ? e.url
                        : e.toString
                          ? e.toString()
                          : ''
                      : '';
                }
                function _(e) {
                  if (0 === e.length) return { method: 'GET', url: '' };
                  if (2 === e.length) {
                    const [t, n] = e;
                    return {
                      url: d(t),
                      method: l(n, 'method') ? String(n.method).toUpperCase() : 'GET',
                    };
                  }
                  const t = e[0];
                  return {
                    url: d(t),
                    method: l(t, 'method') ? String(t.method).toUpperCase() : 'GET',
                  };
                }
                (n.addFetchEndInstrumentationHandler = function (e) {
                  const t = 'fetch-body-resolved';
                  c.addHandler(t, e), c.maybeInstrument(t, () => u(p));
                }),
                  (n.addFetchInstrumentationHandler = function (e, t) {
                    const n = 'fetch';
                    c.addHandler(n, e), c.maybeInstrument(n, () => u(undefined, t));
                  }),
                  (n.parseFetchArgs = _);
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/instrument/fetch.js',
      },
    ],
    [
      3259,
      { '../worldwide.js': 3289, './handlers.js': 3261 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../worldwide.js'),
                  i = e('./handlers.js');
                let o = null;
                function s() {
                  (o = r.GLOBAL_OBJ.onerror),
                    (r.GLOBAL_OBJ.onerror = function (e, t, n, r, s) {
                      const a = { column: r, error: s, line: n, msg: e, url: t };
                      return (
                        i.triggerHandlers('error', a),
                        !(!o || o.__SENTRY_LOADER__) && o.apply(this, arguments)
                      );
                    }),
                    (r.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = !0);
                }
                n.addGlobalErrorInstrumentationHandler = function (e) {
                  const t = 'error';
                  i.addHandler(t, e), i.maybeInstrument(t, s);
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/instrument/globalError.js',
      },
    ],
    [
      3260,
      { '../worldwide.js': 3289, './handlers.js': 3261 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../worldwide.js'),
                  i = e('./handlers.js');
                let o = null;
                function s() {
                  (o = r.GLOBAL_OBJ.onunhandledrejection),
                    (r.GLOBAL_OBJ.onunhandledrejection = function (e) {
                      const t = e;
                      return (
                        i.triggerHandlers('unhandledrejection', t),
                        !(o && !o.__SENTRY_LOADER__) || o.apply(this, arguments)
                      );
                    }),
                    (r.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = !0);
                }
                n.addGlobalUnhandledRejectionInstrumentationHandler = function (e) {
                  const t = 'unhandledrejection';
                  i.addHandler(t, e), i.maybeInstrument(t, s);
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/instrument/globalUnhandledRejection.js',
      },
    ],
    [
      3261,
      { '../debug-build.js': 3250, '../logger.js': 3264, '../stacktrace.js': 3278 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../debug-build.js'),
                  i = e('../logger.js'),
                  o = e('../stacktrace.js'),
                  s = {},
                  a = {};
                (n.addHandler = function (e, t) {
                  (s[e] = s[e] || []), s[e].push(t);
                }),
                  (n.maybeInstrument = function (e, t) {
                    a[e] || (t(), (a[e] = !0));
                  }),
                  (n.resetInstrumentationHandlers = function () {
                    Object.keys(s).forEach(e => {
                      s[e] = undefined;
                    });
                  }),
                  (n.triggerHandlers = function (e, t) {
                    const n = e && s[e];
                    if (n)
                      for (const s of n)
                        try {
                          s(t);
                        } catch (t) {
                          r.DEBUG_BUILD &&
                            i.logger.error(
                              `Error while triggering instrumentation handler.\nType: ${e}\nName: ${o.getFunctionName(s)}\nError:`,
                              t
                            );
                        }
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/instrument/handlers.js',
      },
    ],
    [
      3262,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = Object.prototype.toString;
                function i(e, t) {
                  return r.call(e) === `[object ${t}]`;
                }
                function o(e) {
                  return (
                    'object' == typeof e &&
                    null !== e &&
                    '__sentry_template_string__' in e &&
                    '__sentry_template_values__' in e
                  );
                }
                function s(e) {
                  return i(e, 'Object');
                }
                function a(e, t) {
                  try {
                    return e instanceof t;
                  } catch (e) {
                    return !1;
                  }
                }
                (n.isDOMError = function (e) {
                  return i(e, 'DOMError');
                }),
                  (n.isDOMException = function (e) {
                    return i(e, 'DOMException');
                  }),
                  (n.isElement = function (e) {
                    return 'undefined' != typeof Element && a(e, Element);
                  }),
                  (n.isError = function (e) {
                    switch (r.call(e)) {
                      case '[object Error]':
                      case '[object Exception]':
                      case '[object DOMException]':
                        return !0;
                      default:
                        return a(e, Error);
                    }
                  }),
                  (n.isErrorEvent = function (e) {
                    return i(e, 'ErrorEvent');
                  }),
                  (n.isEvent = function (e) {
                    return 'undefined' != typeof Event && a(e, Event);
                  }),
                  (n.isInstanceOf = a),
                  (n.isParameterizedString = o),
                  (n.isPlainObject = s),
                  (n.isPrimitive = function (e) {
                    return null === e || o(e) || ('object' != typeof e && 'function' != typeof e);
                  }),
                  (n.isRegExp = function (e) {
                    return i(e, 'RegExp');
                  }),
                  (n.isString = function (e) {
                    return i(e, 'String');
                  }),
                  (n.isSyntheticEvent = function (e) {
                    return (
                      s(e) && 'nativeEvent' in e && 'preventDefault' in e && 'stopPropagation' in e
                    );
                  }),
                  (n.isThenable = function (e) {
                    return Boolean(e && e.then && 'function' == typeof e.then);
                  }),
                  (n.isVueViewModel = function (e) {
                    return !('object' != typeof e || null === e || (!e.__isVue && !e._isVue));
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/is.js' },
    ],
    [
      3263,
      { './node.js': 3269, './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./node.js'),
                  i = e('./worldwide.js');
                n.isBrowser = function () {
                  return (
                    'undefined' != typeof window &&
                    (!r.isNodeEnv() ||
                      (i.GLOBAL_OBJ.process !== undefined &&
                        'renderer' === i.GLOBAL_OBJ.process.type))
                  );
                };
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/isBrowser.js' },
    ],
    [
      3264,
      { './debug-build.js': 3250, './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./debug-build.js'),
                  i = e('./worldwide.js'),
                  o = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'],
                  s = {};
                function a(e) {
                  if (!('console' in i.GLOBAL_OBJ)) return e();
                  const t = i.GLOBAL_OBJ.console,
                    n = {},
                    r = Object.keys(s);
                  r.forEach(e => {
                    const r = s[e];
                    (n[e] = t[e]), (t[e] = r);
                  });
                  try {
                    return e();
                  } finally {
                    r.forEach(e => {
                      t[e] = n[e];
                    });
                  }
                }
                const c = i.getGlobalSingleton('logger', function () {
                  let e = !1;
                  const t = {
                    enable: () => {
                      e = !0;
                    },
                    disable: () => {
                      e = !1;
                    },
                    isEnabled: () => e,
                  };
                  return (
                    r.DEBUG_BUILD
                      ? o.forEach(n => {
                          t[n] = (...t) => {
                            e &&
                              a(() => {
                                i.GLOBAL_OBJ.console[n](`Sentry Logger [${n}]:`, ...t);
                              });
                          };
                        })
                      : o.forEach(e => {
                          t[e] = () => undefined;
                        }),
                    t
                  );
                });
                (n.CONSOLE_LEVELS = o),
                  (n.consoleSandbox = a),
                  (n.logger = c),
                  (n.originalConsoleMethods = s);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/logger.js' },
    ],
    [
      3265,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                n.LRUMap = class {
                  constructor(e) {
                    (this._maxSize = e), (this._cache = new Map());
                  }
                  get size() {
                    return this._cache.size;
                  }
                  get(e) {
                    const t = this._cache.get(e);
                    return t === undefined
                      ? undefined
                      : (this._cache.delete(e), this._cache.set(e, t), t);
                  }
                  set(e, t) {
                    this._cache.size >= this._maxSize &&
                      this._cache.delete(this._cache.keys().next().value),
                      this._cache.set(e, t);
                  }
                  remove(e) {
                    const t = this._cache.get(e);
                    return t && this._cache.delete(e), t;
                  }
                  clear() {
                    this._cache.clear();
                  }
                  keys() {
                    return Array.from(this._cache.keys());
                  }
                  values() {
                    const e = [];
                    return this._cache.forEach(t => e.push(t)), e;
                  }
                };
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/lru.js' },
    ],
    [
      3266,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.memoBuilder = function () {
                    const e = 'function' == typeof WeakSet,
                      t = e ? new WeakSet() : [];
                    return [
                      function (n) {
                        if (e) return !!t.has(n) || (t.add(n), !1);
                        for (let e = 0; e < t.length; e++) {
                          if (t[e] === n) return !0;
                        }
                        return t.push(n), !1;
                      },
                      function (n) {
                        if (e) t.delete(n);
                        else
                          for (let e = 0; e < t.length; e++)
                            if (t[e] === n) {
                              t.splice(e, 1);
                              break;
                            }
                      },
                    ];
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/memo.js' },
    ],
    [
      3267,
      { './object.js': 3271, './string.js': 3279, './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./object.js'),
                  i = e('./string.js'),
                  o = e('./worldwide.js');
                function s(e) {
                  return e.exception && e.exception.values ? e.exception.values[0] : undefined;
                }
                const a =
                  /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
                function c(e) {
                  return parseInt(e || '', 10);
                }
                (n.addContextToFrame = function (e, t, n = 5) {
                  if (t.lineno === undefined) return;
                  const r = e.length,
                    o = Math.max(Math.min(r - 1, t.lineno - 1), 0);
                  t.pre_context = e.slice(Math.max(0, o - n), o).map(e => i.snipLine(e, 0));
                  const s = Math.min(r - 1, o);
                  (t.context_line = i.snipLine(e[s], t.colno || 0)),
                    (t.post_context = e
                      .slice(Math.min(o + 1, r), o + 1 + n)
                      .map(e => i.snipLine(e, 0)));
                }),
                  (n.addExceptionMechanism = function (e, t) {
                    const n = s(e);
                    if (!n) return;
                    const r = n.mechanism;
                    if (
                      ((n.mechanism = { type: 'generic', handled: !0, ...r, ...t }),
                      t && 'data' in t)
                    ) {
                      const e = { ...(r && r.data), ...t.data };
                      n.mechanism.data = e;
                    }
                  }),
                  (n.addExceptionTypeValue = function (e, t, n) {
                    const r = (e.exception = e.exception || {}),
                      i = (r.values = r.values || []),
                      o = (i[0] = i[0] || {});
                    o.value || (o.value = t || ''), o.type || (o.type = n || 'Error');
                  }),
                  (n.arrayify = function (e) {
                    return Array.isArray(e) ? e : [e];
                  }),
                  (n.checkOrSetAlreadyCaught = function (e) {
                    if (e && e.__sentry_captured__) return !0;
                    try {
                      r.addNonEnumerableProperty(e, '__sentry_captured__', !0);
                    } catch (e) {}
                    return !1;
                  }),
                  (n.getEventDescription = function (e) {
                    const { message: t, event_id: n } = e;
                    if (t) return t;
                    const r = s(e);
                    return r
                      ? r.type && r.value
                        ? `${r.type}: ${r.value}`
                        : r.type || r.value || n || '<unknown>'
                      : n || '<unknown>';
                  }),
                  (n.parseSemver = function (e) {
                    const t = e.match(a) || [],
                      n = c(t[1]),
                      r = c(t[2]),
                      i = c(t[3]);
                    return {
                      buildmetadata: t[5],
                      major: isNaN(n) ? undefined : n,
                      minor: isNaN(r) ? undefined : r,
                      patch: isNaN(i) ? undefined : i,
                      prerelease: t[4],
                    };
                  }),
                  (n.uuid4 = function () {
                    const e = o.GLOBAL_OBJ,
                      t = e.crypto || e.msCrypto;
                    let n = () => 16 * Math.random();
                    try {
                      if (t && t.randomUUID) return t.randomUUID().replace(/-/g, '');
                      t &&
                        t.getRandomValues &&
                        (n = () => {
                          const e = new Uint8Array(1);
                          return t.getRandomValues(e), e[0];
                        });
                    } catch (e) {}
                    return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, e =>
                      (e ^ ((15 & n()) >> (e / 4))).toString(16)
                    );
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/misc.js' },
    ],
    [
      3268,
      { './stacktrace.js': 3278 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./stacktrace.js');
                function i(e, t = !1) {
                  return (
                    !(
                      t ||
                      (e &&
                        !e.startsWith('/') &&
                        !e.match(/^[A-Z]:/) &&
                        !e.startsWith('.') &&
                        !e.match(/^[a-zA-Z]([a-zA-Z0-9.\-+])*:\/\//))
                    ) &&
                    e !== undefined &&
                    !e.includes('node_modules/')
                  );
                }
                function o(e) {
                  const t = /^\s*[-]{4,}$/,
                    n = /at (?:async )?(?:(.+?)\s+\()?(?:(.+):(\d+):(\d+)?|([^)]+))\)?/;
                  return o => {
                    const a = o.match(n);
                    if (a) {
                      let t, n, o, c, u;
                      if (a[1]) {
                        o = a[1];
                        let e = o.lastIndexOf('.');
                        if (('.' === o[e - 1] && e--, e > 0)) {
                          (t = o.slice(0, e)), (n = o.slice(e + 1));
                          const r = t.indexOf('.Module');
                          r > 0 && ((o = o.slice(r + 1)), (t = t.slice(0, r)));
                        }
                        c = undefined;
                      }
                      n && ((c = t), (u = n)),
                        '<anonymous>' === n && ((u = undefined), (o = undefined)),
                        o === undefined &&
                          ((u = u || r.UNKNOWN_FUNCTION), (o = c ? `${c}.${u}` : u));
                      let p = a[2] && a[2].startsWith('file://') ? a[2].slice(7) : a[2];
                      const l = 'native' === a[5];
                      return (
                        p && p.match(/\/[A-Z]:/) && (p = p.slice(1)),
                        p || !a[5] || l || (p = a[5]),
                        {
                          filename: p,
                          module: e ? e(p) : undefined,
                          function: o,
                          lineno: s(a[3]),
                          colno: s(a[4]),
                          in_app: i(p || '', l),
                        }
                      );
                    }
                    return o.match(t) ? { filename: o } : undefined;
                  };
                }
                function s(e) {
                  return parseInt(e || '', 10) || undefined;
                }
                (n.filenameIsInApp = i),
                  (n.node = o),
                  (n.nodeStackLineParser = function (e) {
                    return [90, o(e)];
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/node-stack-trace.js',
      },
    ],
    [
      3269,
      { './env.js': 3252, _process: 5077 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                (function (r) {
                  (function () {
                    Object.defineProperty(n, '__esModule', { value: !0 });
                    const i = e('./env.js');
                    function o(e, t) {
                      return e.require(t);
                    }
                    (n.dynamicRequire = o),
                      (n.isNodeEnv = function () {
                        return (
                          !i.isBrowserBundle() &&
                          '[object process]' ===
                            Object.prototype.toString.call(void 0 !== r ? r : 0)
                        );
                      }),
                      (n.loadModule = function (e) {
                        let n;
                        try {
                          n = o(t, e);
                        } catch (e) {}
                        try {
                          const { cwd: r } = o(t, 'process');
                          n = o(t, `${r()}/node_modules/${e}`);
                        } catch (e) {}
                        return n;
                      });
                  }).call(this);
                }).call(this, e('_process'));
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/node.js' },
    ],
    [
      3270,
      { './is.js': 3262, './memo.js': 3266, './object.js': 3271, './stacktrace.js': 3278 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./is.js'),
                  i = e('./memo.js'),
                  o = e('./object.js'),
                  s = e('./stacktrace.js');
                function a(e, t = 100, n = +Infinity) {
                  try {
                    return c('', e, t, n);
                  } catch (e) {
                    return { ERROR: `**non-serializable** (${e})` };
                  }
                }
                function c(e, t, n = +Infinity, a = +Infinity, u = i.memoBuilder()) {
                  const [p, l] = u;
                  if (
                    null == t ||
                    ['boolean', 'string'].includes(typeof t) ||
                    ('number' == typeof t && Number.isFinite(t))
                  )
                    return t;
                  const d = (function (e, t) {
                    try {
                      if ('domain' === e && t && 'object' == typeof t && t._events)
                        return '[Domain]';
                      if ('domainEmitter' === e) return '[DomainEmitter]';
                      if ('undefined' != typeof global && t === global) return '[Global]';
                      if ('undefined' != typeof window && t === window) return '[Window]';
                      if ('undefined' != typeof document && t === document) return '[Document]';
                      if (r.isVueViewModel(t)) return '[VueViewModel]';
                      if (r.isSyntheticEvent(t)) return '[SyntheticEvent]';
                      if ('number' == typeof t && !Number.isFinite(t)) return `[${t}]`;
                      if ('function' == typeof t) return `[Function: ${s.getFunctionName(t)}]`;
                      if ('symbol' == typeof t) return `[${String(t)}]`;
                      if ('bigint' == typeof t) return `[BigInt: ${String(t)}]`;
                      const n = (function (e) {
                        const t = Object.getPrototypeOf(e);
                        return t ? t.constructor.name : 'null prototype';
                      })(t);
                      return /^HTML(\w*)Element$/.test(n) ? `[HTMLElement: ${n}]` : `[object ${n}]`;
                    } catch (e) {
                      return `**non-serializable** (${e})`;
                    }
                  })(e, t);
                  if (!d.startsWith('[object ')) return d;
                  if (t.__sentry_skip_normalization__) return t;
                  const _ =
                    'number' == typeof t.__sentry_override_normalization_depth__
                      ? t.__sentry_override_normalization_depth__
                      : n;
                  if (0 === _) return d.replace('object ', '');
                  if (p(t)) return '[Circular ~]';
                  const T = t;
                  if (T && 'function' == typeof T.toJSON)
                    try {
                      return c('', T.toJSON(), _ - 1, a, u);
                    } catch (e) {}
                  const y = Array.isArray(t) ? [] : {};
                  let E = 0;
                  const m = o.convertToPlainObject(t);
                  for (const e in m) {
                    if (!Object.prototype.hasOwnProperty.call(m, e)) continue;
                    if (E >= a) {
                      y[e] = '[MaxProperties ~]';
                      break;
                    }
                    const t = m[e];
                    (y[e] = c(e, t, _ - 1, a, u)), E++;
                  }
                  return l(t), y;
                }
                (n.normalize = a),
                  (n.normalizeToSize = function e(t, n = 3, r = 102400) {
                    const i = a(t, n);
                    return (
                      (o = i),
                      (function (e) {
                        return ~-encodeURI(e).split(/%..|./).length;
                      })(JSON.stringify(o)) > r
                        ? e(t, n - 1, r)
                        : i
                    );
                    var o;
                  }),
                  (n.normalizeUrlToBase = function (e, t) {
                    const n = t.replace(/\\/g, '/').replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
                    let r = e;
                    try {
                      r = decodeURI(e);
                    } catch (e) {}
                    return r
                      .replace(/\\/g, '/')
                      .replace(/webpack:\/?/g, '')
                      .replace(new RegExp(`(file://)?/*${n}/*`, 'ig'), 'app:///');
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/normalize.js' },
    ],
    [
      3271,
      {
        './browser.js': 3240,
        './debug-build.js': 3250,
        './is.js': 3262,
        './logger.js': 3264,
        './string.js': 3279,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./browser.js'),
                  i = e('./debug-build.js'),
                  o = e('./is.js'),
                  s = e('./logger.js'),
                  a = e('./string.js');
                function c(e, t, n) {
                  try {
                    Object.defineProperty(e, t, { value: n, writable: !0, configurable: !0 });
                  } catch (n) {
                    i.DEBUG_BUILD &&
                      s.logger.log(`Failed to add non-enumerable property "${t}" to object`, e);
                  }
                }
                function u(e, t) {
                  try {
                    const n = t.prototype || {};
                    (e.prototype = t.prototype = n), c(e, '__sentry_original__', t);
                  } catch (e) {}
                }
                function p(e) {
                  if (o.isError(e))
                    return { message: e.message, name: e.name, stack: e.stack, ...d(e) };
                  if (o.isEvent(e)) {
                    const t = {
                      type: e.type,
                      target: l(e.target),
                      currentTarget: l(e.currentTarget),
                      ...d(e),
                    };
                    return (
                      'undefined' != typeof CustomEvent &&
                        o.isInstanceOf(e, CustomEvent) &&
                        (t.detail = e.detail),
                      t
                    );
                  }
                  return e;
                }
                function l(e) {
                  try {
                    return o.isElement(e)
                      ? r.htmlTreeAsString(e)
                      : Object.prototype.toString.call(e);
                  } catch (e) {
                    return '<unknown>';
                  }
                }
                function d(e) {
                  if ('object' == typeof e && null !== e) {
                    const t = {};
                    for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                    return t;
                  }
                  return {};
                }
                function _(e, t) {
                  if (
                    (function (e) {
                      if (!o.isPlainObject(e)) return !1;
                      try {
                        const t = Object.getPrototypeOf(e).constructor.name;
                        return !t || 'Object' === t;
                      } catch (e) {
                        return !0;
                      }
                    })(e)
                  ) {
                    const n = t.get(e);
                    if (n !== undefined) return n;
                    const r = {};
                    t.set(e, r);
                    for (const n of Object.getOwnPropertyNames(e))
                      void 0 !== e[n] && (r[n] = _(e[n], t));
                    return r;
                  }
                  if (Array.isArray(e)) {
                    const n = t.get(e);
                    if (n !== undefined) return n;
                    const r = [];
                    return (
                      t.set(e, r),
                      e.forEach(e => {
                        r.push(_(e, t));
                      }),
                      r
                    );
                  }
                  return e;
                }
                (n.addNonEnumerableProperty = c),
                  (n.convertToPlainObject = p),
                  (n.dropUndefinedKeys = function (e) {
                    return _(e, new Map());
                  }),
                  (n.extractExceptionKeysForMessage = function (e, t = 40) {
                    const n = Object.keys(p(e));
                    n.sort();
                    const r = n[0];
                    if (!r) return '[object has no keys]';
                    if (r.length >= t) return a.truncate(r, t);
                    for (let e = n.length; e > 0; e--) {
                      const r = n.slice(0, e).join(', ');
                      if (!(r.length > t)) return e === n.length ? r : a.truncate(r, t);
                    }
                    return '';
                  }),
                  (n.fill = function (e, t, n) {
                    if (!(t in e)) return;
                    const r = e[t],
                      i = n(r);
                    'function' == typeof i && u(i, r), (e[t] = i);
                  }),
                  (n.getOriginalFunction = function (e) {
                    return e.__sentry_original__;
                  }),
                  (n.markFunctionWrapped = u),
                  (n.objectify = function (e) {
                    let t;
                    switch (!0) {
                      case e === undefined || null === e:
                        t = new String(e);
                        break;
                      case 'symbol' == typeof e || 'bigint' == typeof e:
                        t = Object(e);
                        break;
                      case o.isPrimitive(e):
                        t = new e.constructor(e);
                        break;
                      default:
                        t = e;
                    }
                    return t;
                  }),
                  (n.urlEncode = function (e) {
                    return Object.keys(e)
                      .map(t => `${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`)
                      .join('&');
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/object.js' },
    ],
    [
      3272,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                function r(e, t) {
                  let n = 0;
                  for (let t = e.length - 1; t >= 0; t--) {
                    const r = e[t];
                    '.' === r
                      ? e.splice(t, 1)
                      : '..' === r
                        ? (e.splice(t, 1), n++)
                        : n && (e.splice(t, 1), n--);
                  }
                  if (t) for (; n--; n) e.unshift('..');
                  return e;
                }
                Object.defineProperty(n, '__esModule', { value: !0 });
                const i = /^(\S+:\\|\/?)([\s\S]*?)((?:\.{1,2}|[^/\\]+?|)(\.[^./\\]*|))(?:[/\\]*)$/;
                function o(e) {
                  const t = e.length > 1024 ? `<truncated>${e.slice(-1024)}` : e,
                    n = i.exec(t);
                  return n ? n.slice(1) : [];
                }
                function s(...e) {
                  let t = '',
                    n = !1;
                  for (let r = e.length - 1; r >= -1 && !n; r--) {
                    const i = r >= 0 ? e[r] : '/';
                    i && ((t = `${i}/${t}`), (n = '/' === i.charAt(0)));
                  }
                  return (
                    (t = r(
                      t.split('/').filter(e => !!e),
                      !n
                    ).join('/')),
                    (n ? '/' : '') + t || '.'
                  );
                }
                function a(e) {
                  let t = 0;
                  for (; t < e.length && '' === e[t]; t++);
                  let n = e.length - 1;
                  for (; n >= 0 && '' === e[n]; n--);
                  return t > n ? [] : e.slice(t, n - t + 1);
                }
                function c(e) {
                  const t = u(e),
                    n = '/' === e.slice(-1);
                  let i = r(
                    e.split('/').filter(e => !!e),
                    !t
                  ).join('/');
                  return i || t || (i = '.'), i && n && (i += '/'), (t ? '/' : '') + i;
                }
                function u(e) {
                  return '/' === e.charAt(0);
                }
                (n.basename = function (e, t) {
                  let n = o(e)[2] || '';
                  return (
                    t && n.slice(-1 * t.length) === t && (n = n.slice(0, n.length - t.length)), n
                  );
                }),
                  (n.dirname = function (e) {
                    const t = o(e),
                      n = t[0] || '';
                    let r = t[1];
                    return n || r ? (r && (r = r.slice(0, r.length - 1)), n + r) : '.';
                  }),
                  (n.isAbsolute = u),
                  (n.join = function (...e) {
                    return c(e.join('/'));
                  }),
                  (n.normalizePath = c),
                  (n.relative = function (e, t) {
                    (e = s(e).slice(1)), (t = s(t).slice(1));
                    const n = a(e.split('/')),
                      r = a(t.split('/')),
                      i = Math.min(n.length, r.length);
                    let o = i;
                    for (let e = 0; e < i; e++)
                      if (n[e] !== r[e]) {
                        o = e;
                        break;
                      }
                    let c = [];
                    for (let e = o; e < n.length; e++) c.push('..');
                    return (c = c.concat(r.slice(o))), c.join('/');
                  }),
                  (n.resolve = s);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/path.js' },
    ],
    [
      3273,
      { './error.js': 3254, './syncpromise.js': 3281 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./error.js'),
                  i = e('./syncpromise.js');
                n.makePromiseBuffer = function (e) {
                  const t = [];
                  function n(e) {
                    return t.splice(t.indexOf(e), 1)[0] || Promise.resolve(undefined);
                  }
                  return {
                    $: t,
                    add: function (o) {
                      if (!(e === undefined || t.length < e))
                        return i.rejectedSyncPromise(
                          new r.SentryError('Not adding Promise because buffer limit was reached.')
                        );
                      const s = o();
                      return (
                        -1 === t.indexOf(s) && t.push(s),
                        s.then(() => n(s)).then(null, () => n(s).then(null, () => {})),
                        s
                      );
                    },
                    drain: function (e) {
                      return new i.SyncPromise((n, r) => {
                        let o = t.length;
                        if (!o) return n(!0);
                        const s = setTimeout(() => {
                          e && e > 0 && n(!1);
                        }, e);
                        t.forEach(e => {
                          i.resolvedSyncPromise(e).then(() => {
                            --o || (clearTimeout(s), n(!0));
                          }, r);
                        });
                      });
                    },
                  };
                };
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/promisebuffer.js' },
    ],
    [
      3274,
      { './misc.js': 3267 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./misc.js');
                n.generatePropagationContext = function () {
                  return { traceId: r.uuid4(), spanId: r.uuid4().substring(16) };
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/propagationContext.js',
      },
    ],
    [
      3275,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = 6e4;
                function i(e, t = Date.now()) {
                  const n = parseInt(`${e}`, 10);
                  if (!isNaN(n)) return 1e3 * n;
                  const i = Date.parse(`${e}`);
                  return isNaN(i) ? r : i - t;
                }
                function o(e, t) {
                  return e[t] || e.all || 0;
                }
                (n.DEFAULT_RETRY_AFTER = r),
                  (n.disabledUntil = o),
                  (n.isRateLimited = function (e, t, n = Date.now()) {
                    return o(e, t) > n;
                  }),
                  (n.parseRetryAfterHeader = i),
                  (n.updateRateLimits = function (
                    e,
                    { statusCode: t, headers: n },
                    r = Date.now()
                  ) {
                    const o = { ...e },
                      s = n && n['x-sentry-rate-limits'],
                      a = n && n['retry-after'];
                    if (s)
                      for (const e of s.trim().split(',')) {
                        const [t, n, , , i] = e.split(':', 5),
                          s = parseInt(t, 10),
                          a = 1e3 * (isNaN(s) ? 60 : s);
                        if (n)
                          for (const e of n.split(';'))
                            ('metric_bucket' === e && i && !i.split(';').includes('custom')) ||
                              (o[e] = r + a);
                        else o.all = r + a;
                      }
                    else a ? (o.all = r + i(a, r)) : 429 === t && (o.all = r + 6e4);
                    return o;
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/ratelimit.js' },
    ],
    [
      3276,
      {
        './cookie.js': 3249,
        './debug-build.js': 3250,
        './is.js': 3262,
        './logger.js': 3264,
        './normalize.js': 3270,
        './url.js': 3284,
        './vendor/getIpAddress.js': 3286,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./cookie.js'),
                  i = e('./debug-build.js'),
                  o = e('./is.js'),
                  s = e('./logger.js'),
                  a = e('./normalize.js'),
                  c = e('./url.js'),
                  u = e('./vendor/getIpAddress.js'),
                  p = { ip: !1, request: !0, transaction: !0, user: !0 },
                  l = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'],
                  d = ['id', 'username', 'email'];
                function _(e, t = {}) {
                  const n = e.method && e.method.toUpperCase();
                  let r = '',
                    i = 'url';
                  t.customRoute || e.route
                    ? ((r = t.customRoute || `${e.baseUrl || ''}${e.route && e.route.path}`),
                      (i = 'route'))
                    : (e.originalUrl || e.url) &&
                      (r = c.stripUrlQueryAndFragment(e.originalUrl || e.url || ''));
                  let o = '';
                  return (
                    t.method && n && (o += n),
                    t.method && t.path && (o += ' '),
                    t.path && r && (o += r),
                    [o, i]
                  );
                }
                function T(e, t = {}) {
                  const { include: n = l } = t,
                    i = {},
                    s = e.headers || {},
                    c = e.method,
                    p = s.host || e.hostname || e.host || '<no host>',
                    d =
                      'https' === e.protocol || (e.socket && e.socket.encrypted) ? 'https' : 'http',
                    _ = e.originalUrl || e.url || '',
                    T = _.startsWith(d) ? _ : `${d}://${p}${_}`;
                  return (
                    n.forEach(t => {
                      switch (t) {
                        case 'headers':
                          (i.headers = s),
                            n.includes('cookies') || delete i.headers.cookie,
                            n.includes('ip') ||
                              u.ipHeaderNames.forEach(e => {
                                delete i.headers[e];
                              });
                          break;
                        case 'method':
                          i.method = c;
                          break;
                        case 'url':
                          i.url = T;
                          break;
                        case 'cookies':
                          i.cookies = e.cookies || (s.cookie && r.parseCookie(s.cookie)) || {};
                          break;
                        case 'query_string':
                          i.query_string = (function (e) {
                            let t = e.originalUrl || e.url || '';
                            if (!t) return;
                            t.startsWith('/') && (t = `http://dogs.are.great${t}`);
                            try {
                              const n = e.query || new URL(t).search.slice(1);
                              return n.length ? n : undefined;
                            } catch (e) {
                              return undefined;
                            }
                          })(e);
                          break;
                        case 'data':
                          if ('GET' === c || 'HEAD' === c) break;
                          e.body !== undefined &&
                            (i.data = o.isString(e.body)
                              ? e.body
                              : JSON.stringify(a.normalize(e.body)));
                          break;
                        default:
                          ({}).hasOwnProperty.call(e, t) && (i[t] = e[t]);
                      }
                    }),
                    i
                  );
                }
                function y(e) {
                  const t = {};
                  try {
                    e.forEach((e, n) => {
                      'string' == typeof e && (t[n] = e);
                    });
                  } catch (e) {
                    i.DEBUG_BUILD &&
                      s.logger.warn(
                        'Sentry failed extracting headers from a request object. If you see this, please file an issue.'
                      );
                  }
                  return t;
                }
                (n.DEFAULT_USER_INCLUDES = d),
                  (n.addRequestDataToEvent = function (e, t, n) {
                    const r = { ...p, ...(n && n.include) };
                    if (r.request) {
                      const n = Array.isArray(r.request) ? [...r.request] : [...l];
                      r.ip && n.push('ip');
                      const i = T(t, { include: n });
                      e.request = { ...e.request, ...i };
                    }
                    if (r.user) {
                      const n =
                        t.user && o.isPlainObject(t.user)
                          ? (function (e, t) {
                              const n = {};
                              return (
                                (Array.isArray(t) ? t : d).forEach(t => {
                                  e && t in e && (n[t] = e[t]);
                                }),
                                n
                              );
                            })(t.user, r.user)
                          : {};
                      Object.keys(n).length && (e.user = { ...e.user, ...n });
                    }
                    if (r.ip) {
                      const n =
                        (t.headers && u.getClientIPAddress(t.headers)) ||
                        t.ip ||
                        (t.socket && t.socket.remoteAddress);
                      n && (e.user = { ...e.user, ip_address: n });
                    }
                    return (
                      r.transaction &&
                        !e.transaction &&
                        'transaction' === e.type &&
                        (e.transaction = (function (e, t) {
                          switch (t) {
                            case 'path':
                              return _(e, { path: !0 })[0];
                            case 'handler':
                              return (
                                (e.route &&
                                  e.route.stack &&
                                  e.route.stack[0] &&
                                  e.route.stack[0].name) ||
                                '<anonymous>'
                              );
                            default:
                              return _(e, {
                                path: !0,
                                method: !0,
                                customRoute: e._reconstructedRoute
                                  ? e._reconstructedRoute
                                  : undefined,
                              })[0];
                          }
                        })(t, r.transaction)),
                      e
                    );
                  }),
                  (n.extractPathForTransaction = _),
                  (n.extractRequestData = T),
                  (n.winterCGHeadersToDict = y),
                  (n.winterCGRequestToRequestData = function (e) {
                    const t = y(e.headers);
                    return { method: e.method, url: e.url, headers: t };
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/requestdata.js' },
    ],
    [
      3277,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];
                (n.severityLevelFromString = function (e) {
                  return 'warn' === e ? 'warning' : r.includes(e) ? e : 'log';
                }),
                  (n.validSeverityLevels = r);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/severity.js' },
    ],
    [
      3278,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = 50,
                  i = '?',
                  o = /\(error: (.*)\)/,
                  s = /captureMessage|captureException/;
                function a(...e) {
                  const t = e.sort((e, t) => e[0] - t[0]).map(e => e[1]);
                  return (e, n = 0, i = 0) => {
                    const s = [],
                      a = e.split('\n');
                    for (let e = n; e < a.length; e++) {
                      const n = a[e];
                      if (n.length > 1024) continue;
                      const c = o.test(n) ? n.replace(o, '$1') : n;
                      if (!c.match(/\S*Error: /)) {
                        for (const e of t) {
                          const t = e(c);
                          if (t) {
                            s.push(t);
                            break;
                          }
                        }
                        if (s.length >= r + i) break;
                      }
                    }
                    return c(s.slice(i));
                  };
                }
                function c(e) {
                  if (!e.length) return [];
                  const t = Array.from(e);
                  return (
                    /sentryWrapped/.test(u(t).function || '') && t.pop(),
                    t.reverse(),
                    s.test(u(t).function || '') &&
                      (t.pop(), s.test(u(t).function || '') && t.pop()),
                    t
                      .slice(0, r)
                      .map(e => ({
                        ...e,
                        filename: e.filename || u(t).filename,
                        function: e.function || i,
                      }))
                  );
                }
                function u(e) {
                  return e[e.length - 1] || {};
                }
                const p = '<anonymous>';
                (n.UNKNOWN_FUNCTION = i),
                  (n.createStackParser = a),
                  (n.getFramesFromEvent = function (e) {
                    const t = e.exception;
                    if (t) {
                      const e = [];
                      try {
                        return (
                          t.values.forEach(t => {
                            t.stacktrace.frames && e.push(...t.stacktrace.frames);
                          }),
                          e
                        );
                      } catch (e) {
                        return undefined;
                      }
                    }
                    return undefined;
                  }),
                  (n.getFunctionName = function (e) {
                    try {
                      return (e && 'function' == typeof e && e.name) || p;
                    } catch (e) {
                      return p;
                    }
                  }),
                  (n.stackParserFromStackParserOptions = function (e) {
                    return Array.isArray(e) ? a(...e) : e;
                  }),
                  (n.stripSentryFramesAndReverse = c);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/stacktrace.js' },
    ],
    [
      3279,
      { './is.js': 3262 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./is.js');
                function i(e, t, n = !1) {
                  return (
                    !!r.isString(e) &&
                    (r.isRegExp(t) ? t.test(e) : !!r.isString(t) && (n ? e === t : e.includes(t)))
                  );
                }
                (n.isMatchingPattern = i),
                  (n.safeJoin = function (e, t) {
                    if (!Array.isArray(e)) return '';
                    const n = [];
                    for (let t = 0; t < e.length; t++) {
                      const i = e[t];
                      try {
                        r.isVueViewModel(i) ? n.push('[VueViewModel]') : n.push(String(i));
                      } catch (e) {
                        n.push('[value cannot be serialized]');
                      }
                    }
                    return n.join(t);
                  }),
                  (n.snipLine = function (e, t) {
                    let n = e;
                    const r = n.length;
                    if (r <= 150) return n;
                    t > r && (t = r);
                    let i = Math.max(t - 60, 0);
                    i < 5 && (i = 0);
                    let o = Math.min(i + 140, r);
                    return (
                      o > r - 5 && (o = r),
                      o === r && (i = Math.max(o - 140, 0)),
                      (n = n.slice(i, o)),
                      i > 0 && (n = `'{snip} ${n}`),
                      o < r && (n += ' {snip}'),
                      n
                    );
                  }),
                  (n.stringMatchesSomePattern = function (e, t = [], n = !1) {
                    return t.some(t => i(e, t, n));
                  }),
                  (n.truncate = function (e, t = 0) {
                    return 'string' != typeof e || 0 === t || e.length <= t
                      ? e
                      : `${e.slice(0, t)}...`;
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/string.js' },
    ],
    [
      3280,
      { './debug-build.js': 3250, './logger.js': 3264, './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./debug-build.js'),
                  i = e('./logger.js'),
                  o = e('./worldwide.js').GLOBAL_OBJ;
                function s() {
                  if (!('fetch' in o)) return !1;
                  try {
                    return new Headers(), new Request('http://www.example.com'), new Response(), !0;
                  } catch (e) {
                    return !1;
                  }
                }
                function a(e) {
                  return e && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString());
                }
                (n.isNativeFunction = a),
                  (n.supportsDOMError = function () {
                    try {
                      return new DOMError(''), !0;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (n.supportsDOMException = function () {
                    try {
                      return new DOMException(''), !0;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (n.supportsErrorEvent = function () {
                    try {
                      return new ErrorEvent(''), !0;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (n.supportsFetch = s),
                  (n.supportsNativeFetch = function () {
                    if ('string' == typeof EdgeRuntime) return !0;
                    if (!s()) return !1;
                    if (a(o.fetch)) return !0;
                    let e = !1;
                    const t = o.document;
                    if (t && 'function' == typeof t.createElement)
                      try {
                        const n = t.createElement('iframe');
                        (n.hidden = !0),
                          t.head.appendChild(n),
                          n.contentWindow &&
                            n.contentWindow.fetch &&
                            (e = a(n.contentWindow.fetch)),
                          t.head.removeChild(n);
                      } catch (e) {
                        r.DEBUG_BUILD &&
                          i.logger.warn(
                            'Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ',
                            e
                          );
                      }
                    return e;
                  }),
                  (n.supportsReferrerPolicy = function () {
                    if (!s()) return !1;
                    try {
                      return new Request('_', { referrerPolicy: 'origin' }), !0;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (n.supportsReportingObserver = function () {
                    return 'ReportingObserver' in o;
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/supports.js' },
    ],
    [
      3281,
      { './is.js': 3262 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./is.js');
                var i;
                !(function (e) {
                  e[(e.PENDING = 0)] = 'PENDING';
                  e[(e.RESOLVED = 1)] = 'RESOLVED';
                  e[(e.REJECTED = 2)] = 'REJECTED';
                })(i || (i = {}));
                class o {
                  constructor(e) {
                    o.prototype.__init.call(this),
                      o.prototype.__init2.call(this),
                      o.prototype.__init3.call(this),
                      o.prototype.__init4.call(this),
                      (this._state = i.PENDING),
                      (this._handlers = []);
                    try {
                      e(this._resolve, this._reject);
                    } catch (e) {
                      this._reject(e);
                    }
                  }
                  then(e, t) {
                    return new o((n, r) => {
                      this._handlers.push([
                        !1,
                        t => {
                          if (e)
                            try {
                              n(e(t));
                            } catch (e) {
                              r(e);
                            }
                          else n(t);
                        },
                        e => {
                          if (t)
                            try {
                              n(t(e));
                            } catch (e) {
                              r(e);
                            }
                          else r(e);
                        },
                      ]),
                        this._executeHandlers();
                    });
                  }
                  catch(e) {
                    return this.then(e => e, e);
                  }
                  finally(e) {
                    return new o((t, n) => {
                      let r, i;
                      return this.then(
                        t => {
                          (i = !1), (r = t), e && e();
                        },
                        t => {
                          (i = !0), (r = t), e && e();
                        }
                      ).then(() => {
                        i ? n(r) : t(r);
                      });
                    });
                  }
                  __init() {
                    this._resolve = e => {
                      this._setResult(i.RESOLVED, e);
                    };
                  }
                  __init2() {
                    this._reject = e => {
                      this._setResult(i.REJECTED, e);
                    };
                  }
                  __init3() {
                    this._setResult = (e, t) => {
                      this._state === i.PENDING &&
                        (r.isThenable(t)
                          ? t.then(this._resolve, this._reject)
                          : ((this._state = e), (this._value = t), this._executeHandlers()));
                    };
                  }
                  __init4() {
                    this._executeHandlers = () => {
                      if (this._state === i.PENDING) return;
                      const e = this._handlers.slice();
                      (this._handlers = []),
                        e.forEach(e => {
                          e[0] ||
                            (this._state === i.RESOLVED && e[1](this._value),
                            this._state === i.REJECTED && e[2](this._value),
                            (e[0] = !0));
                        });
                    };
                  }
                }
                (n.SyncPromise = o),
                  (n.rejectedSyncPromise = function (e) {
                    return new o((t, n) => {
                      n(e);
                    });
                  }),
                  (n.resolvedSyncPromise = function (e) {
                    return new o(t => {
                      t(e);
                    });
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/syncpromise.js' },
    ],
    [
      3282,
      { './worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./worldwide.js'),
                  i = 1e3;
                function o() {
                  return Date.now() / i;
                }
                const s = (function () {
                  const { performance: e } = r.GLOBAL_OBJ;
                  if (!e || !e.now) return o;
                  const t = Date.now() - e.now(),
                    n = e.timeOrigin == undefined ? t : e.timeOrigin;
                  return () => (n + e.now()) / i;
                })();
                n._browserPerformanceTimeOriginMode = void 0;
                const a = (() => {
                  const { performance: e } = r.GLOBAL_OBJ;
                  if (!e || !e.now)
                    return (n._browserPerformanceTimeOriginMode = 'none'), undefined;
                  const t = 36e5,
                    i = e.now(),
                    o = Date.now(),
                    s = e.timeOrigin ? Math.abs(e.timeOrigin + i - o) : t,
                    a = s < t,
                    c = e.timing && e.timing.navigationStart,
                    u = 'number' == typeof c ? Math.abs(c + i - o) : t;
                  return a || u < t
                    ? s <= u
                      ? ((n._browserPerformanceTimeOriginMode = 'timeOrigin'), e.timeOrigin)
                      : ((n._browserPerformanceTimeOriginMode = 'navigationStart'), c)
                    : ((n._browserPerformanceTimeOriginMode = 'dateNow'), o);
                })();
                (n.browserPerformanceTimeOrigin = a),
                  (n.dateTimestampInSeconds = o),
                  (n.timestampInSeconds = s);
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/time.js' },
    ],
    [
      3283,
      { './baggage.js': 3238, './misc.js': 3267 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./baggage.js'),
                  i = e('./misc.js'),
                  o = new RegExp('^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$');
                function s(e) {
                  if (!e) return undefined;
                  const t = e.match(o);
                  if (!t) return undefined;
                  let n;
                  return (
                    '1' === t[3] ? (n = !0) : '0' === t[3] && (n = !1),
                    { traceId: t[1], parentSampled: n, parentSpanId: t[2] }
                  );
                }
                (n.TRACEPARENT_REGEXP = o),
                  (n.extractTraceparentData = s),
                  (n.generateSentryTraceHeader = function (
                    e = i.uuid4(),
                    t = i.uuid4().substring(16),
                    n
                  ) {
                    let r = '';
                    return n !== undefined && (r = n ? '-1' : '-0'), `${e}-${t}${r}`;
                  }),
                  (n.propagationContextFromHeaders = function (e, t) {
                    const n = s(e),
                      o = r.baggageHeaderToDynamicSamplingContext(t),
                      { traceId: a, parentSpanId: c, parentSampled: u } = n || {};
                    return n
                      ? {
                          traceId: a || i.uuid4(),
                          parentSpanId: c || i.uuid4().substring(16),
                          spanId: i.uuid4().substring(16),
                          sampled: u,
                          dsc: o || {},
                        }
                      : { traceId: a || i.uuid4(), spanId: i.uuid4().substring(16) };
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/tracing.js' },
    ],
    [
      3284,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getNumberOfUrlSegments = function (e) {
                    return e.split(/\\?\//).filter(e => e.length > 0 && ',' !== e).length;
                  }),
                  (n.getSanitizedUrlString = function (e) {
                    const { protocol: t, host: n, path: r } = e;
                    return `${t ? `${t}://` : ''}${
                      (n &&
                        n
                          .replace(/^.*@/, '[filtered]:[filtered]@')
                          .replace(/(:80)$/, '')
                          .replace(/(:443)$/, '')) ||
                      ''
                    }${r}`;
                  }),
                  (n.parseUrl = function (e) {
                    if (!e) return {};
                    const t = e.match(
                      /^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/
                    );
                    if (!t) return {};
                    const n = t[6] || '',
                      r = t[8] || '';
                    return {
                      host: t[4],
                      path: t[5],
                      protocol: t[2],
                      search: n,
                      hash: r,
                      relative: t[5] + n + r,
                    };
                  }),
                  (n.stripUrlQueryAndFragment = function (e) {
                    return e.split(/[?#]/, 1)[0];
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/url.js' },
    ],
    [
      3285,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.escapeStringForRegex = function (e) {
                    return e.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
                  });
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/vendor/escapeStringForRegex.js',
      },
    ],
    [
      3286,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = [
                  'X-Client-IP',
                  'X-Forwarded-For',
                  'Fly-Client-IP',
                  'CF-Connecting-IP',
                  'Fastly-Client-Ip',
                  'True-Client-Ip',
                  'X-Real-IP',
                  'X-Cluster-Client-IP',
                  'X-Forwarded',
                  'Forwarded-For',
                  'Forwarded',
                  'X-Vercel-Forwarded-For',
                ];
                (n.getClientIPAddress = function (e) {
                  return (
                    r
                      .map(t => {
                        const n = e[t],
                          r = Array.isArray(n) ? n.join(';') : n;
                        return 'Forwarded' === t
                          ? (function (e) {
                              if (!e) return null;
                              for (const t of e.split(';'))
                                if (t.startsWith('for=')) return t.slice(4);
                              return null;
                            })(r)
                          : r && r.split(',').map(e => e.trim());
                      })
                      .reduce((e, t) => (t ? e.concat(t) : e), [])
                      .find(
                        e =>
                          null !== e &&
                          /(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/.test(
                            e
                          )
                      ) || null
                  );
                }),
                  (n.ipHeaderNames = r);
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/vendor/getIpAddress.js',
      },
    ],
    [
      3287,
      { '../worldwide.js': 3289 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('../worldwide.js').GLOBAL_OBJ;
                n.supportsHistory = function () {
                  const e = r.chrome,
                    t = e && e.app && e.app.runtime,
                    n = 'history' in r && !!r.history.pushState && !!r.history.replaceState;
                  return !t && n;
                };
              };
            };
      },
      {
        package: '@sentry/utils',
        file: 'node_modules/@sentry/utils/build/cjs/vendor/supportsHistory.js',
      },
    ],
    [
      3288,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                n.SDK_VERSION = '8.33.1';
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/version.js' },
    ],
    [
      3289,
      { './version.js': 3288 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('./version.js'),
                  i = globalThis;
                (n.GLOBAL_OBJ = i),
                  (n.getGlobalSingleton = function (e, t, n) {
                    const o = n || i,
                      s = (o.__SENTRY__ = o.__SENTRY__ || {}),
                      a = (s[r.SDK_VERSION] = s[r.SDK_VERSION] || {});
                    return a[e] || (a[e] = t());
                  });
              };
            };
      },
      { package: '@sentry/utils', file: 'node_modules/@sentry/utils/build/cjs/worldwide.js' },
    ],
    [
      3290,
      {
        '@solana/assertions': 3291,
        '@solana/codecs-core': 3292,
        '@solana/codecs-strings': 3293,
        '@solana/errors': 3294,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r,
                  i,
                  o = e('@solana/codecs-core'),
                  s = e('@solana/codecs-strings'),
                  a = e('@solana/errors'),
                  c = e('@solana/assertions');
                function u() {
                  return r || (r = s.getBase58Encoder()), r;
                }
                function p(e) {
                  if (e.length < 32 || e.length > 44) return !1;
                  const t = u();
                  try {
                    return 32 === t.encode(e).byteLength;
                  } catch {
                    return !1;
                  }
                }
                function l(e) {
                  if (e.length < 32 || e.length > 44)
                    throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE, {
                      actualLength: e.length,
                    });
                  const t = u().encode(e).byteLength;
                  if (32 !== t)
                    throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH, {
                      actualLength: t,
                    });
                }
                function d(e) {
                  return l(e), e;
                }
                function _() {
                  return o.transformEncoder(o.fixEncoderSize(u(), 32), e => d(e));
                }
                function T() {
                  return o.fixDecoderSize((i || (i = s.getBase58Decoder()), i), 32);
                }
                function y() {
                  return o.combineCodec(_(), T());
                }
                var E =
                    37095705934669439343138083508754565189542113879843219016388785533085940283555n,
                  m =
                    57896044618658097711785492504343953926634992332820282019728792003956564819949n,
                  g =
                    19681161376707505956807079304988542015446066515923890162744021073123829784752n;
                function S(e) {
                  const t = e % m;
                  return t >= 0n ? t : m + t;
                }
                function h(e, t) {
                  let n = e;
                  for (; t-- > 0n; ) (n *= n), (n %= m);
                  return n;
                }
                function O(e, t) {
                  const n = S(t * t * t),
                    r = (function (e) {
                      const t = (((e * e) % m) * e) % m,
                        n = (h(t, 2n) * t) % m,
                        r = (h(n, 1n) * e) % m,
                        i = (h(r, 5n) * r) % m,
                        o = (h(i, 10n) * i) % m,
                        s = (h(o, 20n) * o) % m,
                        a = (h(s, 40n) * s) % m,
                        c = (h(a, 80n) * a) % m,
                        u = (h(c, 80n) * a) % m,
                        p = (h(u, 10n) * i) % m;
                      return (h(p, 2n) * e) % m;
                    })(e * S(n * n * t));
                  let i = S(e * n * r);
                  const o = S(t * i * i),
                    s = i,
                    a = S(i * g),
                    c = o === e,
                    u = o === S(-e),
                    p = o === S(-e * g);
                  return (
                    c && (i = s),
                    (u || p) && (i = a),
                    1n === (1n & S(i)) && (i = S(-i)),
                    c || u ? i : null
                  );
                }
                function f(e) {
                  if (32 !== e.byteLength) return !1;
                  const t = (function (e) {
                    const t = e.reduce(
                      (e, t, n) =>
                        `${(function (e) {
                          const t = e.toString(16);
                          return 1 === t.length ? `0${t}` : t;
                        })(31 === n ? -129 & t : t)}${e}`,
                      ''
                    );
                    return BigInt(`0x${t}`);
                  })(e);
                  return (function (e, t) {
                    const n = S(e * e),
                      r = O(S(n - 1n), S(E * n + 1n));
                    return null !== r && (0n !== r || !(128 & t));
                  })(t, e[31]);
                }
                var R = 32,
                  A = 16,
                  b = [
                    80, 114, 111, 103, 114, 97, 109, 68, 101, 114, 105, 118, 101, 100, 65, 100, 100,
                    114, 101, 115, 115,
                  ];
                async function N({ programAddress: e, seeds: t }) {
                  if ((c.assertDigestCapabilityIsAvailable(), t.length > A))
                    throw new a.SolanaError(
                      a.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED,
                      { actual: t.length, maxSeeds: A }
                    );
                  let n;
                  const r = t.reduce((e, t, r) => {
                      const i = 'string' == typeof t ? (n || (n = new TextEncoder())).encode(t) : t;
                      if (i.byteLength > R)
                        throw new a.SolanaError(
                          a.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED,
                          { actual: i.byteLength, index: r, maxSeedLength: R }
                        );
                      return e.push(...i), e;
                    }, []),
                    i = y(),
                    o = i.encode(e),
                    s = await crypto.subtle.digest('SHA-256', new Uint8Array([...r, ...o, ...b])),
                    u = new Uint8Array(s);
                  if (f(u))
                    throw new a.SolanaError(
                      a.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE
                    );
                  return i.decode(u);
                }
                (n.address = d),
                  (n.assertIsAddress = l),
                  (n.assertIsProgramDerivedAddress = function (e) {
                    if (
                      !(
                        Array.isArray(e) &&
                        2 === e.length &&
                        'string' == typeof e[0] &&
                        'number' == typeof e[1]
                      )
                    )
                      throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA);
                    if (e[1] < 0 || e[1] > 255)
                      throw new a.SolanaError(
                        a.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE,
                        { bump: e[1] }
                      );
                    l(e[0]);
                  }),
                  (n.createAddressWithSeed = async function ({
                    baseAddress: e,
                    programAddress: t,
                    seed: n,
                  }) {
                    const { encode: r, decode: i } = y(),
                      o = 'string' == typeof n ? new TextEncoder().encode(n) : n;
                    if (o.byteLength > R)
                      throw new a.SolanaError(
                        a.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED,
                        { actual: o.byteLength, index: 0, maxSeedLength: R }
                      );
                    const s = r(t);
                    if (s.length >= b.length && s.slice(-b.length).every((e, t) => e === b[t]))
                      throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER);
                    const c = await crypto.subtle.digest(
                      'SHA-256',
                      new Uint8Array([...r(e), ...o, ...s])
                    );
                    return i(new Uint8Array(c));
                  }),
                  (n.getAddressCodec = y),
                  (n.getAddressComparator = function () {
                    return new Intl.Collator('en', {
                      caseFirst: 'lower',
                      ignorePunctuation: !1,
                      localeMatcher: 'best fit',
                      numeric: !1,
                      sensitivity: 'variant',
                      usage: 'sort',
                    }).compare;
                  }),
                  (n.getAddressDecoder = T),
                  (n.getAddressEncoder = _),
                  (n.getAddressFromPublicKey = async function (e) {
                    if (
                      (c.assertKeyExporterIsAvailable(),
                      'public' !== e.type || 'Ed25519' !== e.algorithm.name)
                    )
                      throw new a.SolanaError(
                        a.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY
                      );
                    const t = await crypto.subtle.exportKey('raw', e);
                    return T().decode(new Uint8Array(t));
                  }),
                  (n.getProgramDerivedAddress = async function ({ programAddress: e, seeds: t }) {
                    let n = 255;
                    for (; n > 0; )
                      try {
                        return [
                          await N({ programAddress: e, seeds: [...t, new Uint8Array([n])] }),
                          n,
                        ];
                      } catch (e) {
                        if (
                          !a.isSolanaError(
                            e,
                            a.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE
                          )
                        )
                          throw e;
                        n--;
                      }
                    throw new a.SolanaError(
                      a.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED
                    );
                  }),
                  (n.isAddress = p),
                  (n.isProgramDerivedAddress = function (e) {
                    return (
                      Array.isArray(e) &&
                      2 === e.length &&
                      'string' == typeof e[0] &&
                      'number' == typeof e[1] &&
                      e[1] >= 0 &&
                      e[1] <= 255 &&
                      p(e[0])
                    );
                  });
              };
            };
      },
      {
        package: '@solana/addresses',
        file: 'node_modules/@solana/addresses/dist/index.browser.cjs',
      },
    ],
    [
      3291,
      { '@solana/errors': 3294 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r,
                  i = e('@solana/errors');
                function o() {
                  if (!globalThis.isSecureContext)
                    throw new i.SolanaError(
                      i.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT
                    );
                }
                (n.assertDigestCapabilityIsAvailable = function () {
                  var e;
                  if (
                    (o(),
                    void 0 === globalThis.crypto ||
                      'function' !=
                        typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                          ? void 0
                          : e.digest))
                  )
                    throw new i.SolanaError(i.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED);
                }),
                  (n.assertKeyExporterIsAvailable = function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.exportKey))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED
                      );
                  }),
                  (n.assertKeyGenerationIsAvailable = async function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.generateKey))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED
                      );
                    if (
                      !(await (async function (e) {
                        return (
                          void 0 === r &&
                            (r = new Promise(t => {
                              e.generateKey('Ed25519', !1, ['sign', 'verify'])
                                .then(() => {
                                  t((r = !0));
                                })
                                .catch(() => {
                                  t((r = !1));
                                });
                            })),
                          'boolean' == typeof r ? r : await r
                        );
                      })(globalThis.crypto.subtle))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED
                      );
                  }),
                  (n.assertPRNGIsAvailable = function () {
                    if (
                      void 0 === globalThis.crypto ||
                      'function' != typeof globalThis.crypto.getRandomValues
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED
                      );
                  }),
                  (n.assertSigningCapabilityIsAvailable = function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.sign))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED
                      );
                  }),
                  (n.assertVerificationCapabilityIsAvailable = function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.verify))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED
                      );
                  });
              };
            };
      },
      {
        package: '@solana/addresses>@solana/assertions',
        file: 'node_modules/@solana/addresses/node_modules/@solana/assertions/dist/index.browser.cjs',
      },
    ],
    [
      3292,
      { '@solana/errors': 3294 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r = e('@solana/errors'),
                  i = (e, t) => {
                    if (e.length >= t) return e;
                    const n = new Uint8Array(t).fill(0);
                    return n.set(e), n;
                  },
                  o = (e, t) => i(e.length <= t ? e : e.slice(0, t), t);
                function s(e, t, n) {
                  const r = 0 === n && e.length === t.length ? e : e.slice(n, n + t.length);
                  return r.length === t.length && t.every((e, t) => e === r[t]);
                }
                function a(e, t) {
                  return 'fixedSize' in t ? t.fixedSize : t.getSizeFromValue(e);
                }
                function c(e) {
                  return Object.freeze({
                    ...e,
                    encode: t => {
                      const n = new Uint8Array(a(t, e));
                      return e.write(t, n, 0), n;
                    },
                  });
                }
                function u(e) {
                  return Object.freeze({ ...e, decode: (t, n = 0) => e.read(t, n)[0] });
                }
                function p(e) {
                  return Object.freeze({
                    ...e,
                    decode: (t, n = 0) => e.read(t, n)[0],
                    encode: t => {
                      const n = new Uint8Array(a(t, e));
                      return e.write(t, n, 0), n;
                    },
                  });
                }
                function l(e) {
                  return 'fixedSize' in e && 'number' == typeof e.fixedSize;
                }
                function d(e) {
                  if (!l(e)) throw new r.SolanaError(r.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH);
                }
                function _(e) {
                  return !l(e);
                }
                function T(e, t) {
                  if (l(e) !== l(t))
                    throw new r.SolanaError(
                      r.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH
                    );
                  if (l(e) && l(t) && e.fixedSize !== t.fixedSize)
                    throw new r.SolanaError(
                      r.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH,
                      { decoderFixedSize: t.fixedSize, encoderFixedSize: e.fixedSize }
                    );
                  if (!l(e) && !l(t) && e.maxSize !== t.maxSize)
                    throw new r.SolanaError(
                      r.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH,
                      { decoderMaxSize: t.maxSize, encoderMaxSize: e.maxSize }
                    );
                  return {
                    ...t,
                    ...e,
                    decode: t.decode,
                    encode: e.encode,
                    read: t.read,
                    write: e.write,
                  };
                }
                function y(e, t) {
                  const n = (n, i, o) => {
                    const s = e.encode(n);
                    if (m(s, t) >= 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL,
                        { encodedBytes: s, hexEncodedBytes: g(s), hexSentinel: g(t), sentinel: t }
                      );
                    return i.set(s, o), (o += s.length), i.set(t, o), (o += t.length);
                  };
                  return l(e)
                    ? c({ ...e, fixedSize: e.fixedSize + t.length, write: n })
                    : c({
                        ...e,
                        ...(null != e.maxSize ? { maxSize: e.maxSize + t.length } : {}),
                        getSizeFromValue: n => e.getSizeFromValue(n) + t.length,
                        write: n,
                      });
                }
                function E(e, t) {
                  const n = (n, i) => {
                    const o = 0 === i ? n : n.slice(i),
                      s = m(o, t);
                    if (-1 === s)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES,
                        { decodedBytes: o, hexDecodedBytes: g(o), hexSentinel: g(t), sentinel: t }
                      );
                    const a = o.slice(0, s);
                    return [e.decode(a), i + a.length + t.length];
                  };
                  return l(e)
                    ? u({ ...e, fixedSize: e.fixedSize + t.length, read: n })
                    : u({
                        ...e,
                        ...(null != e.maxSize ? { maxSize: e.maxSize + t.length } : {}),
                        read: n,
                      });
                }
                function m(e, t) {
                  return e.findIndex((e, n, r) => (1 === t.length ? e === t[0] : s(r, t, n)));
                }
                function g(e) {
                  return e.reduce((e, t) => e + t.toString(16).padStart(2, '0'), '');
                }
                function S(e, t, n, i = 0) {
                  const o = n.length - i;
                  if (o < t)
                    throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, {
                      bytesLength: o,
                      codecDescription: e,
                      expected: t,
                    });
                }
                function h(e, t, n) {
                  if (t < 0 || t > n)
                    throw new r.SolanaError(r.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, {
                      bytesLength: n,
                      codecDescription: e,
                      offset: t,
                    });
                }
                function O(e, t) {
                  const n = (n, r, i) => {
                    const o = e.encode(n);
                    return (i = t.write(o.length, r, i)), r.set(o, i), i + o.length;
                  };
                  if (l(t) && l(e))
                    return c({ ...e, fixedSize: t.fixedSize + e.fixedSize, write: n });
                  const r = l(t) ? t.fixedSize : (t.maxSize ?? null),
                    i = l(e) ? e.fixedSize : (e.maxSize ?? null),
                    o = null !== r && null !== i ? r + i : null;
                  return c({
                    ...e,
                    ...(null !== o ? { maxSize: o } : {}),
                    getSizeFromValue: n => {
                      const r = a(n, e);
                      return a(r, t) + r;
                    },
                    write: n,
                  });
                }
                function f(e, t) {
                  const n = (n, r) => {
                    const [i, o] = t.read(n, r),
                      s = Number(i);
                    return (
                      ((r = o) > 0 || n.length > s) && (n = n.slice(r, r + s)),
                      S('addDecoderSizePrefix', s, n),
                      [e.decode(n), r + s]
                    );
                  };
                  if (l(t) && l(e))
                    return u({ ...e, fixedSize: t.fixedSize + e.fixedSize, read: n });
                  const r = l(t) ? t.fixedSize : (t.maxSize ?? null),
                    i = l(e) ? e.fixedSize : (e.maxSize ?? null),
                    o = null !== r && null !== i ? r + i : null;
                  return u({ ...e, ...(null !== o ? { maxSize: o } : {}), read: n });
                }
                function R(e, t) {
                  return c({
                    fixedSize: t,
                    write: (n, r, i) => {
                      const o = e.encode(n),
                        s = o.length > t ? o.slice(0, t) : o;
                      return r.set(s, i), i + t;
                    },
                  });
                }
                function A(e, t) {
                  return u({
                    fixedSize: t,
                    read: (n, r) => {
                      S('fixCodecSize', t, n, r),
                        (r > 0 || n.length > t) && (n = n.slice(r, r + t)),
                        l(e) && (n = o(n, e.fixedSize));
                      const [i] = e.read(n, 0);
                      return [i, r + t];
                    },
                  });
                }
                function b(e, t) {
                  return c({
                    ...e,
                    write: (n, r, i) => {
                      const o = e => I(e, r.length),
                        s = t.preOffset ? t.preOffset({ bytes: r, preOffset: i, wrapBytes: o }) : i;
                      h('offsetEncoder', s, r.length);
                      const a = e.write(n, r, s),
                        c = t.postOffset
                          ? t.postOffset({
                              bytes: r,
                              newPreOffset: s,
                              postOffset: a,
                              preOffset: i,
                              wrapBytes: o,
                            })
                          : a;
                      return h('offsetEncoder', c, r.length), c;
                    },
                  });
                }
                function N(e, t) {
                  return u({
                    ...e,
                    read: (n, r) => {
                      const i = e => I(e, n.length),
                        o = t.preOffset ? t.preOffset({ bytes: n, preOffset: r, wrapBytes: i }) : r;
                      h('offsetDecoder', o, n.length);
                      const [s, a] = e.read(n, o),
                        c = t.postOffset
                          ? t.postOffset({
                              bytes: n,
                              newPreOffset: o,
                              postOffset: a,
                              preOffset: r,
                              wrapBytes: i,
                            })
                          : a;
                      return h('offsetDecoder', c, n.length), [s, c];
                    },
                  });
                }
                function I(e, t) {
                  return 0 === t ? 0 : ((e % t) + t) % t;
                }
                function C(e, t) {
                  if (l(e)) {
                    const n = t(e.fixedSize);
                    if (n < 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,
                        { bytesLength: n, codecDescription: 'resizeEncoder' }
                      );
                    return c({ ...e, fixedSize: n });
                  }
                  return c({
                    ...e,
                    getSizeFromValue: n => {
                      const i = t(e.getSizeFromValue(n));
                      if (i < 0)
                        throw new r.SolanaError(
                          r.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,
                          { bytesLength: i, codecDescription: 'resizeEncoder' }
                        );
                      return i;
                    },
                  });
                }
                function v(e, t) {
                  if (l(e)) {
                    const n = t(e.fixedSize);
                    if (n < 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,
                        { bytesLength: n, codecDescription: 'resizeDecoder' }
                      );
                    return u({ ...e, fixedSize: n });
                  }
                  return e;
                }
                function P(e, t) {
                  return b(
                    C(e, e => e + t),
                    { preOffset: ({ preOffset: e }) => e + t }
                  );
                }
                function w(e, t) {
                  return b(
                    C(e, e => e + t),
                    { postOffset: ({ postOffset: e }) => e + t }
                  );
                }
                function D(e, t) {
                  return N(
                    v(e, e => e + t),
                    { preOffset: ({ preOffset: e }) => e + t }
                  );
                }
                function x(e, t) {
                  return N(
                    v(e, e => e + t),
                    { postOffset: ({ postOffset: e }) => e + t }
                  );
                }
                function M(e, t, n, r, i = 0) {
                  for (; n < --r; ) {
                    const o = e[n];
                    (t[n + i] = e[r]), (t[r + i] = o), n++;
                  }
                  n === r && (t[n + i] = e[n]);
                }
                function L(e) {
                  return (
                    d(e),
                    c({
                      ...e,
                      write: (t, n, r) => {
                        const i = e.write(t, n, r);
                        return M(n, n, r, r + e.fixedSize), i;
                      },
                    })
                  );
                }
                function j(e) {
                  return (
                    d(e),
                    u({
                      ...e,
                      read: (t, n) => {
                        const r = t.slice();
                        return M(t, r, n, n + e.fixedSize), e.read(r, n);
                      },
                    })
                  );
                }
                function U(e, t) {
                  return c({
                    ...(_(e) ? { ...e, getSizeFromValue: n => e.getSizeFromValue(t(n)) } : e),
                    write: (n, r, i) => e.write(t(n), r, i),
                  });
                }
                function B(e, t) {
                  return u({
                    ...e,
                    read: (n, r) => {
                      const [i, o] = e.read(n, r);
                      return [t(i, n, r), o];
                    },
                  });
                }
                (n.addCodecSentinel = function (e, t) {
                  return T(y(e, t), E(e, t));
                }),
                  (n.addCodecSizePrefix = function (e, t) {
                    return T(O(e, t), f(e, t));
                  }),
                  (n.addDecoderSentinel = E),
                  (n.addDecoderSizePrefix = f),
                  (n.addEncoderSentinel = y),
                  (n.addEncoderSizePrefix = O),
                  (n.assertByteArrayHasEnoughBytesForCodec = S),
                  (n.assertByteArrayIsNotEmptyForCodec = function (e, t, n = 0) {
                    if (t.length - n <= 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY,
                        { codecDescription: e }
                      );
                  }),
                  (n.assertByteArrayOffsetIsNotOutOfRange = h),
                  (n.assertIsFixedSize = d),
                  (n.assertIsVariableSize = function (e) {
                    if (!_(e))
                      throw new r.SolanaError(r.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH);
                  }),
                  (n.combineCodec = T),
                  (n.containsBytes = s),
                  (n.createCodec = p),
                  (n.createDecoder = u),
                  (n.createEncoder = c),
                  (n.fixBytes = o),
                  (n.fixCodecSize = function (e, t) {
                    return T(R(e, t), A(e, t));
                  }),
                  (n.fixDecoderSize = A),
                  (n.fixEncoderSize = R),
                  (n.getEncodedSize = a),
                  (n.isFixedSize = l),
                  (n.isVariableSize = _),
                  (n.mergeBytes = e => {
                    const t = e.filter(e => e.length);
                    if (0 === t.length) return e.length ? e[0] : new Uint8Array();
                    if (1 === t.length) return t[0];
                    const n = t.reduce((e, t) => e + t.length, 0),
                      r = new Uint8Array(n);
                    let i = 0;
                    return (
                      t.forEach(e => {
                        r.set(e, i), (i += e.length);
                      }),
                      r
                    );
                  }),
                  (n.offsetCodec = function (e, t) {
                    return T(b(e, t), N(e, t));
                  }),
                  (n.offsetDecoder = N),
                  (n.offsetEncoder = b),
                  (n.padBytes = i),
                  (n.padLeftCodec = function (e, t) {
                    return T(P(e, t), D(e, t));
                  }),
                  (n.padLeftDecoder = D),
                  (n.padLeftEncoder = P),
                  (n.padRightCodec = function (e, t) {
                    return T(w(e, t), x(e, t));
                  }),
                  (n.padRightDecoder = x),
                  (n.padRightEncoder = w),
                  (n.resizeCodec = function (e, t) {
                    return T(C(e, t), v(e, t));
                  }),
                  (n.resizeDecoder = v),
                  (n.resizeEncoder = C),
                  (n.reverseCodec = function (e) {
                    return T(L(e), j(e));
                  }),
                  (n.reverseDecoder = j),
                  (n.reverseEncoder = L),
                  (n.transformCodec = function (e, t, n) {
                    return p({ ...U(e, t), read: n ? B(e, n).read : e.read });
                  }),
                  (n.transformDecoder = B),
                  (n.transformEncoder = U);
              };
            };
      },
      {
        package: '@solana/addresses>@solana/codecs-core',
        file: 'node_modules/@solana/addresses/node_modules/@solana/codecs-core/dist/index.browser.cjs',
      },
    ],
    [
      3293,
      { '@solana/codecs-core': 3292, '@solana/errors': 3294 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r = e('@solana/errors'),
                  i = e('@solana/codecs-core');
                function o(e, t, n = t) {
                  if (!t.match(new RegExp(`^[${e}]*$`)))
                    throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
                      alphabet: e,
                      base: e.length,
                      value: n,
                    });
                }
                var s = e =>
                    i.createEncoder({
                      getSizeFromValue: t => {
                        const [n, r] = u(t, e[0]);
                        if (!r) return t.length;
                        const i = p(r, e);
                        return n.length + Math.ceil(i.toString(16).length / 2);
                      },
                      write(t, n, r) {
                        if ((o(e, t), '' === t)) return r;
                        const [i, s] = u(t, e[0]);
                        if (!s) return n.set(new Uint8Array(i.length).fill(0), r), r + i.length;
                        let a = p(s, e);
                        const c = [];
                        for (; a > 0n; ) c.unshift(Number(a % 256n)), (a /= 256n);
                        const l = [...Array(i.length).fill(0), ...c];
                        return n.set(l, r), r + l.length;
                      },
                    }),
                  a = e =>
                    i.createDecoder({
                      read(t, n) {
                        const r = 0 === n ? t : t.slice(n);
                        if (0 === r.length) return ['', 0];
                        let i = r.findIndex(e => 0 !== e);
                        i = -1 === i ? r.length : i;
                        const o = e[0].repeat(i);
                        if (i === r.length) return [o, t.length];
                        const s = (function (e, t) {
                          const n = BigInt(t.length),
                            r = [];
                          for (; e > 0n; ) r.unshift(t[Number(e % n)]), (e /= n);
                          return r.join('');
                        })(
                          r.slice(i).reduce((e, t) => 256n * e + BigInt(t), 0n),
                          e
                        );
                        return [o + s, t.length];
                      },
                    }),
                  c = e => i.combineCodec(s(e), a(e));
                function u(e, t) {
                  const [n, r] = e.split(new RegExp(`((?!${t}).*)`));
                  return [n, r];
                }
                function p(e, t) {
                  const n = BigInt(t.length);
                  let r = 0n;
                  for (const i of e) (r *= n), (r += BigInt(t.indexOf(i)));
                  return r;
                }
                var l = '0123456789',
                  d = { alphabet: '0123456789abcdef', base: 16 };
                function _(e) {
                  return e >= 48 && e <= 57
                    ? e - 48
                    : e >= 65 && e <= 70
                      ? e - 55
                      : e >= 97 && e <= 102
                        ? e - 87
                        : void 0;
                }
                var T = () =>
                    i.createEncoder({
                      getSizeFromValue: e => Math.ceil(e.length / 2),
                      write(e, t, n) {
                        const i = e.length,
                          o = i / 2;
                        if (1 === i) {
                          const i = _(e.charCodeAt(0));
                          if (void 0 === i)
                            throw new r.SolanaError(
                              r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE,
                              { ...d, value: e }
                            );
                          return t.set([i], n), 1 + n;
                        }
                        const s = new Uint8Array(o);
                        for (let t = 0, n = 0; t < o; t++) {
                          const i = e.charCodeAt(n++),
                            o = e.charCodeAt(n++),
                            a = _(i),
                            c = _(o);
                          if (void 0 === a || (void 0 === c && !Number.isNaN(o)))
                            throw new r.SolanaError(
                              r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE,
                              { ...d, value: e }
                            );
                          s[t] = Number.isNaN(o) ? a : (a << 4) | (c ?? 0);
                        }
                        return t.set(s, n), s.length + n;
                      },
                    }),
                  y = () =>
                    i.createDecoder({
                      read: (e, t) => [
                        e.slice(t).reduce((e, t) => e + t.toString(16).padStart(2, '0'), ''),
                        e.length,
                      ],
                    }),
                  E = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
                  m = (e, t) =>
                    i.createEncoder({
                      getSizeFromValue: e => Math.floor((e.length * t) / 8),
                      write(n, r, i) {
                        if ((o(e, n), '' === n)) return i;
                        const s = S(
                          [...n].map(t => e.indexOf(t)),
                          t,
                          8,
                          !1
                        );
                        return r.set(s, i), s.length + i;
                      },
                    }),
                  g = (e, t) =>
                    i.createDecoder({
                      read(n, r = 0) {
                        const i = 0 === r ? n : n.slice(r);
                        if (0 === i.length) return ['', n.length];
                        return [
                          S([...i], 8, t, !0)
                            .map(t => e[t])
                            .join(''),
                          n.length,
                        ];
                      },
                    });
                function S(e, t, n, r) {
                  const i = [];
                  let o = 0,
                    s = 0;
                  const a = (1 << n) - 1;
                  for (const r of e)
                    for (o = (o << t) | r, s += t; s >= n; ) (s -= n), i.push((o >> s) & a);
                  return r && s > 0 && i.push((o << (n - s)) & a), i;
                }
                var h = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                  O = () =>
                    i.createEncoder({
                      getSizeFromValue: e => {
                        try {
                          return atob(e).length;
                        } catch {
                          throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
                            alphabet: h,
                            base: 64,
                            value: e,
                          });
                        }
                      },
                      write(e, t, n) {
                        try {
                          const r = atob(e)
                            .split('')
                            .map(e => e.charCodeAt(0));
                          return t.set(r, n), r.length + n;
                        } catch {
                          throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
                            alphabet: h,
                            base: 64,
                            value: e,
                          });
                        }
                      },
                    }),
                  f = () =>
                    i.createDecoder({
                      read(e, t = 0) {
                        const n = e.slice(t);
                        return [btoa(String.fromCharCode(...n)), e.length];
                      },
                    }),
                  R = e => e.replace(/\u0000/g, ''),
                  A = globalThis.TextDecoder,
                  b = globalThis.TextEncoder,
                  N = () => {
                    let e;
                    return i.createEncoder({
                      getSizeFromValue: t => (e || (e = new b())).encode(t).length,
                      write: (t, n, r) => {
                        const i = (e || (e = new b())).encode(t);
                        return n.set(i, r), r + i.length;
                      },
                    });
                  },
                  I = () => {
                    let e;
                    return i.createDecoder({
                      read(t, n) {
                        const r = (e || (e = new A())).decode(t.slice(n));
                        return [R(r), t.length];
                      },
                    });
                  };
                (n.assertValidBaseString = o),
                  (n.getBase10Codec = () => c(l)),
                  (n.getBase10Decoder = () => a(l)),
                  (n.getBase10Encoder = () => s(l)),
                  (n.getBase16Codec = () => i.combineCodec(T(), y())),
                  (n.getBase16Decoder = y),
                  (n.getBase16Encoder = T),
                  (n.getBase58Codec = () => c(E)),
                  (n.getBase58Decoder = () => a(E)),
                  (n.getBase58Encoder = () => s(E)),
                  (n.getBase64Codec = () => i.combineCodec(O(), f())),
                  (n.getBase64Decoder = f),
                  (n.getBase64Encoder = O),
                  (n.getBaseXCodec = c),
                  (n.getBaseXDecoder = a),
                  (n.getBaseXEncoder = s),
                  (n.getBaseXResliceCodec = (e, t) => i.combineCodec(m(e, t), g(e, t))),
                  (n.getBaseXResliceDecoder = g),
                  (n.getBaseXResliceEncoder = m),
                  (n.getUtf8Codec = () => i.combineCodec(N(), I())),
                  (n.getUtf8Decoder = I),
                  (n.getUtf8Encoder = N),
                  (n.padNullCharacters = (e, t) => e.padEnd(t, '\0')),
                  (n.removeNullCharacters = R);
              };
            };
      },
      {
        package: '@solana/addresses>@solana/codecs-strings',
        file: 'node_modules/@solana/addresses/node_modules/@solana/codecs-strings/dist/index.browser.cjs',
      },
    ],
    [
      3294,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                function r(e, t, n) {
                  return (
                    (t = (function (e) {
                      var t = (function (e, t) {
                        if ('object' != typeof e || !e) return e;
                        var n = e[Symbol.toPrimitive];
                        if (void 0 !== n) {
                          var r = n.call(e, t || 'default');
                          if ('object' != typeof r) return r;
                          throw new TypeError('@@toPrimitive must return a primitive value.');
                        }
                        return ('string' === t ? String : Number)(e);
                      })(e, 'string');
                      return 'symbol' == typeof t ? t : t + '';
                    })(t)) in e
                      ? Object.defineProperty(e, t, {
                          value: n,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (e[t] = n),
                    e
                  );
                }
                var i = -32700,
                  o = -32603,
                  s = -32602,
                  a = -32601,
                  c = -32600,
                  u = -32016,
                  p = -32015,
                  l = -32014,
                  d = -32013,
                  _ = -32012,
                  T = -32011,
                  y = -32010,
                  E = -32009,
                  m = -32008,
                  g = -32007,
                  S = -32006,
                  h = -32005,
                  O = -32004,
                  f = -32003,
                  R = -32002,
                  A = -32001,
                  b = 28e5,
                  N = 2800001,
                  I = 2800002,
                  C = 2800003,
                  v = 2800004,
                  P = 2800005,
                  w = 2800006,
                  D = 2800007,
                  x = 2800008,
                  M = 2800009,
                  L = 2800010,
                  j = 323e4,
                  U = 32300001,
                  B = 3230002,
                  k = 3230003,
                  F = 3230004,
                  z = 361e4,
                  G = 3610001,
                  H = 3610002,
                  V = 3610003,
                  $ = 3610004,
                  W = 3610005,
                  q = 3610006,
                  K = 3610007,
                  Y = 3611e3,
                  X = 3704e3,
                  J = 3704001,
                  Q = 3704002,
                  Z = 3704003,
                  ee = 3704004,
                  te = 4128e3,
                  ne = 4128001,
                  re = 4128002,
                  ie = 4615e3,
                  oe = 4615001,
                  se = 4615002,
                  ae = 4615003,
                  ce = 4615004,
                  ue = 4615005,
                  pe = 4615006,
                  le = 4615007,
                  de = 4615008,
                  _e = 4615009,
                  Te = 4615010,
                  ye = 4615011,
                  Ee = 4615012,
                  me = 4615013,
                  ge = 4615014,
                  Se = 4615015,
                  he = 4615016,
                  Oe = 4615017,
                  fe = 4615018,
                  Re = 4615019,
                  Ae = 4615020,
                  be = 4615021,
                  Ne = 4615022,
                  Ie = 4615023,
                  Ce = 4615024,
                  ve = 4615025,
                  Pe = 4615026,
                  we = 4615027,
                  De = 4615028,
                  xe = 4615029,
                  Me = 4615030,
                  Le = 4615031,
                  je = 4615032,
                  Ue = 4615033,
                  Be = 4615034,
                  ke = 4615035,
                  Fe = 4615036,
                  ze = 4615037,
                  Ge = 4615038,
                  He = 4615039,
                  Ve = 4615040,
                  $e = 4615041,
                  We = 4615042,
                  qe = 4615043,
                  Ke = 4615044,
                  Ye = 4615045,
                  Xe = 4615046,
                  Je = 4615047,
                  Qe = 4615048,
                  Ze = 4615049,
                  et = 4615050,
                  tt = 4615051,
                  nt = 4615052,
                  rt = 4615053,
                  it = 4615054,
                  ot = 5508e3,
                  st = 5508001,
                  at = 5508002,
                  ct = 5508003,
                  ut = 5508004,
                  pt = 5508005,
                  lt = 5508006,
                  dt = 5508007,
                  _t = 5508008,
                  Tt = 5508009,
                  yt = 5508010,
                  Et = 5508011,
                  mt = 5663e3,
                  gt = 5663001,
                  St = 5663002,
                  ht = 5663003,
                  Ot = 5663004,
                  ft = 5663005,
                  Rt = 5663006,
                  At = 5663007,
                  bt = 5663008,
                  Nt = 5663009,
                  It = 5663010,
                  Ct = 5663011,
                  vt = 5663012,
                  Pt = 5663013,
                  wt = 5663014,
                  Dt = 5663015,
                  xt = 5663016,
                  Mt = 5663017,
                  Lt = 5663018,
                  jt = 5663019,
                  Ut = 705e4,
                  Bt = 7050001,
                  kt = 7050002,
                  Ft = 7050003,
                  zt = 7050004,
                  Gt = 7050005,
                  Ht = 7050006,
                  Vt = 7050007,
                  $t = 7050008,
                  Wt = 7050009,
                  qt = 7050010,
                  Kt = 7050011,
                  Yt = 7050012,
                  Xt = 7050013,
                  Jt = 7050014,
                  Qt = 7050015,
                  Zt = 7050016,
                  en = 7050017,
                  tn = 7050018,
                  nn = 7050019,
                  rn = 7050020,
                  on = 7050021,
                  sn = 7050022,
                  an = 7050023,
                  cn = 7050024,
                  un = 7050025,
                  pn = 7050026,
                  ln = 7050027,
                  dn = 7050028,
                  _n = 7050029,
                  Tn = 7050030,
                  yn = 7050031,
                  En = 7050032,
                  mn = 7050033,
                  gn = 7050034,
                  Sn = 7050035,
                  hn = 7050036,
                  On = 8078e3,
                  fn = 8078001,
                  Rn = 8078002,
                  An = 8078003,
                  bn = 8078004,
                  Nn = 8078005,
                  In = 8078006,
                  Cn = 8078007,
                  vn = 8078008,
                  Pn = 8078009,
                  wn = 8078010,
                  Dn = 8078011,
                  xn = 8078012,
                  Mn = 8078013,
                  Ln = 8078014,
                  jn = 8078015,
                  Un = 8078016,
                  Bn = 8078017,
                  kn = 8078018,
                  Fn = 8078019,
                  zn = 8078020,
                  Gn = 8078021,
                  Hn = 8078022,
                  Vn = 81e5,
                  $n = 8100001,
                  Wn = 8100002,
                  qn = 8100003,
                  Kn = 819e4,
                  Yn = 8190001,
                  Xn = 8190002,
                  Jn = 8190003,
                  Qn = 8190004,
                  Zn = 99e5,
                  er = 9900001,
                  tr = 9900002,
                  nr = 9900003,
                  rr = 9900004;
                function ir(e) {
                  if (Array.isArray(e)) {
                    return '%5B' + e.map(ir).join('%2C%20') + '%5D';
                  }
                  return 'bigint' == typeof e
                    ? `${e}n`
                    : encodeURIComponent(
                        String(null != e && null === Object.getPrototypeOf(e) ? { ...e } : e)
                      );
                }
                function or([e, t]) {
                  return `${e}=${ir(t)}`;
                }
                function sr(e, t = {}) {
                  {
                    let n = `Solana error #${e}; Decode this error by running \`npx @solana/errors decode -- ${e}`;
                    return (
                      Object.keys(t).length &&
                        (n += ` '${(function (e) {
                          const t = Object.entries(e).map(or).join('&');
                          return btoa(t);
                        })(t)}'`),
                      `${n}\``
                    );
                  }
                }
                var ar = class extends Error {
                  constructor(...[e, t]) {
                    let n, i;
                    if (t) {
                      const { cause: e, ...r } = t;
                      e && (i = { cause: e }), Object.keys(r).length > 0 && (n = r);
                    }
                    super(sr(e, n), i),
                      r(this, 'cause', this.cause),
                      r(this, 'context', void 0),
                      (this.context = { __code: e, ...n }),
                      (this.name = 'SolanaError');
                  }
                };
                function cr(...e) {
                  'captureStackTrace' in Error &&
                    'function' == typeof Error.captureStackTrace &&
                    Error.captureStackTrace(...e);
                }
                function ur(
                  {
                    errorCodeBaseOffset: e,
                    getErrorContext: t,
                    orderedErrorNames: n,
                    rpcEnumError: r,
                  },
                  i
                ) {
                  let o, s;
                  'string' == typeof r ? (o = r) : ((o = Object.keys(r)[0]), (s = r[o]));
                  const a = e + n.indexOf(o),
                    c = t(a, o, s),
                    u = new ar(a, c);
                  return cr(u, i), u;
                }
                var pr = [
                  'GenericError',
                  'InvalidArgument',
                  'InvalidInstructionData',
                  'InvalidAccountData',
                  'AccountDataTooSmall',
                  'InsufficientFunds',
                  'IncorrectProgramId',
                  'MissingRequiredSignature',
                  'AccountAlreadyInitialized',
                  'UninitializedAccount',
                  'UnbalancedInstruction',
                  'ModifiedProgramId',
                  'ExternalAccountLamportSpend',
                  'ExternalAccountDataModified',
                  'ReadonlyLamportChange',
                  'ReadonlyDataModified',
                  'DuplicateAccountIndex',
                  'ExecutableModified',
                  'RentEpochModified',
                  'NotEnoughAccountKeys',
                  'AccountDataSizeChanged',
                  'AccountNotExecutable',
                  'AccountBorrowFailed',
                  'AccountBorrowOutstanding',
                  'DuplicateAccountOutOfSync',
                  'Custom',
                  'InvalidError',
                  'ExecutableDataModified',
                  'ExecutableLamportChange',
                  'ExecutableAccountNotRentExempt',
                  'UnsupportedProgramId',
                  'CallDepth',
                  'MissingAccount',
                  'ReentrancyNotAllowed',
                  'MaxSeedLengthExceeded',
                  'InvalidSeeds',
                  'InvalidRealloc',
                  'ComputationalBudgetExceeded',
                  'PrivilegeEscalation',
                  'ProgramEnvironmentSetupFailure',
                  'ProgramFailedToComplete',
                  'ProgramFailedToCompile',
                  'Immutable',
                  'IncorrectAuthority',
                  'BorshIoError',
                  'AccountNotRentExempt',
                  'InvalidAccountOwner',
                  'ArithmeticOverflow',
                  'UnsupportedSysvar',
                  'IllegalOwner',
                  'MaxAccountsDataAllocationsExceeded',
                  'MaxAccountsExceeded',
                  'MaxInstructionTraceLengthExceeded',
                  'BuiltinProgramsMustConsumeComputeUnits',
                ];
                function lr(e, t) {
                  const n = Number(e);
                  return ur(
                    {
                      errorCodeBaseOffset: 4615001,
                      getErrorContext: (e, t, r) =>
                        e === ie
                          ? {
                              errorName: t,
                              index: n,
                              ...(void 0 !== r ? { instructionErrorContext: r } : null),
                            }
                          : e === Pe
                            ? { code: Number(r), index: n }
                            : e === Ye
                              ? { encodedData: r, index: n }
                              : { index: n },
                      orderedErrorNames: pr,
                      rpcEnumError: t,
                    },
                    lr
                  );
                }
                var dr = [
                  'AccountInUse',
                  'AccountLoadedTwice',
                  'AccountNotFound',
                  'ProgramAccountNotFound',
                  'InsufficientFundsForFee',
                  'InvalidAccountForFee',
                  'AlreadyProcessed',
                  'BlockhashNotFound',
                  'CallChainTooDeep',
                  'MissingSignatureForFee',
                  'InvalidAccountIndex',
                  'SignatureFailure',
                  'InvalidProgramForExecution',
                  'SanitizeFailure',
                  'ClusterMaintenance',
                  'AccountBorrowOutstanding',
                  'WouldExceedMaxBlockCostLimit',
                  'UnsupportedVersion',
                  'InvalidWritableAccount',
                  'WouldExceedMaxAccountCostLimit',
                  'WouldExceedAccountDataBlockLimit',
                  'TooManyAccountLocks',
                  'AddressLookupTableNotFound',
                  'InvalidAddressLookupTableOwner',
                  'InvalidAddressLookupTableData',
                  'InvalidAddressLookupTableIndex',
                  'InvalidRentPayingAccount',
                  'WouldExceedMaxVoteCostLimit',
                  'WouldExceedAccountDataTotalLimit',
                  'DuplicateInstruction',
                  'InsufficientFundsForRent',
                  'MaxLoadedAccountsDataSizeExceeded',
                  'InvalidLoadedAccountsDataSizeLimit',
                  'ResanitizationNeeded',
                  'ProgramExecutionTemporarilyRestricted',
                  'UnbalancedTransaction',
                ];
                function _r(e) {
                  return 'object' == typeof e && 'InstructionError' in e
                    ? lr(...e.InstructionError)
                    : ur(
                        {
                          errorCodeBaseOffset: 7050001,
                          getErrorContext: (e, t, n) =>
                            e === Ut
                              ? {
                                  errorName: t,
                                  ...(void 0 !== n ? { transactionErrorContext: n } : null),
                                }
                              : e === Tn
                                ? { index: Number(n) }
                                : e === yn || e === Sn
                                  ? { accountIndex: Number(n.account_index) }
                                  : void 0,
                          orderedErrorNames: dr,
                          rpcEnumError: e,
                        },
                        _r
                      );
                }
                (n.SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = j),
                  (n.SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = F),
                  (n.SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = k),
                  (n.SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = B),
                  (n.SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = U),
                  (n.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = M),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = I),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = b),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = C),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = x),
                  (n.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = v),
                  (n.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = w),
                  (n.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = D),
                  (n.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = P),
                  (n.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = L),
                  (n.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = N),
                  (n.SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4),
                  (n.SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1),
                  (n.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = On),
                  (n.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS = Hn),
                  (n.SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL = zn),
                  (n.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = Nn),
                  (n.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = In),
                  (n.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = bn),
                  (n.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = vn),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = Rn),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = Mn),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = An),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_ZERO_VALUE_TO_MATCH_ITEM_FIXED_SIZE = Fn),
                  (n.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = fn),
                  (n.SOLANA_ERROR__CODECS__INVALID_CONSTANT = kn),
                  (n.SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT = Pn),
                  (n.SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT = wn),
                  (n.SOLANA_ERROR__CODECS__INVALID_LITERAL_UNION_VARIANT = jn),
                  (n.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = Cn),
                  (n.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = xn),
                  (n.SOLANA_ERROR__CODECS__LITERAL_UNION_DISCRIMINATOR_OUT_OF_RANGE = Un),
                  (n.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = Dn),
                  (n.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = Ln),
                  (n.SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES = Gn),
                  (n.SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE = Bn),
                  (n.SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED = Y),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = _e),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = Ie),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = Ce),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = be),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = ue),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = Ne),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = Xe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = Qe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = Ye),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS =
                    it),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = je),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = Ge),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = Pe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = Oe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = ve),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = Me),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = De),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = xe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = fe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = ge),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = me),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = oe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = et),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = qe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = Ke),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = le),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = pe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = ce),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = Je),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = se),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = we),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = ae),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = ze),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = Fe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = tt),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = nt),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = rt),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = ke),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = Ue),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = de),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = Ee),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = Ae),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = He),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = Ve),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = We),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = $e),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = he),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = Se),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = Be),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = Re),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = ye),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = Te),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = ie),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = Le),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = Ze),
                  (n.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = te),
                  (n.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = ne),
                  (n.SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = re),
                  (n.SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5),
                  (n.SOLANA_ERROR__INVALID_NONCE = 2),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING =
                    tr),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__DATA_PUBLISHER_CHANNEL_UNIMPLEMENTED = rr),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE =
                    er),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_STATE_MISSING = Zn),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = nr),
                  (n.SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = o),
                  (n.SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = s),
                  (n.SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = c),
                  (n.SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = a),
                  (n.SOLANA_ERROR__JSON_RPC__PARSE_ERROR = i),
                  (n.SOLANA_ERROR__JSON_RPC__SCAN_ERROR = _),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = A),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = O),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = l),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = y),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = E),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = u),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = h),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = m),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = R),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = g),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = T),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE =
                    S),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = d),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE =
                    f),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = p),
                  (n.SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = X),
                  (n.SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = J),
                  (n.SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = Q),
                  (n.SOLANA_ERROR__KEYS__PUBLIC_KEY_MUST_MATCH_PRIVATE_KEY = ee),
                  (n.SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = Z),
                  (n.SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6),
                  (n.SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7),
                  (n.SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8),
                  (n.SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_PLAN = Kn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CLOSED_BEFORE_MESSAGE_BUFFERED = Xn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CONNECTION_CLOSED = Jn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_FAILED_TO_CONNECT = Qn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = Yn),
                  (n.SOLANA_ERROR__RPC__API_PLAN_MISSING_FOR_RPC_METHOD = qn),
                  (n.SOLANA_ERROR__RPC__INTEGER_OVERFLOW = Vn),
                  (n.SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = Wn),
                  (n.SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = $n),
                  (n.SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = ot),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = st),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = ct),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = ut),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = at),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = lt),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = dt),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = _t),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = pt),
                  (n.SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = Tt),
                  (n.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = yt),
                  (n.SOLANA_ERROR__SIGNER__WALLET_MULTISIGN_UNIMPLEMENTED = Et),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__CANNOT_EXPORT_NON_EXTRACTABLE_KEY = K),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = G),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = z),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = H),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = V),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = $),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = W),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = q),
                  (n.SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = Zt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = Bt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = kt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = Ft),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = an),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = Vt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = $t),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = Wt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = Qt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = Tn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = Gt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = yn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = Ht),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = Kt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = un),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = pn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = cn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = mn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = Xt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = ln),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = nn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = En),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = qt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = zt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED =
                    Sn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = gn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = Jt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = Yt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = sn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = hn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = Ut),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = tn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = on),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = _n),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = rn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = en),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = dn),
                  (n.SOLANA_ERROR__TRANSACTION__ADDRESSES_CANNOT_SIGN_TRANSACTION = Dt),
                  (n.SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = It),
                  (n.SOLANA_ERROR__TRANSACTION__CANNOT_ENCODE_WITH_EMPTY_SIGNATURES = xt),
                  (n.SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = St),
                  (n.SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = ht),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING =
                    ft),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE =
                    Rt),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = bt),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND =
                    At),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT = Lt),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT =
                    jt),
                  (n.SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = Ct),
                  (n.SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = vt),
                  (n.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE =
                    wt),
                  (n.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING =
                    Pt),
                  (n.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = mt),
                  (n.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = gt),
                  (n.SOLANA_ERROR__TRANSACTION__MESSAGE_SIGNATURES_MISMATCH = Mt),
                  (n.SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = Nt),
                  (n.SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = Ot),
                  (n.SolanaError = ar),
                  (n.getSolanaErrorFromInstructionError = lr),
                  (n.getSolanaErrorFromJsonRpcError = function e({ code: t, data: n, message: r }) {
                    let u;
                    const d = Number(t);
                    if (d === R) {
                      const { err: e, ...t } = n,
                        r = e ? { cause: _r(e) } : null;
                      u = new ar(R, { ...t, ...r });
                    } else {
                      let e;
                      switch (d) {
                        case o:
                        case s:
                        case c:
                        case a:
                        case i:
                        case _:
                        case A:
                        case O:
                        case l:
                        case y:
                        case E:
                        case g:
                        case S:
                        case p:
                          e = { __serverMessage: r };
                          break;
                        default:
                          'object' != typeof n || Array.isArray(n) || (e = n);
                      }
                      u = new ar(d, e);
                    }
                    return cr(u, e), u;
                  }),
                  (n.getSolanaErrorFromTransactionError = _r),
                  (n.isSolanaError = function (e, t) {
                    return (
                      !!(e instanceof Error && 'SolanaError' === e.name) &&
                      (void 0 === t || e.context.__code === t)
                    );
                  }),
                  (n.safeCaptureStackTrace = cr);
              };
            };
      },
      {
        package: '@solana/addresses>@solana/errors',
        file: 'node_modules/@solana/addresses/node_modules/@solana/errors/dist/index.browser.cjs',
      },
    ],
    [
      3295,
      { '@solana/errors': 3298 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r,
                  i = e('@solana/errors');
                function o() {
                  if (!globalThis.isSecureContext)
                    throw new i.SolanaError(
                      i.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT
                    );
                }
                (n.assertDigestCapabilityIsAvailable = function () {
                  var e;
                  if (
                    (o(),
                    void 0 === globalThis.crypto ||
                      'function' !=
                        typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                          ? void 0
                          : e.digest))
                  )
                    throw new i.SolanaError(i.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED);
                }),
                  (n.assertKeyExporterIsAvailable = function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.exportKey))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED
                      );
                  }),
                  (n.assertKeyGenerationIsAvailable = async function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.generateKey))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED
                      );
                    if (
                      !(await (async function (e) {
                        return (
                          void 0 === r &&
                            (r = new Promise(t => {
                              e.generateKey('Ed25519', !1, ['sign', 'verify'])
                                .then(() => {
                                  t((r = !0));
                                })
                                .catch(() => {
                                  t((r = !1));
                                });
                            })),
                          'boolean' == typeof r ? r : await r
                        );
                      })(globalThis.crypto.subtle))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED
                      );
                  }),
                  (n.assertPRNGIsAvailable = function () {
                    if (
                      void 0 === globalThis.crypto ||
                      'function' != typeof globalThis.crypto.getRandomValues
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED
                      );
                  }),
                  (n.assertSigningCapabilityIsAvailable = function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.sign))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED
                      );
                  }),
                  (n.assertVerificationCapabilityIsAvailable = function () {
                    var e;
                    if (
                      (o(),
                      void 0 === globalThis.crypto ||
                        'function' !=
                          typeof (null === (e = globalThis.crypto.subtle) || void 0 === e
                            ? void 0
                            : e.verify))
                    )
                      throw new i.SolanaError(
                        i.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED
                      );
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller>@solana/addresses>@solana/assertions',
        file: 'node_modules/@solana/assertions/dist/index.browser.cjs',
      },
    ],
    [
      3296,
      { '@solana/errors': 3298 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r = e('@solana/errors'),
                  i = (e, t) => {
                    if (e.length >= t) return e;
                    const n = new Uint8Array(t).fill(0);
                    return n.set(e), n;
                  },
                  o = (e, t) => i(e.length <= t ? e : e.slice(0, t), t);
                function s(e, t, n) {
                  const r = 0 === n && e.length === t.length ? e : e.slice(n, n + t.length);
                  return r.length === t.length && t.every((e, t) => e === r[t]);
                }
                function a(e, t) {
                  return 'fixedSize' in t ? t.fixedSize : t.getSizeFromValue(e);
                }
                function c(e) {
                  return Object.freeze({
                    ...e,
                    encode: t => {
                      const n = new Uint8Array(a(t, e));
                      return e.write(t, n, 0), n;
                    },
                  });
                }
                function u(e) {
                  return Object.freeze({ ...e, decode: (t, n = 0) => e.read(t, n)[0] });
                }
                function p(e) {
                  return Object.freeze({
                    ...e,
                    decode: (t, n = 0) => e.read(t, n)[0],
                    encode: t => {
                      const n = new Uint8Array(a(t, e));
                      return e.write(t, n, 0), n;
                    },
                  });
                }
                function l(e) {
                  return 'fixedSize' in e && 'number' == typeof e.fixedSize;
                }
                function d(e) {
                  if (!l(e)) throw new r.SolanaError(r.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH);
                }
                function _(e) {
                  return !l(e);
                }
                function T(e, t) {
                  if (l(e) !== l(t))
                    throw new r.SolanaError(
                      r.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH
                    );
                  if (l(e) && l(t) && e.fixedSize !== t.fixedSize)
                    throw new r.SolanaError(
                      r.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH,
                      { decoderFixedSize: t.fixedSize, encoderFixedSize: e.fixedSize }
                    );
                  if (!l(e) && !l(t) && e.maxSize !== t.maxSize)
                    throw new r.SolanaError(
                      r.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH,
                      { decoderMaxSize: t.maxSize, encoderMaxSize: e.maxSize }
                    );
                  return {
                    ...t,
                    ...e,
                    decode: t.decode,
                    encode: e.encode,
                    read: t.read,
                    write: e.write,
                  };
                }
                function y(e, t) {
                  const n = (n, i, o) => {
                    const s = e.encode(n);
                    if (m(s, t) >= 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL,
                        { encodedBytes: s, hexEncodedBytes: g(s), hexSentinel: g(t), sentinel: t }
                      );
                    return i.set(s, o), (o += s.length), i.set(t, o), (o += t.length);
                  };
                  return l(e)
                    ? c({ ...e, fixedSize: e.fixedSize + t.length, write: n })
                    : c({
                        ...e,
                        ...(null != e.maxSize ? { maxSize: e.maxSize + t.length } : {}),
                        getSizeFromValue: n => e.getSizeFromValue(n) + t.length,
                        write: n,
                      });
                }
                function E(e, t) {
                  const n = (n, i) => {
                    const o = 0 === i ? n : n.slice(i),
                      s = m(o, t);
                    if (-1 === s)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES,
                        { decodedBytes: o, hexDecodedBytes: g(o), hexSentinel: g(t), sentinel: t }
                      );
                    const a = o.slice(0, s);
                    return [e.decode(a), i + a.length + t.length];
                  };
                  return l(e)
                    ? u({ ...e, fixedSize: e.fixedSize + t.length, read: n })
                    : u({
                        ...e,
                        ...(null != e.maxSize ? { maxSize: e.maxSize + t.length } : {}),
                        read: n,
                      });
                }
                function m(e, t) {
                  return e.findIndex((e, n, r) => (1 === t.length ? e === t[0] : s(r, t, n)));
                }
                function g(e) {
                  return e.reduce((e, t) => e + t.toString(16).padStart(2, '0'), '');
                }
                function S(e, t, n, i = 0) {
                  const o = n.length - i;
                  if (o < t)
                    throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, {
                      bytesLength: o,
                      codecDescription: e,
                      expected: t,
                    });
                }
                function h(e, t, n) {
                  if (t < 0 || t > n)
                    throw new r.SolanaError(r.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, {
                      bytesLength: n,
                      codecDescription: e,
                      offset: t,
                    });
                }
                function O(e, t) {
                  const n = (n, r, i) => {
                    const o = e.encode(n);
                    return (i = t.write(o.length, r, i)), r.set(o, i), i + o.length;
                  };
                  if (l(t) && l(e))
                    return c({ ...e, fixedSize: t.fixedSize + e.fixedSize, write: n });
                  const r = l(t) ? t.fixedSize : (t.maxSize ?? null),
                    i = l(e) ? e.fixedSize : (e.maxSize ?? null),
                    o = null !== r && null !== i ? r + i : null;
                  return c({
                    ...e,
                    ...(null !== o ? { maxSize: o } : {}),
                    getSizeFromValue: n => {
                      const r = a(n, e);
                      return a(r, t) + r;
                    },
                    write: n,
                  });
                }
                function f(e, t) {
                  const n = (n, r) => {
                    const [i, o] = t.read(n, r),
                      s = Number(i);
                    return (
                      ((r = o) > 0 || n.length > s) && (n = n.slice(r, r + s)),
                      S('addDecoderSizePrefix', s, n),
                      [e.decode(n), r + s]
                    );
                  };
                  if (l(t) && l(e))
                    return u({ ...e, fixedSize: t.fixedSize + e.fixedSize, read: n });
                  const r = l(t) ? t.fixedSize : (t.maxSize ?? null),
                    i = l(e) ? e.fixedSize : (e.maxSize ?? null),
                    o = null !== r && null !== i ? r + i : null;
                  return u({ ...e, ...(null !== o ? { maxSize: o } : {}), read: n });
                }
                function R(e, t) {
                  return c({
                    fixedSize: t,
                    write: (n, r, i) => {
                      const o = e.encode(n),
                        s = o.length > t ? o.slice(0, t) : o;
                      return r.set(s, i), i + t;
                    },
                  });
                }
                function A(e, t) {
                  return u({
                    fixedSize: t,
                    read: (n, r) => {
                      S('fixCodecSize', t, n, r),
                        (r > 0 || n.length > t) && (n = n.slice(r, r + t)),
                        l(e) && (n = o(n, e.fixedSize));
                      const [i] = e.read(n, 0);
                      return [i, r + t];
                    },
                  });
                }
                function b(e, t) {
                  return c({
                    ...e,
                    write: (n, r, i) => {
                      const o = e => I(e, r.length),
                        s = t.preOffset ? t.preOffset({ bytes: r, preOffset: i, wrapBytes: o }) : i;
                      h('offsetEncoder', s, r.length);
                      const a = e.write(n, r, s),
                        c = t.postOffset
                          ? t.postOffset({
                              bytes: r,
                              newPreOffset: s,
                              postOffset: a,
                              preOffset: i,
                              wrapBytes: o,
                            })
                          : a;
                      return h('offsetEncoder', c, r.length), c;
                    },
                  });
                }
                function N(e, t) {
                  return u({
                    ...e,
                    read: (n, r) => {
                      const i = e => I(e, n.length),
                        o = t.preOffset ? t.preOffset({ bytes: n, preOffset: r, wrapBytes: i }) : r;
                      h('offsetDecoder', o, n.length);
                      const [s, a] = e.read(n, o),
                        c = t.postOffset
                          ? t.postOffset({
                              bytes: n,
                              newPreOffset: o,
                              postOffset: a,
                              preOffset: r,
                              wrapBytes: i,
                            })
                          : a;
                      return h('offsetDecoder', c, n.length), [s, c];
                    },
                  });
                }
                function I(e, t) {
                  return 0 === t ? 0 : ((e % t) + t) % t;
                }
                function C(e, t) {
                  if (l(e)) {
                    const n = t(e.fixedSize);
                    if (n < 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,
                        { bytesLength: n, codecDescription: 'resizeEncoder' }
                      );
                    return c({ ...e, fixedSize: n });
                  }
                  return c({
                    ...e,
                    getSizeFromValue: n => {
                      const i = t(e.getSizeFromValue(n));
                      if (i < 0)
                        throw new r.SolanaError(
                          r.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,
                          { bytesLength: i, codecDescription: 'resizeEncoder' }
                        );
                      return i;
                    },
                  });
                }
                function v(e, t) {
                  if (l(e)) {
                    const n = t(e.fixedSize);
                    if (n < 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,
                        { bytesLength: n, codecDescription: 'resizeDecoder' }
                      );
                    return u({ ...e, fixedSize: n });
                  }
                  return e;
                }
                function P(e, t) {
                  return b(
                    C(e, e => e + t),
                    { preOffset: ({ preOffset: e }) => e + t }
                  );
                }
                function w(e, t) {
                  return b(
                    C(e, e => e + t),
                    { postOffset: ({ postOffset: e }) => e + t }
                  );
                }
                function D(e, t) {
                  return N(
                    v(e, e => e + t),
                    { preOffset: ({ preOffset: e }) => e + t }
                  );
                }
                function x(e, t) {
                  return N(
                    v(e, e => e + t),
                    { postOffset: ({ postOffset: e }) => e + t }
                  );
                }
                function M(e, t, n, r, i = 0) {
                  for (; n < --r; ) {
                    const o = e[n];
                    (t[n + i] = e[r]), (t[r + i] = o), n++;
                  }
                  n === r && (t[n + i] = e[n]);
                }
                function L(e) {
                  return (
                    d(e),
                    c({
                      ...e,
                      write: (t, n, r) => {
                        const i = e.write(t, n, r);
                        return M(n, n, r, r + e.fixedSize), i;
                      },
                    })
                  );
                }
                function j(e) {
                  return (
                    d(e),
                    u({
                      ...e,
                      read: (t, n) => {
                        const r = t.slice();
                        return M(t, r, n, n + e.fixedSize), e.read(r, n);
                      },
                    })
                  );
                }
                function U(e, t) {
                  return c({
                    ...(_(e) ? { ...e, getSizeFromValue: n => e.getSizeFromValue(t(n)) } : e),
                    write: (n, r, i) => e.write(t(n), r, i),
                  });
                }
                function B(e, t) {
                  return u({
                    ...e,
                    read: (n, r) => {
                      const [i, o] = e.read(n, r);
                      return [t(i, n, r), o];
                    },
                  });
                }
                (n.addCodecSentinel = function (e, t) {
                  return T(y(e, t), E(e, t));
                }),
                  (n.addCodecSizePrefix = function (e, t) {
                    return T(O(e, t), f(e, t));
                  }),
                  (n.addDecoderSentinel = E),
                  (n.addDecoderSizePrefix = f),
                  (n.addEncoderSentinel = y),
                  (n.addEncoderSizePrefix = O),
                  (n.assertByteArrayHasEnoughBytesForCodec = S),
                  (n.assertByteArrayIsNotEmptyForCodec = function (e, t, n = 0) {
                    if (t.length - n <= 0)
                      throw new r.SolanaError(
                        r.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY,
                        { codecDescription: e }
                      );
                  }),
                  (n.assertByteArrayOffsetIsNotOutOfRange = h),
                  (n.assertIsFixedSize = d),
                  (n.assertIsVariableSize = function (e) {
                    if (!_(e))
                      throw new r.SolanaError(r.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH);
                  }),
                  (n.combineCodec = T),
                  (n.containsBytes = s),
                  (n.createCodec = p),
                  (n.createDecoder = u),
                  (n.createEncoder = c),
                  (n.fixBytes = o),
                  (n.fixCodecSize = function (e, t) {
                    return T(R(e, t), A(e, t));
                  }),
                  (n.fixDecoderSize = A),
                  (n.fixEncoderSize = R),
                  (n.getEncodedSize = a),
                  (n.isFixedSize = l),
                  (n.isVariableSize = _),
                  (n.mergeBytes = e => {
                    const t = e.filter(e => e.length);
                    if (0 === t.length) return e.length ? e[0] : new Uint8Array();
                    if (1 === t.length) return t[0];
                    const n = t.reduce((e, t) => e + t.length, 0),
                      r = new Uint8Array(n);
                    let i = 0;
                    return (
                      t.forEach(e => {
                        r.set(e, i), (i += e.length);
                      }),
                      r
                    );
                  }),
                  (n.offsetCodec = function (e, t) {
                    return T(b(e, t), N(e, t));
                  }),
                  (n.offsetDecoder = N),
                  (n.offsetEncoder = b),
                  (n.padBytes = i),
                  (n.padLeftCodec = function (e, t) {
                    return T(P(e, t), D(e, t));
                  }),
                  (n.padLeftDecoder = D),
                  (n.padLeftEncoder = P),
                  (n.padRightCodec = function (e, t) {
                    return T(w(e, t), x(e, t));
                  }),
                  (n.padRightDecoder = x),
                  (n.padRightEncoder = w),
                  (n.resizeCodec = function (e, t) {
                    return T(C(e, t), v(e, t));
                  }),
                  (n.resizeDecoder = v),
                  (n.resizeEncoder = C),
                  (n.reverseCodec = function (e) {
                    return T(L(e), j(e));
                  }),
                  (n.reverseDecoder = j),
                  (n.reverseEncoder = L),
                  (n.transformCodec = function (e, t, n) {
                    return p({ ...U(e, t), read: n ? B(e, n).read : e.read });
                  }),
                  (n.transformDecoder = B),
                  (n.transformEncoder = U);
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller>@solana/addresses>@solana/codecs-core',
        file: 'node_modules/@solana/codecs-core/dist/index.browser.cjs',
      },
    ],
    [
      3297,
      { '@solana/codecs-core': 3296, '@solana/errors': 3298 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r = e('@solana/errors'),
                  i = e('@solana/codecs-core');
                function o(e, t, n = t) {
                  if (!t.match(new RegExp(`^[${e}]*$`)))
                    throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
                      alphabet: e,
                      base: e.length,
                      value: n,
                    });
                }
                var s = e =>
                    i.createEncoder({
                      getSizeFromValue: t => {
                        const [n, r] = u(t, e[0]);
                        if (!r) return t.length;
                        const i = p(r, e);
                        return n.length + Math.ceil(i.toString(16).length / 2);
                      },
                      write(t, n, r) {
                        if ((o(e, t), '' === t)) return r;
                        const [i, s] = u(t, e[0]);
                        if (!s) return n.set(new Uint8Array(i.length).fill(0), r), r + i.length;
                        let a = p(s, e);
                        const c = [];
                        for (; a > 0n; ) c.unshift(Number(a % 256n)), (a /= 256n);
                        const l = [...Array(i.length).fill(0), ...c];
                        return n.set(l, r), r + l.length;
                      },
                    }),
                  a = e =>
                    i.createDecoder({
                      read(t, n) {
                        const r = 0 === n ? t : t.slice(n);
                        if (0 === r.length) return ['', 0];
                        let i = r.findIndex(e => 0 !== e);
                        i = -1 === i ? r.length : i;
                        const o = e[0].repeat(i);
                        if (i === r.length) return [o, t.length];
                        const s = (function (e, t) {
                          const n = BigInt(t.length),
                            r = [];
                          for (; e > 0n; ) r.unshift(t[Number(e % n)]), (e /= n);
                          return r.join('');
                        })(
                          r.slice(i).reduce((e, t) => 256n * e + BigInt(t), 0n),
                          e
                        );
                        return [o + s, t.length];
                      },
                    }),
                  c = e => i.combineCodec(s(e), a(e));
                function u(e, t) {
                  const [n, r] = e.split(new RegExp(`((?!${t}).*)`));
                  return [n, r];
                }
                function p(e, t) {
                  const n = BigInt(t.length);
                  let r = 0n;
                  for (const i of e) (r *= n), (r += BigInt(t.indexOf(i)));
                  return r;
                }
                var l = '0123456789',
                  d = { alphabet: '0123456789abcdef', base: 16 };
                function _(e) {
                  return e >= 48 && e <= 57
                    ? e - 48
                    : e >= 65 && e <= 70
                      ? e - 55
                      : e >= 97 && e <= 102
                        ? e - 87
                        : void 0;
                }
                var T = () =>
                    i.createEncoder({
                      getSizeFromValue: e => Math.ceil(e.length / 2),
                      write(e, t, n) {
                        const i = e.length,
                          o = i / 2;
                        if (1 === i) {
                          const i = _(e.charCodeAt(0));
                          if (void 0 === i)
                            throw new r.SolanaError(
                              r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE,
                              { ...d, value: e }
                            );
                          return t.set([i], n), 1 + n;
                        }
                        const s = new Uint8Array(o);
                        for (let t = 0, n = 0; t < o; t++) {
                          const i = e.charCodeAt(n++),
                            o = e.charCodeAt(n++),
                            a = _(i),
                            c = _(o);
                          if (void 0 === a || (void 0 === c && !Number.isNaN(o)))
                            throw new r.SolanaError(
                              r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE,
                              { ...d, value: e }
                            );
                          s[t] = Number.isNaN(o) ? a : (a << 4) | (c ?? 0);
                        }
                        return t.set(s, n), s.length + n;
                      },
                    }),
                  y = () =>
                    i.createDecoder({
                      read: (e, t) => [
                        e.slice(t).reduce((e, t) => e + t.toString(16).padStart(2, '0'), ''),
                        e.length,
                      ],
                    }),
                  E = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
                  m = (e, t) =>
                    i.createEncoder({
                      getSizeFromValue: e => Math.floor((e.length * t) / 8),
                      write(n, r, i) {
                        if ((o(e, n), '' === n)) return i;
                        const s = S(
                          [...n].map(t => e.indexOf(t)),
                          t,
                          8,
                          !1
                        );
                        return r.set(s, i), s.length + i;
                      },
                    }),
                  g = (e, t) =>
                    i.createDecoder({
                      read(n, r = 0) {
                        const i = 0 === r ? n : n.slice(r);
                        if (0 === i.length) return ['', n.length];
                        return [
                          S([...i], 8, t, !0)
                            .map(t => e[t])
                            .join(''),
                          n.length,
                        ];
                      },
                    });
                function S(e, t, n, r) {
                  const i = [];
                  let o = 0,
                    s = 0;
                  const a = (1 << n) - 1;
                  for (const r of e)
                    for (o = (o << t) | r, s += t; s >= n; ) (s -= n), i.push((o >> s) & a);
                  return r && s > 0 && i.push((o << (n - s)) & a), i;
                }
                var h = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                  O = () =>
                    i.createEncoder({
                      getSizeFromValue: e => {
                        try {
                          return atob(e).length;
                        } catch {
                          throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
                            alphabet: h,
                            base: 64,
                            value: e,
                          });
                        }
                      },
                      write(e, t, n) {
                        try {
                          const r = atob(e)
                            .split('')
                            .map(e => e.charCodeAt(0));
                          return t.set(r, n), r.length + n;
                        } catch {
                          throw new r.SolanaError(r.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
                            alphabet: h,
                            base: 64,
                            value: e,
                          });
                        }
                      },
                    }),
                  f = () =>
                    i.createDecoder({
                      read(e, t = 0) {
                        const n = e.slice(t);
                        return [btoa(String.fromCharCode(...n)), e.length];
                      },
                    }),
                  R = e => e.replace(/\u0000/g, ''),
                  A = globalThis.TextDecoder,
                  b = globalThis.TextEncoder,
                  N = () => {
                    let e;
                    return i.createEncoder({
                      getSizeFromValue: t => (e || (e = new b())).encode(t).length,
                      write: (t, n, r) => {
                        const i = (e || (e = new b())).encode(t);
                        return n.set(i, r), r + i.length;
                      },
                    });
                  },
                  I = () => {
                    let e;
                    return i.createDecoder({
                      read(t, n) {
                        const r = (e || (e = new A())).decode(t.slice(n));
                        return [R(r), t.length];
                      },
                    });
                  };
                (n.assertValidBaseString = o),
                  (n.getBase10Codec = () => c(l)),
                  (n.getBase10Decoder = () => a(l)),
                  (n.getBase10Encoder = () => s(l)),
                  (n.getBase16Codec = () => i.combineCodec(T(), y())),
                  (n.getBase16Decoder = y),
                  (n.getBase16Encoder = T),
                  (n.getBase58Codec = () => c(E)),
                  (n.getBase58Decoder = () => a(E)),
                  (n.getBase58Encoder = () => s(E)),
                  (n.getBase64Codec = () => i.combineCodec(O(), f())),
                  (n.getBase64Decoder = f),
                  (n.getBase64Encoder = O),
                  (n.getBaseXCodec = c),
                  (n.getBaseXDecoder = a),
                  (n.getBaseXEncoder = s),
                  (n.getBaseXResliceCodec = (e, t) => i.combineCodec(m(e, t), g(e, t))),
                  (n.getBaseXResliceDecoder = g),
                  (n.getBaseXResliceEncoder = m),
                  (n.getUtf8Codec = () => i.combineCodec(N(), I())),
                  (n.getUtf8Decoder = I),
                  (n.getUtf8Encoder = N),
                  (n.padNullCharacters = (e, t) => e.padEnd(t, '\0')),
                  (n.removeNullCharacters = R);
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller>@solana/addresses>@solana/codecs-strings',
        file: 'node_modules/@solana/codecs-strings/dist/index.browser.cjs',
      },
    ],
    [
      3298,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                function r(e, t, n) {
                  return (
                    (t = (function (e) {
                      var t = (function (e, t) {
                        if ('object' != typeof e || !e) return e;
                        var n = e[Symbol.toPrimitive];
                        if (void 0 !== n) {
                          var r = n.call(e, t || 'default');
                          if ('object' != typeof r) return r;
                          throw new TypeError('@@toPrimitive must return a primitive value.');
                        }
                        return ('string' === t ? String : Number)(e);
                      })(e, 'string');
                      return 'symbol' == typeof t ? t : t + '';
                    })(t)) in e
                      ? Object.defineProperty(e, t, {
                          value: n,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (e[t] = n),
                    e
                  );
                }
                var i = -32700,
                  o = -32603,
                  s = -32602,
                  a = -32601,
                  c = -32600,
                  u = -32016,
                  p = -32015,
                  l = -32014,
                  d = -32013,
                  _ = -32012,
                  T = -32011,
                  y = -32010,
                  E = -32009,
                  m = -32008,
                  g = -32007,
                  S = -32006,
                  h = -32005,
                  O = -32004,
                  f = -32003,
                  R = -32002,
                  A = -32001,
                  b = 28e5,
                  N = 2800001,
                  I = 2800002,
                  C = 2800003,
                  v = 2800004,
                  P = 2800005,
                  w = 2800006,
                  D = 2800007,
                  x = 2800008,
                  M = 2800009,
                  L = 2800010,
                  j = 323e4,
                  U = 32300001,
                  B = 3230002,
                  k = 3230003,
                  F = 3230004,
                  z = 361e4,
                  G = 3610001,
                  H = 3610002,
                  V = 3610003,
                  $ = 3610004,
                  W = 3610005,
                  q = 3610006,
                  K = 3610007,
                  Y = 3611e3,
                  X = 3704e3,
                  J = 3704001,
                  Q = 3704002,
                  Z = 3704003,
                  ee = 3704004,
                  te = 4128e3,
                  ne = 4128001,
                  re = 4128002,
                  ie = 4615e3,
                  oe = 4615001,
                  se = 4615002,
                  ae = 4615003,
                  ce = 4615004,
                  ue = 4615005,
                  pe = 4615006,
                  le = 4615007,
                  de = 4615008,
                  _e = 4615009,
                  Te = 4615010,
                  ye = 4615011,
                  Ee = 4615012,
                  me = 4615013,
                  ge = 4615014,
                  Se = 4615015,
                  he = 4615016,
                  Oe = 4615017,
                  fe = 4615018,
                  Re = 4615019,
                  Ae = 4615020,
                  be = 4615021,
                  Ne = 4615022,
                  Ie = 4615023,
                  Ce = 4615024,
                  ve = 4615025,
                  Pe = 4615026,
                  we = 4615027,
                  De = 4615028,
                  xe = 4615029,
                  Me = 4615030,
                  Le = 4615031,
                  je = 4615032,
                  Ue = 4615033,
                  Be = 4615034,
                  ke = 4615035,
                  Fe = 4615036,
                  ze = 4615037,
                  Ge = 4615038,
                  He = 4615039,
                  Ve = 4615040,
                  $e = 4615041,
                  We = 4615042,
                  qe = 4615043,
                  Ke = 4615044,
                  Ye = 4615045,
                  Xe = 4615046,
                  Je = 4615047,
                  Qe = 4615048,
                  Ze = 4615049,
                  et = 4615050,
                  tt = 4615051,
                  nt = 4615052,
                  rt = 4615053,
                  it = 4615054,
                  ot = 5508e3,
                  st = 5508001,
                  at = 5508002,
                  ct = 5508003,
                  ut = 5508004,
                  pt = 5508005,
                  lt = 5508006,
                  dt = 5508007,
                  _t = 5508008,
                  Tt = 5508009,
                  yt = 5508010,
                  Et = 5508011,
                  mt = 5663e3,
                  gt = 5663001,
                  St = 5663002,
                  ht = 5663003,
                  Ot = 5663004,
                  ft = 5663005,
                  Rt = 5663006,
                  At = 5663007,
                  bt = 5663008,
                  Nt = 5663009,
                  It = 5663010,
                  Ct = 5663011,
                  vt = 5663012,
                  Pt = 5663013,
                  wt = 5663014,
                  Dt = 5663015,
                  xt = 5663016,
                  Mt = 5663017,
                  Lt = 5663018,
                  jt = 5663019,
                  Ut = 705e4,
                  Bt = 7050001,
                  kt = 7050002,
                  Ft = 7050003,
                  zt = 7050004,
                  Gt = 7050005,
                  Ht = 7050006,
                  Vt = 7050007,
                  $t = 7050008,
                  Wt = 7050009,
                  qt = 7050010,
                  Kt = 7050011,
                  Yt = 7050012,
                  Xt = 7050013,
                  Jt = 7050014,
                  Qt = 7050015,
                  Zt = 7050016,
                  en = 7050017,
                  tn = 7050018,
                  nn = 7050019,
                  rn = 7050020,
                  on = 7050021,
                  sn = 7050022,
                  an = 7050023,
                  cn = 7050024,
                  un = 7050025,
                  pn = 7050026,
                  ln = 7050027,
                  dn = 7050028,
                  _n = 7050029,
                  Tn = 7050030,
                  yn = 7050031,
                  En = 7050032,
                  mn = 7050033,
                  gn = 7050034,
                  Sn = 7050035,
                  hn = 7050036,
                  On = 8078e3,
                  fn = 8078001,
                  Rn = 8078002,
                  An = 8078003,
                  bn = 8078004,
                  Nn = 8078005,
                  In = 8078006,
                  Cn = 8078007,
                  vn = 8078008,
                  Pn = 8078009,
                  wn = 8078010,
                  Dn = 8078011,
                  xn = 8078012,
                  Mn = 8078013,
                  Ln = 8078014,
                  jn = 8078015,
                  Un = 8078016,
                  Bn = 8078017,
                  kn = 8078018,
                  Fn = 8078019,
                  zn = 8078020,
                  Gn = 8078021,
                  Hn = 8078022,
                  Vn = 81e5,
                  $n = 8100001,
                  Wn = 8100002,
                  qn = 8100003,
                  Kn = 819e4,
                  Yn = 8190001,
                  Xn = 8190002,
                  Jn = 8190003,
                  Qn = 8190004,
                  Zn = 99e5,
                  er = 9900001,
                  tr = 9900002,
                  nr = 9900003,
                  rr = 9900004;
                function ir(e) {
                  if (Array.isArray(e)) {
                    return '%5B' + e.map(ir).join('%2C%20') + '%5D';
                  }
                  return 'bigint' == typeof e
                    ? `${e}n`
                    : encodeURIComponent(
                        String(null != e && null === Object.getPrototypeOf(e) ? { ...e } : e)
                      );
                }
                function or([e, t]) {
                  return `${e}=${ir(t)}`;
                }
                function sr(e, t = {}) {
                  {
                    let n = `Solana error #${e}; Decode this error by running \`npx @solana/errors decode -- ${e}`;
                    return (
                      Object.keys(t).length &&
                        (n += ` '${(function (e) {
                          const t = Object.entries(e).map(or).join('&');
                          return btoa(t);
                        })(t)}'`),
                      `${n}\``
                    );
                  }
                }
                var ar = class extends Error {
                  constructor(...[e, t]) {
                    let n, i;
                    if (t) {
                      const { cause: e, ...r } = t;
                      e && (i = { cause: e }), Object.keys(r).length > 0 && (n = r);
                    }
                    super(sr(e, n), i),
                      r(this, 'cause', this.cause),
                      r(this, 'context', void 0),
                      (this.context = { __code: e, ...n }),
                      (this.name = 'SolanaError');
                  }
                };
                function cr(...e) {
                  'captureStackTrace' in Error &&
                    'function' == typeof Error.captureStackTrace &&
                    Error.captureStackTrace(...e);
                }
                function ur(
                  {
                    errorCodeBaseOffset: e,
                    getErrorContext: t,
                    orderedErrorNames: n,
                    rpcEnumError: r,
                  },
                  i
                ) {
                  let o, s;
                  'string' == typeof r ? (o = r) : ((o = Object.keys(r)[0]), (s = r[o]));
                  const a = e + n.indexOf(o),
                    c = t(a, o, s),
                    u = new ar(a, c);
                  return cr(u, i), u;
                }
                var pr = [
                  'GenericError',
                  'InvalidArgument',
                  'InvalidInstructionData',
                  'InvalidAccountData',
                  'AccountDataTooSmall',
                  'InsufficientFunds',
                  'IncorrectProgramId',
                  'MissingRequiredSignature',
                  'AccountAlreadyInitialized',
                  'UninitializedAccount',
                  'UnbalancedInstruction',
                  'ModifiedProgramId',
                  'ExternalAccountLamportSpend',
                  'ExternalAccountDataModified',
                  'ReadonlyLamportChange',
                  'ReadonlyDataModified',
                  'DuplicateAccountIndex',
                  'ExecutableModified',
                  'RentEpochModified',
                  'NotEnoughAccountKeys',
                  'AccountDataSizeChanged',
                  'AccountNotExecutable',
                  'AccountBorrowFailed',
                  'AccountBorrowOutstanding',
                  'DuplicateAccountOutOfSync',
                  'Custom',
                  'InvalidError',
                  'ExecutableDataModified',
                  'ExecutableLamportChange',
                  'ExecutableAccountNotRentExempt',
                  'UnsupportedProgramId',
                  'CallDepth',
                  'MissingAccount',
                  'ReentrancyNotAllowed',
                  'MaxSeedLengthExceeded',
                  'InvalidSeeds',
                  'InvalidRealloc',
                  'ComputationalBudgetExceeded',
                  'PrivilegeEscalation',
                  'ProgramEnvironmentSetupFailure',
                  'ProgramFailedToComplete',
                  'ProgramFailedToCompile',
                  'Immutable',
                  'IncorrectAuthority',
                  'BorshIoError',
                  'AccountNotRentExempt',
                  'InvalidAccountOwner',
                  'ArithmeticOverflow',
                  'UnsupportedSysvar',
                  'IllegalOwner',
                  'MaxAccountsDataAllocationsExceeded',
                  'MaxAccountsExceeded',
                  'MaxInstructionTraceLengthExceeded',
                  'BuiltinProgramsMustConsumeComputeUnits',
                ];
                function lr(e, t) {
                  const n = Number(e);
                  return ur(
                    {
                      errorCodeBaseOffset: 4615001,
                      getErrorContext: (e, t, r) =>
                        e === ie
                          ? {
                              errorName: t,
                              index: n,
                              ...(void 0 !== r ? { instructionErrorContext: r } : null),
                            }
                          : e === Pe
                            ? { code: Number(r), index: n }
                            : e === Ye
                              ? { encodedData: r, index: n }
                              : { index: n },
                      orderedErrorNames: pr,
                      rpcEnumError: t,
                    },
                    lr
                  );
                }
                var dr = [
                  'AccountInUse',
                  'AccountLoadedTwice',
                  'AccountNotFound',
                  'ProgramAccountNotFound',
                  'InsufficientFundsForFee',
                  'InvalidAccountForFee',
                  'AlreadyProcessed',
                  'BlockhashNotFound',
                  'CallChainTooDeep',
                  'MissingSignatureForFee',
                  'InvalidAccountIndex',
                  'SignatureFailure',
                  'InvalidProgramForExecution',
                  'SanitizeFailure',
                  'ClusterMaintenance',
                  'AccountBorrowOutstanding',
                  'WouldExceedMaxBlockCostLimit',
                  'UnsupportedVersion',
                  'InvalidWritableAccount',
                  'WouldExceedMaxAccountCostLimit',
                  'WouldExceedAccountDataBlockLimit',
                  'TooManyAccountLocks',
                  'AddressLookupTableNotFound',
                  'InvalidAddressLookupTableOwner',
                  'InvalidAddressLookupTableData',
                  'InvalidAddressLookupTableIndex',
                  'InvalidRentPayingAccount',
                  'WouldExceedMaxVoteCostLimit',
                  'WouldExceedAccountDataTotalLimit',
                  'DuplicateInstruction',
                  'InsufficientFundsForRent',
                  'MaxLoadedAccountsDataSizeExceeded',
                  'InvalidLoadedAccountsDataSizeLimit',
                  'ResanitizationNeeded',
                  'ProgramExecutionTemporarilyRestricted',
                  'UnbalancedTransaction',
                ];
                function _r(e) {
                  return 'object' == typeof e && 'InstructionError' in e
                    ? lr(...e.InstructionError)
                    : ur(
                        {
                          errorCodeBaseOffset: 7050001,
                          getErrorContext: (e, t, n) =>
                            e === Ut
                              ? {
                                  errorName: t,
                                  ...(void 0 !== n ? { transactionErrorContext: n } : null),
                                }
                              : e === Tn
                                ? { index: Number(n) }
                                : e === yn || e === Sn
                                  ? { accountIndex: Number(n.account_index) }
                                  : void 0,
                          orderedErrorNames: dr,
                          rpcEnumError: e,
                        },
                        _r
                      );
                }
                (n.SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = j),
                  (n.SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = F),
                  (n.SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = k),
                  (n.SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = B),
                  (n.SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = U),
                  (n.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = M),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = I),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = b),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = C),
                  (n.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = x),
                  (n.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = v),
                  (n.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = w),
                  (n.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = D),
                  (n.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = P),
                  (n.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = L),
                  (n.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = N),
                  (n.SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4),
                  (n.SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1),
                  (n.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = On),
                  (n.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS = Hn),
                  (n.SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL = zn),
                  (n.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = Nn),
                  (n.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = In),
                  (n.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = bn),
                  (n.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = vn),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = Rn),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = Mn),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = An),
                  (n.SOLANA_ERROR__CODECS__EXPECTED_ZERO_VALUE_TO_MATCH_ITEM_FIXED_SIZE = Fn),
                  (n.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = fn),
                  (n.SOLANA_ERROR__CODECS__INVALID_CONSTANT = kn),
                  (n.SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT = Pn),
                  (n.SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT = wn),
                  (n.SOLANA_ERROR__CODECS__INVALID_LITERAL_UNION_VARIANT = jn),
                  (n.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = Cn),
                  (n.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = xn),
                  (n.SOLANA_ERROR__CODECS__LITERAL_UNION_DISCRIMINATOR_OUT_OF_RANGE = Un),
                  (n.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = Dn),
                  (n.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = Ln),
                  (n.SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES = Gn),
                  (n.SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE = Bn),
                  (n.SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED = Y),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = _e),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = Ie),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = Ce),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = be),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = ue),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = Ne),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = Xe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = Qe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = Ye),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS =
                    it),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = je),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = Ge),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = Pe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = Oe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = ve),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = Me),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = De),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = xe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = fe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = ge),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = me),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = oe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = et),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = qe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = Ke),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = le),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = pe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = ce),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = Je),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = se),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = we),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = ae),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = ze),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = Fe),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = tt),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = nt),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = rt),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = ke),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = Ue),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = de),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = Ee),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = Ae),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = He),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = Ve),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = We),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = $e),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = he),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = Se),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = Be),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = Re),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = ye),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = Te),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = ie),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = Le),
                  (n.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = Ze),
                  (n.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = te),
                  (n.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = ne),
                  (n.SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = re),
                  (n.SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5),
                  (n.SOLANA_ERROR__INVALID_NONCE = 2),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING =
                    tr),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__DATA_PUBLISHER_CHANNEL_UNIMPLEMENTED = rr),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE =
                    er),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_STATE_MISSING = Zn),
                  (n.SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = nr),
                  (n.SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = o),
                  (n.SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = s),
                  (n.SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = c),
                  (n.SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = a),
                  (n.SOLANA_ERROR__JSON_RPC__PARSE_ERROR = i),
                  (n.SOLANA_ERROR__JSON_RPC__SCAN_ERROR = _),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = A),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = O),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = l),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = y),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = E),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = u),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = h),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = m),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = R),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = g),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = T),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE =
                    S),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = d),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE =
                    f),
                  (n.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = p),
                  (n.SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = X),
                  (n.SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = J),
                  (n.SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = Q),
                  (n.SOLANA_ERROR__KEYS__PUBLIC_KEY_MUST_MATCH_PRIVATE_KEY = ee),
                  (n.SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = Z),
                  (n.SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6),
                  (n.SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7),
                  (n.SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8),
                  (n.SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_PLAN = Kn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CLOSED_BEFORE_MESSAGE_BUFFERED = Xn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CONNECTION_CLOSED = Jn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_FAILED_TO_CONNECT = Qn),
                  (n.SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = Yn),
                  (n.SOLANA_ERROR__RPC__API_PLAN_MISSING_FOR_RPC_METHOD = qn),
                  (n.SOLANA_ERROR__RPC__INTEGER_OVERFLOW = Vn),
                  (n.SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = Wn),
                  (n.SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = $n),
                  (n.SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = ot),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = st),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = ct),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = ut),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = at),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = lt),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = dt),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = _t),
                  (n.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = pt),
                  (n.SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = Tt),
                  (n.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = yt),
                  (n.SOLANA_ERROR__SIGNER__WALLET_MULTISIGN_UNIMPLEMENTED = Et),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__CANNOT_EXPORT_NON_EXTRACTABLE_KEY = K),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = G),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = z),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = H),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = V),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = $),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = W),
                  (n.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = q),
                  (n.SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = Zt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = Bt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = kt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = Ft),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = an),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = Vt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = $t),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = Wt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = Qt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = Tn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = Gt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = yn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = Ht),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = Kt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = un),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = pn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = cn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = mn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = Xt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = ln),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = nn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = En),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = qt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = zt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED =
                    Sn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = gn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = Jt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = Yt),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = sn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = hn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = Ut),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = tn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = on),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = _n),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = rn),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = en),
                  (n.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = dn),
                  (n.SOLANA_ERROR__TRANSACTION__ADDRESSES_CANNOT_SIGN_TRANSACTION = Dt),
                  (n.SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = It),
                  (n.SOLANA_ERROR__TRANSACTION__CANNOT_ENCODE_WITH_EMPTY_SIGNATURES = xt),
                  (n.SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = St),
                  (n.SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = ht),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING =
                    ft),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE =
                    Rt),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = bt),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND =
                    At),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT = Lt),
                  (n.SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT =
                    jt),
                  (n.SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = Ct),
                  (n.SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = vt),
                  (n.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE =
                    wt),
                  (n.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING =
                    Pt),
                  (n.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = mt),
                  (n.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = gt),
                  (n.SOLANA_ERROR__TRANSACTION__MESSAGE_SIGNATURES_MISMATCH = Mt),
                  (n.SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = Nt),
                  (n.SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = Ot),
                  (n.SolanaError = ar),
                  (n.getSolanaErrorFromInstructionError = lr),
                  (n.getSolanaErrorFromJsonRpcError = function e({ code: t, data: n, message: r }) {
                    let u;
                    const d = Number(t);
                    if (d === R) {
                      const { err: e, ...t } = n,
                        r = e ? { cause: _r(e) } : null;
                      u = new ar(R, { ...t, ...r });
                    } else {
                      let e;
                      switch (d) {
                        case o:
                        case s:
                        case c:
                        case a:
                        case i:
                        case _:
                        case A:
                        case O:
                        case l:
                        case y:
                        case E:
                        case g:
                        case S:
                        case p:
                          e = { __serverMessage: r };
                          break;
                        default:
                          'object' != typeof n || Array.isArray(n) || (e = n);
                      }
                      u = new ar(d, e);
                    }
                    return cr(u, e), u;
                  }),
                  (n.getSolanaErrorFromTransactionError = _r),
                  (n.isSolanaError = function (e, t) {
                    return (
                      !!(e instanceof Error && 'SolanaError' === e.name) &&
                      (void 0 === t || e.context.__code === t)
                    );
                  }),
                  (n.safeCaptureStackTrace = cr);
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller>@solana/addresses>@solana/errors',
        file: 'node_modules/@solana/errors/dist/index.browser.cjs',
      },
    ],
    [
      3299,
      { './utils': 3301, 'apg-js/src/apg-api/api': 3923, 'apg-js/src/apg-lib/node-exports': 3941 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r,
                  i =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.ParsedMessage = void 0);
                const o = i(e('apg-js/src/apg-api/api')),
                  s = i(e('apg-js/src/apg-lib/node-exports')),
                  a = e('./utils');
                class c {
                  static generateApi() {
                    const e = new o.default(
                      '\nsign-in-with-ethereum =\n    [ scheme "://" ] domain %s" wants you to sign in with your Ethereum account:" LF\n    address LF\n    LF\n    [ statement LF ]\n    LF\n    %s"URI: " URI LF\n    %s"Version: " version LF\n    %s"Chain ID: " chain-id LF\n    %s"Nonce: " nonce LF\n    %s"Issued At: " issued-at\n    [ LF %s"Expiration Time: " expiration-time ]\n    [ LF %s"Not Before: " not-before ]\n    [ LF %s"Request ID: " request-id ]\n    [ LF %s"Resources:"\n    resources ]\n\ndomain = authority\n\naddress = "0x" 40*40HEXDIG\n    ; Must also conform to captilization\n    ; checksum encoding specified in EIP-55\n    ; where applicable (EOAs).\n\nstatement = 1*( reserved / unreserved / " " )\n    ; The purpose is to exclude LF (line breaks).\n\nversion = "1"\n\nnonce = 8*( ALPHA / DIGIT )\n\nissued-at = date-time\nexpiration-time = date-time\nnot-before = date-time\n\nrequest-id = *pchar\n\nchain-id = 1*DIGIT\n    ; See EIP-155 for valid CHAIN_IDs.\n\nresources = *( LF resource )\n\nresource = "- " URI\n\n; ------------------------------------------------------------------------------\n; RFC 3986\n\nURI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ]\n\nhier-part     = "//" authority path-abempty\n              / path-absolute\n              / path-rootless\n              / path-empty\n\nscheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )\n\nauthority     = [ userinfo "@" ] host [ ":" port ]\nuserinfo      = *( unreserved / pct-encoded / sub-delims / ":" )\nhost          = IP-literal / IPv4address / reg-name\nport          = *DIGIT\n\nIP-literal    = "[" ( IPv6address / IPvFuture  ) "]"\n\nIPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )\n\nIPv6address   =                            6( h16 ":" ) ls32\n              /                       "::" 5( h16 ":" ) ls32\n              / [               h16 ] "::" 4( h16 ":" ) ls32\n              / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32\n              / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32\n              / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32\n              / [ *4( h16 ":" ) h16 ] "::"              ls32\n              / [ *5( h16 ":" ) h16 ] "::"              h16\n              / [ *6( h16 ":" ) h16 ] "::"\n\nh16           = 1*4HEXDIG\nls32          = ( h16 ":" h16 ) / IPv4address\nIPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet\ndec-octet     = DIGIT                 ; 0-9\n                 / %x31-39 DIGIT         ; 10-99\n                 / "1" 2DIGIT            ; 100-199\n                 / "2" %x30-34 DIGIT     ; 200-249\n                 / "25" %x30-35          ; 250-255\n\nreg-name      = *( unreserved / pct-encoded / sub-delims )\n\npath-abempty  = *( "/" segment )\npath-absolute = "/" [ segment-nz *( "/" segment ) ]\npath-rootless = segment-nz *( "/" segment )\npath-empty    = 0pchar\n\nsegment       = *pchar\nsegment-nz    = 1*pchar\n\npchar         = unreserved / pct-encoded / sub-delims / ":" / "@"\n\nquery         = *( pchar / "/" / "?" )\n\nfragment      = *( pchar / "/" / "?" )\n\npct-encoded   = "%" HEXDIG HEXDIG\n\nunreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"\nreserved      = gen-delims / sub-delims\ngen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"\nsub-delims    = "!" / "$" / "&" / "\'" / "(" / ")"\n              / "*" / "+" / "," / ";" / "="\n\n; ------------------------------------------------------------------------------\n; RFC 3339\n\ndate-fullyear   = 4DIGIT\ndate-month      = 2DIGIT  ; 01-12\ndate-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                          ; month/year\ntime-hour       = 2DIGIT  ; 00-23\ntime-minute     = 2DIGIT  ; 00-59\ntime-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                          ; rules\ntime-secfrac    = "." 1*DIGIT\ntime-numoffset  = ("+" / "-") time-hour ":" time-minute\ntime-offset     = "Z" / time-numoffset\n\npartial-time    = time-hour ":" time-minute ":" time-second\n                  [time-secfrac]\nfull-date       = date-fullyear "-" date-month "-" date-mday\nfull-time       = partial-time time-offset\n\ndate-time       = full-date "T" full-time\n\n; ------------------------------------------------------------------------------\n; RFC 5234\n\nALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\nLF             =  %x0A\n                  ; linefeed\nDIGIT          =  %x30-39\n                  ; 0-9\nHEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"\n'
                    );
                    if ((e.generate(), e.errors.length))
                      throw (
                        (console.error(e.errorsToAscii()),
                        console.error(e.linesToAscii()),
                        console.log(e.displayAttributeErrors()),
                        new Error('ABNF grammar has errors'))
                      );
                    return e.toObject();
                  }
                }
                (r = c), (c.grammarObj = r.generateApi());
                n.ParsedMessage = class {
                  constructor(e) {
                    const t = new s.default.parser();
                    t.ast = new s.default.ast();
                    const n = s.default.ids;
                    t.ast.callbacks.scheme = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE &&
                          0 === r &&
                          (o.scheme = s.default.utils.charsToString(t, r, i)),
                        a
                      );
                    };
                    t.ast.callbacks.domain = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.domain = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks.address = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.address = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks.statement = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.statement = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks.uri = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE &&
                          (o.uri || (o.uri = s.default.utils.charsToString(t, r, i))),
                        a
                      );
                    };
                    t.ast.callbacks.version = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.version = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks['chain-id'] = function (e, t, r, i, o) {
                      const c = n.SEM_OK;
                      return (
                        e === n.SEM_PRE &&
                          (o.chainId = (0, a.parseIntegerNumber)(
                            s.default.utils.charsToString(t, r, i)
                          )),
                        c
                      );
                    };
                    t.ast.callbacks.nonce = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.nonce = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks['issued-at'] = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.issuedAt = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks['expiration-time'] = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE &&
                          (o.expirationTime = s.default.utils.charsToString(t, r, i)),
                        a
                      );
                    };
                    t.ast.callbacks['not-before'] = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.notBefore = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks['request-id'] = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE && (o.requestId = s.default.utils.charsToString(t, r, i)), a
                      );
                    };
                    t.ast.callbacks.resources = function (e, t, r, i, o) {
                      const a = n.SEM_OK;
                      return (
                        e === n.SEM_PRE &&
                          (o.resources = s.default.utils
                            .charsToString(t, r, i)
                            .slice(3)
                            .split('\n- ')),
                        a
                      );
                    };
                    const r = t.parse(c.grammarObj, 'sign-in-with-ethereum', e);
                    if (!r.success) throw new Error(`Invalid message: ${JSON.stringify(r)}`);
                    const i = {};
                    t.ast.translate(i);
                    for (const [e, t] of Object.entries(i)) this[e] = t;
                    if (0 === this.domain.length) throw new Error('Domain cannot be empty.');
                  }
                };
              };
            };
      },
      {
        package: '@metamask/controller-utils>@spruceid/siwe-parser',
        file: 'node_modules/@spruceid/siwe-parser/dist/abnf.js',
      },
    ],
    [
      3300,
      { './abnf': 3299, './utils': 3301 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.ParsedMessage = void 0);
                const o = e('./abnf');
                Object.defineProperty(n, 'ParsedMessage', {
                  enumerable: !0,
                  get: function () {
                    return o.ParsedMessage;
                  },
                }),
                  i(e('./utils'), n);
              };
            };
      },
      {
        package: '@metamask/controller-utils>@spruceid/siwe-parser',
        file: 'node_modules/@spruceid/siwe-parser/dist/parsers.js',
      },
    ],
    [
      3301,
      { '@noble/hashes/sha3': 3055, '@noble/hashes/utils': 3057 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.parseIntegerNumber = n.isEIP55Address = void 0);
                const r = e('@noble/hashes/sha3'),
                  i = e('@noble/hashes/utils');
                n.isEIP55Address = e => {
                  if (42 != e.length) return !1;
                  const t = `${e}`.toLowerCase().replace('0x', ''),
                    n = (0, i.bytesToHex)((0, r.keccak_256)(t));
                  let o = '0x';
                  for (let e = 0; e < t.length; e++)
                    parseInt(n[e], 16) >= 8 ? (o += t[e].toUpperCase()) : (o += t[e]);
                  return e === o;
                };
                n.parseIntegerNumber = e => {
                  const t = parseInt(e);
                  if (isNaN(t)) throw new Error('Invalid number.');
                  if (t === Infinity) throw new Error('Invalid number.');
                  return t;
                };
              };
            };
      },
      {
        package: '@metamask/controller-utils>@spruceid/siwe-parser',
        file: 'node_modules/@spruceid/siwe-parser/dist/utils.js',
      },
    ],
    [
      3302,
      { '@stablelib/int': 3303 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                var r = e('@stablelib/int');
                function i(e, t, n) {
                  return (
                    void 0 === t && (t = new Uint8Array(2)),
                    void 0 === n && (n = 0),
                    (t[n + 0] = e >>> 8),
                    (t[n + 1] = e >>> 0),
                    t
                  );
                }
                function o(e, t, n) {
                  return (
                    void 0 === t && (t = new Uint8Array(2)),
                    void 0 === n && (n = 0),
                    (t[n + 0] = e >>> 0),
                    (t[n + 1] = e >>> 8),
                    t
                  );
                }
                function s(e, t) {
                  return (
                    void 0 === t && (t = 0),
                    (e[t] << 24) | (e[t + 1] << 16) | (e[t + 2] << 8) | e[t + 3]
                  );
                }
                function a(e, t) {
                  return (
                    void 0 === t && (t = 0),
                    ((e[t] << 24) | (e[t + 1] << 16) | (e[t + 2] << 8) | e[t + 3]) >>> 0
                  );
                }
                function c(e, t) {
                  return (
                    void 0 === t && (t = 0),
                    (e[t + 3] << 24) | (e[t + 2] << 16) | (e[t + 1] << 8) | e[t]
                  );
                }
                function u(e, t) {
                  return (
                    void 0 === t && (t = 0),
                    ((e[t + 3] << 24) | (e[t + 2] << 16) | (e[t + 1] << 8) | e[t]) >>> 0
                  );
                }
                function p(e, t, n) {
                  return (
                    void 0 === t && (t = new Uint8Array(4)),
                    void 0 === n && (n = 0),
                    (t[n + 0] = e >>> 24),
                    (t[n + 1] = e >>> 16),
                    (t[n + 2] = e >>> 8),
                    (t[n + 3] = e >>> 0),
                    t
                  );
                }
                function l(e, t, n) {
                  return (
                    void 0 === t && (t = new Uint8Array(4)),
                    void 0 === n && (n = 0),
                    (t[n + 0] = e >>> 0),
                    (t[n + 1] = e >>> 8),
                    (t[n + 2] = e >>> 16),
                    (t[n + 3] = e >>> 24),
                    t
                  );
                }
                function d(e, t, n) {
                  return (
                    void 0 === t && (t = new Uint8Array(8)),
                    void 0 === n && (n = 0),
                    p((e / 4294967296) >>> 0, t, n),
                    p(e >>> 0, t, n + 4),
                    t
                  );
                }
                function _(e, t, n) {
                  return (
                    void 0 === t && (t = new Uint8Array(8)),
                    void 0 === n && (n = 0),
                    l(e >>> 0, t, n),
                    l((e / 4294967296) >>> 0, t, n + 4),
                    t
                  );
                }
                (n.readInt16BE = function (e, t) {
                  return void 0 === t && (t = 0), (((e[t + 0] << 8) | e[t + 1]) << 16) >> 16;
                }),
                  (n.readUint16BE = function (e, t) {
                    return void 0 === t && (t = 0), ((e[t + 0] << 8) | e[t + 1]) >>> 0;
                  }),
                  (n.readInt16LE = function (e, t) {
                    return void 0 === t && (t = 0), (((e[t + 1] << 8) | e[t]) << 16) >> 16;
                  }),
                  (n.readUint16LE = function (e, t) {
                    return void 0 === t && (t = 0), ((e[t + 1] << 8) | e[t]) >>> 0;
                  }),
                  (n.writeUint16BE = i),
                  (n.writeInt16BE = i),
                  (n.writeUint16LE = o),
                  (n.writeInt16LE = o),
                  (n.readInt32BE = s),
                  (n.readUint32BE = a),
                  (n.readInt32LE = c),
                  (n.readUint32LE = u),
                  (n.writeUint32BE = p),
                  (n.writeInt32BE = p),
                  (n.writeUint32LE = l),
                  (n.writeInt32LE = l),
                  (n.readInt64BE = function (e, t) {
                    void 0 === t && (t = 0);
                    var n = s(e, t),
                      r = s(e, t + 4);
                    return 4294967296 * n + r - 4294967296 * (r >> 31);
                  }),
                  (n.readUint64BE = function (e, t) {
                    return void 0 === t && (t = 0), 4294967296 * a(e, t) + a(e, t + 4);
                  }),
                  (n.readInt64LE = function (e, t) {
                    void 0 === t && (t = 0);
                    var n = c(e, t);
                    return 4294967296 * c(e, t + 4) + n - 4294967296 * (n >> 31);
                  }),
                  (n.readUint64LE = function (e, t) {
                    void 0 === t && (t = 0);
                    var n = u(e, t);
                    return 4294967296 * u(e, t + 4) + n;
                  }),
                  (n.writeUint64BE = d),
                  (n.writeInt64BE = d),
                  (n.writeUint64LE = _),
                  (n.writeInt64LE = _),
                  (n.readUintBE = function (e, t, n) {
                    if ((void 0 === n && (n = 0), e % 8 != 0))
                      throw new Error('readUintBE supports only bitLengths divisible by 8');
                    if (e / 8 > t.length - n)
                      throw new Error('readUintBE: array is too short for the given bitLength');
                    for (var r = 0, i = 1, o = e / 8 + n - 1; o >= n; o--)
                      (r += t[o] * i), (i *= 256);
                    return r;
                  }),
                  (n.readUintLE = function (e, t, n) {
                    if ((void 0 === n && (n = 0), e % 8 != 0))
                      throw new Error('readUintLE supports only bitLengths divisible by 8');
                    if (e / 8 > t.length - n)
                      throw new Error('readUintLE: array is too short for the given bitLength');
                    for (var r = 0, i = 1, o = n; o < n + e / 8; o++) (r += t[o] * i), (i *= 256);
                    return r;
                  }),
                  (n.writeUintBE = function (e, t, n, i) {
                    if (
                      (void 0 === n && (n = new Uint8Array(e / 8)),
                      void 0 === i && (i = 0),
                      e % 8 != 0)
                    )
                      throw new Error('writeUintBE supports only bitLengths divisible by 8');
                    if (!r.isSafeInteger(t))
                      throw new Error('writeUintBE value must be an integer');
                    for (var o = 1, s = e / 8 + i - 1; s >= i; s--)
                      (n[s] = (t / o) & 255), (o *= 256);
                    return n;
                  }),
                  (n.writeUintLE = function (e, t, n, i) {
                    if (
                      (void 0 === n && (n = new Uint8Array(e / 8)),
                      void 0 === i && (i = 0),
                      e % 8 != 0)
                    )
                      throw new Error('writeUintLE supports only bitLengths divisible by 8');
                    if (!r.isSafeInteger(t))
                      throw new Error('writeUintLE value must be an integer');
                    for (var o = 1, s = i; s < i + e / 8; s++) (n[s] = (t / o) & 255), (o *= 256);
                    return n;
                  }),
                  (n.readFloat32BE = function (e, t) {
                    return (
                      void 0 === t && (t = 0),
                      new DataView(e.buffer, e.byteOffset, e.byteLength).getFloat32(t)
                    );
                  }),
                  (n.readFloat32LE = function (e, t) {
                    return (
                      void 0 === t && (t = 0),
                      new DataView(e.buffer, e.byteOffset, e.byteLength).getFloat32(t, !0)
                    );
                  }),
                  (n.readFloat64BE = function (e, t) {
                    return (
                      void 0 === t && (t = 0),
                      new DataView(e.buffer, e.byteOffset, e.byteLength).getFloat64(t)
                    );
                  }),
                  (n.readFloat64LE = function (e, t) {
                    return (
                      void 0 === t && (t = 0),
                      new DataView(e.buffer, e.byteOffset, e.byteLength).getFloat64(t, !0)
                    );
                  }),
                  (n.writeFloat32BE = function (e, t, n) {
                    return (
                      void 0 === t && (t = new Uint8Array(4)),
                      void 0 === n && (n = 0),
                      new DataView(t.buffer, t.byteOffset, t.byteLength).setFloat32(n, e),
                      t
                    );
                  }),
                  (n.writeFloat32LE = function (e, t, n) {
                    return (
                      void 0 === t && (t = new Uint8Array(4)),
                      void 0 === n && (n = 0),
                      new DataView(t.buffer, t.byteOffset, t.byteLength).setFloat32(n, e, !0),
                      t
                    );
                  }),
                  (n.writeFloat64BE = function (e, t, n) {
                    return (
                      void 0 === t && (t = new Uint8Array(8)),
                      void 0 === n && (n = 0),
                      new DataView(t.buffer, t.byteOffset, t.byteLength).setFloat64(n, e),
                      t
                    );
                  }),
                  (n.writeFloat64LE = function (e, t, n) {
                    return (
                      void 0 === t && (t = new Uint8Array(8)),
                      void 0 === n && (n = 0),
                      new DataView(t.buffer, t.byteOffset, t.byteLength).setFloat64(n, e, !0),
                      t
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller>siwe>@stablelib/random>@stablelib/binary',
        file: 'node_modules/@stablelib/binary/lib/binary.js',
      },
    ],
    [
      3303,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.mul =
                    Math.imul ||
                    function (e, t) {
                      var n = 65535 & e,
                        r = 65535 & t;
                      return (
                        (n * r +
                          (((((e >>> 16) & 65535) * r + n * ((t >>> 16) & 65535)) << 16) >>> 0)) |
                        0
                      );
                    }),
                  (n.add = function (e, t) {
                    return (e + t) | 0;
                  }),
                  (n.sub = function (e, t) {
                    return (e - t) | 0;
                  }),
                  (n.rotl = function (e, t) {
                    return (e << t) | (e >>> (32 - t));
                  }),
                  (n.rotr = function (e, t) {
                    return (e << (32 - t)) | (e >>> t);
                  }),
                  (n.isInteger =
                    Number.isInteger ||
                    function (e) {
                      return 'number' == typeof e && isFinite(e) && Math.floor(e) === e;
                    }),
                  (n.MAX_SAFE_INTEGER = 9007199254740991),
                  (n.isSafeInteger = function (e) {
                    return n.isInteger(e) && e >= -n.MAX_SAFE_INTEGER && e <= n.MAX_SAFE_INTEGER;
                  });
              };
            };
      },
      {
        package:
          '@metamask/profile-sync-controller>siwe>@stablelib/random>@stablelib/binary>@stablelib/int',
        file: 'node_modules/@stablelib/int/lib/int.js',
      },
    ],
    [
      3304,
      { './source/system': 3307, '@stablelib/binary': 3302, '@stablelib/wipe': 3308 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.randomStringForEntropy =
                    n.randomString =
                    n.randomUint32 =
                    n.randomBytes =
                    n.defaultRandomSource =
                      void 0);
                const r = e('./source/system'),
                  i = e('@stablelib/binary'),
                  o = e('@stablelib/wipe');
                function s(e, t = n.defaultRandomSource) {
                  return t.randomBytes(e);
                }
                (n.defaultRandomSource = new r.SystemRandomSource()),
                  (n.randomBytes = s),
                  (n.randomUint32 = function (e = n.defaultRandomSource) {
                    const t = s(4, e),
                      r = (0, i.readUint32LE)(t);
                    return (0, o.wipe)(t), r;
                  });
                const a = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
                function c(e, t = a, r = n.defaultRandomSource) {
                  if (t.length < 2) throw new Error('randomString charset is too short');
                  if (t.length > 256) throw new Error('randomString charset is too long');
                  let i = '';
                  const c = t.length,
                    u = 256 - (256 % c);
                  for (; e > 0; ) {
                    const n = s(Math.ceil((256 * e) / u), r);
                    for (let r = 0; r < n.length && e > 0; r++) {
                      const o = n[r];
                      o < u && ((i += t.charAt(o % c)), e--);
                    }
                    (0, o.wipe)(n);
                  }
                  return i;
                }
                (n.randomString = c),
                  (n.randomStringForEntropy = function (e, t = a, r = n.defaultRandomSource) {
                    return c(Math.ceil(e / (Math.log(t.length) / Math.LN2)), t, r);
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller>siwe>@stablelib/random',
        file: 'node_modules/@stablelib/random/lib/random.js',
      },
    ],
    [
      3305,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.BrowserRandomSource = void 0);
                n.BrowserRandomSource = class {
                  constructor() {
                    (this.isAvailable = !1), (this.isInstantiated = !1);
                    const e = 'undefined' != typeof self ? self.crypto || self.msCrypto : null;
                    e &&
                      e.getRandomValues !== undefined &&
                      ((this._crypto = e), (this.isAvailable = !0), (this.isInstantiated = !0));
                  }
                  randomBytes(e) {
                    if (!this.isAvailable || !this._crypto)
                      throw new Error('Browser random byte generator is not available.');
                    const t = new Uint8Array(e);
                    for (let e = 0; e < t.length; e += 65536)
                      this._crypto.getRandomValues(
                        t.subarray(e, e + Math.min(t.length - e, 65536))
                      );
                    return t;
                  }
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller>siwe>@stablelib/random',
        file: 'node_modules/@stablelib/random/lib/source/browser.js',
      },
    ],
    [
      3306,
      { '@stablelib/wipe': 3308, crypto: 4091 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.NodeRandomSource = void 0);
                const r = e('@stablelib/wipe');
                n.NodeRandomSource = class {
                  constructor() {
                    if (((this.isAvailable = !1), (this.isInstantiated = !1), void 0 !== e)) {
                      const t = e('crypto');
                      t &&
                        t.randomBytes &&
                        ((this._crypto = t), (this.isAvailable = !0), (this.isInstantiated = !0));
                    }
                  }
                  randomBytes(e) {
                    if (!this.isAvailable || !this._crypto)
                      throw new Error('Node.js random byte generator is not available.');
                    let t = this._crypto.randomBytes(e);
                    if (t.length !== e)
                      throw new Error('NodeRandomSource: got fewer bytes than requested');
                    const n = new Uint8Array(e);
                    for (let e = 0; e < n.length; e++) n[e] = t[e];
                    return (0, r.wipe)(t), n;
                  }
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller>siwe>@stablelib/random',
        file: 'node_modules/@stablelib/random/lib/source/node.js',
      },
    ],
    [
      3307,
      { './browser': 3305, './node': 3306 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.SystemRandomSource = void 0);
                const r = e('./browser'),
                  i = e('./node');
                n.SystemRandomSource = class {
                  constructor() {
                    return (
                      (this.isAvailable = !1),
                      (this.name = ''),
                      (this._source = new r.BrowserRandomSource()),
                      this._source.isAvailable
                        ? ((this.isAvailable = !0), void (this.name = 'Browser'))
                        : ((this._source = new i.NodeRandomSource()),
                          this._source.isAvailable
                            ? ((this.isAvailable = !0), void (this.name = 'Node'))
                            : void 0)
                    );
                  }
                  randomBytes(e) {
                    if (!this.isAvailable)
                      throw new Error('System random byte generator is not available.');
                    return this._source.randomBytes(e);
                  }
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller>siwe>@stablelib/random',
        file: 'node_modules/@stablelib/random/lib/source/system.js',
      },
    ],
    [
      3308,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.wipe = function (e) {
                    for (var t = 0; t < e.length; t++) e[t] = 0;
                    return e;
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller>siwe>@stablelib/random>@stablelib/wipe',
        file: 'node_modules/@stablelib/wipe/lib/wipe.js',
      },
    ],
    [
      3309,
      { './messageChannel/abstract': 3310, './storage': 3311, './systemInfo': 3312, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('tslib');
                r.__exportStar(e('./storage'), n),
                  r.__exportStar(e('./messageChannel/abstract'), n),
                  r.__exportStar(e('./systemInfo'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common',
        file: 'node_modules/@trezor/connect-common/lib/index.js',
      },
    ],
    [
      3310,
      { '@trezor/utils': 3624, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.AbstractMessageChannel = void 0);
                const r = e('tslib'),
                  i = e('@trezor/utils');
                class o extends i.TypedEmitter {
                  constructor({
                    sendFn: e,
                    channel: t,
                    logger: n,
                    lazyHandshake: r = !1,
                    legacyMode: i = !1,
                  }) {
                    super(),
                      (this.messagePromises = {}),
                      (this.messagesQueue = []),
                      (this.messageID = 0),
                      (this.isConnected = !1),
                      (this.handshakeMaxRetries = 5),
                      (this.handshakeRetryInterval = 2e3),
                      (this.channel = t),
                      (this.sendFn = e),
                      (this.lazyHandshake = r),
                      (this.legacyMode = i),
                      (this.logger = n);
                  }
                  init() {
                    return (
                      this.handshakeFinished ||
                        ((this.handshakeFinished = (0, i.createDeferred)()),
                        this.legacyMode &&
                          setTimeout(() => {
                            var e;
                            null === (e = this.handshakeFinished) || void 0 === e || e.resolve();
                          }, 500),
                        this.lazyHandshake || this.handshakeWithPeer()),
                      this.handshakeFinished.promise
                    );
                  }
                  handshakeWithPeer() {
                    var e;
                    return (
                      null === (e = this.logger) ||
                        void 0 === e ||
                        e.log(this.channel.here, 'handshake'),
                      (0, i.scheduleAction)(
                        () =>
                          r.__awaiter(this, void 0, void 0, function* () {
                            var e;
                            this.postMessage(
                              {
                                type: 'channel-handshake-request',
                                data: { success: !0, payload: undefined },
                              },
                              { usePromise: !1, useQueue: !1 }
                            ),
                              yield null === (e = this.handshakeFinished) || void 0 === e
                                ? void 0
                                : e.promise;
                          }),
                        { attempts: this.handshakeMaxRetries, timeout: this.handshakeRetryInterval }
                      )
                        .then(() => {
                          var e;
                          null === (e = this.logger) ||
                            void 0 === e ||
                            e.log(this.channel.here, 'handshake confirmed'),
                            this.messagesQueue.forEach(e => {
                              (e.channel = this.channel), this.sendFn(e);
                            }),
                            (this.messagesQueue = []);
                        })
                        .catch(() => {
                          var e;
                          null === (e = this.handshakeFinished) ||
                            void 0 === e ||
                            e.reject(new Error('handshake failed')),
                            (this.handshakeFinished = undefined);
                        })
                    );
                  }
                  onMessage(e) {
                    var t, n;
                    let i = e;
                    this.legacyMode &&
                      i.type === undefined &&
                      'data' in i &&
                      'object' == typeof i.data &&
                      null !== i.data &&
                      'type' in i.data &&
                      'string' == typeof i.data.type &&
                      (i = i.data);
                    const { channel: o, id: s, type: a } = i,
                      c = r.__rest(i, ['channel', 'id', 'type']);
                    if (!this.legacyMode) {
                      if (!(null == o ? void 0 : o.peer) || o.peer !== this.channel.here) return;
                      if (!(null == o ? void 0 : o.here) || this.channel.peer !== o.here) return;
                    }
                    if ('channel-handshake-request' === a)
                      return (
                        this.postMessage(
                          {
                            type: 'channel-handshake-confirm',
                            data: { success: !0, payload: undefined },
                          },
                          { usePromise: !1, useQueue: !1 }
                        ),
                        void (this.lazyHandshake && this.handshakeWithPeer())
                      );
                    if ('channel-handshake-confirm' === a)
                      return void (
                        null === (t = this.handshakeFinished) ||
                        void 0 === t ||
                        t.resolve(undefined)
                      );
                    this.messagePromises[s] &&
                      (this.messagePromises[s].resolve(Object.assign({ id: s }, c)),
                      delete this.messagePromises[s]);
                    const u = Object.keys(this.messagePromises).length;
                    u > 5 &&
                      (null === (n = this.logger) ||
                        void 0 === n ||
                        n.warn(`too many message promises (${u}). this feels unexpected!`)),
                      this.emit('message', i);
                  }
                  postMessage(e, { usePromise: t = !0, useQueue: n = !0 } = {}) {
                    if (((e.channel = this.channel), t)) {
                      this.messageID++,
                        (e.id = this.messageID),
                        (this.messagePromises[e.id] = (0, i.createDeferred)());
                      try {
                        this.sendFn(e);
                      } catch (t) {
                        n && this.messagesQueue.push(e);
                      }
                      return this.messagePromises[e.id].promise;
                    }
                    try {
                      this.sendFn(e);
                    } catch (t) {
                      n && this.messagesQueue.push(e);
                    }
                  }
                  resolveMessagePromises(e) {
                    Object.keys(this.messagePromises).forEach(t =>
                      this.messagePromises[t].resolve({ id: t, payload: e })
                    );
                  }
                  clear() {
                    this.handshakeFinished = undefined;
                  }
                }
                n.AbstractMessageChannel = o;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common',
        file: 'node_modules/@trezor/connect-common/lib/messageChannel/abstract.js',
      },
    ],
    [
      3311,
      { '@trezor/utils': 3624 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.storage = void 0);
                const r = e('@trezor/utils'),
                  i = 'storage_v2';
                let o = { origin: {} };
                const s = () => {
                  const e = localStorage.getItem(i);
                  return e ? JSON.parse(e) : { origin: {} };
                };
                class a extends r.TypedEmitter {
                  save(e, t = !1) {
                    if (!t && global.window)
                      try {
                        const t = e(s());
                        localStorage.setItem(i, JSON.stringify(t)), this.emit('changed', t);
                      } catch (t) {
                        console.warn('long term storage not available'), (o = e(o));
                      }
                    else o = e(o);
                  }
                  saveForOrigin(e, t, n = !1) {
                    this.save(n => {
                      var r;
                      return Object.assign(Object.assign({}, n), {
                        origin: Object.assign(Object.assign({}, n.origin), {
                          [t]: e((null === (r = n.origin) || void 0 === r ? void 0 : r[t]) || {}),
                        }),
                      });
                    }, n);
                  }
                  load(e = !1) {
                    var t;
                    if (
                      e ||
                      !(null ===
                        (t = null === global || void 0 === global ? void 0 : global.window) ||
                      void 0 === t
                        ? void 0
                        : t.localStorage)
                    )
                      return o;
                    try {
                      return s();
                    } catch (e) {
                      return console.warn('long term storage not available'), o;
                    }
                  }
                  loadForOrigin(e, t = !1) {
                    var n;
                    return (
                      (null === (n = this.load(t).origin) || void 0 === n ? void 0 : n[e]) || {}
                    );
                  }
                }
                const c = new a();
                n.storage = c;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common',
        file: 'node_modules/@trezor/connect-common/lib/storage.js',
      },
    ],
    [
      3312,
      { '@trezor/env-utils': 3372 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getSystemInfo = n.getInstallerPackage = void 0);
                const r = e('@trezor/env-utils');
                n.getInstallerPackage = () => {
                  const e = (0, r.getUserAgent)();
                  switch ((0, r.getOsFamily)()) {
                    case 'MacOS':
                      return 'mac';
                    case 'Windows':
                      return `win${e.match(/(Win64|WOW64)/) ? '64' : '32'}`;
                    case 'Linux':
                      return `${e.match(/CentOS|Fedora|Mandriva|Mageia|Red Hat|Scientific|SUSE/) ? 'rpm' : 'deb'}${e.match(/Linux i[3456]86/) ? '32' : '64'}`;
                  }
                };
                n.getSystemInfo = e => {
                  const t = (0, r.getBrowserName)(),
                    n = (0, r.getBrowserVersion)(),
                    i = t ? e[t.toLowerCase()] : undefined,
                    o = !!i && i.version > parseInt(n, 10),
                    s = 'mobile' === (0, r.getDeviceType)(),
                    a = !s || 'usb' in navigator,
                    c = !(!i || o || !a);
                  return {
                    os: { family: (0, r.getOsFamily)(), mobile: s },
                    browser: { supported: c, outdated: o },
                  };
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common',
        file: 'node_modules/@trezor/connect-common/lib/systemInfo.js',
      },
    ],
    [
      3313,
      { '@trezor/connect-common': 3309 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.ServiceWorkerWindowChannel = void 0);
                const r = e('@trezor/connect-common');
                class i extends r.AbstractMessageChannel {
                  constructor({
                    name: e,
                    channel: t,
                    logger: n,
                    lazyHandshake: r,
                    legacyMode: i,
                    allowSelfOrigin: o = !1,
                    currentId: s,
                  }) {
                    super({
                      channel: t,
                      sendFn: e => {
                        if (!this.port) throw new Error('port not assigned');
                        this.port.postMessage(e);
                      },
                      logger: n,
                      lazyHandshake: r,
                      legacyMode: i,
                    }),
                      (this.name = e),
                      (this.allowSelfOrigin = o),
                      (this.currentId = s),
                      this.connect();
                  }
                  connect() {
                    chrome.runtime.onConnect.addListener(e => {
                      var t, n, r, i;
                      e.name === this.name &&
                        (((null === (t = this.currentId) || void 0 === t ? void 0 : t.call(this)) &&
                          (null === (n = this.currentId) || void 0 === n
                            ? void 0
                            : n.call(this)) !==
                            (null ===
                              (i = null === (r = e.sender) || void 0 === r ? void 0 : r.tab) ||
                            void 0 === i
                              ? void 0
                              : i.id)) ||
                          ((this.port = e),
                          this.port.onMessage.addListener((e, { sender: t }) => {
                            var n, r, i, o, s;
                            if (!t)
                              return void (
                                null === (n = this.logger) ||
                                void 0 === n ||
                                n.error('service-worker-window', 'no sender')
                              );
                            const { origin: a } = t,
                              c = [
                                'https://connect.trezor.io',
                                'https://staging-connect.trezor.io',
                                'https://suite.corp.sldev.cz',
                                'https://dev.suite.sldev.cz',
                                'http://localhost:8088',
                              ],
                              u =
                                null ===
                                  (r =
                                    null === chrome || void 0 === chrome
                                      ? void 0
                                      : chrome.runtime) || void 0 === r
                                  ? void 0
                                  : r.id;
                            u && c.push(`chrome-extension://${u}`);
                            const p =
                              null ===
                                (i =
                                  null === chrome || void 0 === chrome ? void 0 : chrome.runtime) ||
                              void 0 === i
                                ? void 0
                                : i.getURL('');
                            p && c.push(p.slice(0, -1)),
                              a
                                ? c.includes(a)
                                  ? (a !== self.origin || this.allowSelfOrigin) && this.onMessage(e)
                                  : null === (s = this.logger) ||
                                    void 0 === s ||
                                    s.error(
                                      'connect-webextension/messageChannel/extensionPort/onMessage',
                                      'origin not whitelisted',
                                      a
                                    )
                                : null === (o = this.logger) ||
                                  void 0 === o ||
                                  o.error(
                                    'connect-webextension/messageChannel/extensionPort/onMessage',
                                    'no origin'
                                  );
                          })));
                    }),
                      (this.isConnected = !0);
                  }
                  disconnect() {
                    var e;
                    this.isConnected &&
                      (null === (e = this.port) || void 0 === e || e.disconnect(),
                      this.clear(),
                      (this.isConnected = !1));
                  }
                }
                n.ServiceWorkerWindowChannel = i;
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/channels/serviceworker-window.js',
      },
    ],
    [
      3314,
      { '@trezor/connect-common': 3309 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.WindowWindowChannel = void 0);
                const r = e('@trezor/connect-common');
                class i extends r.AbstractMessageChannel {
                  constructor({
                    windowHere: e,
                    windowPeer: t,
                    channel: n,
                    logger: r,
                    origin: i,
                    legacyMode: o,
                  }) {
                    super({
                      channel: n,
                      sendFn: e => {
                        var n;
                        null === (n = t()) || void 0 === n || n.postMessage(e, i);
                      },
                      logger: r,
                      legacyMode: o,
                    }),
                      (this._listener = this.listener.bind(this)),
                      (this._windowHere = e),
                      this.connect();
                  }
                  listener(e) {
                    const t = Object.assign(Object.assign({}, e.data), {
                      success: !0,
                      origin: e.origin,
                      payload: e.data.payload || {},
                      channel: e.data.channel || {
                        peer: this.channel.here,
                        here: this.channel.peer,
                      },
                    });
                    this.onMessage(t);
                  }
                  connect() {
                    this._windowHere.addEventListener('message', this._listener),
                      (this.isConnected = !0);
                  }
                  disconnect() {
                    this.isConnected &&
                      (this._windowHere.removeEventListener('message', this._listener),
                      (this.isConnected = !1));
                  }
                }
                n.WindowWindowChannel = i;
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/channels/window-window.js',
      },
    ],
    [
      3315,
      { '@trezor/connect/lib/data/connectSettings': 3333 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.parseConnectSettings = n.getEnv = void 0);
                const r = e('@trezor/connect/lib/data/connectSettings');
                n.getEnv = () => {
                  var e;
                  if (
                    'undefined' != typeof chrome &&
                    void 0 !==
                      (null === (e = chrome.runtime) || void 0 === e ? void 0 : e.onConnect)
                  )
                    return 'webextension';
                  if ('undefined' != typeof navigator) {
                    if (
                      'string' == typeof navigator.product &&
                      'reactnative' === navigator.product.toLowerCase()
                    )
                      return 'react-native';
                    if (navigator.userAgent.toLowerCase().indexOf(' electron/') > -1)
                      return 'electron';
                  }
                  return 'web';
                };
                n.parseConnectSettings = (e = {}) => {
                  var t;
                  const i = Object.assign({ popup: !0 }, e);
                  let o;
                  if (
                    ('undefined' != typeof window
                      ? (o = window.__TREZOR_CONNECT_SRC)
                      : 'undefined' != typeof global && (o = global.__TREZOR_CONNECT_SRC),
                    'string' == typeof o && ((i.connectSrc = o), (i.debug = !0)),
                    'undefined' != typeof window &&
                      'string' ==
                        typeof (null === (t = window.location) || void 0 === t ? void 0 : t.search))
                  ) {
                    const e = ((e, t) => {
                      const n = new URLSearchParams(e),
                        r = {};
                      return (
                        Array.from(n.entries()).forEach(([e, n]) => {
                          t.includes(e) && (r[e] = decodeURIComponent(n));
                        }),
                        r
                      );
                    })(window.location.search, ['trezor-connect-src']);
                    e['trezor-connect-src'] &&
                      ((i.debug = !0), (i.connectSrc = e['trezor-connect-src']));
                  }
                  return (
                    'string' != typeof e.env && (i.env = (0, n.getEnv)()),
                    (0, r.parseConnectSettings)(i)
                  );
                };
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/connectSettings.js',
      },
    ],
    [
      3316,
      {
        './inlineStyles': 3317,
        '@trezor/connect/lib/constants/errors': 3326,
        '@trezor/connect/lib/events': 3340,
        '@trezor/connect/lib/utils/debug': 3368,
        '@trezor/connect/lib/utils/urlUtils': 3370,
        '@trezor/utils': 3624,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.initIframeLogger =
                    n.clearTimeout =
                    n.postMessage =
                    n.init =
                    n.dispose =
                    n.error =
                    n.timeout =
                    n.initPromise =
                    n.origin =
                    n.instance =
                      void 0);
                const r = e('tslib'),
                  i = e('@trezor/utils'),
                  o = r.__importStar(e('@trezor/connect/lib/constants/errors')),
                  s = e('@trezor/connect/lib/events'),
                  a = e('@trezor/connect/lib/utils/urlUtils'),
                  c = e('@trezor/connect/lib/utils/debug'),
                  u = r.__importDefault(e('./inlineStyles'));
                (n.initPromise = (0, i.createDeferred)()), (n.timeout = 0);
                n.dispose = () => {
                  if (n.instance && n.instance.parentNode)
                    try {
                      n.instance.parentNode.removeChild(n.instance);
                    } catch (e) {}
                  (n.instance = null), (n.timeout = 0);
                };
                n.init = async e => {
                  n.initPromise = (0, i.createDeferred)();
                  const t = document.getElementById('trezorconnect');
                  let r;
                  if (
                    (t
                      ? (n.instance = t)
                      : ((n.instance = document.createElement('iframe')),
                        (n.instance.frameBorder = '0'),
                        (n.instance.width = '0px'),
                        (n.instance.height = '0px'),
                        (n.instance.style.position = 'absolute'),
                        (n.instance.style.display = 'none'),
                        (n.instance.style.border = '0px'),
                        (n.instance.style.width = '0px'),
                        (n.instance.style.height = '0px'),
                        (n.instance.id = 'trezorconnect')),
                    'web' === e.env)
                  ) {
                    const t = e.manifest ? JSON.stringify(e.manifest) : 'undefined',
                      n = `version=${e.version}&manifest=${encodeURIComponent(btoa(JSON.stringify(t)))}`;
                    r = `${e.iframeSrc}?${n}`;
                  } else r = e.iframeSrc;
                  n.instance.setAttribute('src', r),
                    navigator.usb && n.instance.setAttribute('allow', 'usb'),
                    (n.origin = (0, a.getOrigin)(n.instance.src)),
                    (n.timeout = window.setTimeout(() => {
                      n.initPromise.reject(o.TypedError('Init_IframeTimeout'));
                    }, 1e4));
                  const c = () => {
                    var t, r;
                    if (!n.instance)
                      return void n.initPromise.reject(o.TypedError('Init_IframeBlocked'));
                    try {
                      const e =
                        null === (t = n.instance.contentWindow) || void 0 === t
                          ? void 0
                          : t.location.origin;
                      if (!e || 'null' === e)
                        return (
                          window.clearTimeout(n.timeout),
                          (n.error = o.TypedError('Init_IframeBlocked')),
                          (0, n.dispose)(),
                          void n.initPromise.reject(n.error)
                        );
                    } catch (e) {}
                    let i;
                    'undefined' != typeof chrome &&
                      chrome.runtime &&
                      void 0 !== chrome.runtime.onConnect &&
                      (chrome.runtime.onConnect.addListener(() => {}), (i = chrome.runtime.id)),
                      null === (r = n.instance.contentWindow) ||
                        void 0 === r ||
                        r.postMessage(
                          { type: s.IFRAME.INIT, payload: { settings: e, extension: i } },
                          n.origin
                        ),
                      (n.instance.onload = null);
                  };
                  n.instance.attachEvent
                    ? n.instance.attachEvent('onload', c)
                    : (n.instance.onload = c),
                    document.body &&
                      (document.body.appendChild(n.instance),
                      (() => {
                        if (!n.instance) throw o.TypedError('Init_IframeBlocked');
                        const e = n.instance.ownerDocument,
                          t = e.head || e.getElementsByTagName('head')[0],
                          r = document.createElement('style');
                        r.setAttribute('type', 'text/css'),
                          r.setAttribute('id', 'TrezorConnectStylesheet'),
                          r.styleSheet
                            ? ((r.styleSheet.cssText = u.default), t.appendChild(r))
                            : (r.appendChild(document.createTextNode(u.default)), t.append(r));
                      })());
                  try {
                    await n.initPromise.promise;
                  } catch (e) {
                    throw (
                      (n.instance &&
                        (n.instance.parentNode && n.instance.parentNode.removeChild(n.instance),
                        (n.instance = null)),
                      e)
                    );
                  } finally {
                    window.clearTimeout(n.timeout), (n.timeout = 0);
                  }
                };
                n.postMessage = e => {
                  var t;
                  if (!n.instance) throw o.TypedError('Init_IframeBlocked');
                  null === (t = n.instance.contentWindow) ||
                    void 0 === t ||
                    t.postMessage(e, n.origin);
                };
                n.clearTimeout = () => {
                  window.clearTimeout(n.timeout);
                };
                n.initIframeLogger = () => {
                  (0, c.setLogWriter)(() => ({
                    add: e => {
                      (0, n.postMessage)({ type: s.IFRAME.LOG, payload: e });
                    },
                  }));
                };
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/iframe/index.js',
      },
    ],
    [
      3317,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                n.default =
                  '.trezorconnect-container{position:fixed!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-webkit-flex-direction:column!important;-ms-flex-direction:column!important;flex-direction:column!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important;z-index:10000!important;width:100%!important;height:100%!important;top:0!important;left:0!important;background:rgba(0,0,0,.35)!important;overflow:auto!important;padding:20px!important;margin:0!important}.trezorconnect-container .trezorconnect-window{position:relative!important;display:block!important;width:370px!important;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif!important;margin:auto!important;border-radius:3px!important;background-color:#fff!important;text-align:center!important;overflow:hidden!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head{text-align:left;padding:12px 24px!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-logo{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close{cursor:pointer!important;height:24px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close svg{fill:#757575;-webkit-transition:fill .3s ease-in-out!important;transition:fill .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close:hover svg{fill:#494949}.trezorconnect-container .trezorconnect-window .trezorconnect-body{padding:24px 24px 32px!important;background:#FBFBFB!important;border-top:1px solid #EBEBEB}.trezorconnect-container .trezorconnect-window .trezorconnect-body h3{color:#505050!important;font-size:16px!important;font-weight:500!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body p{margin:8px 0 24px!important;font-weight:400!important;color:#A9A9A9!important;font-size:12px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button{width:100%!important;padding:12px 24px!important;margin:0!important;border-radius:3px!important;font-size:14px!important;font-weight:300!important;cursor:pointer!important;background:#01B757!important;color:#fff!important;border:0!important;-webkit-transition:background-color .3s ease-in-out!important;transition:background-color .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:hover{background-color:#00AB51!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:active{background-color:#009546!important}/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0IiwiJHN0ZGluIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLHlCQUNJLFNBQUEsZ0JBQ0EsUUFBQSxzQkFDQSxRQUFBLHVCQUNBLFFBQUEsc0JBRUEsUUFBQSxlQUNBLG1CQUFBLG1CQUNBLHNCQUFBLGlCQUNBLHVCQUFBLGlCQUNBLG1CQUFBLGlCQUNBLGVBQUEsaUJBRUEsa0JBQUEsaUJBQ0Esb0JBQUEsaUJBQ0EsZUFBQSxpQkNmTSxZQUFhLGlCREFyQixRQUFTLGdCQWtCSCxNQUFBLGVBQ0EsT0FBQSxlQUNBLElBQUEsWUFDQSxLQUFBLFlBQ0EsV0FBQSwwQkFDQSxTQUFBLGVBQ0EsUUFBQSxlQUNBLE9BQUEsWUNkUiwrQ0RYRSxTQUFVLG1CQTZCQSxRQUFBLGdCQUNBLE1BQUEsZ0JBQ0EsWUFBQSxjQUFBLG1CQUFBLFdBQUEsT0FBQSxpQkFBQSxNQUFBLHFCQUNBLE9BQUEsZUNmVixjQUFlLGNEakJmLGlCQWlCRSxlQWtCWSxXQUFBLGlCQ2ZkLFNBQVUsaUJEbUJJLG1FQUNBLFdBQUEsS0NoQmQsUUFBUyxLQUFLLGVEeEJkLFFBQVMsc0JBMENTLFFBQUEsdUJBQ0EsUUFBQSxzQkNmbEIsUUFBUyxlRGlCSyxrQkE1QlosaUJBOEJvQixvQkFBQSxpQkNoQmxCLGVBQWdCLGlCRC9CWixZQWlCTixpQkFzQ1EsdUZBQ0EsaUJBQUEsRUNwQlYsYUFBYyxFRHBDVixTQUFVLEVBMkRBLEtBQUEsRUFFQSx3RkNwQmQsT0FBUSxrQkR6Q1IsT0FBUSxlQWlFTSw0RkFDQSxLQUFBLFFBQ0EsbUJBQUEsS0FBQSxJQUFBLHNCQ3BCZCxXQUFZLEtBQUssSUFBSyxzQkR3QlIsa0dBQ0EsS0FBQSxRQUVBLG1FQUNBLFFBQUEsS0FBQSxLQUFBLGVBQ0EsV0FBQSxrQkFDQSxXQUFBLElBQUEsTUFBQSxRQUVBLHNFQUNBLE1BQUEsa0JBQ0EsVUFBQSxlQ3JCZCxZQUFhLGNEd0JLLHFFQ3JCbEIsT0FBUSxJQUFJLEVBQUksZUR3QkYsWUFBQSxjQUNJLE1BQUEsa0JDdEJsQixVQUFXLGVBRWIsMEVBQ0UsTUFBTyxlQUNQLFFBQVMsS0FBSyxlQUNkLE9BQVEsWUFDUixjQUFlLGNBQ2YsVUFBVyxlQUNYLFlBQWEsY0FDYixPQUFRLGtCQUNSLFdBQVksa0JBQ1osTUFBTyxlQUNQLE9BQVEsWUFDUixtQkFBb0IsaUJBQWlCLElBQUssc0JBQzFDLFdBQVksaUJBQWlCLElBQUssc0JBRXBDLGdGQUNFLGlCQUFrQixrQkFFcEIsaUZBQ0UsaUJBQWtCIn0= */';
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/iframe/inlineStyles.js',
      },
    ],
    [
      3318,
      {
        '../connectSettings': 3315,
        '../iframe': 3316,
        '../popup': 3322,
        '../webusb/button': 3324,
        '@trezor/connect/lib/constants/errors': 3326,
        '@trezor/connect/lib/data/config': 3332,
        '@trezor/connect/lib/events': 3340,
        '@trezor/connect/lib/factory': 3348,
        '@trezor/connect/lib/utils/debug': 3368,
        '@trezor/utils/lib/createDeferredManager': 3610,
        events: 4465,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TrezorConnect = n.CoreInIframe = void 0);
                const r = e('tslib'),
                  i = r.__importDefault(e('events')),
                  o = r.__importStar(e('@trezor/connect/lib/constants/errors')),
                  s = e('@trezor/connect/lib/events'),
                  a = e('@trezor/connect/lib/factory'),
                  c = e('@trezor/connect/lib/utils/debug'),
                  u = e('@trezor/connect/lib/data/config'),
                  p = e('@trezor/utils/lib/createDeferredManager'),
                  l = r.__importStar(e('../iframe')),
                  d = r.__importStar(e('../popup')),
                  _ = r.__importDefault(e('../webusb/button')),
                  T = e('../connectSettings');
                class y {
                  constructor() {
                    (this.eventEmitter = new i.default()),
                      (this.boundHandleMessage = this.handleMessage.bind(this)),
                      (this.boundDispose = this.dispose.bind(this)),
                      (this._settings = (0, T.parseConnectSettings)()),
                      (this._log = (0, c.initLog)('@trezor/connect-web')),
                      (this._messagePromises = (0, p.createDeferredManager)({ initialId: 1 }));
                  }
                  initPopupManager() {
                    const e = new d.PopupManager(this._settings, { logger: this._log });
                    return (
                      e.on(s.POPUP.CLOSED, e => {
                        l.postMessage({ type: s.POPUP.CLOSED, payload: e ? { error: e } : null });
                      }),
                      e
                    );
                  }
                  manifest(e) {
                    this._settings = (0, T.parseConnectSettings)(
                      Object.assign(Object.assign({}, this._settings), { manifest: e })
                    );
                  }
                  dispose() {
                    return (
                      this.eventEmitter.removeAllListeners(),
                      l.dispose(),
                      (this._settings = (0, T.parseConnectSettings)()),
                      this._popupManager && this._popupManager.close(),
                      window.removeEventListener('message', this.boundHandleMessage),
                      window.removeEventListener('unload', this.boundDispose),
                      Promise.resolve(undefined)
                    );
                  }
                  cancel(e) {
                    this._popupManager && this._popupManager.emit(s.POPUP.CLOSED, e);
                  }
                  handleMessage(e) {
                    if (e.origin !== l.origin) return;
                    const t = (0, s.parseMessage)(e.data);
                    switch ((this._log.log('handleMessage', t), t.event)) {
                      case s.RESPONSE_EVENT: {
                        const { id: e = 0, success: n, payload: r, device: i } = t;
                        this._messagePromises.resolve(e, {
                          id: e,
                          success: n,
                          payload: r,
                          device: i,
                        }) || this._log.warn(`Unknown message id ${e}`);
                        break;
                      }
                      case s.DEVICE_EVENT:
                      case s.TRANSPORT_EVENT:
                      case s.BLOCKCHAIN_EVENT:
                        this.eventEmitter.emit(t.event, t),
                          this.eventEmitter.emit(t.type, t.payload);
                        break;
                      case s.UI_EVENT:
                        if (t.type === s.IFRAME.BOOTSTRAP) {
                          l.clearTimeout();
                          break;
                        }
                        t.type === s.IFRAME.LOADED && l.initPromise.resolve(),
                          t.type === s.IFRAME.ERROR && l.initPromise.reject(t.payload.error),
                          this.eventEmitter.emit(t.event, t),
                          this.eventEmitter.emit(t.type, t.payload);
                        break;
                      default:
                        this._log.log('Undefined message', e.data);
                    }
                  }
                  async init(e) {
                    var t, n;
                    if (l.instance) throw o.TypedError('Init_AlreadyInitialized');
                    if (
                      ((this._settings = (0, T.parseConnectSettings)(
                        Object.assign(Object.assign({}, this._settings), e)
                      )),
                      !this._settings.manifest)
                    )
                      throw o.TypedError('Init_ManifestMissing');
                    if (
                      ((null === (t = this._settings.transports) || void 0 === t
                        ? void 0
                        : t.length) ||
                        (this._settings.transports = ['BridgeTransport', 'WebUsbTransport']),
                      this._settings.lazyLoad)
                    )
                      this._settings.lazyLoad = !1;
                    else {
                      if (
                        (this._popupManager || (this._popupManager = this.initPopupManager()),
                        (this._log.enabled = !!this._settings.debug),
                        window.addEventListener('message', this.boundHandleMessage),
                        window.addEventListener('unload', this.boundDispose),
                        await l.init(this._settings),
                        'auto' === this._settings.coreMode)
                      ) {
                        const { promiseId: e, promise: t } = this._messagePromises.create();
                        this._log.debug('coreMode = auto, Checking bridge availability'),
                          l.postMessage({ id: e, type: s.TRANSPORT.GET_INFO });
                        const r = await t;
                        if (
                          (this._log.debug('Bridge availability response', r),
                          r.payload === undefined &&
                            navigator.usb &&
                            (null === (n = this._settings.transports) || void 0 === n
                              ? void 0
                              : n.includes('WebUsbTransport')))
                        )
                          throw o.TypedError('Transport_Missing');
                      }
                      !1 !== this._settings.sharedLogger && l.initIframeLogger();
                    }
                  }
                  async call(e) {
                    if (!l.instance && !l.timeout) {
                      if (
                        ((this._settings = (0, T.parseConnectSettings)(this._settings)),
                        !this._settings.manifest)
                      )
                        return (0, s.createErrorMessage)(o.TypedError('Init_ManifestMissing'));
                      this._popupManager || (this._popupManager = this.initPopupManager());
                      try {
                        await this.init(this._settings);
                      } catch (e) {
                        return (
                          this._popupManager && this._popupManager.clear(),
                          (0, s.createErrorMessage)(e)
                        );
                      }
                    }
                    if ((l.timeout && (await l.initPromise.promise), l.error))
                      return (0, s.createErrorMessage)(l.error);
                    this._settings.popup && this._popupManager && this._popupManager.request();
                    try {
                      const { promiseId: t, promise: n } = this._messagePromises.create();
                      l.postMessage({ id: t, type: s.IFRAME.CALL, payload: e });
                      const r = await n;
                      return r
                        ? (!r.success &&
                            'Device_CallInProgress' !== r.payload.code &&
                            this._popupManager &&
                            this._popupManager.unlock(),
                          r)
                        : (this._popupManager && this._popupManager.unlock(),
                          (0, s.createErrorMessage)(o.TypedError('Method_NoResponse')));
                    } catch (e) {
                      return (
                        this._log.error('__call error', e),
                        this._popupManager && this._popupManager.clear(!1),
                        (0, s.createErrorMessage)(e)
                      );
                    }
                  }
                  uiResponse(e) {
                    if (!l.instance) throw o.TypedError('Init_NotInitialized');
                    l.postMessage(e);
                  }
                  renderWebUSBButton(e) {
                    (0, _.default)(e, this._settings.webusbSrc);
                  }
                  async requestLogin(e) {
                    if ('function' == typeof e.callback) {
                      const { callback: t } = e,
                        n = async e => {
                          const { data: n } = e;
                          if (n && n.type === s.UI.LOGIN_CHALLENGE_REQUEST)
                            try {
                              const e = await t();
                              l.postMessage({ type: s.UI.LOGIN_CHALLENGE_RESPONSE, payload: e });
                            } catch (e) {
                              l.postMessage({
                                type: s.UI.LOGIN_CHALLENGE_RESPONSE,
                                payload: e.message,
                              });
                            }
                        };
                      window.addEventListener('message', n, !1);
                      const r = await this.call(
                        Object.assign(Object.assign({ method: 'requestLogin' }, e), {
                          asyncChallenge: !0,
                          callback: null,
                        })
                      );
                      return window.removeEventListener('message', n), r;
                    }
                    return this.call(Object.assign({ method: 'requestLogin' }, e));
                  }
                  disableWebUSB() {
                    if (!l.instance) throw o.TypedError('Init_NotInitialized');
                    l.postMessage({ type: s.TRANSPORT.DISABLE_WEBUSB });
                  }
                  async requestWebUSBDevice() {
                    try {
                      await window.navigator.usb.requestDevice({ filters: u.config.webusb }),
                        l.postMessage({ type: s.TRANSPORT.REQUEST_DEVICE });
                    } catch (e) {}
                  }
                }
                n.CoreInIframe = y;
                const E = new y();
                n.TrezorConnect = (0, a.factory)(
                  {
                    eventEmitter: E.eventEmitter,
                    init: E.init.bind(E),
                    call: E.call.bind(E),
                    manifest: E.manifest.bind(E),
                    requestLogin: E.requestLogin.bind(E),
                    uiResponse: E.uiResponse.bind(E),
                    cancel: E.cancel.bind(E),
                    dispose: E.dispose.bind(E),
                  },
                  {
                    renderWebUSBButton: E.renderWebUSBButton.bind(E),
                    disableWebUSB: E.disableWebUSB.bind(E),
                    requestWebUSBDevice: E.requestWebUSBDevice.bind(E),
                  }
                );
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/impl/core-in-iframe.js',
      },
    ],
    [
      3319,
      {
        '../connectSettings': 3315,
        '../popup': 3322,
        '@trezor/connect/lib/constants/errors': 3326,
        '@trezor/connect/lib/events': 3340,
        '@trezor/connect/lib/factory': 3348,
        '@trezor/connect/lib/utils/debug': 3368,
        '@trezor/utils': 3624,
        events: 4465,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TrezorConnect = n.CoreInPopup = void 0);
                const r = e('tslib'),
                  i = r.__importDefault(e('events')),
                  o = e('@trezor/connect/lib/events'),
                  s = r.__importStar(e('@trezor/connect/lib/constants/errors')),
                  a = e('@trezor/connect/lib/factory'),
                  c = e('@trezor/connect/lib/utils/debug'),
                  u = e('@trezor/utils'),
                  p = e('../connectSettings'),
                  l = r.__importStar(e('../popup'));
                class d {
                  constructor() {
                    (this.eventEmitter = new i.default()),
                      (this._settings = (0, p.parseConnectSettings)()),
                      (this.logger = (0, c.initLog)('@trezor/connect-web')),
                      (this.popupManagerLogger = (0, c.initLog)(
                        '@trezor/connect-web/popupManager'
                      ));
                  }
                  logWriterFactory(e) {
                    return {
                      add: t => {
                        e.channel.postMessage(
                          { event: o.UI_EVENT, type: o.IFRAME.LOG, payload: t },
                          { usePromise: !1, useQueue: !0 }
                        );
                      },
                    };
                  }
                  manifest(e) {
                    this._settings = (0, p.parseConnectSettings)(
                      Object.assign(Object.assign({}, this._settings), { manifest: e })
                    );
                  }
                  dispose() {
                    return (
                      this.eventEmitter.removeAllListeners(),
                      (this._settings = (0, p.parseConnectSettings)()),
                      this._popupManager && this._popupManager.close(),
                      Promise.resolve(undefined)
                    );
                  }
                  cancel(e) {
                    this._popupManager && this._popupManager.emit(o.POPUP.CLOSED, e);
                  }
                  init(e) {
                    var t, n;
                    const r = (0, p.parseConnectSettings)(Object.assign({}, this._settings)),
                      i = (0, p.parseConnectSettings)(
                        Object.assign(Object.assign({}, this._settings), e)
                      );
                    (null === (t = i.transports) || void 0 === t ? void 0 : t.length) ||
                      (i.transports = ['BridgeTransport', 'WebUsbTransport']),
                      (i.useCoreInPopup = !0),
                      'undefined' != typeof window &&
                        (null ===
                          (n = null === window || void 0 === window ? void 0 : window.location) ||
                        void 0 === n
                          ? void 0
                          : n.origin) &&
                        (i.origin = window.location.origin);
                    const o = JSON.stringify(r) === JSON.stringify(i);
                    if (
                      ((this._settings = i),
                      (this._popupManager && o) ||
                        (this._popupManager && this._popupManager.close(),
                        (this._popupManager = new l.PopupManager(this._settings, {
                          logger: this.popupManagerLogger,
                        })),
                        (0, c.setLogWriter)(() => this.logWriterFactory(this._popupManager))),
                      (this.logger.enabled = !!e.debug),
                      !this._settings.manifest)
                    )
                      throw s.TypedError('Init_ManifestMissing');
                    return this.logger.debug('initiated'), Promise.resolve();
                  }
                  async call(e) {
                    if ((this.logger.debug('call', e), !this._popupManager))
                      return (0, o.createErrorMessage)(s.TypedError('Init_NotInitialized'));
                    this._settings.popup && (await this._popupManager.request());
                    const t = (0, u.createDeferred)(),
                      n = () => {
                        this.logger.log('Popup closed during initialization'),
                          t.reject(s.TypedError('Method_Interrupted'));
                      };
                    this._popupManager.once(o.POPUP.CLOSED, n);
                    try {
                      this.logger.debug('call: popup initialing'),
                        await Promise.race([t.promise, this.callInit()]),
                        this.logger.debug('call: popup initialized');
                      const n = await this._popupManager.channel.postMessage({
                        type: o.IFRAME.CALL,
                        payload: e,
                      });
                      if ((this.logger.debug('call: response: ', n), n))
                        return (
                          this._popupManager && n.success && this._popupManager.clear(),
                          { success: n.success, payload: n.payload, device: n.device }
                        );
                      throw s.TypedError('Method_NoResponse');
                    } catch (e) {
                      return (
                        this.logger.error('call: error', e),
                        this._popupManager.clear(!1),
                        (0, o.createErrorMessage)(e)
                      );
                    } finally {
                      this._popupManager.removeListener(o.POPUP.CLOSED, n);
                    }
                  }
                  async callInit() {
                    var e, t;
                    if (!this._popupManager) throw s.TypedError('Init_NotInitialized');
                    await this._popupManager.channel.init(),
                      'webextension' === this._settings.env &&
                        (await (null === (e = this._popupManager.popupPromise) || void 0 === e
                          ? void 0
                          : e.promise),
                        this._popupManager.channel.postMessage({
                          type: o.POPUP.INIT,
                          payload: { settings: this._settings, useCore: !0 },
                        })),
                      await (null === (t = this._popupManager.handshakePromise) || void 0 === t
                        ? void 0
                        : t.promise);
                  }
                  uiResponse(e) {
                    var t, n;
                    const { type: r, payload: i } = e;
                    null ===
                      (n =
                        null === (t = this._popupManager) || void 0 === t ? void 0 : t.channel) ||
                      void 0 === n ||
                      n.postMessage({ event: o.UI_EVENT, type: r, payload: i });
                  }
                  renderWebUSBButton() {}
                  requestLogin() {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                  disableWebUSB() {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                  requestWebUSBDevice() {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                }
                n.CoreInPopup = d;
                const _ = new d();
                n.TrezorConnect = (0, a.factory)({
                  eventEmitter: _.eventEmitter,
                  init: _.init.bind(_),
                  call: _.call.bind(_),
                  manifest: _.manifest.bind(_),
                  requestLogin: _.requestLogin.bind(_),
                  uiResponse: _.uiResponse.bind(_),
                  cancel: _.cancel.bind(_),
                  dispose: _.dispose.bind(_),
                });
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/impl/core-in-popup.js',
      },
    ],
    [
      3320,
      {
        '../connectSettings': 3315,
        '@trezor/connect/lib/constants/errors': 3326,
        '@trezor/connect/lib/events': 3340,
        '@trezor/connect/lib/factory': 3348,
        '@trezor/utils': 3624,
        events: 4465,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TrezorConnect = n.CoreInSuiteDesktop = void 0);
                const r = e('tslib'),
                  i = r.__importDefault(e('events')),
                  o = e('@trezor/connect/lib/events'),
                  s = r.__importStar(e('@trezor/connect/lib/constants/errors')),
                  a = e('@trezor/connect/lib/factory'),
                  c = e('@trezor/utils'),
                  u = e('../connectSettings');
                class p {
                  constructor() {
                    (this.eventEmitter = new i.default()),
                      (this._settings = (0, u.parseConnectSettings)()),
                      (this.messages = (0, c.createDeferredManager)());
                  }
                  manifest(e) {
                    this._settings = (0, u.parseConnectSettings)(
                      Object.assign(Object.assign({}, this._settings), { manifest: e })
                    );
                  }
                  dispose() {
                    var e;
                    return (
                      this.eventEmitter.removeAllListeners(),
                      (this._settings = (0, u.parseConnectSettings)()),
                      null === (e = this.ws) || void 0 === e || e.close(),
                      Promise.resolve(undefined)
                    );
                  }
                  cancel(e) {}
                  async handshake() {
                    var e;
                    const { promise: t, promiseId: n } = this.messages.create(1e3);
                    null === (e = this.ws) ||
                      void 0 === e ||
                      e.send(JSON.stringify({ id: n, type: o.POPUP.HANDSHAKE }));
                    try {
                      await t;
                    } catch (e) {
                      throw (console.error(e), new Error('Handshake timed out'));
                    }
                  }
                  async init(e = {}) {
                    var t, n;
                    const r = (0, u.parseConnectSettings)(
                      Object.assign(Object.assign({}, this._settings), e)
                    );
                    (null === (t = r.transports) || void 0 === t ? void 0 : t.length) ||
                      (r.transports = ['BridgeTransport', 'WebUsbTransport']),
                      (this._settings = r),
                      null === (n = this.ws) || void 0 === n || n.close();
                    const i = (0, c.createDeferred)(1e3);
                    return (
                      (this.ws = new WebSocket('ws://localhost:21335/connect-ws')),
                      this.ws.addEventListener('opened', () => {
                        i.resolve();
                      }),
                      this.ws.addEventListener('error', () => {
                        i.reject(new Error('WebSocket error')),
                          this.messages.rejectAll(new Error('WebSocket error'));
                      }),
                      this.ws.addEventListener('message', e => {
                        try {
                          const t = JSON.parse(e.data);
                          this.messages.resolve(t.id, t);
                        } catch (e) {}
                      }),
                      this.ws.addEventListener('close', () => {
                        i.reject(new Error('WebSocket closed')),
                          this.messages.rejectAll(new Error('WebSocket closed'));
                      }),
                      this.ws.readyState !== WebSocket.OPEN &&
                        (setTimeout(() => {
                          var e;
                          (null === (e = this.ws) || void 0 === e ? void 0 : e.readyState) ===
                            WebSocket.OPEN && i.resolve();
                        }, 500),
                        await i.promise),
                      await this.handshake()
                    );
                  }
                  async call(e) {
                    var t;
                    try {
                      (this.ws && this.ws.readyState === WebSocket.OPEN) || (await this.init()),
                        await this.handshake();
                      const { promise: n, promiseId: r } = this.messages.create();
                      return (
                        null === (t = this.ws) ||
                          void 0 === t ||
                          t.send(JSON.stringify({ id: r, type: o.IFRAME.CALL, payload: e })),
                        n
                      );
                    } catch (e) {
                      return { success: !1, payload: { error: e.message } };
                    }
                  }
                  uiResponse(e) {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                  requestLogin() {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                  disableWebUSB() {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                  requestWebUSBDevice() {
                    throw s.TypedError('Method_InvalidPackage');
                  }
                  renderWebUSBButton() {}
                }
                n.CoreInSuiteDesktop = p;
                const l = new p();
                n.TrezorConnect = (0, a.factory)({
                  eventEmitter: l.eventEmitter,
                  init: l.init.bind(l),
                  call: l.call.bind(l),
                  manifest: l.manifest.bind(l),
                  requestLogin: l.requestLogin.bind(l),
                  uiResponse: l.uiResponse.bind(l),
                  cancel: l.cancel.bind(l),
                  dispose: l.dispose.bind(l),
                });
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/impl/core-in-suite-desktop.js',
      },
    ],
    [
      3321,
      {
        './connectSettings': 3315,
        './impl/core-in-iframe': 3318,
        './impl/core-in-popup': 3319,
        './impl/core-in-suite-desktop': 3320,
        '@trezor/connect/lib/exports': 3347,
        '@trezor/connect/lib/factory': 3348,
        '@trezor/connect/lib/impl/dynamic': 3349,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('tslib'),
                  i = e('@trezor/connect/lib/factory'),
                  o = e('@trezor/connect/lib/impl/dynamic'),
                  s = e('./impl/core-in-iframe'),
                  a = e('./impl/core-in-popup'),
                  c = e('./impl/core-in-suite-desktop'),
                  u = e('./connectSettings'),
                  p = ['Init_IframeBlocked', 'Init_IframeTimeout', 'Transport_Missing'],
                  l = new o.TrezorConnectDynamic({
                    implementations: [
                      { type: 'iframe', impl: new s.CoreInIframe() },
                      { type: 'core-in-popup', impl: new a.CoreInPopup() },
                      { type: 'core-in-suite-desktop', impl: new c.CoreInSuiteDesktop() },
                    ],
                    getInitTarget: e =>
                      'iframe' === e.coreMode
                        ? 'iframe'
                        : 'popup' === e.coreMode
                          ? 'core-in-popup'
                          : 'suite-desktop' === e.coreMode
                            ? 'core-in-suite-desktop'
                            : (e.coreMode &&
                                'auto' !== e.coreMode &&
                                console.warn(`Invalid coreMode: ${e.coreMode}`),
                              'iframe'),
                    handleErrorFallback: async e => {
                      var t, n, r, i, o;
                      const s = (0, u.getEnv)(),
                        a =
                          !1 ===
                            (null === (t = l.lastSettings) || void 0 === t ? void 0 : t.popup) ||
                          'webextension' === s,
                        c =
                          'auto' ===
                            (null === (n = l.lastSettings) || void 0 === n ? void 0 : n.coreMode) ||
                          (null === (r = l.lastSettings) || void 0 === r ? void 0 : r.coreMode) ===
                            undefined;
                      if (!a && c && p.includes(e)) {
                        const t = !(null === navigator || void 0 === navigator
                            ? void 0
                            : navigator.usb),
                          n =
                            !1 ===
                            (null ===
                              (o =
                                null === (i = l.lastSettings) || void 0 === i
                                  ? void 0
                                  : i.transports) || void 0 === o
                              ? void 0
                              : o.includes('WebUsbTransport'));
                        return (
                          ('Transport_Missing' !== e || (!t && !n)) &&
                          (await l.switchTarget('core-in-popup'), !0)
                        );
                      }
                      return !1;
                    },
                  }),
                  d = (0, i.factory)(
                    {
                      eventEmitter: l.eventEmitter,
                      init: l.init.bind(l),
                      call: l.call.bind(l),
                      manifest: l.manifest.bind(l),
                      requestLogin: l.requestLogin.bind(l),
                      uiResponse: l.uiResponse.bind(l),
                      cancel: l.cancel.bind(l),
                      dispose: l.dispose.bind(l),
                    },
                    {
                      renderWebUSBButton: l.getTarget().renderWebUSBButton.bind(l),
                      disableWebUSB: l.getTarget().disableWebUSB.bind(l),
                      requestWebUSBDevice: l.getTarget().requestWebUSBDevice.bind(l),
                    }
                  );
                (n.default = d), r.__exportStar(e('@trezor/connect/lib/exports'), n);
              };
            };
      },
      { package: '@trezor/connect-web', file: 'node_modules/@trezor/connect-web/lib/index.js' },
    ],
    [
      3322,
      {
        '../channels/serviceworker-window': 3313,
        '../channels/window-window': 3314,
        './showPopupRequest': 3323,
        '@trezor/connect/lib/data/version': 3334,
        '@trezor/connect/lib/events': 3340,
        '@trezor/connect/lib/utils/urlUtils': 3370,
        '@trezor/utils': 3624,
        events: 4465,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.PopupManager = void 0);
                const r = e('tslib').__importDefault(e('events')),
                  i = e('@trezor/utils'),
                  o = e('@trezor/connect/lib/events'),
                  s = e('@trezor/connect/lib/utils/urlUtils'),
                  a = e('@trezor/connect/lib/data/version'),
                  c = e('./showPopupRequest'),
                  u = e('../channels/serviceworker-window'),
                  p = e('../channels/window-window');
                class l extends r.default {
                  constructor(e, { logger: t }) {
                    var n;
                    if (
                      (super(),
                      (this.locked = !1),
                      (this.extensionTabId = 0),
                      (this.injectContentScript = e => {
                        chrome.permissions.getAll(t => {
                          var n;
                          (null === (n = t.permissions) || void 0 === n
                            ? void 0
                            : n.includes('scripting')) &&
                            (0, i.scheduleAction)(
                              () =>
                                chrome.scripting
                                  .executeScript({ target: { tabId: e }, func: () => {} })
                                  .then(() => {
                                    this.logger.debug('content script injected');
                                  })
                                  .catch(e => {
                                    throw (
                                      (this.logger.error('content script injection error', e), e)
                                    );
                                  }),
                              { attempts: new Array(3).fill({ timeout: 100 }) }
                            );
                        });
                      }),
                      (this.settings = e),
                      (this.origin = (0, s.getOrigin)(e.popupSrc)),
                      (this.logger = t),
                      this.isWebExtensionWithTab()
                        ? (this.channel = new u.ServiceWorkerWindowChannel({
                            name: 'trezor-connect',
                            channel: {
                              here: '@trezor/connect-webextension',
                              peer: '@trezor/connect-content-script',
                            },
                            logger: t,
                            currentId: () => {
                              var e, t;
                              if (
                                'tab' ===
                                (null === (e = this.popupWindow) || void 0 === e ? void 0 : e.mode)
                              )
                                return null === (t = this.popupWindow) || void 0 === t
                                  ? void 0
                                  : t.tab.id;
                            },
                            legacyMode: !this.settings.useCoreInPopup,
                          }))
                        : (this.channel = new p.WindowWindowChannel({
                            windowHere: window,
                            windowPeer: () => {
                              var e, t;
                              if (
                                'window' ===
                                (null === (e = this.popupWindow) || void 0 === e ? void 0 : e.mode)
                              )
                                return null === (t = this.popupWindow) || void 0 === t
                                  ? void 0
                                  : t.window;
                            },
                            channel: { here: '@trezor/connect-web', peer: '@trezor/connect-popup' },
                            logger: t,
                            origin: this.origin,
                            legacyMode: !this.settings.useCoreInPopup,
                          })),
                      this.settings.useCoreInPopup ||
                        ((this.iframeHandshakePromise = (0, i.createDeferred)(o.IFRAME.LOADED)),
                        (this.channelIframe = new p.WindowWindowChannel({
                          windowHere: window,
                          windowPeer: () => window,
                          channel: { here: '@trezor/connect-web', peer: '@trezor/connect-iframe' },
                          logger: t,
                          origin: this.origin,
                        })),
                        null === (n = this.channelIframe) ||
                          void 0 === n ||
                          n.on('message', this.handleMessage.bind(this))),
                      this.settings.useCoreInPopup)
                    )
                      return (
                        (this.handshakePromise = (0, i.createDeferred)()),
                        void this.channel.on('message', this.handleCoreMessage.bind(this))
                      );
                    this.isWebExtensionWithTab()
                      ? this.channel.on('message', this.handleExtensionMessage.bind(this))
                      : this.channel.on('message', this.handleMessage.bind(this)),
                      this.channel.init();
                  }
                  async request() {
                    var e, t, n, r, i, o;
                    if (
                      this.settings.useCoreInPopup &&
                      'tab' === (null === (e = this.popupWindow) || void 0 === e ? void 0 : e.mode)
                    ) {
                      (await ((o =
                        null ===
                          (n = null === (t = this.popupWindow) || void 0 === t ? void 0 : t.tab) ||
                        void 0 === n
                          ? void 0
                          : n.id),
                      new Promise(e => {
                        if (!o) return e(!1);
                        chrome.tabs.get(o, function () {
                          chrome.runtime.lastError ? e(!1) : e(!0);
                        });
                      }))) || this.clear();
                    }
                    if (this.locked)
                      return void ('tab' ===
                        (null === (r = this.popupWindow) || void 0 === r ? void 0 : r.mode) &&
                      this.popupWindow.tab.id
                        ? chrome.tabs.update(this.popupWindow.tab.id, { active: !0 })
                        : 'window' ===
                            (null === (i = this.popupWindow) || void 0 === i ? void 0 : i.mode) &&
                          this.popupWindow.window.focus());
                    this.popupWindow && !this.locked && this.close();
                    const s = this.open.bind(this);
                    this.locked = !0;
                    const a = 'webextension' === this.settings.env ? 1 : 850;
                    this.requestTimeout = setTimeout(() => {
                      (this.requestTimeout = undefined), s();
                    }, a);
                  }
                  unlock() {
                    this.locked = !1;
                  }
                  open() {
                    const e = this.settings.popupSrc;
                    this.popupPromise = (0, i.createDeferred)(o.POPUP.LOADED);
                    const t = this.buildPopupUrl(e);
                    this.openWrapper(t),
                      (this.closeInterval = setInterval(() => {
                        this.popupWindow &&
                          ('tab' === this.popupWindow.mode && this.popupWindow.tab.id
                            ? chrome.tabs.get(this.popupWindow.tab.id, e => {
                                e || (this.emitClosed(), this.clear());
                              })
                            : 'window' === this.popupWindow.mode &&
                              this.popupWindow.window.closed &&
                              (this.clear(), this.emitClosed()));
                      }, 500)),
                      this.settings.useCoreInPopup ||
                        (this.openTimeout = setTimeout(() => {
                          this.clear(),
                            (0, c.showPopupRequest)(this.open.bind(this), () => {
                              this.emitClosed();
                            });
                        }, 5e3));
                  }
                  buildPopupUrl(e) {
                    var t;
                    const n = new URLSearchParams();
                    return (
                      n.set('version', a.VERSION),
                      n.set('env', this.settings.env),
                      'webextension' === this.settings.env &&
                        (null ===
                          (t = null === chrome || void 0 === chrome ? void 0 : chrome.runtime) ||
                        void 0 === t
                          ? void 0
                          : t.id) &&
                        (n.set('extension-id', chrome.runtime.id),
                        n.set('cs-ver', a.CONTENT_SCRIPT_VERSION.toString())),
                      e + '?' + n.toString()
                    );
                  }
                  openWrapper(e) {
                    if (this.isWebExtensionWithTab())
                      chrome.windows.getCurrent(t => {
                        this.logger.debug('opening popup. currentWindow: ', t),
                          'normal' !== t.type
                            ? chrome.windows.create({ url: e }, e => {
                                chrome.tabs.query(
                                  { windowId: null == e ? void 0 : e.id, active: !0 },
                                  e => {
                                    (this.popupWindow = { mode: 'tab', tab: e[0] }),
                                      this.injectContentScript(e[0].id);
                                  }
                                );
                              })
                            : chrome.tabs.query({ currentWindow: !0, active: !0 }, t => {
                                (this.extensionTabId = t[0].id),
                                  chrome.tabs.create({ url: e, index: t[0].index + 1 }, e => {
                                    (this.popupWindow = { mode: 'tab', tab: e }),
                                      this.injectContentScript(e.id);
                                  });
                              });
                      });
                    else {
                      const t = window.open(e, 'modal');
                      if (!t) return;
                      this.popupWindow = { mode: 'window', window: t };
                    }
                    this.channel.isConnected || this.channel.connect();
                  }
                  handleCoreMessage(e) {
                    var t;
                    if (e.type === o.POPUP.BOOTSTRAP) this.channel.init();
                    else if (e.type === o.POPUP.LOADED)
                      this.handleMessage(e),
                        this.channel.postMessage({
                          type: o.POPUP.INIT,
                          payload: { settings: this.settings, useCore: !0 },
                        });
                    else if (e.type === o.POPUP.CORE_LOADED)
                      this.channel.postMessage({
                        type: o.POPUP.HANDSHAKE,
                        payload: { settings: this.settings },
                      }),
                        null === (t = this.handshakePromise) || void 0 === t || t.resolve();
                    else if (e.type === o.POPUP.CLOSED) this.emitClosed();
                    else if (e.type === o.POPUP.CONTENT_SCRIPT_LOADED) {
                      const { contentScriptVersion: t } = e.payload;
                      t !== a.CONTENT_SCRIPT_VERSION &&
                        console.warn(
                          `Content script version mismatch. Expected ${a.CONTENT_SCRIPT_VERSION}, got ${t}`
                        );
                    }
                  }
                  handleExtensionMessage(e) {
                    e.type === o.POPUP.ERROR ||
                    e.type === o.POPUP.LOADED ||
                    e.type === o.POPUP.BOOTSTRAP
                      ? this.handleMessage(e)
                      : e.type === o.POPUP.EXTENSION_USB_PERMISSIONS
                        ? chrome.tabs.query({ currentWindow: !0, active: !0 }, e => {
                            chrome.tabs.create(
                              { url: 'trezor-usb-permissions.html', index: e[0].index + 1 },
                              e => {}
                            );
                          })
                        : e.type === o.POPUP.CLOSE_WINDOW && this.clear();
                  }
                  handleMessage(e) {
                    var t, n;
                    if (e.type === o.IFRAME.LOADED)
                      null === (t = this.iframeHandshakePromise) ||
                        void 0 === t ||
                        t.resolve(e.payload);
                    else if (e.type === o.POPUP.BOOTSTRAP)
                      this.openTimeout && clearTimeout(this.openTimeout);
                    else if (e.type === o.POPUP.ERROR && this.popupWindow) {
                      const t =
                        e.payload && 'string' == typeof e.payload.error ? e.payload.error : null;
                      this.emit(o.POPUP.CLOSED, t ? `Popup error: ${t}` : null), this.clear();
                    } else
                      e.type === o.POPUP.LOADED
                        ? (this.openTimeout && clearTimeout(this.openTimeout),
                          this.popupPromise &&
                            (this.popupPromise.resolve(), (this.popupPromise = undefined)),
                          null === (n = this.iframeHandshakePromise) ||
                            void 0 === n ||
                            n.promise.then(e => {
                              this.channel.postMessage({
                                type: o.POPUP.INIT,
                                payload: Object.assign(Object.assign({}, e), {
                                  settings: this.settings,
                                }),
                              });
                            }))
                        : e.type === o.POPUP.CANCEL_POPUP_REQUEST
                          ? (clearTimeout(this.requestTimeout),
                            this.popupPromise && this.close(),
                            this.unlock())
                          : e.type === o.UI.CLOSE_UI_WINDOW && this.clear(!1);
                  }
                  clear(e = !0) {
                    (this.locked = !1),
                      (this.popupPromise = undefined),
                      (this.handshakePromise = (0, i.createDeferred)()),
                      this.channel && this.channel.disconnect(),
                      this.requestTimeout &&
                        (clearTimeout(this.requestTimeout), (this.requestTimeout = undefined)),
                      this.openTimeout &&
                        (clearTimeout(this.openTimeout), (this.openTimeout = undefined)),
                      this.closeInterval &&
                        (clearInterval(this.closeInterval), (this.closeInterval = undefined)),
                      e &&
                        this.extensionTabId &&
                        (chrome.tabs.update(this.extensionTabId, { active: !0 }),
                        (this.extensionTabId = 0));
                  }
                  close() {
                    var e;
                    if (this.popupWindow) {
                      if ((this.logger.debug('closing popup'), 'tab' === this.popupWindow.mode)) {
                        let e = chrome.runtime.lastError;
                        this.popupWindow.tab.id &&
                          chrome.tabs.remove(this.popupWindow.tab.id, () => {
                            (e = chrome.runtime.lastError),
                              e && this.logger.error('closed with error', e);
                          });
                      } else 'window' === this.popupWindow.mode && this.popupWindow.window.close();
                      (this.popupWindow = undefined),
                        (null === (e = this.settings) || void 0 === e
                          ? void 0
                          : e.useCoreInPopup) && this.channel.clear();
                    }
                  }
                  async postMessage(e) {
                    var t, n;
                    if (!this.popupWindow && e.type !== o.UI.REQUEST_UI_WINDOW && this.openTimeout)
                      return (
                        this.clear(),
                        void (0, c.showPopupRequest)(this.open.bind(this), () => {
                          this.emitClosed();
                        })
                      );
                    this.popupPromise && (await this.popupPromise.promise),
                      'window' ===
                      (null === (t = this.popupWindow) || void 0 === t ? void 0 : t.mode)
                        ? this.popupWindow.window.postMessage(e, this.origin)
                        : 'tab' ===
                            (null === (n = this.popupWindow) || void 0 === n ? void 0 : n.mode) &&
                          this.channel.postMessage(e);
                  }
                  isWebExtensionWithTab() {
                    var e;
                    return (
                      'webextension' ===
                        (null === (e = this.settings) || void 0 === e ? void 0 : e.env) &&
                      'undefined' != typeof chrome &&
                      void 0 !== (null === chrome || void 0 === chrome ? void 0 : chrome.tabs)
                    );
                  }
                  emitClosed() {
                    var e;
                    (null === (e = this.settings) || void 0 === e ? void 0 : e.useCoreInPopup) &&
                      this.channel.resolveMessagePromises({
                        code: 'Method_Interrupted',
                        error: o.POPUP.CLOSED,
                      }),
                      this.emit(o.POPUP.CLOSED);
                  }
                }
                n.PopupManager = l;
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/popup/index.js',
      },
    ],
    [
      3323,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.showPopupRequest = void 0);
                const r = 'TrezorConnectInteractionLayer',
                  i = `\n    <div class="trezorconnect-container" id="${r}">\n        <div class="trezorconnect-window">\n            <div class="trezorconnect-head">\n                <svg class="trezorconnect-logo" x="0px" y="0px" viewBox="0 0 163.7 41.9" width="78px" height="20px" preserveAspectRatio="xMinYMin meet">\n                    <polygon points="101.1,12.8 118.2,12.8 118.2,17.3 108.9,29.9 118.2,29.9 118.2,35.2 101.1,35.2 101.1,30.7 110.4,18.1 101.1,18.1"/>\n                    <path d="M158.8,26.9c2.1-0.8,4.3-2.9,4.3-6.6c0-4.5-3.1-7.4-7.7-7.4h-10.5v22.3h5.8v-7.5h2.2l4.1,7.5h6.7L158.8,26.9z M154.7,22.5 h-4V18h4c1.5,0,2.5,0.9,2.5,2.2C157.2,21.6,156.2,22.5,154.7,22.5z"/>\n                    <path d="M130.8,12.5c-6.8,0-11.6,4.9-11.6,11.5s4.9,11.5,11.6,11.5s11.7-4.9,11.7-11.5S137.6,12.5,130.8,12.5z M130.8,30.3 c-3.4,0-5.7-2.6-5.7-6.3c0-3.8,2.3-6.3,5.7-6.3c3.4,0,5.8,2.6,5.8,6.3C136.6,27.7,134.2,30.3,130.8,30.3z"/>\n                    <polygon points="82.1,12.8 98.3,12.8 98.3,18 87.9,18 87.9,21.3 98,21.3 98,26.4 87.9,26.4 87.9,30 98.3,30 98.3,35.2 82.1,35.2 "/>\n                    <path d="M24.6,9.7C24.6,4.4,20,0,14.4,0S4.2,4.4,4.2,9.7v3.1H0v22.3h0l14.4,6.7l14.4-6.7h0V12.9h-4.2V9.7z M9.4,9.7 c0-2.5,2.2-4.5,5-4.5s5,2,5,4.5v3.1H9.4V9.7z M23,31.5l-8.6,4l-8.6-4V18.1H23V31.5z"/>\n                    <path d="M79.4,20.3c0-4.5-3.1-7.4-7.7-7.4H61.2v22.3H67v-7.5h2.2l4.1,7.5H80l-4.9-8.3C77.2,26.1,79.4,24,79.4,20.3z M71,22.5h-4V18 h4c1.5,0,2.5,0.9,2.5,2.2C73.5,21.6,72.5,22.5,71,22.5z"/>\n                    <polygon points="40.5,12.8 58.6,12.8 58.6,18.1 52.4,18.1 52.4,35.2 46.6,35.2 46.6,18.1 40.5,18.1 "/>\n                </svg>\n                <div class="trezorconnect-close">\n                    <svg x="0px" y="0px" viewBox="24 24 60 60" width="24px" height="24px" preserveAspectRatio="xMinYMin meet">\n                        <polygon class="st0" points="40,67.9 42.1,70 55,57.1 67.9,70 70,67.9 57.1,55 70,42.1 67.9,40 55,52.9 42.1,40 40,42.1 52.9,55 "/>\n                    </svg>\n                </div>\n            </div>\n            <div class="trezorconnect-body">\n                <h3>Popup was blocked</h3>\n                <p>Please click to "Continue" to open popup manually</p>\n                <button class="trezorconnect-open">Continue</button>\n            </div>\n        </div>\n    </div>\n`;
                n.showPopupRequest = (e, t) => {
                  if (document.getElementById(r)) return;
                  const n = document.createElement('div');
                  (n.id = r),
                    (n.className = 'trezorconnect-container'),
                    (n.innerHTML = i),
                    document.body && document.body.appendChild(n);
                  n.getElementsByClassName('trezorconnect-open')[0].onclick = () => {
                    e(), document.body && document.body.removeChild(n);
                  };
                  n.getElementsByClassName('trezorconnect-close')[0].onclick = () => {
                    t(), document.body && document.body.removeChild(n);
                  };
                };
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/popup/showPopupRequest.js',
      },
    ],
    [
      3324,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                n.default = (e = '', t) => {
                  const n = e || '.trezor-webusb-button',
                    r = document.querySelectorAll(n),
                    i = `${t}?${Date.now()}`;
                  r.forEach(e => {
                    if (e.getElementsByTagName('iframe').length < 1) {
                      const t = e.getBoundingClientRect(),
                        n = document.createElement('iframe');
                      (n.frameBorder = '0'),
                        (n.width = `${Math.round(t.width)}px`),
                        (n.height = `${Math.round(t.height)}px`),
                        (n.style.position = 'absolute'),
                        (n.style.top = '0px'),
                        (n.style.left = '0px'),
                        (n.style.zIndex = '1'),
                        n.setAttribute('allow', 'usb'),
                        n.setAttribute('scrolling', 'no'),
                        (n.src = i),
                        e.append(n);
                    }
                  });
                };
              };
            };
      },
      {
        package: '@trezor/connect-web',
        file: 'node_modules/@trezor/connect-web/lib/webusb/button.js',
      },
    ],
    [
      3325,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r, i;
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.NETWORK_IDS = n.PROTOCOL_MAGICS = void 0),
                  (function (e) {
                    (e[(e.mainnet = 764824073)] = 'mainnet'),
                      (e[(e.testnet_preprod = 1)] = 'testnet_preprod'),
                      (e[(e.testnet_preview = 2)] = 'testnet_preview'),
                      (e[(e.testnet_legacy = 1097911063)] = 'testnet_legacy');
                  })(r || (n.PROTOCOL_MAGICS = r = {})),
                  (function (e) {
                    (e[(e.mainnet = 1)] = 'mainnet'), (e[(e.testnet = 0)] = 'testnet');
                  })(i || (n.NETWORK_IDS = i = {}));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/cardano.js',
      },
    ],
    [
      3326,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.LIBUSB_ERROR_MESSAGE =
                    n.serializeError =
                    n.TypedError =
                    n.TrezorError =
                    n.ERROR_CODES =
                      void 0),
                  (n.ERROR_CODES = {
                    Init_NotInitialized: 'TrezorConnect not initialized',
                    Init_AlreadyInitialized: 'TrezorConnect has been already initialized',
                    Init_IframeBlocked: 'Iframe blocked',
                    Init_IframeTimeout: 'Iframe timeout',
                    Init_ManifestMissing:
                      'Manifest not set. Read more at https://github.com/trezor/trezor-suite/blob/develop/docs/packages/connect/index.md',
                    Popup_ConnectionMissing: 'Unable to establish connection with iframe',
                    Transport_Missing: 'Transport is missing',
                    Transport_InvalidProtobuf: '',
                    Method_InvalidPackage:
                      'This package is not suitable to work with browser. Use @trezor/connect-web package instead',
                    Method_InvalidParameter: '',
                    Method_NotAllowed: 'Method not allowed for this configuration',
                    Method_PermissionsNotGranted: 'Permissions not granted',
                    Method_Cancel: 'Cancelled',
                    Method_Interrupted: 'Popup closed',
                    Method_UnknownCoin: 'Coin not found',
                    Method_AddressNotMatch: 'Addresses do not match',
                    Method_FirmwareUpdate_DownloadFailed: 'Failed to download firmware binary',
                    Method_Discovery_BundleException: '',
                    Method_Override: 'override',
                    Method_NoResponse: 'Call resolved without response',
                    Backend_NotSupported: 'BlockchainLink settings not found in coins.json',
                    Backend_WorkerMissing: '',
                    Backend_Disconnected: 'Backend disconnected',
                    Backend_Invalid: 'Invalid backend',
                    Backend_Error: '',
                    Runtime: '',
                    Device_NotFound: 'Device not found',
                    Device_InitializeFailed: '',
                    Device_FwException: '',
                    Device_ModeException: '',
                    Device_Disconnected: 'Device disconnected',
                    Device_UsedElsewhere: 'Device is used in another window',
                    Device_InvalidState: 'Passphrase is incorrect',
                    Device_CallInProgress: 'Device call in progress',
                    Device_MultipleNotSupported: 'Multiple devices are not supported',
                    Device_MissingCapability: 'Device is missing capability',
                    Device_MissingCapabilityBtcOnly: 'Device is missing capability (BTC only)',
                    Failure_ActionCancelled: 'Action cancelled by user',
                    Failure_FirmwareError: 'Firmware installation failed',
                    Failure_UnknownCode: 'Unknown error',
                    Failure_PinCancelled: 'PIN cancelled',
                    Failure_PinInvalid: 'PIN invalid',
                    Failure_PinMismatch: 'PIN mismatch',
                    Failure_WipeCodeMismatch: 'Wipe code mismatch',
                    Deeplink_VersionMismatch: 'Not compatible with current version of the app',
                  });
                class r extends Error {
                  constructor(e, t) {
                    super(t), (this.code = e), (this.message = t);
                  }
                }
                n.TrezorError = r;
                n.TypedError = (e, t) => new r(e, t || n.ERROR_CODES[e]);
                (n.serializeError = e =>
                  e && e.error instanceof Error
                    ? { error: e.error.message, code: e.error.code }
                    : e instanceof r
                      ? { error: e.message, code: e.code }
                      : e),
                  (n.LIBUSB_ERROR_MESSAGE = 'LIBUSB_ERROR');
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/errors.js',
      },
    ],
    [
      3327,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.REVISION_CHECK_RETRIABLE_ERRORS =
                    n.HASH_CHECK_RETRIABLE_ERRORS =
                    n.HASH_CHECK_MAX_ATTEMPTS =
                    n.FW_HASH_SUPPORTED_VERSIONS =
                      void 0),
                  (n.FW_HASH_SUPPORTED_VERSIONS = ['1.11.1', '2.5.1']),
                  (n.HASH_CHECK_MAX_ATTEMPTS = 3),
                  (n.HASH_CHECK_RETRIABLE_ERRORS = ['other-error']),
                  (n.REVISION_CHECK_RETRIABLE_ERRORS = [
                    'cannot-perform-check-offline',
                    'other-error',
                  ]);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/firmware.js',
      },
    ],
    [
      3328,
      {
        './cardano': 3325,
        './errors': 3326,
        './firmware': 3327,
        './nem': 3329,
        './network': 3330,
        './utxo': 3331,
        '@trezor/protobuf': 3376,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.PROTO =
                    n.DEFAULT_SORTING_STRATEGY =
                    n.FIRMWARE =
                    n.NEM =
                    n.CARDANO =
                    n.NETWORK =
                    n.ERRORS =
                      void 0);
                const r = e('tslib');
                (n.ERRORS = r.__importStar(e('./errors'))),
                  (n.NETWORK = r.__importStar(e('./network'))),
                  (n.CARDANO = r.__importStar(e('./cardano'))),
                  (n.NEM = r.__importStar(e('./nem'))),
                  (n.FIRMWARE = r.__importStar(e('./firmware')));
                var i = e('./utxo');
                Object.defineProperty(n, 'DEFAULT_SORTING_STRATEGY', {
                  enumerable: !0,
                  get: function () {
                    return i.DEFAULT_SORTING_STRATEGY;
                  },
                });
                var o = e('@trezor/protobuf');
                Object.defineProperty(n, 'PROTO', {
                  enumerable: !0,
                  get: function () {
                    return o.MessagesSchema;
                  },
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/index.js',
      },
    ],
    [
      3329,
      { '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.EnumTxVersion =
                    n.TxVersion =
                    n.EnumTxType =
                    n.TxType =
                    n.EnumNetworks =
                    n.Networks =
                      void 0);
                const r = e('@trezor/schema-utils');
                var i, o, s;
                !(function (e) {
                  (e[(e.mainnet = 104)] = 'mainnet'),
                    (e[(e.testnet = 152)] = 'testnet'),
                    (e[(e.mijin = 96)] = 'mijin');
                })(i || (n.Networks = i = {})),
                  (n.EnumNetworks = r.Type.Enum(i)),
                  (function (e) {
                    (e[(e.TRANSFER = 257)] = 'TRANSFER'),
                      (e[(e.COSIGNING = 258)] = 'COSIGNING'),
                      (e[(e.IMPORTANCE_TRANSFER = 2049)] = 'IMPORTANCE_TRANSFER'),
                      (e[(e.AGGREGATE_MODIFICATION = 4097)] = 'AGGREGATE_MODIFICATION'),
                      (e[(e.MULTISIG_SIGNATURE = 4098)] = 'MULTISIG_SIGNATURE'),
                      (e[(e.MULTISIG = 4100)] = 'MULTISIG'),
                      (e[(e.PROVISION_NAMESPACE = 8193)] = 'PROVISION_NAMESPACE'),
                      (e[(e.MOSAIC_CREATION = 16385)] = 'MOSAIC_CREATION'),
                      (e[(e.SUPPLY_CHANGE = 16386)] = 'SUPPLY_CHANGE');
                  })(o || (n.TxType = o = {})),
                  (n.EnumTxType = r.Type.Enum(o)),
                  (function (e) {
                    (e[(e.mainnet = 1744830464)] = 'mainnet'),
                      (e[(e.testnet = -1744830464)] = 'testnet'),
                      (e[(e.mijin = 1610612736)] = 'mijin');
                  })(s || (n.TxVersion = s = {})),
                  (n.EnumTxVersion = r.Type.Enum(s));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/nem.js',
      },
    ],
    [
      3330,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.MODULES = n.TYPES = void 0),
                  (n.TYPES = {
                    bitcoin: 'Bitcoin',
                    ethereum: 'Ethereum',
                    eos: 'Eos',
                    nem: 'NEM',
                    stellar: 'Stellar',
                    cardano: 'Cardano',
                    ripple: 'Ripple',
                    tezos: 'Tezos',
                    binance: 'Binance',
                    solana: 'Solana',
                  }),
                  (n.MODULES = [
                    'binance',
                    'cardano',
                    'eos',
                    'ethereum',
                    'nem',
                    'ripple',
                    'solana',
                    'stellar',
                    'tezos',
                  ]);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/network.js',
      },
    ],
    [
      3331,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.DEFAULT_SORTING_STRATEGY = void 0),
                  (n.DEFAULT_SORTING_STRATEGY = 'random');
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/constants/utxo.js',
      },
    ],
    [
      3332,
      { '@trezor/transport/lib/constants': 3595 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.config = void 0);
                const r = e('@trezor/transport/lib/constants');
                n.config = {
                  webusb: r.TREZOR_USB_DESCRIPTORS,
                  whitelist: [
                    { origin: 'chrome-extension://imloifkgjagghnncjkhggdhalmcnfklk', priority: 1 },
                    { origin: 'chrome-extension://niebkpllfhmpfbffbfifagfgoamhpflf', priority: 1 },
                    { origin: 'file://', priority: 2 },
                    { origin: 'trezor.io', priority: 0 },
                    { origin: 'sldev.cz', priority: 0 },
                    { origin: 'localhost', priority: 0 },
                    {
                      origin: 'trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad.onion',
                      priority: 0,
                    },
                  ],
                  management: [
                    { origin: 'trezor.io' },
                    { origin: 'sldev.cz' },
                    { origin: 'localhost' },
                  ],
                  knownHosts: [
                    {
                      origin: 'imloifkgjagghnncjkhggdhalmcnfklk',
                      label: 'Trezor Password Manager (Develop)',
                      icon: '',
                    },
                    {
                      origin: 'niebkpllfhmpfbffbfifagfgoamhpflf',
                      label: 'Trezor Password Manager',
                      icon: '',
                    },
                    { origin: 'mnpfhpndmjholfdlhpkjfmjkgppmodaf', label: 'MetaMask', icon: '' },
                    { origin: 'webextension@metamask.io', label: 'MetaMask', icon: '' },
                    { origin: 'nkbihfbeogaeaoehlefnkodbefgpgknn', label: 'MetaMask', icon: '' },
                    { origin: 'bpcdaglidgnlggelgbjfagekoapjmccp', label: 'Rainbow DEV', icon: '' },
                    { origin: 'opfgelmcmbiajamepnmloijbpoleiama', label: 'Rainbow', icon: '' },
                    { origin: 'acmacodkjbdgmoleebolmdjonilkdbch', label: 'Rabby', icon: '' },
                    { origin: 'ehnpnhnhcickeknioaiodjmielfaoajd', label: 'Ambire DEV', icon: '' },
                    { origin: 'ehgjhhccekdedpbkifaojjaefeohnoea', label: 'Ambire', icon: '' },
                    { origin: 'file://', label: ' ', icon: '' },
                  ],
                  onionDomains: {
                    'trezor.io': 'trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad.onion',
                  },
                  supportedBrowsers: {
                    chrome: {
                      version: 59,
                      download: 'https://www.google.com/chrome/',
                      update: 'https://support.google.com/chrome/answer/95414',
                    },
                    chromium: {
                      version: 59,
                      download: 'https://www.chromium.org/',
                      update: 'https://www.chromium.org/',
                    },
                    electron: {
                      version: 0,
                      download: 'https://www.electronjs.org/',
                      update: 'https://www.electronjs.org/',
                    },
                    firefox: {
                      version: 54,
                      download: 'https://www.mozilla.org/en-US/firefox/new/',
                      update: 'https://support.mozilla.org/en-US/kb/update-firefox-latest-version',
                    },
                    brave: {
                      version: 59,
                      download: 'https://brave.com/download/',
                      update: 'https://brave.com/download/',
                    },
                    edge: {
                      version: 79,
                      download: 'https://www.microsoft.com/en-us/edge',
                      update: 'https://www.microsoft.com/en-us/edge',
                    },
                    opera: {
                      version: 95,
                      download: 'https://www.opera.com/download',
                      update: 'https://www.opera.com/download',
                    },
                  },
                  supportedFirmware: [
                    {
                      coin: ['xrp', 'txrp'],
                      methods: ['getAccountInfo'],
                      min: { T1B1: '0', T2T1: '2.1.0' },
                      max: undefined,
                      comment: [
                        "Since firmware 2.1.0 there is a new protobuf field 'destination_tag' in RippleSignTx",
                      ],
                    },
                    {
                      coin: ['bnb'],
                      min: { T1B1: '1.9.0', T2T1: '2.3.0' },
                      comment: [
                        'There were protobuf backwards incompatible changes with introduction of 1.9.0/2.3.0 firmwares',
                      ],
                    },
                    {
                      coin: ['eth', 'tsep', 'thol'],
                      min: { T1B1: '1.8.0', T2T1: '2.1.0' },
                      comment: ['There were protobuf backwards incompatible changes.'],
                    },
                    {
                      coin: ['ada', 'tada'],
                      min: { T1B1: '0', T2T1: '2.4.3' },
                      comment: ['Since 2.4.3 there is initialize.derive_cardano message'],
                    },
                    {
                      methods: ['rippleGetAddress', 'rippleSignTransaction'],
                      min: { T1B1: '0', T2T1: '2.1.0' },
                      comment: [
                        "Since firmware 2.1.0 there is a new protobuf field 'destination_tag' in RippleSignTx",
                      ],
                    },
                    {
                      methods: ['cardanoGetAddress', 'cardanoGetPublicKey'],
                      min: { T1B1: '0', T2T1: '2.4.3' },
                      comment: ['Since 2.4.3 Cardano derivation behavior has changed'],
                    },
                    {
                      methods: ['cardanoSignTransaction'],
                      min: { T1B1: '0', T2T1: '2.6.0' },
                      comment: ['Before 2.6.0 not all Cardano transactions were supported'],
                    },
                    {
                      methods: ['cardanoGetNativeScriptHash'],
                      min: { T1B1: '0', T2T1: '2.4.3' },
                      comment: ['Since 2.4.3 Cardano derivation behavior has changed'],
                    },
                    {
                      methods: ['tezosSignTransaction'],
                      min: { T1B1: '0', T2T1: '2.1.8' },
                      comment: [
                        'Since 2.1.8 there are new protobuf fields in tezos transaction (Babylon fork)',
                      ],
                    },
                    {
                      methods: ['stellarSignTransaction'],
                      min: { T1B1: '1.9.0', T2T1: '2.3.0' },
                      comment: [
                        'There were protobuf backwards incompatible changes with introduction of 1.9.0/2.3.0 firmwares',
                      ],
                    },
                    {
                      capabilities: ['replaceTransaction', 'amountUnit'],
                      min: { T1B1: '1.9.4', T2T1: '2.3.5' },
                      comment: ['new sign tx process since 1.9.4/2.3.5'],
                    },
                    {
                      capabilities: ['decreaseOutput'],
                      min: { T1B1: '1.10.0', T2T1: '2.4.0' },
                      comment: ['allow reduce output in RBF transaction since 1.10.0/2.4.0'],
                    },
                    {
                      capabilities: ['eip1559'],
                      min: { T1B1: '1.10.4', T2T1: '2.4.2' },
                      comment: [
                        'new eth transaction pricing mechanism (EIP1559) since 1.10.4/2.4.2',
                      ],
                    },
                    {
                      capabilities: ['taproot', 'signMessageNoScriptType'],
                      min: { T1B1: '1.10.4', T2T1: '2.4.3' },
                      comment: [
                        'new btc accounts taproot since 1.10.4/2.4.3 (BTC + TEST only)',
                        'SignMessage with no_script_type support',
                      ],
                    },
                    {
                      coin: ['dcr', 'tdcr'],
                      methods: ['signTransaction'],
                      min: { T1B1: '1.10.1', T2T1: '2.4.0' },
                      comment: [''],
                    },
                    {
                      methods: ['ethereumSignTypedData'],
                      min: { T1B1: '1.10.5', T2T1: '2.4.3' },
                      comment: ['EIP-712 typed signing support added in 1.10.5/2.4.3'],
                    },
                    {
                      capabilities: ['eip712-domain-only'],
                      min: { T1B1: '1.10.6', T2T1: '2.4.4' },
                      comment: ['EIP-712 domain-only signing, when primaryType=EIP712Domain'],
                    },
                    {
                      capabilities: ['coinjoin'],
                      methods: [
                        'authorizeCoinjoin',
                        'cancelCoinjoinAuthorization',
                        'getOwnershipId',
                        'getOwnershipProof',
                        'setBusy',
                        'unlockPath',
                      ],
                      min: { T1B1: '1.12.1', T2T1: '2.5.3' },
                    },
                    {
                      methods: ['showDeviceTutorial', 'authenticateDevice'],
                      min: { T1B1: '0', T2T1: '0', T3T1: '2.8.0' },
                    },
                    { methods: ['getFirmwareHash'], min: { T1B1: '1.11.1', T2T1: '2.5.1' } },
                    {
                      methods: ['solanaGetPublicKey', 'solanaGetAddress', 'solanaSignTransaction'],
                      min: { T1B1: '0', T2T1: '2.6.4', T2B1: '2.6.4' },
                    },
                    {
                      capabilities: ['chunkify'],
                      min: { T1B1: '0', T2T1: '2.6.3', T2B1: '2.6.3' },
                      comment: [
                        "Since firmware 2.6.3 there is a new protobuf field 'chunkify' in almost all getAddress and signTx methods",
                      ],
                    },
                    {
                      methods: ['changeLanguage'],
                      min: { T1B1: '0', T2T1: '2.7.0', T2B1: '2.7.0' },
                    },
                  ],
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/data/config.js',
      },
    ],
    [
      3333,
      { './version': 3334 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.parseConnectSettings = n.corsValidator = n.DEFAULT_PRIORITY = void 0);
                const r = e('./version');
                n.DEFAULT_PRIORITY = 2;
                const i = {
                  configSrc: './data/config.json',
                  version: r.VERSION,
                  debug: !1,
                  priority: n.DEFAULT_PRIORITY,
                  trustedHost: !0,
                  connectSrc: r.DEFAULT_DOMAIN,
                  iframeSrc: `${r.DEFAULT_DOMAIN}iframe.html`,
                  popup: !1,
                  popupSrc: `${r.DEFAULT_DOMAIN}popup.html`,
                  webusbSrc: `${r.DEFAULT_DOMAIN}webusb.html`,
                  transports: undefined,
                  pendingTransportEvent: !0,
                  env: 'node',
                  lazyLoad: !1,
                  timestamp: new Date().getTime(),
                  interactionTimeout: 600,
                  sharedLogger: !0,
                  deeplinkUrl: `${r.DEFAULT_DOMAIN}deeplink/${r.DEEPLINK_VERSION}/`,
                  transportReconnect: !0,
                };
                n.corsValidator = e => {
                  if ('string' == typeof e)
                    return e.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*trezor\.io\//) ||
                      e.match(/^https?:\/\/localhost:[58][0-9]{3}\//) ||
                      e.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*sldev\.cz\//) ||
                      e.match(
                        /^https?:\/\/([A-Za-z0-9\-_]+\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\.onion\//
                      )
                      ? e
                      : void 0;
                };
                n.parseConnectSettings = (e = {}) => {
                  var t;
                  const o = { ...i };
                  'debug' in e &&
                    ('boolean' == typeof e.debug
                      ? (o.debug = e.debug)
                      : 'string' == typeof e.debug && (o.debug = 'true' === e.debug)),
                    !1 === e.trustedHost && (o.trustedHost = e.trustedHost),
                    'string' == typeof e.connectSrc &&
                    (null === (t = e.connectSrc) || void 0 === t ? void 0 : t.startsWith('http'))
                      ? (o.connectSrc = (0, n.corsValidator)(e.connectSrc))
                      : o.trustedHost && (o.connectSrc = e.connectSrc);
                  const s = o.connectSrc || r.DEFAULT_DOMAIN;
                  return (
                    (o.iframeSrc = `${s}iframe.html`),
                    (o.popupSrc = `${s}popup.html`),
                    (o.webusbSrc = `${s}webusb.html`),
                    (o.deeplinkUrl = `${s}deeplink/${r.DEEPLINK_VERSION}/`),
                    'boolean' == typeof e.transportReconnect &&
                      (o.transportReconnect = e.transportReconnect),
                    Array.isArray(e.transports) && (o.transports = e.transports),
                    'boolean' == typeof e.popup && (o.popup = e.popup),
                    'boolean' == typeof e.lazyLoad && (o.lazyLoad = e.lazyLoad),
                    'boolean' == typeof e.pendingTransportEvent &&
                      (o.pendingTransportEvent = e.pendingTransportEvent),
                    'string' == typeof e.extension && (o.extension = e.extension),
                    'string' == typeof e.env && (o.env = e.env),
                    'number' == typeof e.timestamp && (o.timestamp = e.timestamp),
                    'number' == typeof e.interactionTimeout &&
                      (o.interactionTimeout = e.interactionTimeout),
                    'object' == typeof e.manifest &&
                      (o.manifest = (e => {
                        if (e && 'string' == typeof e.email && 'string' == typeof e.appUrl)
                          return { email: e.email, appUrl: e.appUrl };
                      })(e.manifest)),
                    'boolean' == typeof e.sharedLogger && (o.sharedLogger = e.sharedLogger),
                    'string' == typeof e.coreMode &&
                      ['auto', 'popup', 'iframe'].includes(e.coreMode) &&
                      (o.coreMode = e.coreMode),
                    'boolean' == typeof e._extendWebextensionLifetime &&
                      (o._extendWebextensionLifetime = e._extendWebextensionLifetime),
                    ('string' != typeof e._sessionsBackgroundUrl &&
                      null !== e._sessionsBackgroundUrl) ||
                      (o._sessionsBackgroundUrl = e._sessionsBackgroundUrl),
                    'string' == typeof e.binFilesBaseUrl && (o.binFilesBaseUrl = e.binFilesBaseUrl),
                    'boolean' == typeof e.enableFirmwareHashCheck &&
                      (o.enableFirmwareHashCheck = Boolean(e.enableFirmwareHashCheck)),
                    o
                  );
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/data/connectSettings.js',
      },
    ],
    [
      3334,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.DEEPLINK_VERSION =
                    n.CONTENT_SCRIPT_VERSION =
                    n.DEFAULT_DOMAIN =
                    n.VERSION =
                      void 0),
                  (n.VERSION = '9.4.7');
                const r = n.VERSION.split('.').map(e => parseInt(e, 10)),
                  i = n.VERSION.includes('beta');
                (n.DEFAULT_DOMAIN = i
                  ? `https://connect.trezor.io/${n.VERSION}/`
                  : `https://connect.trezor.io/${r[0]}/`),
                  (n.CONTENT_SCRIPT_VERSION = 1),
                  (n.DEEPLINK_VERSION = 1);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/data/version.js',
      },
    ],
    [
      3335,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createBlockchainMessage = n.BLOCKCHAIN = n.BLOCKCHAIN_EVENT = void 0),
                  (n.BLOCKCHAIN_EVENT = 'BLOCKCHAIN_EVENT'),
                  (n.BLOCKCHAIN = {
                    CONNECT: 'blockchain-connect',
                    RECONNECTING: 'blockchain-reconnecting',
                    ERROR: 'blockchain-error',
                    BLOCK: 'blockchain-block',
                    NOTIFICATION: 'blockchain-notification',
                    FIAT_RATES_UPDATE: 'fiat-rates-update',
                  });
                n.createBlockchainMessage = (e, t) => ({
                  event: n.BLOCKCHAIN_EVENT,
                  type: e,
                  payload: t,
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/blockchain.js',
      },
    ],
    [
      3336,
      { '../constants/errors': 3326 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createResponseMessage = n.RESPONSE_EVENT = void 0);
                const r = e('../constants/errors');
                n.RESPONSE_EVENT = 'RESPONSE_EVENT';
                n.createResponseMessage = (e, t, i, o) => ({
                  event: n.RESPONSE_EVENT,
                  type: n.RESPONSE_EVENT,
                  id: e,
                  success: t,
                  payload: t ? i : (0, r.serializeError)(i),
                  device: o
                    ? {
                        path: null == o ? void 0 : o.getUniquePath(),
                        state: null == o ? void 0 : o.getState(),
                        instance: null == o ? void 0 : o.getInstance(),
                      }
                    : undefined,
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/call.js',
      },
    ],
    [
      3337,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createErrorMessage = n.parseMessage = n.CORE_EVENT = void 0),
                  (n.CORE_EVENT = 'CORE_EVENT');
                n.parseMessage = e => {
                  const t = { event: e.event, type: e.type, payload: e.payload, device: e.device };
                  return (
                    'number' == typeof e.id && (t.id = e.id),
                    'boolean' == typeof e.success && (t.success = e.success),
                    t
                  );
                };
                n.createErrorMessage = e => ({
                  success: !1,
                  payload: { error: e.message, code: e.code },
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/core.js',
      },
    ],
    [
      3338,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createDeviceMessage = n.DEVICE = n.DEVICE_EVENT = void 0),
                  (n.DEVICE_EVENT = 'DEVICE_EVENT'),
                  (n.DEVICE = {
                    CONNECT: 'device-connect',
                    CONNECT_UNACQUIRED: 'device-connect_unacquired',
                    DISCONNECT: 'device-disconnect',
                    CHANGED: 'device-changed',
                    BUTTON: 'button',
                    PIN: 'pin',
                    PASSPHRASE: 'passphrase',
                    PASSPHRASE_ON_DEVICE: 'passphrase_on_device',
                    WORD: 'word',
                  });
                n.createDeviceMessage = (e, t) => ({ event: n.DEVICE_EVENT, type: e, payload: t });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/device.js',
      },
    ],
    [
      3339,
      { './ui-request': 3344 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createIFrameMessage = n.IFRAME = void 0);
                const r = e('./ui-request');
                n.IFRAME = {
                  BOOTSTRAP: 'iframe-bootstrap',
                  LOADED: 'iframe-loaded',
                  INIT: 'iframe-init',
                  ERROR: 'iframe-error',
                  CALL: 'iframe-call',
                  LOG: 'iframe-log',
                };
                n.createIFrameMessage = (e, t) => ({ event: r.UI_EVENT, type: e, payload: t });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/iframe.js',
      },
    ],
    [
      3340,
      {
        './blockchain': 3335,
        './call': 3336,
        './core': 3337,
        './device': 3338,
        './iframe': 3339,
        './popup': 3341,
        './transport': 3342,
        './ui-promise': 3343,
        './ui-request': 3344,
        './ui-response': 3345,
        './webextension': 3346,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.UI = void 0);
                const r = e('tslib'),
                  i = e('./ui-request'),
                  o = e('./ui-response');
                r.__exportStar(e('./blockchain'), n),
                  r.__exportStar(e('./call'), n),
                  r.__exportStar(e('./core'), n),
                  r.__exportStar(e('./device'), n),
                  r.__exportStar(e('./iframe'), n),
                  r.__exportStar(e('./popup'), n),
                  r.__exportStar(e('./transport'), n),
                  r.__exportStar(e('./ui-promise'), n),
                  r.__exportStar(e('./ui-request'), n),
                  r.__exportStar(e('./ui-response'), n),
                  r.__exportStar(e('./webextension'), n),
                  (n.UI = { ...i.UI_REQUEST, ...o.UI_RESPONSE });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/index.js',
      },
    ],
    [
      3341,
      { './ui-request': 3344 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createPopupMessage = n.POPUP = void 0);
                const r = e('./ui-request');
                n.POPUP = {
                  BOOTSTRAP: 'popup-bootstrap',
                  LOADED: 'popup-loaded',
                  CORE_LOADED: 'popup-core-loaded',
                  INIT: 'popup-init',
                  ERROR: 'popup-error',
                  EXTENSION_USB_PERMISSIONS: 'open-usb-permissions',
                  HANDSHAKE: 'popup-handshake',
                  CLOSED: 'popup-closed',
                  CANCEL_POPUP_REQUEST: 'ui-cancel-popup-request',
                  CLOSE_WINDOW: 'window.close',
                  ANALYTICS_RESPONSE: 'popup-analytics-response',
                  CONTENT_SCRIPT_LOADED: 'popup-content-script-loaded',
                  METHOD_INFO: 'popup-method-info',
                };
                n.createPopupMessage = (e, t) => ({ event: r.UI_EVENT, type: e, payload: t });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/popup.js',
      },
    ],
    [
      3342,
      { '../constants/errors': 3326, '@trezor/transport/lib/constants': 3595 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createTransportMessage = n.TRANSPORT_EVENT = n.TRANSPORT = void 0);
                const r = e('../constants/errors');
                var i = e('@trezor/transport/lib/constants');
                Object.defineProperty(n, 'TRANSPORT', {
                  enumerable: !0,
                  get: function () {
                    return i.TRANSPORT;
                  },
                }),
                  (n.TRANSPORT_EVENT = 'TRANSPORT_EVENT');
                n.createTransportMessage = (e, t) => ({
                  event: n.TRANSPORT_EVENT,
                  type: e,
                  payload: 'error' in t ? (0, r.serializeError)(t) : t,
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/transport.js',
      },
    ],
    [
      3343,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/ui-promise.js',
      },
    ],
    [
      3344,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createUiMessage = n.UI_REQUEST = n.UI_EVENT = void 0),
                  (n.UI_EVENT = 'UI_EVENT'),
                  (n.UI_REQUEST = {
                    TRANSPORT: 'ui-no_transport',
                    BOOTLOADER: 'ui-device_bootloader_mode',
                    NOT_IN_BOOTLOADER: 'ui-device_not_in_bootloader_mode',
                    REQUIRE_MODE: 'ui-device_require_mode',
                    INITIALIZE: 'ui-device_not_initialized',
                    SEEDLESS: 'ui-device_seedless',
                    FIRMWARE_OLD: 'ui-device_firmware_old',
                    FIRMWARE_OUTDATED: 'ui-device_firmware_outdated',
                    FIRMWARE_NOT_SUPPORTED: 'ui-device_firmware_unsupported',
                    FIRMWARE_NOT_COMPATIBLE: 'ui-device_firmware_not_compatible',
                    FIRMWARE_NOT_INSTALLED: 'ui-device_firmware_not_installed',
                    FIRMWARE_PROGRESS: 'ui-firmware-progress',
                    FIRMWARE_RECONNECT: 'ui-firmware_reconnect',
                    DEVICE_NEEDS_BACKUP: 'ui-device_needs_backup',
                    REQUEST_UI_WINDOW: 'ui-request_window',
                    CLOSE_UI_WINDOW: 'ui-close_window',
                    REQUEST_PERMISSION: 'ui-request_permission',
                    REQUEST_CONFIRMATION: 'ui-request_confirmation',
                    REQUEST_PIN: 'ui-request_pin',
                    INVALID_PIN: 'ui-invalid_pin',
                    REQUEST_PASSPHRASE: 'ui-request_passphrase',
                    REQUEST_PASSPHRASE_ON_DEVICE: 'ui-request_passphrase_on_device',
                    INVALID_PASSPHRASE: 'ui-invalid_passphrase',
                    CONNECT: 'ui-connect',
                    LOADING: 'ui-loading',
                    SET_OPERATION: 'ui-set_operation',
                    SELECT_DEVICE: 'ui-select_device',
                    SELECT_ACCOUNT: 'ui-select_account',
                    SELECT_FEE: 'ui-select_fee',
                    UPDATE_CUSTOM_FEE: 'ui-update_custom_fee',
                    INSUFFICIENT_FUNDS: 'ui-insufficient_funds',
                    REQUEST_BUTTON: 'ui-button',
                    REQUEST_WORD: 'ui-request_word',
                    LOGIN_CHALLENGE_REQUEST: 'ui-login_challenge_request',
                    BUNDLE_PROGRESS: 'ui-bundle_progress',
                    ADDRESS_VALIDATION: 'ui-address_validation',
                    IFRAME_FAILURE: 'ui-iframe_failure',
                  });
                n.createUiMessage = (e, t) => ({ event: n.UI_EVENT, type: e, payload: t });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/ui-request.js',
      },
    ],
    [
      3345,
      { './ui-request': 3344 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createUiResponse = n.UI_RESPONSE = void 0);
                const r = e('./ui-request');
                n.UI_RESPONSE = {
                  RECEIVE_PERMISSION: 'ui-receive_permission',
                  RECEIVE_CONFIRMATION: 'ui-receive_confirmation',
                  RECEIVE_PIN: 'ui-receive_pin',
                  RECEIVE_PASSPHRASE: 'ui-receive_passphrase',
                  RECEIVE_DEVICE: 'ui-receive_device',
                  RECEIVE_ACCOUNT: 'ui-receive_account',
                  RECEIVE_FEE: 'ui-receive_fee',
                  RECEIVE_WORD: 'ui-receive_word',
                  INVALID_PASSPHRASE_ACTION: 'ui-invalid_passphrase_action',
                  CHANGE_SETTINGS: 'ui-change_settings',
                  LOGIN_CHALLENGE_RESPONSE: 'ui-login_challenge_response',
                };
                n.createUiResponse = (e, t) => ({ event: r.UI_EVENT, type: e, payload: t });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/ui-response.js',
      },
    ],
    [
      3346,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.WEBEXTENSION = void 0),
                  (n.WEBEXTENSION = {
                    USB_PERMISSIONS_BROADCAST: 'usb-permissions',
                    USB_PERMISSIONS_INIT: 'usb-permissions-init',
                    USB_PERMISSIONS_CLOSE: 'usb-permissions-close',
                    USB_PERMISSIONS_FINISHED: 'usb-permissions-finished',
                    CHANNEL_HANDSHAKE_CONFIRM: 'channel-handshake-confirm',
                  });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/events/webextension.js',
      },
    ],
    [
      3347,
      {
        './constants': 3328,
        './data/connectSettings': 3333,
        './events': 3340,
        './types': 3365,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.parseConnectSettings = void 0);
                const r = e('tslib');
                r.__exportStar(e('./constants'), n),
                  r.__exportStar(e('./events'), n),
                  r.__exportStar(e('./types'), n);
                var i = e('./data/connectSettings');
                Object.defineProperty(n, 'parseConnectSettings', {
                  enumerable: !0,
                  get: function () {
                    return i.parseConnectSettings;
                  },
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/exports.js',
      },
    ],
    [
      3348,
      { './events': 3340 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.factory = void 0);
                const r = e('./events');
                n.factory = (
                  {
                    eventEmitter: e,
                    manifest: t,
                    init: n,
                    call: i,
                    requestLogin: o,
                    uiResponse: s,
                    cancel: a,
                    dispose: c,
                  },
                  u = {}
                ) => ({
                  manifest: t,
                  init: n,
                  on: (t, n) => {
                    e.on(t, n);
                  },
                  off: (t, n) => {
                    e.removeListener(t, n);
                  },
                  removeAllListeners: t => {
                    'string' == typeof t ? e.removeAllListeners(t) : e.removeAllListeners();
                  },
                  uiResponse: s,
                  blockchainGetAccountBalanceHistory: e =>
                    i({ ...e, method: 'blockchainGetAccountBalanceHistory' }),
                  blockchainGetCurrentFiatRates: e =>
                    i({ ...e, method: 'blockchainGetCurrentFiatRates' }),
                  blockchainGetFiatRatesForTimestamps: e =>
                    i({ ...e, method: 'blockchainGetFiatRatesForTimestamps' }),
                  blockchainGetInfo: e => i({ ...e, method: 'blockchainGetInfo' }),
                  blockchainEvmRpcCall: e => i({ ...e, method: 'blockchainEvmRpcCall' }),
                  blockchainDisconnect: e => i({ ...e, method: 'blockchainDisconnect' }),
                  blockchainEstimateFee: e => i({ ...e, method: 'blockchainEstimateFee' }),
                  blockchainGetTransactions: e => i({ ...e, method: 'blockchainGetTransactions' }),
                  blockchainSetCustomBackend: e =>
                    i({ ...e, method: 'blockchainSetCustomBackend' }),
                  blockchainSubscribe: e => i({ ...e, method: 'blockchainSubscribe' }),
                  blockchainSubscribeFiatRates: e =>
                    i({ ...e, method: 'blockchainSubscribeFiatRates' }),
                  blockchainUnsubscribe: e => i({ ...e, method: 'blockchainUnsubscribe' }),
                  blockchainUnsubscribeFiatRates: e =>
                    i({ ...e, method: 'blockchainUnsubscribeFiatRates' }),
                  requestLogin: e => o(e),
                  cardanoGetAddress: t =>
                    i({
                      ...t,
                      method: 'cardanoGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  cardanoGetNativeScriptHash: e =>
                    i({ ...e, method: 'cardanoGetNativeScriptHash' }),
                  cardanoGetPublicKey: e => i({ ...e, method: 'cardanoGetPublicKey' }),
                  cardanoSignTransaction: e => i({ ...e, method: 'cardanoSignTransaction' }),
                  cardanoComposeTransaction: e => i({ ...e, method: 'cardanoComposeTransaction' }),
                  cipherKeyValue: e => i({ ...e, method: 'cipherKeyValue' }),
                  composeTransaction: e => i({ ...e, method: 'composeTransaction' }),
                  ethereumGetAddress: t =>
                    i({
                      ...t,
                      method: 'ethereumGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  ethereumGetPublicKey: e => i({ ...e, method: 'ethereumGetPublicKey' }),
                  ethereumSignMessage: e => i({ ...e, method: 'ethereumSignMessage' }),
                  ethereumSignTransaction: e => i({ ...e, method: 'ethereumSignTransaction' }),
                  ethereumSignTypedData: e => i({ ...e, method: 'ethereumSignTypedData' }),
                  ethereumVerifyMessage: e => i({ ...e, method: 'ethereumVerifyMessage' }),
                  getAccountDescriptor: e => i({ ...e, method: 'getAccountDescriptor' }),
                  getAccountInfo: e => i({ ...e, method: 'getAccountInfo' }),
                  getAddress: t =>
                    i({
                      ...t,
                      method: 'getAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  getDeviceState: e => i({ ...e, method: 'getDeviceState' }),
                  getFeatures: e => i({ ...e, method: 'getFeatures' }),
                  getFirmwareHash: e => i({ ...e, method: 'getFirmwareHash' }),
                  getOwnershipId: e => i({ ...e, method: 'getOwnershipId' }),
                  getOwnershipProof: e => i({ ...e, method: 'getOwnershipProof' }),
                  getPublicKey: e => i({ ...e, method: 'getPublicKey' }),
                  nemGetAddress: t =>
                    i({
                      ...t,
                      method: 'nemGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  nemSignTransaction: e => i({ ...e, method: 'nemSignTransaction' }),
                  pushTransaction: e => i({ ...e, method: 'pushTransaction' }),
                  rippleGetAddress: t =>
                    i({
                      ...t,
                      method: 'rippleGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  rippleSignTransaction: e => i({ ...e, method: 'rippleSignTransaction' }),
                  signMessage: e => i({ ...e, method: 'signMessage' }),
                  signTransaction: e => i({ ...e, method: 'signTransaction' }),
                  solanaGetPublicKey: e => i({ ...e, method: 'solanaGetPublicKey' }),
                  solanaGetAddress: e => i({ ...e, method: 'solanaGetAddress' }),
                  solanaSignTransaction: e => i({ ...e, method: 'solanaSignTransaction' }),
                  stellarGetAddress: t =>
                    i({
                      ...t,
                      method: 'stellarGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  stellarSignTransaction: e => i({ ...e, method: 'stellarSignTransaction' }),
                  tezosGetAddress: t =>
                    i({
                      ...t,
                      method: 'tezosGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  tezosGetPublicKey: e => i({ ...e, method: 'tezosGetPublicKey' }),
                  tezosSignTransaction: e => i({ ...e, method: 'tezosSignTransaction' }),
                  unlockPath: e => i({ ...e, method: 'unlockPath' }),
                  eosGetPublicKey: e => i({ ...e, method: 'eosGetPublicKey' }),
                  eosSignTransaction: e => i({ ...e, method: 'eosSignTransaction' }),
                  binanceGetAddress: t =>
                    i({
                      ...t,
                      method: 'binanceGetAddress',
                      useEventListener: e.listenerCount(r.UI.ADDRESS_VALIDATION) > 0,
                    }),
                  binanceGetPublicKey: e => i({ ...e, method: 'binanceGetPublicKey' }),
                  binanceSignTransaction: e => i({ ...e, method: 'binanceSignTransaction' }),
                  verifyMessage: e => i({ ...e, method: 'verifyMessage' }),
                  resetDevice: e => i({ ...e, method: 'resetDevice' }),
                  loadDevice: e => i({ ...e, method: 'loadDevice' }),
                  wipeDevice: e => i({ ...e, method: 'wipeDevice' }),
                  applyFlags: e => i({ ...e, method: 'applyFlags' }),
                  applySettings: e => i({ ...e, method: 'applySettings' }),
                  getSettings: () => i({ method: 'getSettings' }),
                  authenticateDevice: e => i({ ...e, method: 'authenticateDevice' }),
                  authorizeCoinjoin: e => i({ ...e, method: 'authorizeCoinjoin' }),
                  cancelCoinjoinAuthorization: e =>
                    i({ ...e, method: 'cancelCoinjoinAuthorization' }),
                  showDeviceTutorial: e => i({ ...e, method: 'showDeviceTutorial' }),
                  backupDevice: e => i({ ...e, method: 'backupDevice' }),
                  changeLanguage: e => i({ ...e, method: 'changeLanguage' }),
                  changePin: e => i({ ...e, method: 'changePin' }),
                  changeWipeCode: e => i({ ...e, method: 'changeWipeCode' }),
                  firmwareUpdate: e => i({ ...e, method: 'firmwareUpdate' }),
                  recoveryDevice: e => i({ ...e, method: 'recoveryDevice' }),
                  getCoinInfo: e => i({ ...e, method: 'getCoinInfo' }),
                  setBrightness: e => i({ ...e, method: 'setBrightness' }),
                  setBusy: e => i({ ...e, method: 'setBusy' }),
                  setProxy: e => i({ ...e, method: 'setProxy' }),
                  dispose: c,
                  cancel: a,
                  ...u,
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/factory.js',
      },
    ],
    [
      3349,
      { '../constants': 3328, '../utils/proxy-event-emitter': 3369 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TrezorConnectDynamic = void 0);
                const r = e('../constants'),
                  i = e('../utils/proxy-event-emitter');
                n.TrezorConnectDynamic = class {
                  constructor({ implementations: e, getInitTarget: t, handleErrorFallback: n }) {
                    (this.implementations = e),
                      (this.currentTarget = this.implementations[0].type),
                      (this.getInitTarget = t),
                      (this.handleErrorFallback = n),
                      (this.eventEmitter = new i.ProxyEventEmitter(
                        this.implementations.map(e => e.impl.eventEmitter)
                      ));
                  }
                  getTarget() {
                    return this.implementations.find(e => e.type === this.currentTarget).impl;
                  }
                  async switchTarget(e) {
                    if (this.currentTarget !== e) {
                      if (!this.lastSettings) throw r.ERRORS.TypedError('Init_NotInitialized');
                      await this.getTarget().dispose(),
                        (this.currentTarget = e),
                        await this.getTarget().init(this.lastSettings);
                    }
                  }
                  manifest(e) {
                    (this.lastSettings = { ...this.lastSettings, manifest: e }),
                      this.getTarget().manifest(e);
                  }
                  async init(e) {
                    if (!(null == e ? void 0 : e.manifest))
                      throw r.ERRORS.TypedError('Init_ManifestMissing');
                    (this.lastSettings = e), (this.currentTarget = this.getInitTarget(e));
                    try {
                      return await this.getTarget().init(this.lastSettings);
                    } catch (t) {
                      if (await this.handleErrorFallback(t.code))
                        return await this.getTarget().init(e);
                      throw t;
                    }
                  }
                  async call(e) {
                    const t = await this.getTarget().call(e);
                    return !t.success && (await this.handleErrorFallback(t.payload.code))
                      ? await this.getTarget().call(e)
                      : t;
                  }
                  requestLogin(e) {
                    return this.getTarget().requestLogin(e);
                  }
                  uiResponse(e) {
                    return this.getTarget().uiResponse(e);
                  }
                  cancel(e) {
                    return this.getTarget().cancel(e);
                  }
                  dispose() {
                    return this.eventEmitter.removeAllListeners(), this.getTarget().dispose();
                  }
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/impl/dynamic.js',
      },
    ],
    [
      3350,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/account.js',
      },
    ],
    [
      3351,
      { '../../../constants': 3328, '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.BinanceSignTransaction =
                    n.BinancePreparedTransaction =
                    n.BinancePreparedMessage =
                    n.BinanceSDKTransaction =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../../constants'),
                  o = e('../../params');
                (n.BinanceSDKTransaction = r.Type.Object({
                  chain_id: r.Type.String(),
                  account_number: r.Type.Optional(r.Type.Number()),
                  memo: r.Type.Optional(r.Type.String()),
                  sequence: r.Type.Optional(r.Type.Number()),
                  source: r.Type.Optional(r.Type.Number()),
                  transfer: r.Type.Optional(i.PROTO.BinanceTransferMsg),
                  placeOrder: r.Type.Optional(i.PROTO.BinanceOrderMsg),
                  cancelOrder: r.Type.Optional(i.PROTO.BinanceCancelMsg),
                })),
                  (n.BinancePreparedMessage = r.Type.Union([
                    r.Type.Intersect([
                      i.PROTO.BinanceTransferMsg,
                      r.Type.Object({ type: r.Type.Literal('BinanceTransferMsg') }),
                    ]),
                    r.Type.Intersect([
                      i.PROTO.BinanceOrderMsg,
                      r.Type.Object({ type: r.Type.Literal('BinanceOrderMsg') }),
                    ]),
                    r.Type.Intersect([
                      i.PROTO.BinanceCancelMsg,
                      r.Type.Object({ type: r.Type.Literal('BinanceCancelMsg') }),
                    ]),
                  ])),
                  (n.BinancePreparedTransaction = r.Type.Intersect([
                    n.BinanceSDKTransaction,
                    r.Type.Object({
                      messages: r.Type.Array(n.BinancePreparedMessage),
                      account_number: r.Type.Number(),
                      sequence: r.Type.Number(),
                      source: r.Type.Number(),
                    }),
                  ])),
                  (n.BinanceSignTransaction = r.Type.Object({
                    path: o.DerivationPath,
                    transaction: n.BinanceSDKTransaction,
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/binance/index.js',
      },
    ],
    [
      3352,
      { '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.VerifyMessage = n.SignMessage = void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../params');
                (n.SignMessage = r.Type.Object({
                  path: i.DerivationPath,
                  coin: r.Type.Optional(r.Type.String()),
                  message: r.Type.String(),
                  hex: r.Type.Optional(r.Type.Boolean()),
                  no_script_type: r.Type.Optional(r.Type.Boolean()),
                })),
                  (n.VerifyMessage = r.Type.Object({
                    address: r.Type.String(),
                    signature: r.Type.String(),
                    message: r.Type.String(),
                    coin: r.Type.String(),
                    hex: r.Type.Optional(r.Type.Boolean()),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/bitcoin/index.js',
      },
    ],
    [
      3353,
      { '../../../constants': 3328, '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.CardanoSignedTxData =
                    n.CardanoAuxiliaryDataSupplement =
                    n.CardanoSignedTxWitness =
                    n.CardanoSignTransactionExtended =
                    n.CardanoSignTransaction =
                    n.CardanoAuxiliaryData =
                    n.CardanoCVoteRegistrationParameters =
                    n.CardanoCVoteRegistrationDelegation =
                    n.CardanoReferenceInput =
                    n.CardanoRequiredSigner =
                    n.CardanoCollateralInput =
                    n.CardanoMint =
                    n.CardanoWithdrawal =
                    n.CardanoCertificate =
                    n.CardanoDRep =
                    n.CardanoPoolParameters =
                    n.CardanoPoolMargin =
                    n.CardanoPoolMetadata =
                    n.CardanoPoolRelay =
                    n.CardanoPoolOwner =
                    n.CardanoOutput =
                    n.CardanoAssetGroup =
                    n.CardanoToken =
                    n.CardanoInput =
                    n.CardanoGetPublicKey =
                    n.CardanoNativeScriptHash =
                    n.CardanoGetNativeScriptHash =
                    n.CardanoNativeScript =
                    n.CardanoGetAddress =
                    n.CardanoAddressParameters =
                    n.CardanoCertificatePointer =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../../constants'),
                  o = e('../../params');
                (n.CardanoCertificatePointer = r.Type.Object({
                  blockIndex: r.Type.Number(),
                  txIndex: r.Type.Number(),
                  certificateIndex: r.Type.Number(),
                })),
                  (n.CardanoAddressParameters = r.Type.Object({
                    addressType: i.PROTO.EnumCardanoAddressType,
                    path: r.Type.Optional(o.DerivationPath),
                    stakingPath: r.Type.Optional(o.DerivationPath),
                    stakingKeyHash: r.Type.Optional(r.Type.String()),
                    certificatePointer: r.Type.Optional(n.CardanoCertificatePointer),
                    paymentScriptHash: r.Type.Optional(r.Type.String()),
                    stakingScriptHash: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoGetAddress = r.Type.Object({
                    addressParameters: n.CardanoAddressParameters,
                    protocolMagic: r.Type.Number(),
                    networkId: r.Type.Number(),
                    address: r.Type.Optional(r.Type.String()),
                    showOnTrezor: r.Type.Optional(r.Type.Boolean()),
                    derivationType: r.Type.Optional(i.PROTO.EnumCardanoDerivationType),
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  })),
                  (n.CardanoNativeScript = r.Type.Recursive(e =>
                    r.Type.Object({
                      type: i.PROTO.EnumCardanoNativeScriptType,
                      scripts: r.Type.Optional(r.Type.Array(e)),
                      keyHash: r.Type.Optional(r.Type.String()),
                      keyPath: r.Type.Optional(o.DerivationPath),
                      requiredSignaturesCount: r.Type.Optional(r.Type.Number()),
                      invalidBefore: r.Type.Optional(r.Type.String()),
                      invalidHereafter: r.Type.Optional(r.Type.String()),
                    })
                  )),
                  (n.CardanoGetNativeScriptHash = r.Type.Object({
                    script: n.CardanoNativeScript,
                    displayFormat: i.PROTO.EnumCardanoNativeScriptHashDisplayFormat,
                    derivationType: r.Type.Optional(i.PROTO.EnumCardanoDerivationType),
                  })),
                  (n.CardanoNativeScriptHash = r.Type.Object({ scriptHash: r.Type.String() })),
                  (n.CardanoGetPublicKey = r.Type.Intersect([
                    o.GetPublicKey,
                    r.Type.Object({
                      derivationType: r.Type.Optional(i.PROTO.EnumCardanoDerivationType),
                    }),
                  ])),
                  (n.CardanoInput = r.Type.Object({
                    path: r.Type.Optional(o.DerivationPath),
                    prev_hash: r.Type.String(),
                    prev_index: r.Type.Number(),
                  })),
                  (n.CardanoToken = r.Type.Object({
                    assetNameBytes: r.Type.String(),
                    amount: r.Type.Optional(r.Type.String()),
                    mintAmount: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoAssetGroup = r.Type.Object({
                    policyId: r.Type.String(),
                    tokenAmounts: r.Type.Array(n.CardanoToken),
                  })),
                  (n.CardanoOutput = r.Type.Intersect([
                    r.Type.Union([
                      r.Type.Object({ addressParameters: n.CardanoAddressParameters }),
                      r.Type.Object({ address: r.Type.String() }),
                    ]),
                    r.Type.Object({
                      amount: r.Type.String(),
                      tokenBundle: r.Type.Optional(r.Type.Array(n.CardanoAssetGroup)),
                      datumHash: r.Type.Optional(r.Type.String()),
                      format: r.Type.Optional(i.PROTO.EnumCardanoTxOutputSerializationFormat),
                      inlineDatum: r.Type.Optional(r.Type.String()),
                      referenceScript: r.Type.Optional(r.Type.String()),
                    }),
                  ])),
                  (n.CardanoPoolOwner = r.Type.Object({
                    stakingKeyPath: r.Type.Optional(o.DerivationPath),
                    stakingKeyHash: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoPoolRelay = r.Type.Object({
                    type: i.PROTO.EnumCardanoPoolRelayType,
                    ipv4Address: r.Type.Optional(r.Type.String()),
                    ipv6Address: r.Type.Optional(r.Type.String()),
                    port: r.Type.Optional(r.Type.Number()),
                    hostName: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoPoolMetadata = r.Type.Object({
                    url: r.Type.String(),
                    hash: r.Type.String(),
                  })),
                  (n.CardanoPoolMargin = r.Type.Object({
                    numerator: r.Type.String(),
                    denominator: r.Type.String(),
                  })),
                  (n.CardanoPoolParameters = r.Type.Object({
                    poolId: r.Type.String(),
                    vrfKeyHash: r.Type.String(),
                    pledge: r.Type.String(),
                    cost: r.Type.String(),
                    margin: n.CardanoPoolMargin,
                    rewardAccount: r.Type.String(),
                    owners: r.Type.Array(n.CardanoPoolOwner, { minItems: 1 }),
                    relays: r.Type.Array(n.CardanoPoolRelay),
                    metadata: r.Type.Optional(n.CardanoPoolMetadata),
                  })),
                  (n.CardanoDRep = r.Type.Object({
                    type: i.PROTO.EnumCardanoDRepType,
                    keyHash: r.Type.Optional(r.Type.String()),
                    scriptHash: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoCertificate = r.Type.Object({
                    type: i.PROTO.EnumCardanoCertificateType,
                    path: r.Type.Optional(o.DerivationPath),
                    pool: r.Type.Optional(r.Type.String()),
                    poolParameters: r.Type.Optional(n.CardanoPoolParameters),
                    scriptHash: r.Type.Optional(r.Type.String()),
                    keyHash: r.Type.Optional(r.Type.String()),
                    deposit: r.Type.Optional(r.Type.String()),
                    dRep: r.Type.Optional(n.CardanoDRep),
                  })),
                  (n.CardanoWithdrawal = r.Type.Object({
                    path: r.Type.Optional(o.DerivationPath),
                    amount: r.Type.String(),
                    scriptHash: r.Type.Optional(r.Type.String()),
                    keyHash: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoMint = r.Type.Array(n.CardanoAssetGroup)),
                  (n.CardanoCollateralInput = r.Type.Object({
                    path: r.Type.Optional(o.DerivationPath),
                    prev_hash: r.Type.String(),
                    prev_index: r.Type.Number(),
                  })),
                  (n.CardanoRequiredSigner = r.Type.Object({
                    keyPath: r.Type.Optional(o.DerivationPath),
                    keyHash: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoReferenceInput = r.Type.Object({
                    prev_hash: r.Type.String(),
                    prev_index: r.Type.Number(),
                  })),
                  (n.CardanoCVoteRegistrationDelegation = r.Type.Object({
                    votePublicKey: r.Type.String(),
                    weight: r.Type.Number(),
                  })),
                  (n.CardanoCVoteRegistrationParameters = r.Type.Object({
                    votePublicKey: r.Type.Optional(r.Type.String()),
                    stakingPath: o.DerivationPath,
                    paymentAddressParameters: r.Type.Optional(n.CardanoAddressParameters),
                    nonce: r.Type.String(),
                    format: r.Type.Optional(i.PROTO.EnumCardanoCVoteRegistrationFormat),
                    delegations: r.Type.Optional(
                      r.Type.Array(n.CardanoCVoteRegistrationDelegation)
                    ),
                    votingPurpose: r.Type.Optional(r.Type.Number()),
                    paymentAddress: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoAuxiliaryData = r.Type.Object({
                    hash: r.Type.Optional(r.Type.String()),
                    cVoteRegistrationParameters: r.Type.Optional(
                      n.CardanoCVoteRegistrationParameters
                    ),
                  })),
                  (n.CardanoSignTransaction = r.Type.Object({
                    inputs: r.Type.Array(n.CardanoInput),
                    outputs: r.Type.Array(n.CardanoOutput),
                    fee: r.Type.Uint(),
                    ttl: r.Type.Optional(r.Type.Uint()),
                    certificates: r.Type.Optional(r.Type.Array(n.CardanoCertificate)),
                    withdrawals: r.Type.Optional(r.Type.Array(n.CardanoWithdrawal)),
                    validityIntervalStart: r.Type.Optional(r.Type.String()),
                    auxiliaryData: r.Type.Optional(n.CardanoAuxiliaryData),
                    mint: r.Type.Optional(n.CardanoMint),
                    scriptDataHash: r.Type.Optional(r.Type.String()),
                    collateralInputs: r.Type.Optional(r.Type.Array(n.CardanoCollateralInput)),
                    requiredSigners: r.Type.Optional(r.Type.Array(n.CardanoRequiredSigner)),
                    collateralReturn: r.Type.Optional(n.CardanoOutput),
                    totalCollateral: r.Type.Optional(r.Type.String()),
                    referenceInputs: r.Type.Optional(r.Type.Array(n.CardanoReferenceInput)),
                    additionalWitnessRequests: r.Type.Optional(r.Type.Array(o.DerivationPath)),
                    protocolMagic: r.Type.Number(),
                    networkId: r.Type.Number(),
                    signingMode: i.PROTO.EnumCardanoTxSigningMode,
                    derivationType: r.Type.Optional(i.PROTO.EnumCardanoDerivationType),
                    includeNetworkId: r.Type.Optional(r.Type.Boolean()),
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                    tagCborSets: r.Type.Optional(r.Type.Boolean()),
                  })),
                  (n.CardanoSignTransactionExtended = r.Type.Intersect([
                    n.CardanoSignTransaction,
                    r.Type.Object({
                      unsignedTx: r.Type.Object({ body: r.Type.String(), hash: r.Type.String() }),
                      testnet: r.Type.Boolean(),
                    }),
                  ])),
                  (n.CardanoSignedTxWitness = r.Type.Object({
                    type: i.PROTO.EnumCardanoTxWitnessType,
                    pubKey: r.Type.String(),
                    signature: r.Type.String(),
                    chainCode: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoAuxiliaryDataSupplement = r.Type.Object({
                    type: i.PROTO.EnumCardanoTxAuxiliaryDataSupplementType,
                    auxiliaryDataHash: r.Type.String(),
                    cVoteRegistrationSignature: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CardanoSignedTxData = r.Type.Object({
                    hash: r.Type.String(),
                    witnesses: r.Type.Array(n.CardanoSignedTxWitness),
                    auxiliaryDataSupplement: r.Type.Optional(n.CardanoAuxiliaryDataSupplement),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/cardano/index.js',
      },
    ],
    [
      3354,
      { '../../../constants': 3328, '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.EosSignTransaction =
                    n.EosSDKTransaction =
                    n.EosTxAction =
                    n.EosTxActionCommon =
                    n.EosAuthorization =
                    n.EosTxHeader =
                    n.EosPublicKey =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../../constants'),
                  o = e('../../params');
                (n.EosPublicKey = r.Type.Object({
                  wifPublicKey: r.Type.String(),
                  rawPublicKey: r.Type.String(),
                  path: r.Type.Array(r.Type.Number()),
                  serializedPath: r.Type.String(),
                })),
                  (n.EosTxHeader = r.Type.Object({
                    expiration: r.Type.Union([r.Type.Uint(), r.Type.String()]),
                    refBlockNum: r.Type.Number(),
                    refBlockPrefix: r.Type.Number(),
                    maxNetUsageWords: r.Type.Number(),
                    maxCpuUsageMs: r.Type.Number(),
                    delaySec: r.Type.Number(),
                  })),
                  (n.EosAuthorization = r.Type.Object({
                    threshold: r.Type.Number(),
                    keys: r.Type.Array(i.PROTO.EosAuthorizationKey),
                    accounts: r.Type.Array(
                      r.Type.Object({
                        permission: i.PROTO.EosPermissionLevel,
                        weight: r.Type.Number(),
                      })
                    ),
                    waits: r.Type.Array(i.PROTO.EosAuthorizationWait),
                  })),
                  (n.EosTxActionCommon = r.Type.Object({
                    account: r.Type.String(),
                    authorization: r.Type.Array(i.PROTO.EosPermissionLevel),
                  })),
                  (n.EosTxAction = r.Type.Union([
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('transfer'),
                        data: r.Type.Object({
                          from: r.Type.String(),
                          to: r.Type.String(),
                          quantity: r.Type.String(),
                          memo: r.Type.String(),
                        }),
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('delegatebw'),
                        data: r.Type.Object({
                          from: r.Type.String(),
                          receiver: r.Type.String(),
                          stake_net_quantity: r.Type.String(),
                          stake_cpu_quantity: r.Type.String(),
                          transfer: r.Type.Boolean(),
                        }),
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('undelegatebw'),
                        data: r.Type.Object({
                          from: r.Type.String(),
                          receiver: r.Type.String(),
                          unstake_net_quantity: r.Type.String(),
                          unstake_cpu_quantity: r.Type.String(),
                        }),
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('buyram'),
                        data: r.Type.Object({
                          payer: r.Type.String(),
                          receiver: r.Type.String(),
                          quant: r.Type.String(),
                        }),
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('buyrambytes'),
                        data: i.PROTO.EosActionBuyRamBytes,
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('sellram'),
                        data: i.PROTO.EosActionSellRam,
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('voteproducer'),
                        data: r.Type.Object({
                          voter: r.Type.String(),
                          proxy: r.Type.String(),
                          producers: r.Type.Array(r.Type.String()),
                        }),
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('refund'),
                        data: i.PROTO.EosActionRefund,
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('updateauth'),
                        data: r.Type.Object({
                          account: r.Type.String(),
                          permission: r.Type.String(),
                          parent: r.Type.String(),
                          auth: n.EosAuthorization,
                        }),
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('deleteauth'),
                        data: i.PROTO.EosActionDeleteAuth,
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('linkauth'),
                        data: i.PROTO.EosActionLinkAuth,
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('unlinkauth'),
                        data: i.PROTO.EosActionUnlinkAuth,
                      }),
                    ]),
                    r.Type.Intersect([
                      n.EosTxActionCommon,
                      r.Type.Object({
                        name: r.Type.Literal('newaccount'),
                        data: r.Type.Object({
                          creator: r.Type.String(),
                          name: r.Type.String(),
                          owner: n.EosAuthorization,
                          active: n.EosAuthorization,
                        }),
                      }),
                    ]),
                  ])),
                  (n.EosSDKTransaction = r.Type.Object({
                    chainId: r.Type.String(),
                    header: n.EosTxHeader,
                    actions: r.Type.Array(
                      r.Type.Union([
                        n.EosTxAction,
                        r.Type.Intersect([
                          n.EosTxActionCommon,
                          r.Type.Object({ name: r.Type.String(), data: r.Type.String() }),
                        ]),
                      ])
                    ),
                  })),
                  (n.EosSignTransaction = r.Type.Object({
                    path: o.DerivationPath,
                    transaction: n.EosSDKTransaction,
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/eos/index.js',
      },
    ],
    [
      3355,
      { '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.EthereumVerifyMessage =
                    n.EthereumSignTypedHash =
                    n.EthereumSignTypedData =
                    n.EthereumSignTypedDataMessage =
                    n.EthereumSignTypedDataTypes =
                    n.EthereumSignedTx =
                    n.EthereumSignTransaction =
                    n.EthereumTransactionEIP1559 =
                    n.EthereumAccessList =
                    n.EthereumTransaction =
                    n.EthereumSignMessage =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../params');
                (n.EthereumSignMessage = r.Type.Object({
                  path: i.DerivationPath,
                  message: r.Type.String(),
                  hex: r.Type.Optional(r.Type.Boolean()),
                })),
                  (n.EthereumTransaction = r.Type.Object({
                    to: r.Type.String(),
                    value: r.Type.String(),
                    gasPrice: r.Type.String(),
                    gasLimit: r.Type.String(),
                    maxFeePerGas: r.Type.Optional(r.Type.Undefined()),
                    maxPriorityFeePerGas: r.Type.Optional(r.Type.Undefined()),
                    nonce: r.Type.String(),
                    data: r.Type.Optional(r.Type.String()),
                    chainId: r.Type.Number(),
                    txType: r.Type.Optional(r.Type.Number()),
                  })),
                  (n.EthereumAccessList = r.Type.Object({
                    address: r.Type.String(),
                    storageKeys: r.Type.Array(r.Type.String()),
                  })),
                  (n.EthereumTransactionEIP1559 = r.Type.Object({
                    to: r.Type.String(),
                    value: r.Type.String(),
                    gasLimit: r.Type.String(),
                    gasPrice: r.Type.Optional(r.Type.Undefined()),
                    nonce: r.Type.String(),
                    data: r.Type.Optional(r.Type.String()),
                    chainId: r.Type.Number(),
                    maxFeePerGas: r.Type.String(),
                    maxPriorityFeePerGas: r.Type.String(),
                    accessList: r.Type.Optional(r.Type.Array(n.EthereumAccessList)),
                  })),
                  (n.EthereumSignTransaction = r.Type.Object({
                    path: i.DerivationPath,
                    transaction: r.Type.Union([
                      n.EthereumTransaction,
                      n.EthereumTransactionEIP1559,
                    ]),
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  })),
                  (n.EthereumSignedTx = r.Type.Object({
                    v: r.Type.String(),
                    r: r.Type.String(),
                    s: r.Type.String(),
                    serializedTx: r.Type.String(),
                  }));
                const o = r.Type.Object({ name: r.Type.String(), type: r.Type.String() });
                (n.EthereumSignTypedDataTypes = r.Type.Object(
                  { EIP712Domain: r.Type.Array(o) },
                  { additionalProperties: r.Type.Array(o) }
                )),
                  (n.EthereumSignTypedDataMessage = r.Type.Object({
                    types: n.EthereumSignTypedDataTypes,
                    primaryType: r.Type.String(),
                    domain: r.Type.Object({
                      name: r.Type.Optional(r.Type.String()),
                      version: r.Type.Optional(r.Type.String()),
                      chainId: r.Type.Optional(
                        r.Type.Union([r.Type.Number(), r.Type.BigInt(), r.Type.String()])
                      ),
                      verifyingContract: r.Type.Optional(r.Type.String()),
                      salt: r.Type.Optional(r.Type.Union([r.Type.ArrayBuffer(), r.Type.String()])),
                    }),
                    message: r.Type.Object({}, { additionalProperties: r.Type.Any() }),
                  })),
                  (n.EthereumSignTypedData = r.Type.Object({
                    path: i.DerivationPath,
                    data: n.EthereumSignTypedDataMessage,
                    metamask_v4_compat: r.Type.Boolean(),
                    domain_separator_hash: r.Type.Optional(r.Type.Undefined()),
                    message_hash: r.Type.Optional(r.Type.Undefined()),
                  })),
                  (n.EthereumSignTypedHash = r.Type.Object({
                    path: i.DerivationPath,
                    data: n.EthereumSignTypedDataMessage,
                    metamask_v4_compat: r.Type.Boolean(),
                    domain_separator_hash: r.Type.String(),
                    message_hash: r.Type.Optional(r.Type.String()),
                  })),
                  (n.EthereumVerifyMessage = r.Type.Object({
                    address: r.Type.String(),
                    message: r.Type.String(),
                    hex: r.Type.Optional(r.Type.Boolean()),
                    signature: r.Type.String(),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/ethereum/index.js',
      },
    ],
    [
      3356,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/index.js',
      },
    ],
    [
      3357,
      { '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.RippleSignedTx =
                    n.RippleSignTransaction =
                    n.RippleTransaction =
                    n.RipplePayment =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../params');
                (n.RipplePayment = r.Type.Object({
                  amount: r.Type.String(),
                  destination: r.Type.String(),
                  destinationTag: r.Type.Optional(r.Type.Number()),
                })),
                  (n.RippleTransaction = r.Type.Object({
                    fee: r.Type.String(),
                    flags: r.Type.Optional(r.Type.Number()),
                    sequence: r.Type.Number(),
                    maxLedgerVersion: r.Type.Optional(r.Type.Number()),
                    payment: n.RipplePayment,
                  })),
                  (n.RippleSignTransaction = r.Type.Object({
                    path: i.DerivationPath,
                    transaction: n.RippleTransaction,
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  })),
                  (n.RippleSignedTx = r.Type.Object({
                    serializedTx: r.Type.String(),
                    signature: r.Type.String(),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/ripple/index.js',
      },
    ],
    [
      3358,
      { '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.SolanaSignedTransaction =
                    n.SolanaSignTransaction =
                    n.SolanaTxAdditionalInfo =
                    n.SolanaTxTokenAccountInfo =
                    n.SolanaPublicKey =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../params');
                (n.SolanaPublicKey = r.Type.Intersect([
                  i.PublicKey,
                  r.Type.Object({ publicKey: r.Type.String() }),
                ])),
                  (n.SolanaTxTokenAccountInfo = r.Type.Object({
                    baseAddress: r.Type.String(),
                    tokenProgram: r.Type.String(),
                    tokenMint: r.Type.String(),
                    tokenAccount: r.Type.String(),
                  })),
                  (n.SolanaTxAdditionalInfo = r.Type.Object({
                    tokenAccountsInfos: r.Type.Optional(
                      r.Type.Array(n.SolanaTxTokenAccountInfo, { minItems: 1 })
                    ),
                  })),
                  (n.SolanaSignTransaction = r.Type.Object({
                    path: r.Type.Union([r.Type.String(), r.Type.Array(r.Type.Number())]),
                    serializedTx: r.Type.String(),
                    additionalInfo: r.Type.Optional(n.SolanaTxAdditionalInfo),
                  })),
                  (n.SolanaSignedTransaction = r.Type.Object({ signature: r.Type.String() }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/solana/index.js',
      },
    ],
    [
      3359,
      { '../../../constants': 3328, '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.StellarOperationMessage =
                    n.StellarSignedTx =
                    n.StellarSignTransaction =
                    n.StellarTransaction =
                    n.StellarOperation =
                    n.StellarClaimClaimableBalanceOperation =
                    n.StellarInflationOperation =
                    n.StellarBumpSequenceOperation =
                    n.StellarManageDataOperation =
                    n.StellarAccountMergeOperation =
                    n.StellarAllowTrustOperation =
                    n.StellarChangeTrustOperation =
                    n.StellarSetOptionsOperation =
                    n.StellarManageBuyOfferOperation =
                    n.StellarManageSellOfferOperation =
                    n.StellarPassiveSellOfferOperation =
                    n.StellarPathPaymentStrictSendOperation =
                    n.StellarPathPaymentStrictReceiveOperation =
                    n.StellarPaymentOperation =
                    n.StellarCreateAccountOperation =
                    n.StellarAsset =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../../constants'),
                  o = e('../../params');
                (n.StellarAsset = r.Type.Object({
                  type: r.Type.Union([
                    i.PROTO.EnumStellarAssetType,
                    r.Type.KeyOfEnum(i.PROTO.StellarAssetType),
                  ]),
                  code: r.Type.Optional(r.Type.String()),
                  issuer: r.Type.Optional(r.Type.String()),
                })),
                  (n.StellarCreateAccountOperation = r.Type.Object({
                    type: r.Type.Literal('createAccount'),
                    source: r.Type.Optional(r.Type.String()),
                    destination: r.Type.String(),
                    startingBalance: r.Type.String(),
                  })),
                  (n.StellarPaymentOperation = r.Type.Object({
                    type: r.Type.Literal('payment'),
                    source: r.Type.Optional(r.Type.String()),
                    destination: r.Type.String(),
                    asset: n.StellarAsset,
                    amount: r.Type.String(),
                  })),
                  (n.StellarPathPaymentStrictReceiveOperation = r.Type.Object({
                    type: r.Type.Literal('pathPaymentStrictReceive'),
                    source: r.Type.Optional(r.Type.String()),
                    sendAsset: n.StellarAsset,
                    sendMax: r.Type.Uint(),
                    destination: r.Type.String(),
                    destAsset: n.StellarAsset,
                    destAmount: r.Type.Uint(),
                    path: r.Type.Optional(r.Type.Array(n.StellarAsset)),
                  })),
                  (n.StellarPathPaymentStrictSendOperation = r.Type.Object({
                    type: r.Type.Literal('pathPaymentStrictSend'),
                    source: r.Type.Optional(r.Type.String()),
                    sendAsset: n.StellarAsset,
                    sendAmount: r.Type.Uint(),
                    destination: r.Type.String(),
                    destAsset: n.StellarAsset,
                    destMin: r.Type.Uint(),
                    path: r.Type.Optional(r.Type.Array(n.StellarAsset)),
                  })),
                  (n.StellarPassiveSellOfferOperation = r.Type.Object({
                    type: r.Type.Literal('createPassiveSellOffer'),
                    source: r.Type.Optional(r.Type.String()),
                    buying: n.StellarAsset,
                    selling: n.StellarAsset,
                    amount: r.Type.Uint(),
                    price: r.Type.Object({ n: r.Type.Number(), d: r.Type.Number() }),
                  })),
                  (n.StellarManageSellOfferOperation = r.Type.Object({
                    type: r.Type.Literal('manageSellOffer'),
                    source: r.Type.Optional(r.Type.String()),
                    buying: n.StellarAsset,
                    selling: n.StellarAsset,
                    amount: r.Type.Uint(),
                    offerId: r.Type.Optional(r.Type.Uint()),
                    price: r.Type.Object({ n: r.Type.Number(), d: r.Type.Number() }),
                  })),
                  (n.StellarManageBuyOfferOperation = r.Type.Object({
                    type: r.Type.Literal('manageBuyOffer'),
                    source: r.Type.Optional(r.Type.String()),
                    buying: n.StellarAsset,
                    selling: n.StellarAsset,
                    amount: r.Type.Uint(),
                    offerId: r.Type.Optional(r.Type.Uint()),
                    price: r.Type.Object({ n: r.Type.Number(), d: r.Type.Number() }),
                  })),
                  (n.StellarSetOptionsOperation = r.Type.Object({
                    type: r.Type.Literal('setOptions'),
                    source: r.Type.Optional(r.Type.String()),
                    signer: r.Type.Optional(
                      r.Type.Object({
                        type: i.PROTO.EnumStellarSignerType,
                        key: r.Type.Union([r.Type.String(), r.Type.Buffer()]),
                        weight: r.Type.Optional(r.Type.Number()),
                      })
                    ),
                    inflationDest: r.Type.Optional(r.Type.String()),
                    clearFlags: r.Type.Optional(r.Type.Number()),
                    setFlags: r.Type.Optional(r.Type.Number()),
                    masterWeight: r.Type.Optional(r.Type.Uint()),
                    lowThreshold: r.Type.Optional(r.Type.Uint()),
                    medThreshold: r.Type.Optional(r.Type.Uint()),
                    highThreshold: r.Type.Optional(r.Type.Uint()),
                    homeDomain: r.Type.Optional(r.Type.String()),
                  })),
                  (n.StellarChangeTrustOperation = r.Type.Object({
                    type: r.Type.Literal('changeTrust'),
                    source: r.Type.Optional(r.Type.String()),
                    line: n.StellarAsset,
                    limit: r.Type.String(),
                  })),
                  (n.StellarAllowTrustOperation = r.Type.Object({
                    type: r.Type.Literal('allowTrust'),
                    source: r.Type.Optional(r.Type.String()),
                    trustor: r.Type.String(),
                    assetCode: r.Type.String(),
                    assetType: i.PROTO.EnumStellarAssetType,
                    authorize: r.Type.Optional(
                      r.Type.Union([r.Type.Boolean(), r.Type.Undefined()])
                    ),
                  })),
                  (n.StellarAccountMergeOperation = r.Type.Object({
                    type: r.Type.Literal('accountMerge'),
                    source: r.Type.Optional(r.Type.String()),
                    destination: r.Type.String(),
                  })),
                  (n.StellarManageDataOperation = r.Type.Object({
                    type: r.Type.Literal('manageData'),
                    source: r.Type.Optional(r.Type.String()),
                    name: r.Type.String(),
                    value: r.Type.Optional(r.Type.Union([r.Type.String(), r.Type.Buffer()])),
                  })),
                  (n.StellarBumpSequenceOperation = r.Type.Object({
                    type: r.Type.Literal('bumpSequence'),
                    source: r.Type.Optional(r.Type.String()),
                    bumpTo: r.Type.Uint(),
                  })),
                  (n.StellarInflationOperation = r.Type.Object({
                    type: r.Type.Literal('inflation'),
                    source: r.Type.Optional(r.Type.String()),
                  })),
                  (n.StellarClaimClaimableBalanceOperation = r.Type.Object({
                    type: r.Type.Literal('claimClaimableBalance'),
                    source: r.Type.Optional(r.Type.String()),
                    balanceId: r.Type.String(),
                  })),
                  (n.StellarOperation = r.Type.Union([
                    n.StellarCreateAccountOperation,
                    n.StellarPaymentOperation,
                    n.StellarPathPaymentStrictReceiveOperation,
                    n.StellarPathPaymentStrictSendOperation,
                    n.StellarPassiveSellOfferOperation,
                    n.StellarManageSellOfferOperation,
                    n.StellarManageBuyOfferOperation,
                    n.StellarSetOptionsOperation,
                    n.StellarChangeTrustOperation,
                    n.StellarAllowTrustOperation,
                    n.StellarAccountMergeOperation,
                    n.StellarInflationOperation,
                    n.StellarManageDataOperation,
                    n.StellarBumpSequenceOperation,
                    n.StellarClaimClaimableBalanceOperation,
                  ])),
                  (n.StellarTransaction = r.Type.Object({
                    source: r.Type.String(),
                    fee: r.Type.Number(),
                    sequence: r.Type.Uint(),
                    timebounds: r.Type.Optional(
                      r.Type.Object({ minTime: r.Type.Number(), maxTime: r.Type.Number() })
                    ),
                    memo: r.Type.Optional(
                      r.Type.Object({
                        type: i.PROTO.EnumStellarMemoType,
                        id: r.Type.Optional(r.Type.Uint()),
                        text: r.Type.Optional(r.Type.String()),
                        hash: r.Type.Optional(r.Type.Union([r.Type.String(), r.Type.Buffer()])),
                      })
                    ),
                    operations: r.Type.Array(n.StellarOperation),
                  })),
                  (n.StellarSignTransaction = r.Type.Object({
                    path: o.DerivationPath,
                    networkPassphrase: r.Type.String(),
                    transaction: n.StellarTransaction,
                  })),
                  (n.StellarSignedTx = r.Type.Object({
                    publicKey: r.Type.String(),
                    signature: r.Type.String(),
                  })),
                  (n.StellarOperationMessage = r.Type.Union([
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarCreateAccountOp') }),
                      i.PROTO.StellarCreateAccountOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarPaymentOp') }),
                      i.PROTO.StellarPaymentOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarPathPaymentStrictReceiveOp') }),
                      i.PROTO.StellarPathPaymentStrictReceiveOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarPathPaymentStrictSendOp') }),
                      i.PROTO.StellarPathPaymentStrictSendOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarManageSellOfferOp') }),
                      i.PROTO.StellarManageSellOfferOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarManageBuyOfferOp') }),
                      i.PROTO.StellarManageBuyOfferOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarCreatePassiveSellOfferOp') }),
                      i.PROTO.StellarCreatePassiveSellOfferOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarSetOptionsOp') }),
                      i.PROTO.StellarSetOptionsOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarChangeTrustOp') }),
                      i.PROTO.StellarChangeTrustOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarAllowTrustOp') }),
                      i.PROTO.StellarAllowTrustOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarAccountMergeOp') }),
                      i.PROTO.StellarAccountMergeOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarManageDataOp') }),
                      i.PROTO.StellarManageDataOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarBumpSequenceOp') }),
                      i.PROTO.StellarBumpSequenceOp,
                    ]),
                    r.Type.Intersect([
                      r.Type.Object({ type: r.Type.Literal('StellarClaimClaimableBalanceOp') }),
                      i.PROTO.StellarClaimClaimableBalanceOp,
                    ]),
                  ]));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/stellar/index.js',
      },
    ],
    [
      3360,
      { '../../params': 3366, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TezosSignTransaction =
                    n.TezosOperation =
                    n.TezosDelegationOperation =
                    n.TezosOriginationOperation =
                    n.TezosTransactionOperation =
                    n.TezosParametersManager =
                    n.TezosManagerTransfer =
                    n.TezosRevealOperation =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('../../params');
                (n.TezosRevealOperation = r.Type.Object({
                  source: r.Type.String(),
                  fee: r.Type.Number(),
                  counter: r.Type.Number(),
                  gas_limit: r.Type.Number(),
                  storage_limit: r.Type.Number(),
                  public_key: r.Type.String(),
                })),
                  (n.TezosManagerTransfer = r.Type.Object({
                    destination: r.Type.String(),
                    amount: r.Type.Number(),
                  })),
                  (n.TezosParametersManager = r.Type.Object({
                    set_delegate: r.Type.Optional(r.Type.String()),
                    cancel_delegate: r.Type.Optional(r.Type.Boolean()),
                    transfer: r.Type.Optional(n.TezosManagerTransfer),
                  })),
                  (n.TezosTransactionOperation = r.Type.Object({
                    source: r.Type.String(),
                    destination: r.Type.String(),
                    amount: r.Type.Number(),
                    counter: r.Type.Number(),
                    fee: r.Type.Number(),
                    gas_limit: r.Type.Number(),
                    storage_limit: r.Type.Number(),
                    parameters: r.Type.Optional(r.Type.Array(r.Type.Number())),
                    parameters_manager: r.Type.Optional(n.TezosParametersManager),
                  })),
                  (n.TezosOriginationOperation = r.Type.Object({
                    source: r.Type.String(),
                    balance: r.Type.Number(),
                    delegate: r.Type.Optional(r.Type.String()),
                    script: i.DerivationPath,
                    fee: r.Type.Number(),
                    counter: r.Type.Number(),
                    gas_limit: r.Type.Number(),
                    storage_limit: r.Type.Number(),
                  })),
                  (n.TezosDelegationOperation = r.Type.Object({
                    source: r.Type.String(),
                    delegate: r.Type.String(),
                    fee: r.Type.Number(),
                    counter: r.Type.Number(),
                    gas_limit: r.Type.Number(),
                    storage_limit: r.Type.Number(),
                  })),
                  (n.TezosOperation = r.Type.Object({
                    reveal: r.Type.Optional(n.TezosRevealOperation),
                    transaction: r.Type.Optional(n.TezosTransactionOperation),
                    origination: r.Type.Optional(n.TezosOriginationOperation),
                    delegation: r.Type.Optional(n.TezosDelegationOperation),
                  })),
                  (n.TezosSignTransaction = r.Type.Object({
                    path: i.DerivationPath,
                    branch: r.Type.String(),
                    operation: n.TezosOperation,
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/api/tezos/index.js',
      },
    ],
    [
      3361,
      { './device': 3362, './fees': 3363, '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.CoinInfo =
                    n.MiscNetworkInfo =
                    n.EthereumNetworkInfo =
                    n.BitcoinNetworkInfo =
                    n.BlockchainLink =
                    n.CoinSupport =
                    n.CoinObj =
                    n.Network =
                    n.Bip32 =
                      void 0);
                const r = e('@trezor/schema-utils'),
                  i = e('./fees'),
                  o = e('./device');
                (n.Bip32 = r.Type.Object({ public: r.Type.Number(), private: r.Type.Number() })),
                  (n.Network = r.Type.Object({
                    messagePrefix: r.Type.String(),
                    bech32: r.Type.String(),
                    bip32: n.Bip32,
                    pubKeyHash: r.Type.Number(),
                    scriptHash: r.Type.Number(),
                    wif: r.Type.Number(),
                    forkId: r.Type.Optional(r.Type.Number()),
                  })),
                  (n.CoinObj = r.Type.Object({
                    coin: r.Type.String(),
                    identity: r.Type.Optional(r.Type.String()),
                  })),
                  (n.CoinSupport = r.Type.Composite([
                    r.Type.Object({ connect: r.Type.Boolean() }),
                    r.Type.Record(
                      r.Type.KeyOfEnum(o.DeviceModelInternal),
                      r.Type.Union([r.Type.String(), r.Type.Literal(!1)])
                    ),
                  ])),
                  (n.BlockchainLink = r.Type.Object({
                    type: r.Type.String(),
                    url: r.Type.Array(r.Type.String()),
                  }));
                const s = r.Type.Object({
                  label: r.Type.String(),
                  name: r.Type.String(),
                  shortcut: r.Type.String(),
                  slip44: r.Type.Number(),
                  support: n.CoinSupport,
                  decimals: r.Type.Number(),
                  blockchainLink: r.Type.Optional(n.BlockchainLink),
                  blockTime: r.Type.Number(),
                  minFee: r.Type.Number(),
                  maxFee: r.Type.Number(),
                  defaultFees: r.Type.Array(i.FeeLevel),
                });
                (n.BitcoinNetworkInfo = r.Type.Intersect([
                  s,
                  r.Type.Object({
                    type: r.Type.Literal('bitcoin'),
                    cashAddrPrefix: r.Type.Optional(r.Type.String()),
                    curveName: r.Type.String(),
                    dustLimit: r.Type.Number(),
                    forceBip143: r.Type.Boolean(),
                    hashGenesisBlock: r.Type.String(),
                    maxAddressLength: r.Type.Number(),
                    maxFeeSatoshiKb: r.Type.Number(),
                    minAddressLength: r.Type.Number(),
                    minFeeSatoshiKb: r.Type.Number(),
                    segwit: r.Type.Boolean(),
                    xPubMagic: r.Type.Number(),
                    xPubMagicSegwitNative: r.Type.Optional(r.Type.Number()),
                    xPubMagicSegwit: r.Type.Optional(r.Type.Number()),
                    taproot: r.Type.Optional(r.Type.Boolean()),
                    network: n.Network,
                    isBitcoin: r.Type.Boolean(),
                  }),
                ])),
                  (n.EthereumNetworkInfo = r.Type.Intersect([
                    s,
                    r.Type.Object({
                      type: r.Type.Literal('ethereum'),
                      chainId: r.Type.Number(),
                      network: r.Type.Optional(r.Type.Undefined()),
                    }),
                  ])),
                  (n.MiscNetworkInfo = r.Type.Intersect([
                    s,
                    r.Type.Object({
                      type: r.Type.Union([r.Type.Literal('misc'), r.Type.Literal('nem')]),
                      curve: r.Type.String(),
                      network: r.Type.Optional(r.Type.Undefined()),
                    }),
                  ])),
                  (n.CoinInfo = r.Type.Union([
                    n.BitcoinNetworkInfo,
                    n.EthereumNetworkInfo,
                    n.MiscNetworkInfo,
                  ]));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/coinInfo.js',
      },
    ],
    [
      3362,
      { '@trezor/protobuf': 3376 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r;
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.DeviceModelInternal = n.DeviceUniquePath = n.FirmwareType = void 0),
                  (function (e) {
                    (e.BitcoinOnly = 'bitcoin-only'), (e.Regular = 'regular');
                  })(r || (n.FirmwareType = r = {}));
                n.DeviceUniquePath = e => e;
                var i = e('@trezor/protobuf');
                Object.defineProperty(n, 'DeviceModelInternal', {
                  enumerable: !0,
                  get: function () {
                    return i.DeviceModelInternal;
                  },
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/device.js',
      },
    ],
    [
      3363,
      { '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.SelectFeeLevel = n.FeeLevel = n.FeeInfo = void 0);
                const r = e('@trezor/schema-utils');
                (n.FeeInfo = r.Type.Object({
                  blockTime: r.Type.Number(),
                  minFee: r.Type.Number(),
                  maxFee: r.Type.Number(),
                  dustLimit: r.Type.Number(),
                })),
                  (n.FeeLevel = r.Type.Object({
                    label: r.Type.Union([
                      r.Type.Literal('high'),
                      r.Type.Literal('normal'),
                      r.Type.Literal('economy'),
                      r.Type.Literal('low'),
                      r.Type.Literal('custom'),
                    ]),
                    feePerUnit: r.Type.String(),
                    blocks: r.Type.Number(),
                    feeLimit: r.Type.Optional(r.Type.String()),
                    feePerTx: r.Type.Optional(r.Type.String()),
                  })),
                  (n.SelectFeeLevel = r.Type.Union([
                    r.Type.Object({
                      name: r.Type.String(),
                      fee: r.Type.Literal('0'),
                      feePerByte: r.Type.Optional(r.Type.Undefined()),
                      disabled: r.Type.Literal(!0),
                    }),
                    r.Type.Object({
                      name: r.Type.String(),
                      fee: r.Type.String(),
                      feePerByte: r.Type.String(),
                      minutes: r.Type.Number(),
                      total: r.Type.String(),
                    }),
                  ]));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/fees.js',
      },
    ],
    [
      3364,
      { '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.IntermediaryVersion = void 0);
                const r = e('@trezor/schema-utils');
                n.IntermediaryVersion = r.Type.Union([
                  r.Type.Literal(1),
                  r.Type.Literal(2),
                  r.Type.Literal(3),
                ]);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/firmware.js',
      },
    ],
    [
      3365,
      {
        './account': 3350,
        './api': 3356,
        './api/binance': 3351,
        './api/bitcoin': 3352,
        './api/cardano': 3353,
        './api/eos': 3354,
        './api/ethereum': 3355,
        './api/ripple': 3357,
        './api/solana': 3358,
        './api/stellar': 3359,
        './api/tezos': 3360,
        './coinInfo': 3361,
        './device': 3362,
        './fees': 3363,
        './firmware': 3364,
        './params': 3366,
        './settings': 3367,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
                const r = e('tslib');
                r.__exportStar(e('./api'), n),
                  r.__exportStar(e('./account'), n),
                  r.__exportStar(e('./coinInfo'), n),
                  r.__exportStar(e('./device'), n),
                  r.__exportStar(e('./fees'), n),
                  r.__exportStar(e('./firmware'), n),
                  r.__exportStar(e('./params'), n),
                  r.__exportStar(e('./settings'), n),
                  r.__exportStar(e('./api/cardano'), n),
                  r.__exportStar(e('./api/binance'), n),
                  r.__exportStar(e('./api/bitcoin'), n),
                  r.__exportStar(e('./api/eos'), n),
                  r.__exportStar(e('./api/ripple'), n),
                  r.__exportStar(e('./api/ethereum'), n),
                  r.__exportStar(e('./api/solana'), n),
                  r.__exportStar(e('./api/stellar'), n),
                  r.__exportStar(e('./api/tezos'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/index.js',
      },
    ],
    [
      3366,
      { '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.PublicKey =
                    n.GetPublicKey =
                    n.GetAddress =
                    n.DerivationPath =
                    n.Bundle =
                      void 0);
                const r = e('@trezor/schema-utils');
                (n.Bundle = e => r.Type.Object({ bundle: r.Type.Array(e, { minItems: 1 }) })),
                  (n.DerivationPath = r.Type.Union(
                    [r.Type.String(), r.Type.Array(r.Type.Number())],
                    { description: 'Derivation Path (BIP32).', $id: 'DerivationPath' }
                  )),
                  (n.GetAddress = r.Type.Object({
                    path: n.DerivationPath,
                    address: r.Type.Optional(r.Type.String()),
                    showOnTrezor: r.Type.Optional(r.Type.Boolean({ default: !0 })),
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                    useEventListener: r.Type.Optional(r.Type.Boolean()),
                  })),
                  (n.GetPublicKey = r.Type.Object({
                    path: n.DerivationPath,
                    showOnTrezor: r.Type.Optional(r.Type.Boolean()),
                    suppressBackupWarning: r.Type.Optional(r.Type.Boolean()),
                    chunkify: r.Type.Optional(r.Type.Boolean()),
                  })),
                  (n.PublicKey = r.Type.Object({
                    publicKey: r.Type.String(),
                    path: r.Type.Array(r.Type.Number()),
                    serializedPath: r.Type.String(),
                  }));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/params.js',
      },
    ],
    [
      3367,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/types/settings.js',
      },
    ],
    [
      3368,
      { '@trezor/utils': 3624 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getLog =
                    n.enableLogByPrefix =
                    n.enableLog =
                    n.setLogWriter =
                    n.initLog =
                      void 0);
                const r = '#bada55',
                  i = '#20abd8',
                  o = '#f4a744',
                  s = {
                    '@trezor/connect': `color: ${i}; background: #000;`,
                    '@trezor/connect-web': `color: ${i}; background: #000;`,
                    '@trezor/connect-webextension': `color: ${i}; background: #000;`,
                    IFrame: `color: ${o}; background: #000;`,
                    Core: `color: ${o}; background: #000;`,
                    DeviceList: `color: ${r}; background: #000;`,
                    Device: `color: ${r}; background: #000;`,
                    DeviceCommands: `color: ${r}; background: #000;`,
                    '@trezor/transport': `color: ${r}; background: #000;`,
                    InteractionTimeout: `color: ${r}; background: #000;`,
                    '@trezor/connect-popup': 'color: #fbd948; background: #000;',
                  },
                  a = new (e('@trezor/utils').LogsManager)({ colors: s });
                (n.initLog = a.initLog.bind(a)),
                  (n.setLogWriter = a.setLogWriter.bind(a)),
                  (n.enableLog = a.enableLog.bind(a)),
                  (n.enableLogByPrefix = a.enableLogByPrefix.bind(a)),
                  (n.getLog = a.getLog.bind(a));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/utils/debug.js',
      },
    ],
    [
      3369,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.ProxyEventEmitter = void 0);
                n.ProxyEventEmitter = class {
                  constructor(e) {
                    this.eventEmitters = e;
                  }
                  emit(e, ...t) {
                    return this.eventEmitters.forEach(n => n.emit(e, ...t)), !0;
                  }
                  on(e, t) {
                    return this.eventEmitters.forEach(n => n.on(e, t)), this;
                  }
                  off(e, t) {
                    return this.eventEmitters.forEach(n => n.off(e, t)), this;
                  }
                  once(e, t) {
                    return this.eventEmitters.forEach(n => n.once(e, t)), this;
                  }
                  addListener(e, t) {
                    return this.eventEmitters.forEach(n => n.addListener(e, t)), this;
                  }
                  prependListener(e, t) {
                    return this.eventEmitters.forEach(n => n.prependListener(e, t)), this;
                  }
                  prependOnceListener(e, t) {
                    return this.eventEmitters.forEach(n => n.prependOnceListener(e, t)), this;
                  }
                  removeAllListeners(e) {
                    return this.eventEmitters.forEach(t => t.removeAllListeners(e)), this;
                  }
                  removeListener(e, t) {
                    return this.eventEmitters.forEach(n => n.removeListener(e, t)), this;
                  }
                  setMaxListeners(e) {
                    return this.eventEmitters.forEach(t => t.setMaxListeners(e)), this;
                  }
                  eventNames() {
                    return this.eventEmitters[0].eventNames();
                  }
                  getMaxListeners() {
                    return this.eventEmitters[0].getMaxListeners();
                  }
                  listenerCount(e, t) {
                    return this.eventEmitters[0].listenerCount(e, t);
                  }
                  rawListeners(e) {
                    return this.eventEmitters[0].rawListeners(e);
                  }
                  listeners(e) {
                    return this.eventEmitters[0].listeners(e);
                  }
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/utils/proxy-event-emitter.js',
      },
    ],
    [
      3370,
      { '@trezor/utils': 3624 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getOnionDomain = n.getHost = n.getOrigin = void 0);
                const r = e('@trezor/utils');
                n.getOrigin = e => {
                  var t;
                  if ('string' != typeof e) return 'unknown';
                  if (0 === e.indexOf('file://')) return 'file://';
                  const [n] = null !== (t = e.match(/^https?:\/\/[^/]+/)) && void 0 !== t ? t : [];
                  return null != n ? n : 'unknown';
                };
                n.getHost = e => {
                  var t;
                  if ('string' != typeof e) return;
                  const [, , n] =
                    null !== (t = e.match(/^(https?):\/\/([^:/]+)?/i)) && void 0 !== t ? t : [];
                  if (n) {
                    const e = n.split('.');
                    return e.length > 2 ? e.slice(e.length - 2, e.length).join('.') : n;
                  }
                };
                n.getOnionDomain = (e, t) => {
                  var n;
                  return Array.isArray(e)
                    ? e.map(e => {
                        var n;
                        return null !== (n = (0, r.urlToOnion)(e, t)) && void 0 !== n ? n : e;
                      })
                    : 'string' == typeof e && null !== (n = (0, r.urlToOnion)(e, t)) && void 0 !== n
                      ? n
                      : e;
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect',
        file: 'node_modules/@trezor/connect/lib/utils/urlUtils.js',
      },
    ],
    [
      3371,
      { './jws': 3373, _process: 5077, tslib: 5685, 'ua-parser-js': 5688 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                (function (t) {
                  (function () {
                    Object.defineProperty(n, '__esModule', { value: !0 }),
                      (n.envUtils =
                        n.getJWSPublicKey =
                        n.getEnvironment =
                        n.isNative =
                        n.isDesktop =
                        n.isWeb =
                          void 0);
                    const r = e('tslib').__importDefault(e('ua-parser-js')),
                      i = e('./jws');
                    n.isWeb = () => !1;
                    n.isDesktop = () => !1;
                    n.isNative = () => !1;
                    let o;
                    n.getEnvironment = () => ((0, n.isWeb)() ? 'web' : 'desktop');
                    const s = () => window.navigator.userAgent,
                      a = () => {
                        if (!o) {
                          const e = s();
                          o = new r.default(e);
                        }
                        return o;
                      },
                      c = () => /Android/.test(s()),
                      u = () => /CrOS/.test(s()),
                      p = () => {
                        const e = a().getBrowser().name;
                        return (null == e ? void 0 : e.toLowerCase()) || '';
                      },
                      l = () => window.navigator.platform,
                      d = () => (void 0 !== t ? t.platform : ''),
                      _ = () =>
                        'darwin' === d() ||
                        ('undefined' != typeof window ? l().startsWith('Mac') : void 0),
                      T = () =>
                        'win32' === d() ||
                        ('undefined' != typeof window ? l().startsWith('Win') : void 0),
                      y = () => ['iPhone', 'iPad', 'iPod'].includes(l()),
                      E = () =>
                        'linux' === d() ||
                        ('undefined' != typeof window
                          ? !c() && !u() && l().startsWith('Linux')
                          : void 0),
                      m = () => !1;
                    (n.getJWSPublicKey = () => i.publicKey.dev),
                      (n.envUtils = {
                        isWeb: n.isWeb,
                        isDesktop: n.isDesktop,
                        isNative: n.isNative,
                        getEnvironment: n.getEnvironment,
                        getUserAgent: s,
                        isAndroid: c,
                        isChromeOs: u,
                        getOsVersion: () => a().getOS().version || '',
                        getBrowserName: p,
                        getBrowserVersion: () => a().getBrowser().version || '',
                        getCommitHash: () => '',
                        getDeviceType: () => a().getDevice().type,
                        getSuiteVersion: () => '',
                        isFirefox: () => 'firefox' === p(),
                        getPlatform: l,
                        getPlatformLanguages: () => window.navigator.languages,
                        getScreenWidth: () => window.screen.width,
                        getScreenHeight: () => window.screen.height,
                        getWindowWidth: () => window.innerWidth,
                        getWindowHeight: () => window.innerHeight,
                        getLocationOrigin: () => window.location.origin,
                        getLocationHostname: () => window.location.hostname,
                        getProcessPlatform: d,
                        isMacOs: _,
                        isWindows: T,
                        isIOs: y,
                        isLinux: E,
                        isCodesignBuild: m,
                        getOsName: () =>
                          T()
                            ? 'windows'
                            : _()
                              ? 'macos'
                              : c()
                                ? 'android'
                                : u()
                                  ? 'chromeos'
                                  : E()
                                    ? 'linux'
                                    : y()
                                      ? 'ios'
                                      : '',
                        getOsNameWeb: () => a().getOS().name,
                        getOsFamily: () => {
                          const e = a().getOS().name;
                          return 'Windows' === e ? 'Windows' : 'Mac OS' === e ? 'MacOS' : 'Linux';
                        },
                        getJWSPublicKey: n.getJWSPublicKey,
                      });
                  }).call(this);
                }).call(this, e('_process'));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common>@trezor/env-utils',
        file: 'node_modules/@trezor/env-utils/lib/envUtils.js',
      },
    ],
    [
      3372,
      { './envUtils': 3371 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.getJWSPublicKey =
                    n.getOsFamily =
                    n.getOsNameWeb =
                    n.getOsName =
                    n.isCodesignBuild =
                    n.isLinux =
                    n.isIOs =
                    n.isWindows =
                    n.isMacOs =
                    n.getProcessPlatform =
                    n.getLocationHostname =
                    n.getLocationOrigin =
                    n.getWindowHeight =
                    n.getWindowWidth =
                    n.getScreenHeight =
                    n.getScreenWidth =
                    n.getPlatformLanguages =
                    n.getPlatform =
                    n.isFirefox =
                    n.getSuiteVersion =
                    n.getOsVersion =
                    n.getDeviceType =
                    n.getCommitHash =
                    n.getBrowserName =
                    n.getBrowserVersion =
                    n.isChromeOs =
                    n.isAndroid =
                    n.getUserAgent =
                    n.getEnvironment =
                    n.isNative =
                    n.isDesktop =
                    n.isWeb =
                      void 0);
                const r = e('./envUtils');
                (n.isWeb = r.envUtils.isWeb),
                  (n.isDesktop = r.envUtils.isDesktop),
                  (n.isNative = r.envUtils.isNative),
                  (n.getEnvironment = r.envUtils.getEnvironment),
                  (n.getUserAgent = r.envUtils.getUserAgent),
                  (n.isAndroid = r.envUtils.isAndroid),
                  (n.isChromeOs = r.envUtils.isChromeOs),
                  (n.getBrowserVersion = r.envUtils.getBrowserVersion),
                  (n.getBrowserName = r.envUtils.getBrowserName),
                  (n.getCommitHash = r.envUtils.getCommitHash),
                  (n.getDeviceType = r.envUtils.getDeviceType),
                  (n.getOsVersion = r.envUtils.getOsVersion),
                  (n.getSuiteVersion = r.envUtils.getSuiteVersion),
                  (n.isFirefox = r.envUtils.isFirefox),
                  (n.getPlatform = r.envUtils.getPlatform),
                  (n.getPlatformLanguages = r.envUtils.getPlatformLanguages),
                  (n.getScreenWidth = r.envUtils.getScreenWidth),
                  (n.getScreenHeight = r.envUtils.getScreenHeight),
                  (n.getWindowWidth = r.envUtils.getWindowWidth),
                  (n.getWindowHeight = r.envUtils.getWindowHeight),
                  (n.getLocationOrigin = r.envUtils.getLocationOrigin),
                  (n.getLocationHostname = r.envUtils.getLocationHostname),
                  (n.getProcessPlatform = r.envUtils.getProcessPlatform),
                  (n.isMacOs = r.envUtils.isMacOs),
                  (n.isWindows = r.envUtils.isWindows),
                  (n.isIOs = r.envUtils.isIOs),
                  (n.isLinux = r.envUtils.isLinux),
                  (n.isCodesignBuild = r.envUtils.isCodesignBuild),
                  (n.getOsName = r.envUtils.getOsName),
                  (n.getOsNameWeb = r.envUtils.getOsNameWeb),
                  (n.getOsFamily = r.envUtils.getOsFamily),
                  (n.getJWSPublicKey = r.envUtils.getJWSPublicKey);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common>@trezor/env-utils',
        file: 'node_modules/@trezor/env-utils/lib/index.js',
      },
    ],
    [
      3373,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.publicKey = void 0),
                  (n.publicKey = {
                    dev: '-----BEGIN PUBLIC KEY-----\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEbSUHJlr17+NywPS/w+xMkp3dSD8eWXSuAfFKwonZPe5fL63kISipJC+eJP7Mad0WxgyJoiMsZCV6BZPK2jIFdg==\n-----END PUBLIC KEY-----',
                    codesign:
                      '-----BEGIN PUBLIC KEY-----\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAES7MbBzU/v5BsljkTM8Mz0Jsk+Nn5n2wH\no2/+MUI3TgCVdTbEHhn3HXaY7GJ6TLyWqxn+pIDY9wUUAyUqOStTUQ==\n-----END PUBLIC KEY-----',
                  });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect-common>@trezor/env-utils',
        file: 'node_modules/@trezor/env-utils/lib/jws.js',
      },
    ],
    [
      3374,
      { './utils': 3380, buffer: 4139, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                (function (t) {
                  (function () {
                    Object.defineProperty(n, '__esModule', { value: !0 }),
                      (n.decode = void 0),
                      (n.messageToJSON = s);
                    const r = e('tslib'),
                      i = e('./utils'),
                      o = (e, n) => {
                        if ((0, i.isPrimitiveField)(e.type))
                          return e.optional && void 0 === n
                            ? null
                            : 'bytes' === e.type
                              ? t.from(n).toString('hex')
                              : e.long
                                ? Number.isSafeInteger(n.toNumber())
                                  ? n.toNumber()
                                  : n.toString()
                                : n;
                        if ('valuesById' in e.resolvedType) return e.resolvedType.valuesById[n];
                        if (e.resolvedType.fields) return s(n, e.resolvedType.fields);
                        throw new Error(`transport: decode: case not handled: ${e}`);
                      };
                    function s(e, t) {
                      if (!e) return {};
                      const n = r.__rest(e, []),
                        i = {};
                      return (
                        Object.keys(t).forEach(e => {
                          const r = t[e],
                            s = n[e];
                          r.repeated ? (i[e] = s.map(e => o(r, e))) : (i[e] = o(r, s));
                        }),
                        i
                      );
                    }
                    n.decode = (e, t) => {
                      const n = e.decode(new Uint8Array(t));
                      return s(n, n.$type.fields);
                    };
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/decode.js',
      },
    ],
    [
      3375,
      { './utils': 3380, buffer: 4139, 'protobufjs/light': 5104 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                (function (t) {
                  (function () {
                    Object.defineProperty(n, '__esModule', { value: !0 }),
                      (n.encode = void 0),
                      (n.patch = s);
                    const r = e('protobufjs/light'),
                      i = e('./utils'),
                      o = (e, n) => {
                        if ('bytes' === e) return 'string' != typeof n || n ? t.from(n, 'hex') : n;
                        if ('number' == typeof n && !Number.isSafeInteger(n))
                          throw new RangeError('field value is not within safe integer range');
                        return n;
                      };
                    function s(e, t) {
                      const n = {};
                      return e.fields
                        ? (Object.keys(e.fields).forEach(a => {
                            const c = e.fields[a],
                              u = t[a];
                            if (void 0 !== u)
                              if ((0, i.isPrimitiveField)(c.type))
                                c.repeated
                                  ? (n[a] = u.map(e => o(c.type, e)))
                                  : (n[a] = o(c.type, u));
                              else if (c.repeated) {
                                const t = e.lookupTypeOrEnum(c.type);
                                t instanceof r.Enum ? (n[a] = u) : (n[a] = u.map(e => s(t, e)));
                              } else if ('object' == typeof u && null !== u) {
                                const t = e.lookupType(c.type);
                                n[a] = s(t, u);
                              } else if ('number' == typeof u) {
                                const t = e.lookupEnum(c.type);
                                n[a] = t.values[u];
                              } else n[a] = u;
                          }),
                          n)
                        : n;
                    }
                    n.encode = (e, n) => {
                      const r = s(e, n),
                        i = e.fromObject(r),
                        o = e.encode(i).finish();
                      return t.from(o);
                    };
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/encode.js',
      },
    ],
    [
      3376,
      {
        './decode': 3374,
        './encode': 3375,
        './messages': 3378,
        './messages-schema': 3377,
        './types': 3379,
        './utils': 3380,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.DeviceModelInternal =
                    n.MessagesSchema =
                    n.createMessageFromType =
                    n.createMessageFromName =
                    n.parseConfigure =
                    n.Messages =
                      void 0);
                const r = e('tslib');
                r.__exportStar(e('./decode'), n),
                  r.__exportStar(e('./encode'), n),
                  (n.Messages = r.__importStar(e('./messages'))),
                  r.__exportStar(e('./types'), n);
                var i = e('./utils');
                Object.defineProperty(n, 'parseConfigure', {
                  enumerable: !0,
                  get: function () {
                    return i.parseConfigure;
                  },
                }),
                  Object.defineProperty(n, 'createMessageFromName', {
                    enumerable: !0,
                    get: function () {
                      return i.createMessageFromName;
                    },
                  }),
                  Object.defineProperty(n, 'createMessageFromType', {
                    enumerable: !0,
                    get: function () {
                      return i.createMessageFromType;
                    },
                  }),
                  (n.MessagesSchema = r.__importStar(e('./messages-schema')));
                var o = e('./messages-schema');
                Object.defineProperty(n, 'DeviceModelInternal', {
                  enumerable: !0,
                  get: function () {
                    return o.DeviceModelInternal;
                  },
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/index.js',
      },
    ],
    [
      3377,
      { '@trezor/schema-utils': 3387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TxRequest =
                    n.TxRequestSerializedType =
                    n.TxRequestDetailsType =
                    n.RequestType =
                    n.EnumEnum_RequestType =
                    n.Enum_RequestType =
                    n.SignTx =
                    n.CoinJoinRequest =
                    n.VerifyMessage =
                    n.MessageSignature =
                    n.SignMessage =
                    n.OwnershipId =
                    n.GetOwnershipId =
                    n.Address =
                    n.GetAddress =
                    n.PublicKey =
                    n.GetPublicKey =
                    n.MultisigRedeemScriptType =
                    n.HDNodePathType =
                    n.HDNodeType =
                    n.EnumAmountUnit =
                    n.AmountUnit =
                    n.EnumDecredStakingSpendType =
                    n.DecredStakingSpendType =
                    n.OutputScriptType =
                    n.EnumEnum_OutputScriptType =
                    n.Enum_OutputScriptType =
                    n.InputScriptType =
                    n.EnumEnum_InputScriptType =
                    n.Enum_InputScriptType =
                    n.BinanceSignedTx =
                    n.BinanceCancelMsg =
                    n.BinanceOrderMsg =
                    n.EnumBinanceTimeInForce =
                    n.BinanceTimeInForce =
                    n.EnumBinanceOrderSide =
                    n.BinanceOrderSide =
                    n.EnumBinanceOrderType =
                    n.BinanceOrderType =
                    n.BinanceTransferMsg =
                    n.BinanceInputOutput =
                    n.BinanceCoin =
                    n.BinanceTxRequest =
                    n.BinanceSignTx =
                    n.BinancePublicKey =
                    n.BinanceGetPublicKey =
                    n.BinanceAddress =
                    n.BinanceGetAddress =
                    n.EnumDeviceModelInternal =
                    n.DeviceModelInternal =
                      void 0),
                  (n.CardanoPoolRelayType =
                    n.EnumCardanoDRepType =
                    n.CardanoDRepType =
                    n.EnumCardanoCertificateType =
                    n.CardanoCertificateType =
                    n.EnumCardanoTxOutputSerializationFormat =
                    n.CardanoTxOutputSerializationFormat =
                    n.EnumCardanoNativeScriptHashDisplayFormat =
                    n.CardanoNativeScriptHashDisplayFormat =
                    n.EnumCardanoNativeScriptType =
                    n.CardanoNativeScriptType =
                    n.EnumCardanoAddressType =
                    n.CardanoAddressType =
                    n.EnumCardanoDerivationType =
                    n.CardanoDerivationType =
                    n.ProdTestT1 =
                    n.FirmwareUpload =
                    n.FirmwareRequest =
                    n.FirmwareErase =
                    n.AuthorizeCoinJoin =
                    n.OwnershipProof =
                    n.GetOwnershipProof =
                    n.TxAckPrevExtraData =
                    n.TxAckPrevExtraDataWrapper =
                    n.TxAckPrevOutput =
                    n.TxAckPrevOutputWrapper =
                    n.TxAckPrevInput =
                    n.TxAckPrevInputWrapper =
                    n.TxAckPrevMeta =
                    n.TxAckOutput =
                    n.TxAckOutputWrapper =
                    n.TxAckInput =
                    n.TxAckInputWrapper =
                    n.TxAck =
                    n.TxAckResponse =
                    n.TxAckPaymentRequest =
                    n.PaymentRequestMemo =
                    n.CoinPurchaseMemo =
                    n.RefundMemo =
                    n.TextMemo =
                    n.PrevOutput =
                    n.PrevInput =
                    n.PrevTx =
                    n.TxOutput =
                    n.TxOutputType =
                    n.ChangeOutputScriptType =
                    n.TxOutputBinType =
                    n.TxInput =
                    n.TxInputType =
                    n.InternalInputScriptType =
                      void 0),
                  (n.Failure =
                    n.EnumFailureType =
                    n.FailureType =
                    n.Success =
                    n.CardanoSignTxFinished =
                    n.CardanoTxBodyHash =
                    n.CardanoTxHostAck =
                    n.CardanoTxWitnessResponse =
                    n.CardanoTxWitnessRequest =
                    n.CardanoTxAuxiliaryDataSupplement =
                    n.CardanoTxItemAck =
                    n.CardanoTxReferenceInput =
                    n.CardanoTxRequiredSigner =
                    n.CardanoTxCollateralInput =
                    n.CardanoTxMint =
                    n.CardanoTxAuxiliaryData =
                    n.CardanoCVoteRegistrationParametersType =
                    n.CardanoCVoteRegistrationDelegation =
                    n.CardanoTxWithdrawal =
                    n.CardanoTxCertificate =
                    n.CardanoDRep =
                    n.CardanoPoolParametersType =
                    n.CardanoPoolMetadataType =
                    n.CardanoPoolRelayParameters =
                    n.CardanoPoolOwner =
                    n.CardanoTxReferenceScriptChunk =
                    n.CardanoTxInlineDatumChunk =
                    n.CardanoToken =
                    n.CardanoAssetGroup =
                    n.CardanoTxOutput =
                    n.CardanoTxInput =
                    n.CardanoSignTxInit =
                    n.CardanoPublicKey =
                    n.CardanoGetPublicKey =
                    n.CardanoAddress =
                    n.CardanoGetAddress =
                    n.CardanoAddressParametersType =
                    n.CardanoNativeScriptHash =
                    n.CardanoGetNativeScriptHash =
                    n.CardanoNativeScript =
                    n.CardanoBlockchainPointerType =
                    n.EnumCardanoTxWitnessType =
                    n.CardanoTxWitnessType =
                    n.EnumCardanoTxSigningMode =
                    n.CardanoTxSigningMode =
                    n.EnumCardanoCVoteRegistrationFormat =
                    n.CardanoCVoteRegistrationFormat =
                    n.EnumCardanoTxAuxiliaryDataSupplementType =
                    n.CardanoTxAuxiliaryDataSupplementType =
                    n.EnumCardanoPoolRelayType =
                      void 0),
                  (n.EosActionUpdateAuth =
                    n.EosActionVoteProducer =
                    n.EosActionSellRam =
                    n.EosActionBuyRamBytes =
                    n.EosActionBuyRam =
                    n.EosActionRefund =
                    n.EosActionUndelegate =
                    n.EosActionDelegate =
                    n.EosActionTransfer =
                    n.EosActionCommon =
                    n.EosAuthorization =
                    n.EosAuthorizationWait =
                    n.EosAuthorizationAccount =
                    n.EosAuthorizationKey =
                    n.EosPermissionLevel =
                    n.EosAsset =
                    n.EosTxActionRequest =
                    n.EosSignTx =
                    n.EosTxHeader =
                    n.EosPublicKey =
                    n.EosGetPublicKey =
                    n.DebugLinkOptigaSetSecMax =
                    n.DebugLinkResetDebugEvents =
                    n.EnumDebugWaitType =
                    n.DebugWaitType =
                    n.EnumDebugPhysicalButton =
                    n.DebugPhysicalButton =
                    n.EnumDebugButton =
                    n.DebugButton =
                    n.ECDHSessionKey =
                    n.GetECDHSessionKey =
                    n.SignedIdentity =
                    n.SignIdentity =
                    n.IdentityType =
                    n.CipheredKeyValue =
                    n.CipherKeyValue =
                    n.Deprecated_PassphraseStateAck =
                    n.Deprecated_PassphraseStateRequest =
                    n.PassphraseAck =
                    n.PassphraseRequest =
                    n.PinMatrixAck =
                    n.PinMatrixRequest =
                    n.PinMatrixRequestType =
                    n.EnumEnum_PinMatrixRequestType =
                    n.Enum_PinMatrixRequestType =
                    n.ButtonAck =
                    n.ButtonRequest =
                    n.ButtonRequestType =
                    n.EnumEnum_ButtonRequestType =
                    n.Enum_ButtonRequestType =
                      void 0),
                  (n.Enum_BackupAvailability =
                    n.GetFeatures =
                    n.Initialize =
                    n.HomescreenFormat =
                    n.EnumEnum_HomescreenFormat =
                    n.Enum_HomescreenFormat =
                    n.DisplayRotation =
                    n.EnumEnum_DisplayRotation =
                    n.Enum_DisplayRotation =
                    n.SafetyCheckLevel =
                    n.EnumEnum_SafetyCheckLevel =
                    n.Enum_SafetyCheckLevel =
                    n.BackupType =
                    n.EnumEnum_BackupType =
                    n.Enum_BackupType =
                    n.EthereumTypedDataSignature =
                    n.EthereumSignTypedHash =
                    n.EthereumVerifyMessage =
                    n.EthereumMessageSignature =
                    n.EthereumSignMessage =
                    n.EthereumTxAck =
                    n.EthereumTxRequest =
                    n.EthereumSignTxEIP1559 =
                    n.EthereumAccessList =
                    n.EthereumSignTx =
                    n.EthereumAddress =
                    n.EthereumGetAddress =
                    n.EthereumPublicKey =
                    n.EthereumGetPublicKey =
                    n.EthereumTypedDataValueAck =
                    n.EthereumTypedDataValueRequest =
                    n.EthereumTypedDataStructAck =
                    n.EthereumStructMember =
                    n.EthereumFieldType =
                    n.EnumEthereumDataType =
                    n.EthereumDataType =
                    n.EthereumTypedDataStructRequest =
                    n.EthereumSignTypedData =
                    n.EthereumDefinitions =
                    n.EthereumTokenInfo =
                    n.EthereumNetworkInfo =
                    n.EnumEthereumDefinitionType =
                    n.EthereumDefinitionType =
                    n.EosSignedTx =
                    n.EosTxActionAck =
                    n.EosActionUnknown =
                    n.EosActionNewAccount =
                    n.EosActionUnlinkAuth =
                    n.EosActionLinkAuth =
                    n.EosActionDeleteAuth =
                      void 0),
                  (n.GetNextU2FCounter =
                    n.SetU2FCounter =
                    n.WordAck =
                    n.WordRequest =
                    n.WordRequestType =
                    n.EnumEnum_WordRequestType =
                    n.Enum_WordRequestType =
                    n.EntropyAck =
                    n.EntropyRequest =
                    n.BackupDevice =
                    n.Slip39Group =
                    n.ResetDevice =
                    n.LoadDevice =
                    n.WipeDevice =
                    n.AuthenticityProof =
                    n.AuthenticateDevice =
                    n.FirmwareHash =
                    n.GetFirmwareHash =
                    n.Entropy =
                    n.GetEntropy =
                    n.Cancel =
                    n.Ping =
                    n.SdProtect =
                    n.EnumSdProtectOperationType =
                    n.SdProtectOperationType =
                    n.ChangeWipeCode =
                    n.ChangePin =
                    n.ApplyFlags =
                    n.TranslationDataAck =
                    n.TranslationDataRequest =
                    n.ChangeLanguage =
                    n.ApplySettings =
                    n.EndSession =
                    n.SetBusy =
                    n.LockDevice =
                    n.Features =
                    n.RecoveryDevice =
                    n.RecoveryType =
                    n.EnumEnum_RecoveryType =
                    n.Enum_RecoveryType =
                    n.EnumRecoveryDeviceInputMethod =
                    n.RecoveryDeviceInputMethod =
                    n.Capability =
                    n.EnumEnum_Capability =
                    n.Enum_Capability =
                    n.RecoveryStatus =
                    n.EnumEnum_RecoveryStatus =
                    n.Enum_RecoveryStatus =
                    n.BackupAvailability =
                    n.EnumEnum_BackupAvailability =
                      void 0),
                  (n.SolanaSignTx =
                    n.SolanaTxAdditionalInfo =
                    n.SolanaTxTokenAccountInfo =
                    n.SolanaAddress =
                    n.SolanaGetAddress =
                    n.SolanaPublicKey =
                    n.SolanaGetPublicKey =
                    n.RippleSignedTx =
                    n.RippleSignTx =
                    n.RipplePayment =
                    n.RippleAddress =
                    n.RippleGetAddress =
                    n.NEMDecryptedMessage =
                    n.NEMDecryptMessage =
                    n.NEMSignedTx =
                    n.NEMSignTx =
                    n.NEMImportanceTransfer =
                    n.EnumNEMImportanceTransferMode =
                    n.NEMImportanceTransferMode =
                    n.NEMAggregateModification =
                    n.NEMCosignatoryModification =
                    n.EnumNEMModificationType =
                    n.NEMModificationType =
                    n.NEMMosaicSupplyChange =
                    n.EnumNEMSupplyChangeType =
                    n.NEMSupplyChangeType =
                    n.NEMMosaicCreation =
                    n.NEMMosaicDefinition =
                    n.EnumNEMMosaicLevy =
                    n.NEMMosaicLevy =
                    n.NEMProvisionNamespace =
                    n.NEMTransfer =
                    n.NEMMosaic =
                    n.NEMTransactionCommon =
                    n.NEMAddress =
                    n.NEMGetAddress =
                    n.SetBrightness =
                    n.UnlockBootloader =
                    n.ShowDeviceTutorial =
                    n.UnlockedPathRequest =
                    n.UnlockPath =
                    n.Nonce =
                    n.GetNonce =
                    n.RebootToBootloader =
                    n.EnumBootCommand =
                    n.BootCommand =
                    n.CancelAuthorization =
                    n.PreauthorizedRequest =
                    n.DoPreauthorized =
                    n.NextU2FCounter =
                      void 0),
                  (n.MessageType =
                    n.TezosSignedTx =
                    n.TezosSignTx =
                    n.TezosBallotOp =
                    n.EnumTezosBallotType =
                    n.TezosBallotType =
                    n.TezosProposalOp =
                    n.TezosDelegationOp =
                    n.TezosOriginationOp =
                    n.TezosTransactionOp =
                    n.TezosParametersManager =
                    n.TezosManagerTransfer =
                    n.TezosRevealOp =
                    n.TezosContractID =
                    n.EnumTezosContractType =
                    n.TezosContractType =
                    n.TezosPublicKey =
                    n.TezosGetPublicKey =
                    n.TezosAddress =
                    n.TezosGetAddress =
                    n.StellarSignedTx =
                    n.StellarClaimClaimableBalanceOp =
                    n.StellarBumpSequenceOp =
                    n.StellarManageDataOp =
                    n.StellarAccountMergeOp =
                    n.StellarAllowTrustOp =
                    n.StellarChangeTrustOp =
                    n.StellarSetOptionsOp =
                    n.EnumStellarSignerType =
                    n.StellarSignerType =
                    n.StellarCreatePassiveSellOfferOp =
                    n.StellarManageBuyOfferOp =
                    n.StellarManageSellOfferOp =
                    n.StellarPathPaymentStrictSendOp =
                    n.StellarPathPaymentStrictReceiveOp =
                    n.StellarCreateAccountOp =
                    n.StellarPaymentOp =
                    n.StellarTxOpRequest =
                    n.StellarSignTx =
                    n.EnumStellarMemoType =
                    n.StellarMemoType =
                    n.StellarAddress =
                    n.StellarGetAddress =
                    n.StellarAsset =
                    n.EnumStellarAssetType =
                    n.StellarAssetType =
                    n.SolanaTxSignature =
                      void 0);
                const r = e('@trezor/schema-utils');
                var i, o, s, a, c, u, p, l, d;
                !(function (e) {
                  (e.T1B1 = 'T1B1'),
                    (e.T2T1 = 'T2T1'),
                    (e.T2B1 = 'T2B1'),
                    (e.T3B1 = 'T3B1'),
                    (e.T3T1 = 'T3T1'),
                    (e.T3W1 = 'T3W1');
                })(i || (n.DeviceModelInternal = i = {})),
                  (n.EnumDeviceModelInternal = r.Type.Enum(i)),
                  (n.BinanceGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'BinanceGetAddress' }
                  )),
                  (n.BinanceAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'BinanceAddress' }
                  )),
                  (n.BinanceGetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'BinanceGetPublicKey' }
                  )),
                  (n.BinancePublicKey = r.Type.Object(
                    { public_key: r.Type.String() },
                    { $id: 'BinancePublicKey' }
                  )),
                  (n.BinanceSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      msg_count: r.Type.Number(),
                      account_number: r.Type.Number(),
                      chain_id: r.Type.Optional(r.Type.String()),
                      memo: r.Type.Optional(r.Type.String()),
                      sequence: r.Type.Number(),
                      source: r.Type.Number(),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'BinanceSignTx' }
                  )),
                  (n.BinanceTxRequest = r.Type.Object({}, { $id: 'BinanceTxRequest' })),
                  (n.BinanceCoin = r.Type.Object(
                    { amount: r.Type.Uint(), denom: r.Type.String() },
                    { $id: 'BinanceCoin' }
                  )),
                  (n.BinanceInputOutput = r.Type.Object(
                    { address: r.Type.String(), coins: r.Type.Array(n.BinanceCoin) },
                    { $id: 'BinanceInputOutput' }
                  )),
                  (n.BinanceTransferMsg = r.Type.Object(
                    {
                      inputs: r.Type.Array(n.BinanceInputOutput),
                      outputs: r.Type.Array(n.BinanceInputOutput),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'BinanceTransferMsg' }
                  )),
                  (function (e) {
                    (e[(e.OT_UNKNOWN = 0)] = 'OT_UNKNOWN'),
                      (e[(e.MARKET = 1)] = 'MARKET'),
                      (e[(e.LIMIT = 2)] = 'LIMIT'),
                      (e[(e.OT_RESERVED = 3)] = 'OT_RESERVED');
                  })(o || (n.BinanceOrderType = o = {})),
                  (n.EnumBinanceOrderType = r.Type.Enum(o)),
                  (function (e) {
                    (e[(e.SIDE_UNKNOWN = 0)] = 'SIDE_UNKNOWN'),
                      (e[(e.BUY = 1)] = 'BUY'),
                      (e[(e.SELL = 2)] = 'SELL');
                  })(s || (n.BinanceOrderSide = s = {})),
                  (n.EnumBinanceOrderSide = r.Type.Enum(s)),
                  (function (e) {
                    (e[(e.TIF_UNKNOWN = 0)] = 'TIF_UNKNOWN'),
                      (e[(e.GTE = 1)] = 'GTE'),
                      (e[(e.TIF_RESERVED = 2)] = 'TIF_RESERVED'),
                      (e[(e.IOC = 3)] = 'IOC');
                  })(a || (n.BinanceTimeInForce = a = {})),
                  (n.EnumBinanceTimeInForce = r.Type.Enum(a)),
                  (n.BinanceOrderMsg = r.Type.Object(
                    {
                      id: r.Type.Optional(r.Type.String()),
                      ordertype: n.EnumBinanceOrderType,
                      price: r.Type.Number(),
                      quantity: r.Type.Number(),
                      sender: r.Type.Optional(r.Type.String()),
                      side: n.EnumBinanceOrderSide,
                      symbol: r.Type.Optional(r.Type.String()),
                      timeinforce: n.EnumBinanceTimeInForce,
                    },
                    { $id: 'BinanceOrderMsg' }
                  )),
                  (n.BinanceCancelMsg = r.Type.Object(
                    {
                      refid: r.Type.Optional(r.Type.String()),
                      sender: r.Type.Optional(r.Type.String()),
                      symbol: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'BinanceCancelMsg' }
                  )),
                  (n.BinanceSignedTx = r.Type.Object(
                    { signature: r.Type.String(), public_key: r.Type.String() },
                    { $id: 'BinanceSignedTx' }
                  )),
                  (function (e) {
                    (e[(e.SPENDADDRESS = 0)] = 'SPENDADDRESS'),
                      (e[(e.SPENDMULTISIG = 1)] = 'SPENDMULTISIG'),
                      (e[(e.EXTERNAL = 2)] = 'EXTERNAL'),
                      (e[(e.SPENDWITNESS = 3)] = 'SPENDWITNESS'),
                      (e[(e.SPENDP2SHWITNESS = 4)] = 'SPENDP2SHWITNESS'),
                      (e[(e.SPENDTAPROOT = 5)] = 'SPENDTAPROOT');
                  })(c || (n.Enum_InputScriptType = c = {})),
                  (n.EnumEnum_InputScriptType = r.Type.Enum(c)),
                  (n.InputScriptType = r.Type.KeyOfEnum(c, { $id: 'InputScriptType' })),
                  (function (e) {
                    (e[(e.PAYTOADDRESS = 0)] = 'PAYTOADDRESS'),
                      (e[(e.PAYTOSCRIPTHASH = 1)] = 'PAYTOSCRIPTHASH'),
                      (e[(e.PAYTOMULTISIG = 2)] = 'PAYTOMULTISIG'),
                      (e[(e.PAYTOOPRETURN = 3)] = 'PAYTOOPRETURN'),
                      (e[(e.PAYTOWITNESS = 4)] = 'PAYTOWITNESS'),
                      (e[(e.PAYTOP2SHWITNESS = 5)] = 'PAYTOP2SHWITNESS'),
                      (e[(e.PAYTOTAPROOT = 6)] = 'PAYTOTAPROOT');
                  })(u || (n.Enum_OutputScriptType = u = {})),
                  (n.EnumEnum_OutputScriptType = r.Type.Enum(u)),
                  (n.OutputScriptType = r.Type.KeyOfEnum(u, { $id: 'OutputScriptType' })),
                  (function (e) {
                    (e[(e.SSGen = 0)] = 'SSGen'), (e[(e.SSRTX = 1)] = 'SSRTX');
                  })(p || (n.DecredStakingSpendType = p = {})),
                  (n.EnumDecredStakingSpendType = r.Type.Enum(p)),
                  (function (e) {
                    (e[(e.BITCOIN = 0)] = 'BITCOIN'),
                      (e[(e.MILLIBITCOIN = 1)] = 'MILLIBITCOIN'),
                      (e[(e.MICROBITCOIN = 2)] = 'MICROBITCOIN'),
                      (e[(e.SATOSHI = 3)] = 'SATOSHI');
                  })(l || (n.AmountUnit = l = {})),
                  (n.EnumAmountUnit = r.Type.Enum(l)),
                  (n.HDNodeType = r.Type.Object(
                    {
                      depth: r.Type.Number(),
                      fingerprint: r.Type.Number(),
                      child_num: r.Type.Number(),
                      chain_code: r.Type.String(),
                      private_key: r.Type.Optional(r.Type.String()),
                      public_key: r.Type.String(),
                    },
                    { $id: 'HDNodeType' }
                  )),
                  (n.HDNodePathType = r.Type.Object(
                    {
                      node: r.Type.Union([n.HDNodeType, r.Type.String()]),
                      address_n: r.Type.Array(r.Type.Number()),
                    },
                    { $id: 'HDNodePathType' }
                  )),
                  (n.MultisigRedeemScriptType = r.Type.Object(
                    {
                      pubkeys: r.Type.Array(n.HDNodePathType),
                      signatures: r.Type.Array(r.Type.String()),
                      m: r.Type.Number(),
                      nodes: r.Type.Optional(r.Type.Array(n.HDNodeType)),
                      address_n: r.Type.Optional(r.Type.Array(r.Type.Number())),
                    },
                    { $id: 'MultisigRedeemScriptType' }
                  )),
                  (n.GetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      ecdsa_curve_name: r.Type.Optional(r.Type.String()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      coin_name: r.Type.Optional(r.Type.String()),
                      script_type: r.Type.Optional(n.InputScriptType),
                      ignore_xpub_magic: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'GetPublicKey' }
                  )),
                  (n.PublicKey = r.Type.Object(
                    {
                      node: n.HDNodeType,
                      xpub: r.Type.String(),
                      root_fingerprint: r.Type.Optional(r.Type.Number()),
                      descriptor: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'PublicKey' }
                  )),
                  (n.GetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      coin_name: r.Type.Optional(r.Type.String()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                      script_type: r.Type.Optional(n.InputScriptType),
                      ignore_xpub_magic: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'GetAddress' }
                  )),
                  (n.Address = r.Type.Object(
                    { address: r.Type.String(), mac: r.Type.Optional(r.Type.String()) },
                    { $id: 'Address' }
                  )),
                  (n.GetOwnershipId = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      coin_name: r.Type.Optional(r.Type.String()),
                      multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                      script_type: r.Type.Optional(n.InputScriptType),
                    },
                    { $id: 'GetOwnershipId' }
                  )),
                  (n.OwnershipId = r.Type.Object(
                    { ownership_id: r.Type.String() },
                    { $id: 'OwnershipId' }
                  )),
                  (n.SignMessage = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      message: r.Type.String(),
                      coin_name: r.Type.Optional(r.Type.String()),
                      script_type: r.Type.Optional(n.InputScriptType),
                      no_script_type: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'SignMessage' }
                  )),
                  (n.MessageSignature = r.Type.Object(
                    { address: r.Type.String(), signature: r.Type.String() },
                    { $id: 'MessageSignature' }
                  )),
                  (n.VerifyMessage = r.Type.Object(
                    {
                      address: r.Type.String(),
                      signature: r.Type.String(),
                      message: r.Type.String(),
                      coin_name: r.Type.Optional(r.Type.String()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'VerifyMessage' }
                  )),
                  (n.CoinJoinRequest = r.Type.Object(
                    {
                      fee_rate: r.Type.Number(),
                      no_fee_threshold: r.Type.Number(),
                      min_registrable_amount: r.Type.Number(),
                      mask_public_key: r.Type.Optional(r.Type.String()),
                      signature: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CoinJoinRequest' }
                  )),
                  (n.SignTx = r.Type.Object(
                    {
                      outputs_count: r.Type.Number(),
                      inputs_count: r.Type.Number(),
                      coin_name: r.Type.Optional(r.Type.String()),
                      version: r.Type.Optional(r.Type.Number()),
                      lock_time: r.Type.Optional(r.Type.Number()),
                      expiry: r.Type.Optional(r.Type.Number()),
                      overwintered: r.Type.Optional(r.Type.Boolean()),
                      version_group_id: r.Type.Optional(r.Type.Number()),
                      timestamp: r.Type.Optional(r.Type.Number()),
                      branch_id: r.Type.Optional(r.Type.Number()),
                      amount_unit: r.Type.Optional(n.EnumAmountUnit),
                      decred_staking_ticket: r.Type.Optional(r.Type.Boolean()),
                      serialize: r.Type.Optional(r.Type.Boolean()),
                      coinjoin_request: r.Type.Optional(n.CoinJoinRequest),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'SignTx' }
                  )),
                  (function (e) {
                    (e[(e.TXINPUT = 0)] = 'TXINPUT'),
                      (e[(e.TXOUTPUT = 1)] = 'TXOUTPUT'),
                      (e[(e.TXMETA = 2)] = 'TXMETA'),
                      (e[(e.TXFINISHED = 3)] = 'TXFINISHED'),
                      (e[(e.TXEXTRADATA = 4)] = 'TXEXTRADATA'),
                      (e[(e.TXORIGINPUT = 5)] = 'TXORIGINPUT'),
                      (e[(e.TXORIGOUTPUT = 6)] = 'TXORIGOUTPUT'),
                      (e[(e.TXPAYMENTREQ = 7)] = 'TXPAYMENTREQ');
                  })(d || (n.Enum_RequestType = d = {})),
                  (n.EnumEnum_RequestType = r.Type.Enum(d)),
                  (n.RequestType = r.Type.KeyOfEnum(d, { $id: 'RequestType' })),
                  (n.TxRequestDetailsType = r.Type.Object(
                    {
                      request_index: r.Type.Number(),
                      tx_hash: r.Type.Optional(r.Type.String()),
                      extra_data_len: r.Type.Optional(r.Type.Number()),
                      extra_data_offset: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'TxRequestDetailsType' }
                  )),
                  (n.TxRequestSerializedType = r.Type.Object(
                    {
                      signature_index: r.Type.Optional(r.Type.Number()),
                      signature: r.Type.Optional(r.Type.String()),
                      serialized_tx: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'TxRequestSerializedType' }
                  )),
                  (n.TxRequest = r.Type.Object(
                    {
                      request_type: n.RequestType,
                      details: n.TxRequestDetailsType,
                      serialized: r.Type.Optional(n.TxRequestSerializedType),
                    },
                    { $id: 'TxRequest' }
                  )),
                  (n.InternalInputScriptType = r.Type.Exclude(
                    n.InputScriptType,
                    r.Type.Literal('EXTERNAL'),
                    { $id: 'InternalInputScriptType' }
                  ));
                const _ = r.Type.Object(
                  {
                    prev_hash: r.Type.String(),
                    prev_index: r.Type.Number(),
                    amount: r.Type.Uint(),
                    sequence: r.Type.Optional(r.Type.Number()),
                    multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                    decred_tree: r.Type.Optional(r.Type.Number()),
                    orig_hash: r.Type.Optional(r.Type.String()),
                    orig_index: r.Type.Optional(r.Type.Number()),
                    decred_staking_spend: r.Type.Optional(n.EnumDecredStakingSpendType),
                    script_pubkey: r.Type.Optional(r.Type.String()),
                    coinjoin_flags: r.Type.Optional(r.Type.Number()),
                    script_sig: r.Type.Optional(r.Type.String()),
                    witness: r.Type.Optional(r.Type.String()),
                    ownership_proof: r.Type.Optional(r.Type.String()),
                    commitment_data: r.Type.Optional(r.Type.String()),
                  },
                  { $id: 'CommonTxInputType' }
                );
                var T,
                  y,
                  E,
                  m,
                  g,
                  S,
                  h,
                  O,
                  f,
                  R,
                  A,
                  b,
                  N,
                  I,
                  C,
                  v,
                  P,
                  w,
                  D,
                  x,
                  M,
                  L,
                  j,
                  U,
                  B,
                  k,
                  F,
                  z,
                  G,
                  H,
                  V,
                  $,
                  W,
                  q,
                  K,
                  Y,
                  X,
                  J,
                  Q,
                  Z,
                  ee;
                (n.TxInputType = r.Type.Union(
                  [
                    r.Type.Intersect([
                      _,
                      r.Type.Object({
                        address_n: r.Type.Array(r.Type.Number()),
                        script_type: r.Type.Optional(n.InternalInputScriptType),
                      }),
                    ]),
                    r.Type.Intersect([
                      _,
                      r.Type.Object({
                        address_n: r.Type.Optional(r.Type.Undefined()),
                        script_type: r.Type.Literal('EXTERNAL'),
                        script_pubkey: r.Type.String(),
                      }),
                    ]),
                  ],
                  { $id: 'TxInputType' }
                )),
                  (n.TxInput = (0, r.CloneType)(n.TxInputType, { $id: 'TxInput' })),
                  (n.TxOutputBinType = r.Type.Object(
                    {
                      amount: r.Type.Uint(),
                      script_pubkey: r.Type.String(),
                      decred_script_version: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'TxOutputBinType' }
                  )),
                  (n.ChangeOutputScriptType = r.Type.Exclude(
                    n.OutputScriptType,
                    r.Type.Literal('PAYTOOPRETURN'),
                    { $id: 'ChangeOutputScriptType' }
                  )),
                  (n.TxOutputType = r.Type.Union(
                    [
                      r.Type.Object({
                        address: r.Type.String(),
                        address_n: r.Type.Optional(r.Type.Undefined()),
                        script_type: r.Type.Literal('PAYTOADDRESS'),
                        amount: r.Type.Uint(),
                        multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                        orig_hash: r.Type.Optional(r.Type.String()),
                        orig_index: r.Type.Optional(r.Type.Number()),
                        payment_req_index: r.Type.Optional(r.Type.Number()),
                      }),
                      r.Type.Object({
                        address: r.Type.Optional(r.Type.Undefined()),
                        address_n: r.Type.Array(r.Type.Number()),
                        script_type: r.Type.Optional(n.ChangeOutputScriptType),
                        amount: r.Type.Uint(),
                        multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                        orig_hash: r.Type.Optional(r.Type.String()),
                        orig_index: r.Type.Optional(r.Type.Number()),
                        payment_req_index: r.Type.Optional(r.Type.Number()),
                      }),
                      r.Type.Object({
                        address: r.Type.String(),
                        address_n: r.Type.Optional(r.Type.Undefined()),
                        script_type: r.Type.Optional(n.ChangeOutputScriptType),
                        amount: r.Type.Uint(),
                        multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                        orig_hash: r.Type.Optional(r.Type.String()),
                        orig_index: r.Type.Optional(r.Type.Number()),
                        payment_req_index: r.Type.Optional(r.Type.Number()),
                      }),
                      r.Type.Object({
                        address: r.Type.Optional(r.Type.Undefined()),
                        address_n: r.Type.Optional(r.Type.Undefined()),
                        amount: r.Type.Union([r.Type.Literal('0'), r.Type.Literal(0)]),
                        op_return_data: r.Type.String(),
                        script_type: r.Type.Literal('PAYTOOPRETURN'),
                        orig_hash: r.Type.Optional(r.Type.String()),
                        orig_index: r.Type.Optional(r.Type.Number()),
                        payment_req_index: r.Type.Optional(r.Type.Number()),
                      }),
                    ],
                    { $id: 'TxOutputType' }
                  )),
                  (n.TxOutput = (0, r.CloneType)(n.TxOutputType, { $id: 'TxOutput' })),
                  (n.PrevTx = r.Type.Object(
                    {
                      version: r.Type.Number(),
                      lock_time: r.Type.Number(),
                      inputs_count: r.Type.Number(),
                      outputs_count: r.Type.Number(),
                      extra_data_len: r.Type.Optional(r.Type.Number()),
                      expiry: r.Type.Optional(r.Type.Number()),
                      version_group_id: r.Type.Optional(r.Type.Number()),
                      timestamp: r.Type.Optional(r.Type.Number()),
                      branch_id: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'PrevTx' }
                  )),
                  (n.PrevInput = r.Type.Object(
                    {
                      prev_hash: r.Type.String(),
                      prev_index: r.Type.Number(),
                      script_sig: r.Type.String(),
                      sequence: r.Type.Number(),
                      decred_tree: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'PrevInput' }
                  )),
                  (n.PrevOutput = r.Type.Object(
                    {
                      amount: r.Type.Uint(),
                      script_pubkey: r.Type.String(),
                      decred_script_version: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'PrevOutput' }
                  )),
                  (n.TextMemo = r.Type.Object({ text: r.Type.String() }, { $id: 'TextMemo' })),
                  (n.RefundMemo = r.Type.Object(
                    { address: r.Type.String(), mac: r.Type.String() },
                    { $id: 'RefundMemo' }
                  )),
                  (n.CoinPurchaseMemo = r.Type.Object(
                    {
                      coin_type: r.Type.Number(),
                      amount: r.Type.Uint(),
                      address: r.Type.String(),
                      mac: r.Type.String(),
                    },
                    { $id: 'CoinPurchaseMemo' }
                  )),
                  (n.PaymentRequestMemo = r.Type.Object(
                    {
                      text_memo: r.Type.Optional(n.TextMemo),
                      refund_memo: r.Type.Optional(n.RefundMemo),
                      coin_purchase_memo: r.Type.Optional(n.CoinPurchaseMemo),
                    },
                    { $id: 'PaymentRequestMemo' }
                  )),
                  (n.TxAckPaymentRequest = r.Type.Object(
                    {
                      nonce: r.Type.Optional(r.Type.String()),
                      recipient_name: r.Type.String(),
                      memos: r.Type.Optional(r.Type.Array(n.PaymentRequestMemo)),
                      amount: r.Type.Optional(r.Type.Uint()),
                      signature: r.Type.String(),
                    },
                    { $id: 'TxAckPaymentRequest' }
                  )),
                  (n.TxAckResponse = r.Type.Union(
                    [
                      r.Type.Object({
                        inputs: r.Type.Array(r.Type.Union([n.TxInputType, n.PrevInput])),
                      }),
                      r.Type.Object({ bin_outputs: r.Type.Array(n.TxOutputBinType) }),
                      r.Type.Object({ outputs: r.Type.Array(n.TxOutputType) }),
                      r.Type.Object({ extra_data: r.Type.String() }),
                      r.Type.Object({
                        version: r.Type.Optional(r.Type.Number()),
                        lock_time: r.Type.Optional(r.Type.Number()),
                        inputs_cnt: r.Type.Number(),
                        outputs_cnt: r.Type.Number(),
                        extra_data: r.Type.Optional(r.Type.String()),
                        extra_data_len: r.Type.Optional(r.Type.Number()),
                        timestamp: r.Type.Optional(r.Type.Number()),
                        version_group_id: r.Type.Optional(r.Type.Number()),
                        expiry: r.Type.Optional(r.Type.Number()),
                        branch_id: r.Type.Optional(r.Type.Number()),
                      }),
                    ],
                    { $id: 'TxAckResponse' }
                  )),
                  (n.TxAck = r.Type.Object({ tx: n.TxAckResponse }, { $id: 'TxAck' })),
                  (n.TxAckInputWrapper = r.Type.Object(
                    { input: n.TxInput },
                    { $id: 'TxAckInputWrapper' }
                  )),
                  (n.TxAckInput = r.Type.Object(
                    { tx: n.TxAckInputWrapper },
                    { $id: 'TxAckInput' }
                  )),
                  (n.TxAckOutputWrapper = r.Type.Object(
                    { output: n.TxOutput },
                    { $id: 'TxAckOutputWrapper' }
                  )),
                  (n.TxAckOutput = r.Type.Object(
                    { tx: n.TxAckOutputWrapper },
                    { $id: 'TxAckOutput' }
                  )),
                  (n.TxAckPrevMeta = r.Type.Object({ tx: n.PrevTx }, { $id: 'TxAckPrevMeta' })),
                  (n.TxAckPrevInputWrapper = r.Type.Object(
                    { input: n.PrevInput },
                    { $id: 'TxAckPrevInputWrapper' }
                  )),
                  (n.TxAckPrevInput = r.Type.Object(
                    { tx: n.TxAckPrevInputWrapper },
                    { $id: 'TxAckPrevInput' }
                  )),
                  (n.TxAckPrevOutputWrapper = r.Type.Object(
                    { output: n.PrevOutput },
                    { $id: 'TxAckPrevOutputWrapper' }
                  )),
                  (n.TxAckPrevOutput = r.Type.Object(
                    { tx: n.TxAckPrevOutputWrapper },
                    { $id: 'TxAckPrevOutput' }
                  )),
                  (n.TxAckPrevExtraDataWrapper = r.Type.Object(
                    { extra_data_chunk: r.Type.String() },
                    { $id: 'TxAckPrevExtraDataWrapper' }
                  )),
                  (n.TxAckPrevExtraData = r.Type.Object(
                    { tx: n.TxAckPrevExtraDataWrapper },
                    { $id: 'TxAckPrevExtraData' }
                  )),
                  (n.GetOwnershipProof = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      coin_name: r.Type.Optional(r.Type.String()),
                      script_type: r.Type.Optional(n.InputScriptType),
                      multisig: r.Type.Optional(n.MultisigRedeemScriptType),
                      user_confirmation: r.Type.Optional(r.Type.Boolean()),
                      ownership_ids: r.Type.Optional(r.Type.Array(r.Type.String())),
                      commitment_data: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'GetOwnershipProof' }
                  )),
                  (n.OwnershipProof = r.Type.Object(
                    { ownership_proof: r.Type.String(), signature: r.Type.String() },
                    { $id: 'OwnershipProof' }
                  )),
                  (n.AuthorizeCoinJoin = r.Type.Object(
                    {
                      coordinator: r.Type.String(),
                      max_rounds: r.Type.Number(),
                      max_coordinator_fee_rate: r.Type.Number(),
                      max_fee_per_kvbyte: r.Type.Number(),
                      address_n: r.Type.Array(r.Type.Number()),
                      coin_name: r.Type.Optional(r.Type.String()),
                      script_type: r.Type.Optional(n.InputScriptType),
                      amount_unit: r.Type.Optional(n.EnumAmountUnit),
                    },
                    { $id: 'AuthorizeCoinJoin' }
                  )),
                  (n.FirmwareErase = r.Type.Object(
                    { length: r.Type.Optional(r.Type.Number()) },
                    { $id: 'FirmwareErase' }
                  )),
                  (n.FirmwareRequest = r.Type.Object(
                    { offset: r.Type.Number(), length: r.Type.Number() },
                    { $id: 'FirmwareRequest' }
                  )),
                  (n.FirmwareUpload = r.Type.Object(
                    {
                      payload: r.Type.Union([r.Type.Buffer(), r.Type.ArrayBuffer()]),
                      hash: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'FirmwareUpload' }
                  )),
                  (n.ProdTestT1 = r.Type.Object(
                    { payload: r.Type.Optional(r.Type.String()) },
                    { $id: 'ProdTestT1' }
                  )),
                  (function (e) {
                    (e[(e.LEDGER = 0)] = 'LEDGER'),
                      (e[(e.ICARUS = 1)] = 'ICARUS'),
                      (e[(e.ICARUS_TREZOR = 2)] = 'ICARUS_TREZOR');
                  })(T || (n.CardanoDerivationType = T = {})),
                  (n.EnumCardanoDerivationType = r.Type.Enum(T)),
                  (function (e) {
                    (e[(e.BASE = 0)] = 'BASE'),
                      (e[(e.BASE_SCRIPT_KEY = 1)] = 'BASE_SCRIPT_KEY'),
                      (e[(e.BASE_KEY_SCRIPT = 2)] = 'BASE_KEY_SCRIPT'),
                      (e[(e.BASE_SCRIPT_SCRIPT = 3)] = 'BASE_SCRIPT_SCRIPT'),
                      (e[(e.POINTER = 4)] = 'POINTER'),
                      (e[(e.POINTER_SCRIPT = 5)] = 'POINTER_SCRIPT'),
                      (e[(e.ENTERPRISE = 6)] = 'ENTERPRISE'),
                      (e[(e.ENTERPRISE_SCRIPT = 7)] = 'ENTERPRISE_SCRIPT'),
                      (e[(e.BYRON = 8)] = 'BYRON'),
                      (e[(e.REWARD = 14)] = 'REWARD'),
                      (e[(e.REWARD_SCRIPT = 15)] = 'REWARD_SCRIPT');
                  })(y || (n.CardanoAddressType = y = {})),
                  (n.EnumCardanoAddressType = r.Type.Enum(y)),
                  (function (e) {
                    (e[(e.PUB_KEY = 0)] = 'PUB_KEY'),
                      (e[(e.ALL = 1)] = 'ALL'),
                      (e[(e.ANY = 2)] = 'ANY'),
                      (e[(e.N_OF_K = 3)] = 'N_OF_K'),
                      (e[(e.INVALID_BEFORE = 4)] = 'INVALID_BEFORE'),
                      (e[(e.INVALID_HEREAFTER = 5)] = 'INVALID_HEREAFTER');
                  })(E || (n.CardanoNativeScriptType = E = {})),
                  (n.EnumCardanoNativeScriptType = r.Type.Enum(E)),
                  (function (e) {
                    (e[(e.HIDE = 0)] = 'HIDE'),
                      (e[(e.BECH32 = 1)] = 'BECH32'),
                      (e[(e.POLICY_ID = 2)] = 'POLICY_ID');
                  })(m || (n.CardanoNativeScriptHashDisplayFormat = m = {})),
                  (n.EnumCardanoNativeScriptHashDisplayFormat = r.Type.Enum(m)),
                  (function (e) {
                    (e[(e.ARRAY_LEGACY = 0)] = 'ARRAY_LEGACY'),
                      (e[(e.MAP_BABBAGE = 1)] = 'MAP_BABBAGE');
                  })(g || (n.CardanoTxOutputSerializationFormat = g = {})),
                  (n.EnumCardanoTxOutputSerializationFormat = r.Type.Enum(g)),
                  (function (e) {
                    (e[(e.STAKE_REGISTRATION = 0)] = 'STAKE_REGISTRATION'),
                      (e[(e.STAKE_DEREGISTRATION = 1)] = 'STAKE_DEREGISTRATION'),
                      (e[(e.STAKE_DELEGATION = 2)] = 'STAKE_DELEGATION'),
                      (e[(e.STAKE_POOL_REGISTRATION = 3)] = 'STAKE_POOL_REGISTRATION'),
                      (e[(e.STAKE_REGISTRATION_CONWAY = 7)] = 'STAKE_REGISTRATION_CONWAY'),
                      (e[(e.STAKE_DEREGISTRATION_CONWAY = 8)] = 'STAKE_DEREGISTRATION_CONWAY'),
                      (e[(e.VOTE_DELEGATION = 9)] = 'VOTE_DELEGATION');
                  })(S || (n.CardanoCertificateType = S = {})),
                  (n.EnumCardanoCertificateType = r.Type.Enum(S)),
                  (function (e) {
                    (e[(e.KEY_HASH = 0)] = 'KEY_HASH'),
                      (e[(e.SCRIPT_HASH = 1)] = 'SCRIPT_HASH'),
                      (e[(e.ABSTAIN = 2)] = 'ABSTAIN'),
                      (e[(e.NO_CONFIDENCE = 3)] = 'NO_CONFIDENCE');
                  })(h || (n.CardanoDRepType = h = {})),
                  (n.EnumCardanoDRepType = r.Type.Enum(h)),
                  (function (e) {
                    (e[(e.SINGLE_HOST_IP = 0)] = 'SINGLE_HOST_IP'),
                      (e[(e.SINGLE_HOST_NAME = 1)] = 'SINGLE_HOST_NAME'),
                      (e[(e.MULTIPLE_HOST_NAME = 2)] = 'MULTIPLE_HOST_NAME');
                  })(O || (n.CardanoPoolRelayType = O = {})),
                  (n.EnumCardanoPoolRelayType = r.Type.Enum(O)),
                  (function (e) {
                    (e[(e.NONE = 0)] = 'NONE'),
                      (e[(e.CVOTE_REGISTRATION_SIGNATURE = 1)] = 'CVOTE_REGISTRATION_SIGNATURE');
                  })(f || (n.CardanoTxAuxiliaryDataSupplementType = f = {})),
                  (n.EnumCardanoTxAuxiliaryDataSupplementType = r.Type.Enum(f)),
                  (function (e) {
                    (e[(e.CIP15 = 0)] = 'CIP15'), (e[(e.CIP36 = 1)] = 'CIP36');
                  })(R || (n.CardanoCVoteRegistrationFormat = R = {})),
                  (n.EnumCardanoCVoteRegistrationFormat = r.Type.Enum(R)),
                  (function (e) {
                    (e[(e.ORDINARY_TRANSACTION = 0)] = 'ORDINARY_TRANSACTION'),
                      (e[(e.POOL_REGISTRATION_AS_OWNER = 1)] = 'POOL_REGISTRATION_AS_OWNER'),
                      (e[(e.MULTISIG_TRANSACTION = 2)] = 'MULTISIG_TRANSACTION'),
                      (e[(e.PLUTUS_TRANSACTION = 3)] = 'PLUTUS_TRANSACTION');
                  })(A || (n.CardanoTxSigningMode = A = {})),
                  (n.EnumCardanoTxSigningMode = r.Type.Enum(A)),
                  (function (e) {
                    (e[(e.BYRON_WITNESS = 0)] = 'BYRON_WITNESS'),
                      (e[(e.SHELLEY_WITNESS = 1)] = 'SHELLEY_WITNESS');
                  })(b || (n.CardanoTxWitnessType = b = {})),
                  (n.EnumCardanoTxWitnessType = r.Type.Enum(b)),
                  (n.CardanoBlockchainPointerType = r.Type.Object(
                    {
                      block_index: r.Type.Number(),
                      tx_index: r.Type.Number(),
                      certificate_index: r.Type.Number(),
                    },
                    { $id: 'CardanoBlockchainPointerType' }
                  )),
                  (n.CardanoNativeScript = r.Type.Recursive(
                    e =>
                      r.Type.Object({
                        type: n.EnumCardanoNativeScriptType,
                        scripts: r.Type.Optional(r.Type.Array(e)),
                        key_hash: r.Type.Optional(r.Type.String()),
                        key_path: r.Type.Optional(r.Type.Array(r.Type.Number())),
                        required_signatures_count: r.Type.Optional(r.Type.Number()),
                        invalid_before: r.Type.Optional(r.Type.Uint()),
                        invalid_hereafter: r.Type.Optional(r.Type.Uint()),
                      }),
                    { $id: 'CardanoNativeScript' }
                  )),
                  (n.CardanoGetNativeScriptHash = r.Type.Object(
                    {
                      script: n.CardanoNativeScript,
                      display_format: n.EnumCardanoNativeScriptHashDisplayFormat,
                      derivation_type: n.EnumCardanoDerivationType,
                    },
                    { $id: 'CardanoGetNativeScriptHash' }
                  )),
                  (n.CardanoNativeScriptHash = r.Type.Object(
                    { script_hash: r.Type.String() },
                    { $id: 'CardanoNativeScriptHash' }
                  )),
                  (n.CardanoAddressParametersType = r.Type.Object(
                    {
                      address_type: n.EnumCardanoAddressType,
                      address_n: r.Type.Array(r.Type.Number()),
                      address_n_staking: r.Type.Array(r.Type.Number()),
                      staking_key_hash: r.Type.Optional(r.Type.String()),
                      certificate_pointer: r.Type.Optional(n.CardanoBlockchainPointerType),
                      script_payment_hash: r.Type.Optional(r.Type.String()),
                      script_staking_hash: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoAddressParametersType' }
                  )),
                  (n.CardanoGetAddress = r.Type.Object(
                    {
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      protocol_magic: r.Type.Number(),
                      network_id: r.Type.Number(),
                      address_parameters: n.CardanoAddressParametersType,
                      derivation_type: n.EnumCardanoDerivationType,
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'CardanoGetAddress' }
                  )),
                  (n.CardanoAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'CardanoAddress' }
                  )),
                  (n.CardanoGetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      derivation_type: n.EnumCardanoDerivationType,
                    },
                    { $id: 'CardanoGetPublicKey' }
                  )),
                  (n.CardanoPublicKey = r.Type.Object(
                    { xpub: r.Type.String(), node: n.HDNodeType },
                    { $id: 'CardanoPublicKey' }
                  )),
                  (n.CardanoSignTxInit = r.Type.Object(
                    {
                      signing_mode: n.EnumCardanoTxSigningMode,
                      protocol_magic: r.Type.Number(),
                      network_id: r.Type.Number(),
                      inputs_count: r.Type.Number(),
                      outputs_count: r.Type.Number(),
                      fee: r.Type.Uint(),
                      ttl: r.Type.Optional(r.Type.Uint()),
                      certificates_count: r.Type.Number(),
                      withdrawals_count: r.Type.Number(),
                      has_auxiliary_data: r.Type.Boolean(),
                      validity_interval_start: r.Type.Optional(r.Type.Uint()),
                      witness_requests_count: r.Type.Number(),
                      minting_asset_groups_count: r.Type.Number(),
                      derivation_type: n.EnumCardanoDerivationType,
                      include_network_id: r.Type.Optional(r.Type.Boolean()),
                      script_data_hash: r.Type.Optional(r.Type.String()),
                      collateral_inputs_count: r.Type.Number(),
                      required_signers_count: r.Type.Number(),
                      has_collateral_return: r.Type.Optional(r.Type.Boolean()),
                      total_collateral: r.Type.Optional(r.Type.Uint()),
                      reference_inputs_count: r.Type.Optional(r.Type.Number()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                      tag_cbor_sets: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'CardanoSignTxInit' }
                  )),
                  (n.CardanoTxInput = r.Type.Object(
                    { prev_hash: r.Type.String(), prev_index: r.Type.Number() },
                    { $id: 'CardanoTxInput' }
                  )),
                  (n.CardanoTxOutput = r.Type.Object(
                    {
                      address: r.Type.Optional(r.Type.String()),
                      address_parameters: r.Type.Optional(n.CardanoAddressParametersType),
                      amount: r.Type.Uint(),
                      asset_groups_count: r.Type.Number(),
                      datum_hash: r.Type.Optional(r.Type.String()),
                      format: r.Type.Optional(n.EnumCardanoTxOutputSerializationFormat),
                      inline_datum_size: r.Type.Optional(r.Type.Number()),
                      reference_script_size: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'CardanoTxOutput' }
                  )),
                  (n.CardanoAssetGroup = r.Type.Object(
                    { policy_id: r.Type.String(), tokens_count: r.Type.Number() },
                    { $id: 'CardanoAssetGroup' }
                  )),
                  (n.CardanoToken = r.Type.Object(
                    {
                      asset_name_bytes: r.Type.String(),
                      amount: r.Type.Optional(r.Type.Uint()),
                      mint_amount: r.Type.Optional(r.Type.Uint({ allowNegative: !0 })),
                    },
                    { $id: 'CardanoToken' }
                  )),
                  (n.CardanoTxInlineDatumChunk = r.Type.Object(
                    { data: r.Type.String() },
                    { $id: 'CardanoTxInlineDatumChunk' }
                  )),
                  (n.CardanoTxReferenceScriptChunk = r.Type.Object(
                    { data: r.Type.String() },
                    { $id: 'CardanoTxReferenceScriptChunk' }
                  )),
                  (n.CardanoPoolOwner = r.Type.Object(
                    {
                      staking_key_path: r.Type.Optional(r.Type.Array(r.Type.Number())),
                      staking_key_hash: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoPoolOwner' }
                  )),
                  (n.CardanoPoolRelayParameters = r.Type.Object(
                    {
                      type: n.EnumCardanoPoolRelayType,
                      ipv4_address: r.Type.Optional(r.Type.String()),
                      ipv6_address: r.Type.Optional(r.Type.String()),
                      host_name: r.Type.Optional(r.Type.String()),
                      port: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'CardanoPoolRelayParameters' }
                  )),
                  (n.CardanoPoolMetadataType = r.Type.Object(
                    { url: r.Type.String(), hash: r.Type.String() },
                    { $id: 'CardanoPoolMetadataType' }
                  )),
                  (n.CardanoPoolParametersType = r.Type.Object(
                    {
                      pool_id: r.Type.String(),
                      vrf_key_hash: r.Type.String(),
                      pledge: r.Type.Uint(),
                      cost: r.Type.Uint(),
                      margin_numerator: r.Type.Uint(),
                      margin_denominator: r.Type.Uint(),
                      reward_account: r.Type.String(),
                      metadata: r.Type.Optional(n.CardanoPoolMetadataType),
                      owners_count: r.Type.Number(),
                      relays_count: r.Type.Number(),
                    },
                    { $id: 'CardanoPoolParametersType' }
                  )),
                  (n.CardanoDRep = r.Type.Object(
                    {
                      type: n.EnumCardanoDRepType,
                      key_hash: r.Type.Optional(r.Type.String()),
                      script_hash: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoDRep' }
                  )),
                  (n.CardanoTxCertificate = r.Type.Object(
                    {
                      type: n.EnumCardanoCertificateType,
                      path: r.Type.Optional(r.Type.Array(r.Type.Number())),
                      pool: r.Type.Optional(r.Type.String()),
                      pool_parameters: r.Type.Optional(n.CardanoPoolParametersType),
                      script_hash: r.Type.Optional(r.Type.String()),
                      key_hash: r.Type.Optional(r.Type.String()),
                      deposit: r.Type.Optional(r.Type.Uint()),
                      drep: r.Type.Optional(n.CardanoDRep),
                    },
                    { $id: 'CardanoTxCertificate' }
                  )),
                  (n.CardanoTxWithdrawal = r.Type.Object(
                    {
                      path: r.Type.Optional(r.Type.Array(r.Type.Number())),
                      amount: r.Type.Uint(),
                      script_hash: r.Type.Optional(r.Type.String()),
                      key_hash: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoTxWithdrawal' }
                  )),
                  (n.CardanoCVoteRegistrationDelegation = r.Type.Object(
                    { vote_public_key: r.Type.String(), weight: r.Type.Uint() },
                    { $id: 'CardanoCVoteRegistrationDelegation' }
                  )),
                  (n.CardanoCVoteRegistrationParametersType = r.Type.Object(
                    {
                      vote_public_key: r.Type.Optional(r.Type.String()),
                      staking_path: r.Type.Array(r.Type.Number()),
                      payment_address_parameters: r.Type.Optional(n.CardanoAddressParametersType),
                      nonce: r.Type.Uint(),
                      format: r.Type.Optional(n.EnumCardanoCVoteRegistrationFormat),
                      delegations: r.Type.Optional(
                        r.Type.Array(n.CardanoCVoteRegistrationDelegation)
                      ),
                      voting_purpose: r.Type.Optional(r.Type.Uint()),
                      payment_address: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoCVoteRegistrationParametersType' }
                  )),
                  (n.CardanoTxAuxiliaryData = r.Type.Object(
                    {
                      cvote_registration_parameters: r.Type.Optional(
                        n.CardanoCVoteRegistrationParametersType
                      ),
                      hash: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoTxAuxiliaryData' }
                  )),
                  (n.CardanoTxMint = r.Type.Object(
                    { asset_groups_count: r.Type.Number() },
                    { $id: 'CardanoTxMint' }
                  )),
                  (n.CardanoTxCollateralInput = r.Type.Object(
                    { prev_hash: r.Type.String(), prev_index: r.Type.Number() },
                    { $id: 'CardanoTxCollateralInput' }
                  )),
                  (n.CardanoTxRequiredSigner = r.Type.Object(
                    {
                      key_hash: r.Type.Optional(r.Type.String()),
                      key_path: r.Type.Optional(r.Type.Array(r.Type.Number())),
                    },
                    { $id: 'CardanoTxRequiredSigner' }
                  )),
                  (n.CardanoTxReferenceInput = r.Type.Object(
                    { prev_hash: r.Type.String(), prev_index: r.Type.Number() },
                    { $id: 'CardanoTxReferenceInput' }
                  )),
                  (n.CardanoTxItemAck = r.Type.Object({}, { $id: 'CardanoTxItemAck' })),
                  (n.CardanoTxAuxiliaryDataSupplement = r.Type.Object(
                    {
                      type: n.EnumCardanoTxAuxiliaryDataSupplementType,
                      auxiliary_data_hash: r.Type.Optional(r.Type.String()),
                      cvote_registration_signature: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoTxAuxiliaryDataSupplement' }
                  )),
                  (n.CardanoTxWitnessRequest = r.Type.Object(
                    { path: r.Type.Array(r.Type.Number()) },
                    { $id: 'CardanoTxWitnessRequest' }
                  )),
                  (n.CardanoTxWitnessResponse = r.Type.Object(
                    {
                      type: n.EnumCardanoTxWitnessType,
                      pub_key: r.Type.String(),
                      signature: r.Type.String(),
                      chain_code: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CardanoTxWitnessResponse' }
                  )),
                  (n.CardanoTxHostAck = r.Type.Object({}, { $id: 'CardanoTxHostAck' })),
                  (n.CardanoTxBodyHash = r.Type.Object(
                    { tx_hash: r.Type.String() },
                    { $id: 'CardanoTxBodyHash' }
                  )),
                  (n.CardanoSignTxFinished = r.Type.Object({}, { $id: 'CardanoSignTxFinished' })),
                  (n.Success = r.Type.Object({ message: r.Type.String() }, { $id: 'Success' })),
                  (function (e) {
                    (e[(e.Failure_UnexpectedMessage = 1)] = 'Failure_UnexpectedMessage'),
                      (e[(e.Failure_ButtonExpected = 2)] = 'Failure_ButtonExpected'),
                      (e[(e.Failure_DataError = 3)] = 'Failure_DataError'),
                      (e[(e.Failure_ActionCancelled = 4)] = 'Failure_ActionCancelled'),
                      (e[(e.Failure_PinExpected = 5)] = 'Failure_PinExpected'),
                      (e[(e.Failure_PinCancelled = 6)] = 'Failure_PinCancelled'),
                      (e[(e.Failure_PinInvalid = 7)] = 'Failure_PinInvalid'),
                      (e[(e.Failure_InvalidSignature = 8)] = 'Failure_InvalidSignature'),
                      (e[(e.Failure_ProcessError = 9)] = 'Failure_ProcessError'),
                      (e[(e.Failure_NotEnoughFunds = 10)] = 'Failure_NotEnoughFunds'),
                      (e[(e.Failure_NotInitialized = 11)] = 'Failure_NotInitialized'),
                      (e[(e.Failure_PinMismatch = 12)] = 'Failure_PinMismatch'),
                      (e[(e.Failure_WipeCodeMismatch = 13)] = 'Failure_WipeCodeMismatch'),
                      (e[(e.Failure_InvalidSession = 14)] = 'Failure_InvalidSession'),
                      (e[(e.Failure_FirmwareError = 99)] = 'Failure_FirmwareError');
                  })(N || (n.FailureType = N = {})),
                  (n.EnumFailureType = r.Type.Enum(N)),
                  (n.Failure = r.Type.Object(
                    {
                      code: r.Type.Optional(n.EnumFailureType),
                      message: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'Failure' }
                  )),
                  (function (e) {
                    (e[(e.ButtonRequest_Other = 1)] = 'ButtonRequest_Other'),
                      (e[(e.ButtonRequest_FeeOverThreshold = 2)] =
                        'ButtonRequest_FeeOverThreshold'),
                      (e[(e.ButtonRequest_ConfirmOutput = 3)] = 'ButtonRequest_ConfirmOutput'),
                      (e[(e.ButtonRequest_ResetDevice = 4)] = 'ButtonRequest_ResetDevice'),
                      (e[(e.ButtonRequest_ConfirmWord = 5)] = 'ButtonRequest_ConfirmWord'),
                      (e[(e.ButtonRequest_WipeDevice = 6)] = 'ButtonRequest_WipeDevice'),
                      (e[(e.ButtonRequest_ProtectCall = 7)] = 'ButtonRequest_ProtectCall'),
                      (e[(e.ButtonRequest_SignTx = 8)] = 'ButtonRequest_SignTx'),
                      (e[(e.ButtonRequest_FirmwareCheck = 9)] = 'ButtonRequest_FirmwareCheck'),
                      (e[(e.ButtonRequest_Address = 10)] = 'ButtonRequest_Address'),
                      (e[(e.ButtonRequest_PublicKey = 11)] = 'ButtonRequest_PublicKey'),
                      (e[(e.ButtonRequest_MnemonicWordCount = 12)] =
                        'ButtonRequest_MnemonicWordCount'),
                      (e[(e.ButtonRequest_MnemonicInput = 13)] = 'ButtonRequest_MnemonicInput'),
                      (e[(e._Deprecated_ButtonRequest_PassphraseType = 14)] =
                        '_Deprecated_ButtonRequest_PassphraseType'),
                      (e[(e.ButtonRequest_UnknownDerivationPath = 15)] =
                        'ButtonRequest_UnknownDerivationPath'),
                      (e[(e.ButtonRequest_RecoveryHomepage = 16)] =
                        'ButtonRequest_RecoveryHomepage'),
                      (e[(e.ButtonRequest_Success = 17)] = 'ButtonRequest_Success'),
                      (e[(e.ButtonRequest_Warning = 18)] = 'ButtonRequest_Warning'),
                      (e[(e.ButtonRequest_PassphraseEntry = 19)] = 'ButtonRequest_PassphraseEntry'),
                      (e[(e.ButtonRequest_PinEntry = 20)] = 'ButtonRequest_PinEntry');
                  })(I || (n.Enum_ButtonRequestType = I = {})),
                  (n.EnumEnum_ButtonRequestType = r.Type.Enum(I)),
                  (n.ButtonRequestType = r.Type.KeyOfEnum(I, { $id: 'ButtonRequestType' })),
                  (n.ButtonRequest = r.Type.Object(
                    {
                      code: r.Type.Optional(n.ButtonRequestType),
                      pages: r.Type.Optional(r.Type.Number()),
                      name: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'ButtonRequest' }
                  )),
                  (n.ButtonAck = r.Type.Object({}, { $id: 'ButtonAck' })),
                  (function (e) {
                    (e[(e.PinMatrixRequestType_Current = 1)] = 'PinMatrixRequestType_Current'),
                      (e[(e.PinMatrixRequestType_NewFirst = 2)] = 'PinMatrixRequestType_NewFirst'),
                      (e[(e.PinMatrixRequestType_NewSecond = 3)] =
                        'PinMatrixRequestType_NewSecond'),
                      (e[(e.PinMatrixRequestType_WipeCodeFirst = 4)] =
                        'PinMatrixRequestType_WipeCodeFirst'),
                      (e[(e.PinMatrixRequestType_WipeCodeSecond = 5)] =
                        'PinMatrixRequestType_WipeCodeSecond');
                  })(C || (n.Enum_PinMatrixRequestType = C = {})),
                  (n.EnumEnum_PinMatrixRequestType = r.Type.Enum(C)),
                  (n.PinMatrixRequestType = r.Type.KeyOfEnum(C, { $id: 'PinMatrixRequestType' })),
                  (n.PinMatrixRequest = r.Type.Object(
                    { type: r.Type.Optional(n.PinMatrixRequestType) },
                    { $id: 'PinMatrixRequest' }
                  )),
                  (n.PinMatrixAck = r.Type.Object(
                    { pin: r.Type.String() },
                    { $id: 'PinMatrixAck' }
                  )),
                  (n.PassphraseRequest = r.Type.Object(
                    { _on_device: r.Type.Optional(r.Type.Boolean()) },
                    { $id: 'PassphraseRequest' }
                  )),
                  (n.PassphraseAck = r.Type.Object(
                    {
                      passphrase: r.Type.Optional(r.Type.String()),
                      _state: r.Type.Optional(r.Type.String()),
                      on_device: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'PassphraseAck' }
                  )),
                  (n.Deprecated_PassphraseStateRequest = r.Type.Object(
                    { state: r.Type.Optional(r.Type.String()) },
                    { $id: 'Deprecated_PassphraseStateRequest' }
                  )),
                  (n.Deprecated_PassphraseStateAck = r.Type.Object(
                    {},
                    { $id: 'Deprecated_PassphraseStateAck' }
                  )),
                  (n.CipherKeyValue = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      key: r.Type.String(),
                      value: r.Type.String(),
                      encrypt: r.Type.Optional(r.Type.Boolean()),
                      ask_on_encrypt: r.Type.Optional(r.Type.Boolean()),
                      ask_on_decrypt: r.Type.Optional(r.Type.Boolean()),
                      iv: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'CipherKeyValue' }
                  )),
                  (n.CipheredKeyValue = r.Type.Object(
                    { value: r.Type.String() },
                    { $id: 'CipheredKeyValue' }
                  )),
                  (n.IdentityType = r.Type.Object(
                    {
                      proto: r.Type.Optional(r.Type.String()),
                      user: r.Type.Optional(r.Type.String()),
                      host: r.Type.Optional(r.Type.String()),
                      port: r.Type.Optional(r.Type.String()),
                      path: r.Type.Optional(r.Type.String()),
                      index: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'IdentityType' }
                  )),
                  (n.SignIdentity = r.Type.Object(
                    {
                      identity: n.IdentityType,
                      challenge_hidden: r.Type.Optional(r.Type.String()),
                      challenge_visual: r.Type.Optional(r.Type.String()),
                      ecdsa_curve_name: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'SignIdentity' }
                  )),
                  (n.SignedIdentity = r.Type.Object(
                    {
                      address: r.Type.String(),
                      public_key: r.Type.String(),
                      signature: r.Type.String(),
                    },
                    { $id: 'SignedIdentity' }
                  )),
                  (n.GetECDHSessionKey = r.Type.Object(
                    {
                      identity: n.IdentityType,
                      peer_public_key: r.Type.String(),
                      ecdsa_curve_name: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'GetECDHSessionKey' }
                  )),
                  (n.ECDHSessionKey = r.Type.Object(
                    { session_key: r.Type.String(), public_key: r.Type.Optional(r.Type.String()) },
                    { $id: 'ECDHSessionKey' }
                  )),
                  (function (e) {
                    (e[(e.NO = 0)] = 'NO'), (e[(e.YES = 1)] = 'YES'), (e[(e.INFO = 2)] = 'INFO');
                  })(v || (n.DebugButton = v = {})),
                  (n.EnumDebugButton = r.Type.Enum(v)),
                  (function (e) {
                    (e[(e.LEFT_BTN = 0)] = 'LEFT_BTN'),
                      (e[(e.MIDDLE_BTN = 1)] = 'MIDDLE_BTN'),
                      (e[(e.RIGHT_BTN = 2)] = 'RIGHT_BTN');
                  })(P || (n.DebugPhysicalButton = P = {})),
                  (n.EnumDebugPhysicalButton = r.Type.Enum(P)),
                  (function (e) {
                    (e[(e.IMMEDIATE = 0)] = 'IMMEDIATE'),
                      (e[(e.NEXT_LAYOUT = 1)] = 'NEXT_LAYOUT'),
                      (e[(e.CURRENT_LAYOUT = 2)] = 'CURRENT_LAYOUT');
                  })(w || (n.DebugWaitType = w = {})),
                  (n.EnumDebugWaitType = r.Type.Enum(w)),
                  (n.DebugLinkResetDebugEvents = r.Type.Object(
                    {},
                    { $id: 'DebugLinkResetDebugEvents' }
                  )),
                  (n.DebugLinkOptigaSetSecMax = r.Type.Object(
                    {},
                    { $id: 'DebugLinkOptigaSetSecMax' }
                  )),
                  (n.EosGetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EosGetPublicKey' }
                  )),
                  (n.EosPublicKey = r.Type.Object(
                    { wif_public_key: r.Type.String(), raw_public_key: r.Type.String() },
                    { $id: 'EosPublicKey' }
                  )),
                  (n.EosTxHeader = r.Type.Object(
                    {
                      expiration: r.Type.Number(),
                      ref_block_num: r.Type.Number(),
                      ref_block_prefix: r.Type.Number(),
                      max_net_usage_words: r.Type.Number(),
                      max_cpu_usage_ms: r.Type.Number(),
                      delay_sec: r.Type.Number(),
                    },
                    { $id: 'EosTxHeader' }
                  )),
                  (n.EosSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      chain_id: r.Type.String(),
                      header: n.EosTxHeader,
                      num_actions: r.Type.Number(),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EosSignTx' }
                  )),
                  (n.EosTxActionRequest = r.Type.Object(
                    { data_size: r.Type.Optional(r.Type.Number()) },
                    { $id: 'EosTxActionRequest' }
                  )),
                  (n.EosAsset = r.Type.Object(
                    { amount: r.Type.Uint(), symbol: r.Type.String() },
                    { $id: 'EosAsset' }
                  )),
                  (n.EosPermissionLevel = r.Type.Object(
                    { actor: r.Type.String(), permission: r.Type.String() },
                    { $id: 'EosPermissionLevel' }
                  )),
                  (n.EosAuthorizationKey = r.Type.Object(
                    {
                      type: r.Type.Optional(r.Type.Number()),
                      key: r.Type.String(),
                      address_n: r.Type.Optional(r.Type.Array(r.Type.Number())),
                      weight: r.Type.Number(),
                    },
                    { $id: 'EosAuthorizationKey' }
                  )),
                  (n.EosAuthorizationAccount = r.Type.Object(
                    { account: n.EosPermissionLevel, weight: r.Type.Number() },
                    { $id: 'EosAuthorizationAccount' }
                  )),
                  (n.EosAuthorizationWait = r.Type.Object(
                    { wait_sec: r.Type.Number(), weight: r.Type.Number() },
                    { $id: 'EosAuthorizationWait' }
                  )),
                  (n.EosAuthorization = r.Type.Object(
                    {
                      threshold: r.Type.Number(),
                      keys: r.Type.Array(n.EosAuthorizationKey),
                      accounts: r.Type.Array(n.EosAuthorizationAccount),
                      waits: r.Type.Array(n.EosAuthorizationWait),
                    },
                    { $id: 'EosAuthorization' }
                  )),
                  (n.EosActionCommon = r.Type.Object(
                    {
                      account: r.Type.String(),
                      name: r.Type.String(),
                      authorization: r.Type.Array(n.EosPermissionLevel),
                    },
                    { $id: 'EosActionCommon' }
                  )),
                  (n.EosActionTransfer = r.Type.Object(
                    {
                      sender: r.Type.String(),
                      receiver: r.Type.String(),
                      quantity: n.EosAsset,
                      memo: r.Type.String(),
                    },
                    { $id: 'EosActionTransfer' }
                  )),
                  (n.EosActionDelegate = r.Type.Object(
                    {
                      sender: r.Type.String(),
                      receiver: r.Type.String(),
                      net_quantity: n.EosAsset,
                      cpu_quantity: n.EosAsset,
                      transfer: r.Type.Boolean(),
                    },
                    { $id: 'EosActionDelegate' }
                  )),
                  (n.EosActionUndelegate = r.Type.Object(
                    {
                      sender: r.Type.String(),
                      receiver: r.Type.String(),
                      net_quantity: n.EosAsset,
                      cpu_quantity: n.EosAsset,
                    },
                    { $id: 'EosActionUndelegate' }
                  )),
                  (n.EosActionRefund = r.Type.Object(
                    { owner: r.Type.String() },
                    { $id: 'EosActionRefund' }
                  )),
                  (n.EosActionBuyRam = r.Type.Object(
                    { payer: r.Type.String(), receiver: r.Type.String(), quantity: n.EosAsset },
                    { $id: 'EosActionBuyRam' }
                  )),
                  (n.EosActionBuyRamBytes = r.Type.Object(
                    { payer: r.Type.String(), receiver: r.Type.String(), bytes: r.Type.Number() },
                    { $id: 'EosActionBuyRamBytes' }
                  )),
                  (n.EosActionSellRam = r.Type.Object(
                    { account: r.Type.String(), bytes: r.Type.Number() },
                    { $id: 'EosActionSellRam' }
                  )),
                  (n.EosActionVoteProducer = r.Type.Object(
                    {
                      voter: r.Type.String(),
                      proxy: r.Type.String(),
                      producers: r.Type.Array(r.Type.String()),
                    },
                    { $id: 'EosActionVoteProducer' }
                  )),
                  (n.EosActionUpdateAuth = r.Type.Object(
                    {
                      account: r.Type.String(),
                      permission: r.Type.String(),
                      parent: r.Type.String(),
                      auth: n.EosAuthorization,
                    },
                    { $id: 'EosActionUpdateAuth' }
                  )),
                  (n.EosActionDeleteAuth = r.Type.Object(
                    { account: r.Type.String(), permission: r.Type.String() },
                    { $id: 'EosActionDeleteAuth' }
                  )),
                  (n.EosActionLinkAuth = r.Type.Object(
                    {
                      account: r.Type.String(),
                      code: r.Type.String(),
                      type: r.Type.String(),
                      requirement: r.Type.String(),
                    },
                    { $id: 'EosActionLinkAuth' }
                  )),
                  (n.EosActionUnlinkAuth = r.Type.Object(
                    { account: r.Type.String(), code: r.Type.String(), type: r.Type.String() },
                    { $id: 'EosActionUnlinkAuth' }
                  )),
                  (n.EosActionNewAccount = r.Type.Object(
                    {
                      creator: r.Type.String(),
                      name: r.Type.String(),
                      owner: n.EosAuthorization,
                      active: n.EosAuthorization,
                    },
                    { $id: 'EosActionNewAccount' }
                  )),
                  (n.EosActionUnknown = r.Type.Object(
                    { data_size: r.Type.Number(), data_chunk: r.Type.String() },
                    { $id: 'EosActionUnknown' }
                  )),
                  (n.EosTxActionAck = r.Type.Object(
                    {
                      common: n.EosActionCommon,
                      transfer: r.Type.Optional(n.EosActionTransfer),
                      delegate: r.Type.Optional(n.EosActionDelegate),
                      undelegate: r.Type.Optional(n.EosActionUndelegate),
                      refund: r.Type.Optional(n.EosActionRefund),
                      buy_ram: r.Type.Optional(n.EosActionBuyRam),
                      buy_ram_bytes: r.Type.Optional(n.EosActionBuyRamBytes),
                      sell_ram: r.Type.Optional(n.EosActionSellRam),
                      vote_producer: r.Type.Optional(n.EosActionVoteProducer),
                      update_auth: r.Type.Optional(n.EosActionUpdateAuth),
                      delete_auth: r.Type.Optional(n.EosActionDeleteAuth),
                      link_auth: r.Type.Optional(n.EosActionLinkAuth),
                      unlink_auth: r.Type.Optional(n.EosActionUnlinkAuth),
                      new_account: r.Type.Optional(n.EosActionNewAccount),
                      unknown: r.Type.Optional(n.EosActionUnknown),
                    },
                    { $id: 'EosTxActionAck' }
                  )),
                  (n.EosSignedTx = r.Type.Object(
                    { signature: r.Type.String() },
                    { $id: 'EosSignedTx' }
                  )),
                  (function (e) {
                    (e[(e.NETWORK = 0)] = 'NETWORK'), (e[(e.TOKEN = 1)] = 'TOKEN');
                  })(D || (n.EthereumDefinitionType = D = {})),
                  (n.EnumEthereumDefinitionType = r.Type.Enum(D)),
                  (n.EthereumNetworkInfo = r.Type.Object(
                    {
                      chain_id: r.Type.Number(),
                      symbol: r.Type.String(),
                      slip44: r.Type.Number(),
                      name: r.Type.String(),
                    },
                    { $id: 'EthereumNetworkInfo' }
                  )),
                  (n.EthereumTokenInfo = r.Type.Object(
                    {
                      address: r.Type.String(),
                      chain_id: r.Type.Number(),
                      symbol: r.Type.String(),
                      decimals: r.Type.Number(),
                      name: r.Type.String(),
                    },
                    { $id: 'EthereumTokenInfo' }
                  )),
                  (n.EthereumDefinitions = r.Type.Object(
                    {
                      encoded_network: r.Type.Optional(r.Type.ArrayBuffer()),
                      encoded_token: r.Type.Optional(r.Type.ArrayBuffer()),
                    },
                    { $id: 'EthereumDefinitions' }
                  )),
                  (n.EthereumSignTypedData = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      primary_type: r.Type.String(),
                      metamask_v4_compat: r.Type.Optional(r.Type.Boolean()),
                      definitions: r.Type.Optional(n.EthereumDefinitions),
                    },
                    { $id: 'EthereumSignTypedData' }
                  )),
                  (n.EthereumTypedDataStructRequest = r.Type.Object(
                    { name: r.Type.String() },
                    { $id: 'EthereumTypedDataStructRequest' }
                  )),
                  (function (e) {
                    (e[(e.UINT = 1)] = 'UINT'),
                      (e[(e.INT = 2)] = 'INT'),
                      (e[(e.BYTES = 3)] = 'BYTES'),
                      (e[(e.STRING = 4)] = 'STRING'),
                      (e[(e.BOOL = 5)] = 'BOOL'),
                      (e[(e.ADDRESS = 6)] = 'ADDRESS'),
                      (e[(e.ARRAY = 7)] = 'ARRAY'),
                      (e[(e.STRUCT = 8)] = 'STRUCT');
                  })(x || (n.EthereumDataType = x = {})),
                  (n.EnumEthereumDataType = r.Type.Enum(x)),
                  (n.EthereumFieldType = r.Type.Recursive(
                    e =>
                      r.Type.Object({
                        data_type: n.EnumEthereumDataType,
                        size: r.Type.Optional(r.Type.Number()),
                        entry_type: r.Type.Optional(e),
                        struct_name: r.Type.Optional(r.Type.String()),
                      }),
                    { $id: 'EthereumFieldType' }
                  )),
                  (n.EthereumStructMember = r.Type.Object(
                    { type: n.EthereumFieldType, name: r.Type.String() },
                    { $id: 'EthereumStructMember' }
                  )),
                  (n.EthereumTypedDataStructAck = r.Type.Object(
                    { members: r.Type.Array(n.EthereumStructMember) },
                    { $id: 'EthereumTypedDataStructAck' }
                  )),
                  (n.EthereumTypedDataValueRequest = r.Type.Object(
                    { member_path: r.Type.Array(r.Type.Number()) },
                    { $id: 'EthereumTypedDataValueRequest' }
                  )),
                  (n.EthereumTypedDataValueAck = r.Type.Object(
                    { value: r.Type.String() },
                    { $id: 'EthereumTypedDataValueAck' }
                  )),
                  (n.EthereumGetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EthereumGetPublicKey' }
                  )),
                  (n.EthereumPublicKey = r.Type.Object(
                    { node: n.HDNodeType, xpub: r.Type.String() },
                    { $id: 'EthereumPublicKey' }
                  )),
                  (n.EthereumGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      encoded_network: r.Type.Optional(r.Type.ArrayBuffer()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EthereumGetAddress' }
                  )),
                  (n.EthereumAddress = r.Type.Object(
                    { _old_address: r.Type.Optional(r.Type.String()), address: r.Type.String() },
                    { $id: 'EthereumAddress' }
                  )),
                  (n.EthereumSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      nonce: r.Type.Optional(r.Type.String()),
                      gas_price: r.Type.String(),
                      gas_limit: r.Type.String(),
                      to: r.Type.Optional(r.Type.String()),
                      value: r.Type.Optional(r.Type.String()),
                      data_initial_chunk: r.Type.Optional(r.Type.String()),
                      data_length: r.Type.Optional(r.Type.Number()),
                      chain_id: r.Type.Number(),
                      tx_type: r.Type.Optional(r.Type.Number()),
                      definitions: r.Type.Optional(n.EthereumDefinitions),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EthereumSignTx' }
                  )),
                  (n.EthereumAccessList = r.Type.Object(
                    { address: r.Type.String(), storage_keys: r.Type.Array(r.Type.String()) },
                    { $id: 'EthereumAccessList' }
                  )),
                  (n.EthereumSignTxEIP1559 = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      nonce: r.Type.String(),
                      max_gas_fee: r.Type.String(),
                      max_priority_fee: r.Type.String(),
                      gas_limit: r.Type.String(),
                      to: r.Type.Optional(r.Type.String()),
                      value: r.Type.String(),
                      data_initial_chunk: r.Type.Optional(r.Type.String()),
                      data_length: r.Type.Number(),
                      chain_id: r.Type.Number(),
                      access_list: r.Type.Array(n.EthereumAccessList),
                      definitions: r.Type.Optional(n.EthereumDefinitions),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EthereumSignTxEIP1559' }
                  )),
                  (n.EthereumTxRequest = r.Type.Object(
                    {
                      data_length: r.Type.Optional(r.Type.Number()),
                      signature_v: r.Type.Optional(r.Type.Number()),
                      signature_r: r.Type.Optional(r.Type.String()),
                      signature_s: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'EthereumTxRequest' }
                  )),
                  (n.EthereumTxAck = r.Type.Object(
                    { data_chunk: r.Type.String() },
                    { $id: 'EthereumTxAck' }
                  )),
                  (n.EthereumSignMessage = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      message: r.Type.String(),
                      encoded_network: r.Type.Optional(r.Type.ArrayBuffer()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EthereumSignMessage' }
                  )),
                  (n.EthereumMessageSignature = r.Type.Object(
                    { signature: r.Type.String(), address: r.Type.String() },
                    { $id: 'EthereumMessageSignature' }
                  )),
                  (n.EthereumVerifyMessage = r.Type.Object(
                    {
                      signature: r.Type.String(),
                      message: r.Type.String(),
                      address: r.Type.String(),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'EthereumVerifyMessage' }
                  )),
                  (n.EthereumSignTypedHash = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      domain_separator_hash: r.Type.String(),
                      message_hash: r.Type.Optional(r.Type.String()),
                      encoded_network: r.Type.Optional(r.Type.ArrayBuffer()),
                    },
                    { $id: 'EthereumSignTypedHash' }
                  )),
                  (n.EthereumTypedDataSignature = r.Type.Object(
                    { signature: r.Type.String(), address: r.Type.String() },
                    { $id: 'EthereumTypedDataSignature' }
                  )),
                  (function (e) {
                    (e[(e.Bip39 = 0)] = 'Bip39'),
                      (e[(e.Slip39_Basic = 1)] = 'Slip39_Basic'),
                      (e[(e.Slip39_Advanced = 2)] = 'Slip39_Advanced'),
                      (e[(e.Slip39_Single_Extendable = 3)] = 'Slip39_Single_Extendable'),
                      (e[(e.Slip39_Basic_Extendable = 4)] = 'Slip39_Basic_Extendable'),
                      (e[(e.Slip39_Advanced_Extendable = 5)] = 'Slip39_Advanced_Extendable');
                  })(M || (n.Enum_BackupType = M = {})),
                  (n.EnumEnum_BackupType = r.Type.Enum(M)),
                  (n.BackupType = r.Type.KeyOfEnum(M, { $id: 'BackupType' })),
                  (function (e) {
                    (e[(e.Strict = 0)] = 'Strict'),
                      (e[(e.PromptAlways = 1)] = 'PromptAlways'),
                      (e[(e.PromptTemporarily = 2)] = 'PromptTemporarily');
                  })(L || (n.Enum_SafetyCheckLevel = L = {})),
                  (n.EnumEnum_SafetyCheckLevel = r.Type.Enum(L)),
                  (n.SafetyCheckLevel = r.Type.KeyOfEnum(L, { $id: 'SafetyCheckLevel' })),
                  (function (e) {
                    (e[(e.North = 0)] = 'North'),
                      (e[(e.East = 90)] = 'East'),
                      (e[(e.South = 180)] = 'South'),
                      (e[(e.West = 270)] = 'West');
                  })(j || (n.Enum_DisplayRotation = j = {})),
                  (n.EnumEnum_DisplayRotation = r.Type.Enum(j)),
                  (n.DisplayRotation = r.Type.KeyOfEnum(j, { $id: 'DisplayRotation' })),
                  (function (e) {
                    (e[(e.Toif = 1)] = 'Toif'),
                      (e[(e.Jpeg = 2)] = 'Jpeg'),
                      (e[(e.ToiG = 3)] = 'ToiG');
                  })(U || (n.Enum_HomescreenFormat = U = {})),
                  (n.EnumEnum_HomescreenFormat = r.Type.Enum(U)),
                  (n.HomescreenFormat = r.Type.KeyOfEnum(U, { $id: 'HomescreenFormat' })),
                  (n.Initialize = r.Type.Object(
                    {
                      session_id: r.Type.Optional(r.Type.String()),
                      _skip_passphrase: r.Type.Optional(r.Type.Boolean()),
                      derive_cardano: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'Initialize' }
                  )),
                  (n.GetFeatures = r.Type.Object({}, { $id: 'GetFeatures' })),
                  (function (e) {
                    (e[(e.NotAvailable = 0)] = 'NotAvailable'),
                      (e[(e.Required = 1)] = 'Required'),
                      (e[(e.Available = 2)] = 'Available');
                  })(B || (n.Enum_BackupAvailability = B = {})),
                  (n.EnumEnum_BackupAvailability = r.Type.Enum(B)),
                  (n.BackupAvailability = r.Type.KeyOfEnum(B, { $id: 'BackupAvailability' })),
                  (function (e) {
                    (e[(e.Nothing = 0)] = 'Nothing'),
                      (e[(e.Recovery = 1)] = 'Recovery'),
                      (e[(e.Backup = 2)] = 'Backup');
                  })(k || (n.Enum_RecoveryStatus = k = {})),
                  (n.EnumEnum_RecoveryStatus = r.Type.Enum(k)),
                  (n.RecoveryStatus = r.Type.KeyOfEnum(k, { $id: 'RecoveryStatus' })),
                  (function (e) {
                    (e[(e.Capability_Bitcoin = 1)] = 'Capability_Bitcoin'),
                      (e[(e.Capability_Bitcoin_like = 2)] = 'Capability_Bitcoin_like'),
                      (e[(e.Capability_Binance = 3)] = 'Capability_Binance'),
                      (e[(e.Capability_Cardano = 4)] = 'Capability_Cardano'),
                      (e[(e.Capability_Crypto = 5)] = 'Capability_Crypto'),
                      (e[(e.Capability_EOS = 6)] = 'Capability_EOS'),
                      (e[(e.Capability_Ethereum = 7)] = 'Capability_Ethereum'),
                      (e[(e.Capability_Lisk = 8)] = 'Capability_Lisk'),
                      (e[(e.Capability_Monero = 9)] = 'Capability_Monero'),
                      (e[(e.Capability_NEM = 10)] = 'Capability_NEM'),
                      (e[(e.Capability_Ripple = 11)] = 'Capability_Ripple'),
                      (e[(e.Capability_Stellar = 12)] = 'Capability_Stellar'),
                      (e[(e.Capability_Tezos = 13)] = 'Capability_Tezos'),
                      (e[(e.Capability_U2F = 14)] = 'Capability_U2F'),
                      (e[(e.Capability_Shamir = 15)] = 'Capability_Shamir'),
                      (e[(e.Capability_ShamirGroups = 16)] = 'Capability_ShamirGroups'),
                      (e[(e.Capability_PassphraseEntry = 17)] = 'Capability_PassphraseEntry'),
                      (e[(e.Capability_Solana = 18)] = 'Capability_Solana'),
                      (e[(e.Capability_Translations = 19)] = 'Capability_Translations'),
                      (e[(e.Capability_Brightness = 20)] = 'Capability_Brightness'),
                      (e[(e.Capability_Haptic = 21)] = 'Capability_Haptic');
                  })(F || (n.Enum_Capability = F = {})),
                  (n.EnumEnum_Capability = r.Type.Enum(F)),
                  (n.Capability = r.Type.KeyOfEnum(F, { $id: 'Capability' })),
                  (function (e) {
                    (e[(e.ScrambledWords = 0)] = 'ScrambledWords'), (e[(e.Matrix = 1)] = 'Matrix');
                  })(z || (n.RecoveryDeviceInputMethod = z = {})),
                  (n.EnumRecoveryDeviceInputMethod = r.Type.Enum(z)),
                  (function (e) {
                    (e[(e.NormalRecovery = 0)] = 'NormalRecovery'),
                      (e[(e.DryRun = 1)] = 'DryRun'),
                      (e[(e.UnlockRepeatedBackup = 2)] = 'UnlockRepeatedBackup');
                  })(G || (n.Enum_RecoveryType = G = {})),
                  (n.EnumEnum_RecoveryType = r.Type.Enum(G)),
                  (n.RecoveryType = r.Type.KeyOfEnum(G, { $id: 'RecoveryType' })),
                  (n.RecoveryDevice = r.Type.Object(
                    {
                      word_count: r.Type.Optional(r.Type.Number()),
                      passphrase_protection: r.Type.Optional(r.Type.Boolean()),
                      pin_protection: r.Type.Optional(r.Type.Boolean()),
                      language: r.Type.Optional(r.Type.String()),
                      label: r.Type.Optional(r.Type.String()),
                      enforce_wordlist: r.Type.Optional(r.Type.Boolean()),
                      input_method: r.Type.Optional(n.EnumRecoveryDeviceInputMethod),
                      u2f_counter: r.Type.Optional(r.Type.Number()),
                      type: r.Type.Optional(n.RecoveryType),
                    },
                    { $id: 'RecoveryDevice' }
                  )),
                  (n.Features = r.Type.Object(
                    {
                      vendor: r.Type.String(),
                      major_version: r.Type.Number(),
                      minor_version: r.Type.Number(),
                      patch_version: r.Type.Number(),
                      bootloader_mode: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      device_id: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      pin_protection: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      passphrase_protection: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      language: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      label: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      initialized: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      revision: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      bootloader_hash: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      imported: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      unlocked: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      _passphrase_cached: r.Type.Optional(r.Type.Boolean()),
                      firmware_present: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      backup_availability: r.Type.Union([n.BackupAvailability, r.Type.Null()]),
                      flags: r.Type.Union([r.Type.Number(), r.Type.Null()]),
                      model: r.Type.String(),
                      fw_major: r.Type.Union([r.Type.Number(), r.Type.Null()]),
                      fw_minor: r.Type.Union([r.Type.Number(), r.Type.Null()]),
                      fw_patch: r.Type.Union([r.Type.Number(), r.Type.Null()]),
                      fw_vendor: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      unfinished_backup: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      no_backup: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      recovery_status: r.Type.Union([n.RecoveryStatus, r.Type.Null()]),
                      capabilities: r.Type.Array(n.Capability),
                      backup_type: r.Type.Union([n.BackupType, r.Type.Null()]),
                      sd_card_present: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      sd_protection: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      wipe_code_protection: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      session_id: r.Type.Union([r.Type.String(), r.Type.Null()]),
                      passphrase_always_on_device: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      safety_checks: r.Type.Union([n.SafetyCheckLevel, r.Type.Null()]),
                      auto_lock_delay_ms: r.Type.Union([r.Type.Number(), r.Type.Null()]),
                      display_rotation: r.Type.Union([n.DisplayRotation, r.Type.Null()]),
                      experimental_features: r.Type.Union([r.Type.Boolean(), r.Type.Null()]),
                      busy: r.Type.Optional(r.Type.Boolean()),
                      homescreen_format: r.Type.Optional(n.HomescreenFormat),
                      hide_passphrase_from_host: r.Type.Optional(r.Type.Boolean()),
                      internal_model: n.EnumDeviceModelInternal,
                      unit_color: r.Type.Optional(r.Type.Number()),
                      unit_btconly: r.Type.Optional(r.Type.Boolean()),
                      homescreen_width: r.Type.Optional(r.Type.Number()),
                      homescreen_height: r.Type.Optional(r.Type.Number()),
                      bootloader_locked: r.Type.Optional(r.Type.Boolean()),
                      language_version_matches: r.Type.Optional(r.Type.Boolean()),
                      unit_packaging: r.Type.Optional(r.Type.Number()),
                      haptic_feedback: r.Type.Optional(r.Type.Boolean()),
                      recovery_type: r.Type.Optional(n.RecoveryType),
                      optiga_sec: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'Features' }
                  )),
                  (n.LockDevice = r.Type.Object({}, { $id: 'LockDevice' })),
                  (n.SetBusy = r.Type.Object(
                    { expiry_ms: r.Type.Optional(r.Type.Number()) },
                    { $id: 'SetBusy' }
                  )),
                  (n.EndSession = r.Type.Object({}, { $id: 'EndSession' })),
                  (n.ApplySettings = r.Type.Object(
                    {
                      language: r.Type.Optional(r.Type.String()),
                      label: r.Type.Optional(r.Type.String()),
                      use_passphrase: r.Type.Optional(r.Type.Boolean()),
                      homescreen: r.Type.Optional(r.Type.String()),
                      _passphrase_source: r.Type.Optional(r.Type.Number()),
                      auto_lock_delay_ms: r.Type.Optional(r.Type.Number()),
                      display_rotation: r.Type.Optional(
                        r.Type.Union([n.DisplayRotation, n.EnumEnum_DisplayRotation])
                      ),
                      passphrase_always_on_device: r.Type.Optional(r.Type.Boolean()),
                      safety_checks: r.Type.Optional(n.SafetyCheckLevel),
                      experimental_features: r.Type.Optional(r.Type.Boolean()),
                      hide_passphrase_from_host: r.Type.Optional(r.Type.Boolean()),
                      haptic_feedback: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'ApplySettings' }
                  )),
                  (n.ChangeLanguage = r.Type.Object(
                    {
                      data_length: r.Type.Number(),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'ChangeLanguage' }
                  )),
                  (n.TranslationDataRequest = r.Type.Object(
                    { data_length: r.Type.Number(), data_offset: r.Type.Number() },
                    { $id: 'TranslationDataRequest' }
                  )),
                  (n.TranslationDataAck = r.Type.Object(
                    { data_chunk: r.Type.String() },
                    { $id: 'TranslationDataAck' }
                  )),
                  (n.ApplyFlags = r.Type.Object({ flags: r.Type.Number() }, { $id: 'ApplyFlags' })),
                  (n.ChangePin = r.Type.Object(
                    { remove: r.Type.Optional(r.Type.Boolean()) },
                    { $id: 'ChangePin' }
                  )),
                  (n.ChangeWipeCode = r.Type.Object(
                    { remove: r.Type.Optional(r.Type.Boolean()) },
                    { $id: 'ChangeWipeCode' }
                  )),
                  (function (e) {
                    (e[(e.DISABLE = 0)] = 'DISABLE'),
                      (e[(e.ENABLE = 1)] = 'ENABLE'),
                      (e[(e.REFRESH = 2)] = 'REFRESH');
                  })(H || (n.SdProtectOperationType = H = {})),
                  (n.EnumSdProtectOperationType = r.Type.Enum(H)),
                  (n.SdProtect = r.Type.Object(
                    { operation: n.EnumSdProtectOperationType },
                    { $id: 'SdProtect' }
                  )),
                  (n.Ping = r.Type.Object(
                    {
                      message: r.Type.Optional(r.Type.String()),
                      button_protection: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'Ping' }
                  )),
                  (n.Cancel = r.Type.Object({}, { $id: 'Cancel' })),
                  (n.GetEntropy = r.Type.Object({ size: r.Type.Number() }, { $id: 'GetEntropy' })),
                  (n.Entropy = r.Type.Object({ entropy: r.Type.String() }, { $id: 'Entropy' })),
                  (n.GetFirmwareHash = r.Type.Object(
                    { challenge: r.Type.Optional(r.Type.String()) },
                    { $id: 'GetFirmwareHash' }
                  )),
                  (n.FirmwareHash = r.Type.Object(
                    { hash: r.Type.String() },
                    { $id: 'FirmwareHash' }
                  )),
                  (n.AuthenticateDevice = r.Type.Object(
                    { challenge: r.Type.String() },
                    { $id: 'AuthenticateDevice' }
                  )),
                  (n.AuthenticityProof = r.Type.Object(
                    { certificates: r.Type.Array(r.Type.String()), signature: r.Type.String() },
                    { $id: 'AuthenticityProof' }
                  )),
                  (n.WipeDevice = r.Type.Object({}, { $id: 'WipeDevice' })),
                  (n.LoadDevice = r.Type.Object(
                    {
                      mnemonics: r.Type.Array(r.Type.String()),
                      pin: r.Type.Optional(r.Type.String()),
                      passphrase_protection: r.Type.Optional(r.Type.Boolean()),
                      language: r.Type.Optional(r.Type.String()),
                      label: r.Type.Optional(r.Type.String()),
                      skip_checksum: r.Type.Optional(r.Type.Boolean()),
                      u2f_counter: r.Type.Optional(r.Type.Number()),
                      needs_backup: r.Type.Optional(r.Type.Boolean()),
                      no_backup: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'LoadDevice' }
                  )),
                  (n.ResetDevice = r.Type.Object(
                    {
                      strength: r.Type.Optional(r.Type.Number()),
                      passphrase_protection: r.Type.Optional(r.Type.Boolean()),
                      pin_protection: r.Type.Optional(r.Type.Boolean()),
                      language: r.Type.Optional(r.Type.String()),
                      label: r.Type.Optional(r.Type.String()),
                      u2f_counter: r.Type.Optional(r.Type.Number()),
                      skip_backup: r.Type.Optional(r.Type.Boolean()),
                      no_backup: r.Type.Optional(r.Type.Boolean()),
                      backup_type: r.Type.Optional(n.EnumEnum_BackupType),
                    },
                    { $id: 'ResetDevice' }
                  )),
                  (n.Slip39Group = r.Type.Object(
                    { member_threshold: r.Type.Number(), member_count: r.Type.Number() },
                    { $id: 'Slip39Group' }
                  )),
                  (n.BackupDevice = r.Type.Object(
                    {
                      group_threshold: r.Type.Optional(r.Type.Number()),
                      groups: r.Type.Optional(r.Type.Array(n.Slip39Group)),
                    },
                    { $id: 'BackupDevice' }
                  )),
                  (n.EntropyRequest = r.Type.Object({}, { $id: 'EntropyRequest' })),
                  (n.EntropyAck = r.Type.Object(
                    { entropy: r.Type.String() },
                    { $id: 'EntropyAck' }
                  )),
                  (function (e) {
                    (e[(e.WordRequestType_Plain = 0)] = 'WordRequestType_Plain'),
                      (e[(e.WordRequestType_Matrix9 = 1)] = 'WordRequestType_Matrix9'),
                      (e[(e.WordRequestType_Matrix6 = 2)] = 'WordRequestType_Matrix6');
                  })(V || (n.Enum_WordRequestType = V = {})),
                  (n.EnumEnum_WordRequestType = r.Type.Enum(V)),
                  (n.WordRequestType = r.Type.KeyOfEnum(V, { $id: 'WordRequestType' })),
                  (n.WordRequest = r.Type.Object(
                    { type: n.WordRequestType },
                    { $id: 'WordRequest' }
                  )),
                  (n.WordAck = r.Type.Object({ word: r.Type.String() }, { $id: 'WordAck' })),
                  (n.SetU2FCounter = r.Type.Object(
                    { u2f_counter: r.Type.Number() },
                    { $id: 'SetU2FCounter' }
                  )),
                  (n.GetNextU2FCounter = r.Type.Object({}, { $id: 'GetNextU2FCounter' })),
                  (n.NextU2FCounter = r.Type.Object(
                    { u2f_counter: r.Type.Number() },
                    { $id: 'NextU2FCounter' }
                  )),
                  (n.DoPreauthorized = r.Type.Object({}, { $id: 'DoPreauthorized' })),
                  (n.PreauthorizedRequest = r.Type.Object({}, { $id: 'PreauthorizedRequest' })),
                  (n.CancelAuthorization = r.Type.Object({}, { $id: 'CancelAuthorization' })),
                  (function (e) {
                    (e[(e.STOP_AND_WAIT = 0)] = 'STOP_AND_WAIT'),
                      (e[(e.INSTALL_UPGRADE = 1)] = 'INSTALL_UPGRADE');
                  })($ || (n.BootCommand = $ = {})),
                  (n.EnumBootCommand = r.Type.Enum($)),
                  (n.RebootToBootloader = r.Type.Object(
                    {
                      boot_command: r.Type.Optional(n.EnumBootCommand),
                      firmware_header: r.Type.Optional(r.Type.String()),
                      language_data_length: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'RebootToBootloader' }
                  )),
                  (n.GetNonce = r.Type.Object({}, { $id: 'GetNonce' })),
                  (n.Nonce = r.Type.Object({ nonce: r.Type.String() }, { $id: 'Nonce' })),
                  (n.UnlockPath = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      mac: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'UnlockPath' }
                  )),
                  (n.UnlockedPathRequest = r.Type.Object(
                    { mac: r.Type.Optional(r.Type.String()) },
                    { $id: 'UnlockedPathRequest' }
                  )),
                  (n.ShowDeviceTutorial = r.Type.Object({}, { $id: 'ShowDeviceTutorial' })),
                  (n.UnlockBootloader = r.Type.Object({}, { $id: 'UnlockBootloader' })),
                  (n.SetBrightness = r.Type.Object(
                    { value: r.Type.Optional(r.Type.Number()) },
                    { $id: 'SetBrightness' }
                  )),
                  (n.NEMGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      network: r.Type.Optional(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'NEMGetAddress' }
                  )),
                  (n.NEMAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'NEMAddress' }
                  )),
                  (n.NEMTransactionCommon = r.Type.Object(
                    {
                      address_n: r.Type.Optional(r.Type.Array(r.Type.Number())),
                      network: r.Type.Optional(r.Type.Number()),
                      timestamp: r.Type.Number(),
                      fee: r.Type.Uint(),
                      deadline: r.Type.Number(),
                      signer: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'NEMTransactionCommon' }
                  )),
                  (n.NEMMosaic = r.Type.Object(
                    {
                      namespace: r.Type.String(),
                      mosaic: r.Type.String(),
                      quantity: r.Type.Number(),
                    },
                    { $id: 'NEMMosaic' }
                  )),
                  (n.NEMTransfer = r.Type.Object(
                    {
                      recipient: r.Type.String(),
                      amount: r.Type.Uint(),
                      payload: r.Type.Optional(r.Type.String()),
                      public_key: r.Type.Optional(r.Type.String()),
                      mosaics: r.Type.Optional(r.Type.Array(n.NEMMosaic)),
                    },
                    { $id: 'NEMTransfer' }
                  )),
                  (n.NEMProvisionNamespace = r.Type.Object(
                    {
                      namespace: r.Type.String(),
                      parent: r.Type.Optional(r.Type.String()),
                      sink: r.Type.String(),
                      fee: r.Type.Uint(),
                    },
                    { $id: 'NEMProvisionNamespace' }
                  )),
                  (function (e) {
                    (e[(e.MosaicLevy_Absolute = 1)] = 'MosaicLevy_Absolute'),
                      (e[(e.MosaicLevy_Percentile = 2)] = 'MosaicLevy_Percentile');
                  })(W || (n.NEMMosaicLevy = W = {})),
                  (n.EnumNEMMosaicLevy = r.Type.Enum(W)),
                  (n.NEMMosaicDefinition = r.Type.Object(
                    {
                      name: r.Type.Optional(r.Type.String()),
                      ticker: r.Type.Optional(r.Type.String()),
                      namespace: r.Type.String(),
                      mosaic: r.Type.String(),
                      divisibility: r.Type.Optional(r.Type.Number()),
                      levy: r.Type.Optional(n.EnumNEMMosaicLevy),
                      fee: r.Type.Optional(r.Type.Uint()),
                      levy_address: r.Type.Optional(r.Type.String()),
                      levy_namespace: r.Type.Optional(r.Type.String()),
                      levy_mosaic: r.Type.Optional(r.Type.String()),
                      supply: r.Type.Optional(r.Type.Number()),
                      mutable_supply: r.Type.Optional(r.Type.Boolean()),
                      transferable: r.Type.Optional(r.Type.Boolean()),
                      description: r.Type.String(),
                      networks: r.Type.Optional(r.Type.Array(r.Type.Number())),
                    },
                    { $id: 'NEMMosaicDefinition' }
                  )),
                  (n.NEMMosaicCreation = r.Type.Object(
                    {
                      definition: n.NEMMosaicDefinition,
                      sink: r.Type.String(),
                      fee: r.Type.Uint(),
                    },
                    { $id: 'NEMMosaicCreation' }
                  )),
                  (function (e) {
                    (e[(e.SupplyChange_Increase = 1)] = 'SupplyChange_Increase'),
                      (e[(e.SupplyChange_Decrease = 2)] = 'SupplyChange_Decrease');
                  })(q || (n.NEMSupplyChangeType = q = {})),
                  (n.EnumNEMSupplyChangeType = r.Type.Enum(q)),
                  (n.NEMMosaicSupplyChange = r.Type.Object(
                    {
                      namespace: r.Type.String(),
                      mosaic: r.Type.String(),
                      type: n.EnumNEMSupplyChangeType,
                      delta: r.Type.Number(),
                    },
                    { $id: 'NEMMosaicSupplyChange' }
                  )),
                  (function (e) {
                    (e[(e.CosignatoryModification_Add = 1)] = 'CosignatoryModification_Add'),
                      (e[(e.CosignatoryModification_Delete = 2)] =
                        'CosignatoryModification_Delete');
                  })(K || (n.NEMModificationType = K = {})),
                  (n.EnumNEMModificationType = r.Type.Enum(K)),
                  (n.NEMCosignatoryModification = r.Type.Object(
                    { type: n.EnumNEMModificationType, public_key: r.Type.String() },
                    { $id: 'NEMCosignatoryModification' }
                  )),
                  (n.NEMAggregateModification = r.Type.Object(
                    {
                      modifications: r.Type.Optional(r.Type.Array(n.NEMCosignatoryModification)),
                      relative_change: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'NEMAggregateModification' }
                  )),
                  (function (e) {
                    (e[(e.ImportanceTransfer_Activate = 1)] = 'ImportanceTransfer_Activate'),
                      (e[(e.ImportanceTransfer_Deactivate = 2)] = 'ImportanceTransfer_Deactivate');
                  })(Y || (n.NEMImportanceTransferMode = Y = {})),
                  (n.EnumNEMImportanceTransferMode = r.Type.Enum(Y)),
                  (n.NEMImportanceTransfer = r.Type.Object(
                    { mode: n.EnumNEMImportanceTransferMode, public_key: r.Type.String() },
                    { $id: 'NEMImportanceTransfer' }
                  )),
                  (n.NEMSignTx = r.Type.Object(
                    {
                      transaction: n.NEMTransactionCommon,
                      multisig: r.Type.Optional(n.NEMTransactionCommon),
                      transfer: r.Type.Optional(n.NEMTransfer),
                      cosigning: r.Type.Optional(r.Type.Boolean()),
                      provision_namespace: r.Type.Optional(n.NEMProvisionNamespace),
                      mosaic_creation: r.Type.Optional(n.NEMMosaicCreation),
                      supply_change: r.Type.Optional(n.NEMMosaicSupplyChange),
                      aggregate_modification: r.Type.Optional(n.NEMAggregateModification),
                      importance_transfer: r.Type.Optional(n.NEMImportanceTransfer),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'NEMSignTx' }
                  )),
                  (n.NEMSignedTx = r.Type.Object(
                    { data: r.Type.String(), signature: r.Type.String() },
                    { $id: 'NEMSignedTx' }
                  )),
                  (n.NEMDecryptMessage = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      network: r.Type.Optional(r.Type.Number()),
                      public_key: r.Type.Optional(r.Type.String()),
                      payload: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'NEMDecryptMessage' }
                  )),
                  (n.NEMDecryptedMessage = r.Type.Object(
                    { payload: r.Type.String() },
                    { $id: 'NEMDecryptedMessage' }
                  )),
                  (n.RippleGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'RippleGetAddress' }
                  )),
                  (n.RippleAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'RippleAddress' }
                  )),
                  (n.RipplePayment = r.Type.Object(
                    {
                      amount: r.Type.Uint(),
                      destination: r.Type.String(),
                      destination_tag: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'RipplePayment' }
                  )),
                  (n.RippleSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      fee: r.Type.Uint(),
                      flags: r.Type.Optional(r.Type.Number()),
                      sequence: r.Type.Number(),
                      last_ledger_sequence: r.Type.Optional(r.Type.Number()),
                      payment: n.RipplePayment,
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'RippleSignTx' }
                  )),
                  (n.RippleSignedTx = r.Type.Object(
                    { signature: r.Type.String(), serialized_tx: r.Type.String() },
                    { $id: 'RippleSignedTx' }
                  )),
                  (n.SolanaGetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'SolanaGetPublicKey' }
                  )),
                  (n.SolanaPublicKey = r.Type.Object(
                    { public_key: r.Type.String() },
                    { $id: 'SolanaPublicKey' }
                  )),
                  (n.SolanaGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'SolanaGetAddress' }
                  )),
                  (n.SolanaAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'SolanaAddress' }
                  )),
                  (n.SolanaTxTokenAccountInfo = r.Type.Object(
                    {
                      base_address: r.Type.String(),
                      token_program: r.Type.String(),
                      token_mint: r.Type.String(),
                      token_account: r.Type.String(),
                    },
                    { $id: 'SolanaTxTokenAccountInfo' }
                  )),
                  (n.SolanaTxAdditionalInfo = r.Type.Object(
                    { token_accounts_infos: r.Type.Array(n.SolanaTxTokenAccountInfo) },
                    { $id: 'SolanaTxAdditionalInfo' }
                  )),
                  (n.SolanaSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      serialized_tx: r.Type.String(),
                      additional_info: r.Type.Optional(n.SolanaTxAdditionalInfo),
                    },
                    { $id: 'SolanaSignTx' }
                  )),
                  (n.SolanaTxSignature = r.Type.Object(
                    { signature: r.Type.String() },
                    { $id: 'SolanaTxSignature' }
                  )),
                  (function (e) {
                    (e[(e.NATIVE = 0)] = 'NATIVE'),
                      (e[(e.ALPHANUM4 = 1)] = 'ALPHANUM4'),
                      (e[(e.ALPHANUM12 = 2)] = 'ALPHANUM12');
                  })(X || (n.StellarAssetType = X = {})),
                  (n.EnumStellarAssetType = r.Type.Enum(X)),
                  (n.StellarAsset = r.Type.Object(
                    {
                      type: r.Type.Union([
                        r.Type.Literal(0),
                        r.Type.Literal(1),
                        r.Type.Literal(2),
                        r.Type.Literal('NATIVE'),
                        r.Type.Literal('ALPHANUM4'),
                        r.Type.Literal('ALPHANUM12'),
                      ]),
                      code: r.Type.Optional(r.Type.String()),
                      issuer: r.Type.Optional(r.Type.String()),
                    },
                    { $id: 'StellarAsset' }
                  )),
                  (n.StellarGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'StellarGetAddress' }
                  )),
                  (n.StellarAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'StellarAddress' }
                  )),
                  (function (e) {
                    (e[(e.NONE = 0)] = 'NONE'),
                      (e[(e.TEXT = 1)] = 'TEXT'),
                      (e[(e.ID = 2)] = 'ID'),
                      (e[(e.HASH = 3)] = 'HASH'),
                      (e[(e.RETURN = 4)] = 'RETURN');
                  })(J || (n.StellarMemoType = J = {})),
                  (n.EnumStellarMemoType = r.Type.Enum(J)),
                  (n.StellarSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      network_passphrase: r.Type.String(),
                      source_account: r.Type.String(),
                      fee: r.Type.Uint(),
                      sequence_number: r.Type.Uint(),
                      timebounds_start: r.Type.Number(),
                      timebounds_end: r.Type.Number(),
                      memo_type: n.EnumStellarMemoType,
                      memo_text: r.Type.Optional(r.Type.String()),
                      memo_id: r.Type.Optional(r.Type.Uint()),
                      memo_hash: r.Type.Optional(r.Type.Union([r.Type.Buffer(), r.Type.String()])),
                      num_operations: r.Type.Number(),
                    },
                    { $id: 'StellarSignTx' }
                  )),
                  (n.StellarTxOpRequest = r.Type.Object({}, { $id: 'StellarTxOpRequest' })),
                  (n.StellarPaymentOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      destination_account: r.Type.String(),
                      asset: n.StellarAsset,
                      amount: r.Type.Uint(),
                    },
                    { $id: 'StellarPaymentOp' }
                  )),
                  (n.StellarCreateAccountOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      new_account: r.Type.String(),
                      starting_balance: r.Type.Uint(),
                    },
                    { $id: 'StellarCreateAccountOp' }
                  )),
                  (n.StellarPathPaymentStrictReceiveOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      send_asset: n.StellarAsset,
                      send_max: r.Type.Uint(),
                      destination_account: r.Type.String(),
                      destination_asset: n.StellarAsset,
                      destination_amount: r.Type.Uint(),
                      paths: r.Type.Optional(r.Type.Array(n.StellarAsset)),
                    },
                    { $id: 'StellarPathPaymentStrictReceiveOp' }
                  )),
                  (n.StellarPathPaymentStrictSendOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      send_asset: n.StellarAsset,
                      send_amount: r.Type.Uint(),
                      destination_account: r.Type.String(),
                      destination_asset: n.StellarAsset,
                      destination_min: r.Type.Uint(),
                      paths: r.Type.Optional(r.Type.Array(n.StellarAsset)),
                    },
                    { $id: 'StellarPathPaymentStrictSendOp' }
                  )),
                  (n.StellarManageSellOfferOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      selling_asset: n.StellarAsset,
                      buying_asset: n.StellarAsset,
                      amount: r.Type.Uint(),
                      price_n: r.Type.Number(),
                      price_d: r.Type.Number(),
                      offer_id: r.Type.Uint(),
                    },
                    { $id: 'StellarManageSellOfferOp' }
                  )),
                  (n.StellarManageBuyOfferOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      selling_asset: n.StellarAsset,
                      buying_asset: n.StellarAsset,
                      amount: r.Type.Uint(),
                      price_n: r.Type.Number(),
                      price_d: r.Type.Number(),
                      offer_id: r.Type.Uint(),
                    },
                    { $id: 'StellarManageBuyOfferOp' }
                  )),
                  (n.StellarCreatePassiveSellOfferOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      selling_asset: n.StellarAsset,
                      buying_asset: n.StellarAsset,
                      amount: r.Type.Uint(),
                      price_n: r.Type.Number(),
                      price_d: r.Type.Number(),
                    },
                    { $id: 'StellarCreatePassiveSellOfferOp' }
                  )),
                  (function (e) {
                    (e[(e.ACCOUNT = 0)] = 'ACCOUNT'),
                      (e[(e.PRE_AUTH = 1)] = 'PRE_AUTH'),
                      (e[(e.HASH = 2)] = 'HASH');
                  })(Q || (n.StellarSignerType = Q = {})),
                  (n.EnumStellarSignerType = r.Type.Enum(Q)),
                  (n.StellarSetOptionsOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      inflation_destination_account: r.Type.Optional(r.Type.String()),
                      clear_flags: r.Type.Optional(r.Type.Number()),
                      set_flags: r.Type.Optional(r.Type.Number()),
                      master_weight: r.Type.Optional(r.Type.Uint()),
                      low_threshold: r.Type.Optional(r.Type.Uint()),
                      medium_threshold: r.Type.Optional(r.Type.Uint()),
                      high_threshold: r.Type.Optional(r.Type.Uint()),
                      home_domain: r.Type.Optional(r.Type.String()),
                      signer_type: r.Type.Optional(n.EnumStellarSignerType),
                      signer_key: r.Type.Optional(r.Type.Union([r.Type.Buffer(), r.Type.String()])),
                      signer_weight: r.Type.Optional(r.Type.Number()),
                    },
                    { $id: 'StellarSetOptionsOp' }
                  )),
                  (n.StellarChangeTrustOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      asset: n.StellarAsset,
                      limit: r.Type.Uint(),
                    },
                    { $id: 'StellarChangeTrustOp' }
                  )),
                  (n.StellarAllowTrustOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      trusted_account: r.Type.String(),
                      asset_type: n.EnumStellarAssetType,
                      asset_code: r.Type.Optional(r.Type.String()),
                      is_authorized: r.Type.Boolean(),
                    },
                    { $id: 'StellarAllowTrustOp' }
                  )),
                  (n.StellarAccountMergeOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      destination_account: r.Type.String(),
                    },
                    { $id: 'StellarAccountMergeOp' }
                  )),
                  (n.StellarManageDataOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      key: r.Type.String(),
                      value: r.Type.Optional(r.Type.Union([r.Type.Buffer(), r.Type.String()])),
                    },
                    { $id: 'StellarManageDataOp' }
                  )),
                  (n.StellarBumpSequenceOp = r.Type.Object(
                    { source_account: r.Type.Optional(r.Type.String()), bump_to: r.Type.Uint() },
                    { $id: 'StellarBumpSequenceOp' }
                  )),
                  (n.StellarClaimClaimableBalanceOp = r.Type.Object(
                    {
                      source_account: r.Type.Optional(r.Type.String()),
                      balance_id: r.Type.String(),
                    },
                    { $id: 'StellarClaimClaimableBalanceOp' }
                  )),
                  (n.StellarSignedTx = r.Type.Object(
                    { public_key: r.Type.String(), signature: r.Type.String() },
                    { $id: 'StellarSignedTx' }
                  )),
                  (n.TezosGetAddress = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'TezosGetAddress' }
                  )),
                  (n.TezosAddress = r.Type.Object(
                    { address: r.Type.String() },
                    { $id: 'TezosAddress' }
                  )),
                  (n.TezosGetPublicKey = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      show_display: r.Type.Optional(r.Type.Boolean()),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'TezosGetPublicKey' }
                  )),
                  (n.TezosPublicKey = r.Type.Object(
                    { public_key: r.Type.String() },
                    { $id: 'TezosPublicKey' }
                  )),
                  (function (e) {
                    (e[(e.Implicit = 0)] = 'Implicit'), (e[(e.Originated = 1)] = 'Originated');
                  })(Z || (n.TezosContractType = Z = {})),
                  (n.EnumTezosContractType = r.Type.Enum(Z)),
                  (n.TezosContractID = r.Type.Object(
                    { tag: r.Type.Number(), hash: r.Type.Uint8Array() },
                    { $id: 'TezosContractID' }
                  )),
                  (n.TezosRevealOp = r.Type.Object(
                    {
                      source: r.Type.Uint8Array(),
                      fee: r.Type.Uint(),
                      counter: r.Type.Number(),
                      gas_limit: r.Type.Number(),
                      storage_limit: r.Type.Number(),
                      public_key: r.Type.Uint8Array(),
                    },
                    { $id: 'TezosRevealOp' }
                  )),
                  (n.TezosManagerTransfer = r.Type.Object(
                    { destination: n.TezosContractID, amount: r.Type.Uint() },
                    { $id: 'TezosManagerTransfer' }
                  )),
                  (n.TezosParametersManager = r.Type.Object(
                    {
                      set_delegate: r.Type.Optional(r.Type.Uint8Array()),
                      cancel_delegate: r.Type.Optional(r.Type.Boolean()),
                      transfer: r.Type.Optional(n.TezosManagerTransfer),
                    },
                    { $id: 'TezosParametersManager' }
                  )),
                  (n.TezosTransactionOp = r.Type.Object(
                    {
                      source: r.Type.Uint8Array(),
                      fee: r.Type.Uint(),
                      counter: r.Type.Number(),
                      gas_limit: r.Type.Number(),
                      storage_limit: r.Type.Number(),
                      amount: r.Type.Uint(),
                      destination: n.TezosContractID,
                      parameters: r.Type.Optional(r.Type.Array(r.Type.Number())),
                      parameters_manager: r.Type.Optional(n.TezosParametersManager),
                    },
                    { $id: 'TezosTransactionOp' }
                  )),
                  (n.TezosOriginationOp = r.Type.Object(
                    {
                      source: r.Type.Uint8Array(),
                      fee: r.Type.Uint(),
                      counter: r.Type.Number(),
                      gas_limit: r.Type.Number(),
                      storage_limit: r.Type.Number(),
                      manager_pubkey: r.Type.Optional(r.Type.String()),
                      balance: r.Type.Number(),
                      spendable: r.Type.Optional(r.Type.Boolean()),
                      delegatable: r.Type.Optional(r.Type.Boolean()),
                      delegate: r.Type.Optional(r.Type.Uint8Array()),
                      script: r.Type.Union([r.Type.String(), r.Type.Array(r.Type.Number())]),
                    },
                    { $id: 'TezosOriginationOp' }
                  )),
                  (n.TezosDelegationOp = r.Type.Object(
                    {
                      source: r.Type.Uint8Array(),
                      fee: r.Type.Uint(),
                      counter: r.Type.Number(),
                      gas_limit: r.Type.Number(),
                      storage_limit: r.Type.Number(),
                      delegate: r.Type.Uint8Array(),
                    },
                    { $id: 'TezosDelegationOp' }
                  )),
                  (n.TezosProposalOp = r.Type.Object(
                    {
                      source: r.Type.String(),
                      period: r.Type.Number(),
                      proposals: r.Type.Array(r.Type.String()),
                    },
                    { $id: 'TezosProposalOp' }
                  )),
                  (function (e) {
                    (e[(e.Yay = 0)] = 'Yay'), (e[(e.Nay = 1)] = 'Nay'), (e[(e.Pass = 2)] = 'Pass');
                  })(ee || (n.TezosBallotType = ee = {})),
                  (n.EnumTezosBallotType = r.Type.Enum(ee)),
                  (n.TezosBallotOp = r.Type.Object(
                    {
                      source: r.Type.String(),
                      period: r.Type.Number(),
                      proposal: r.Type.String(),
                      ballot: n.EnumTezosBallotType,
                    },
                    { $id: 'TezosBallotOp' }
                  )),
                  (n.TezosSignTx = r.Type.Object(
                    {
                      address_n: r.Type.Array(r.Type.Number()),
                      branch: r.Type.Uint8Array(),
                      reveal: r.Type.Optional(n.TezosRevealOp),
                      transaction: r.Type.Optional(n.TezosTransactionOp),
                      origination: r.Type.Optional(n.TezosOriginationOp),
                      delegation: r.Type.Optional(n.TezosDelegationOp),
                      proposal: r.Type.Optional(n.TezosProposalOp),
                      ballot: r.Type.Optional(n.TezosBallotOp),
                      chunkify: r.Type.Optional(r.Type.Boolean()),
                    },
                    { $id: 'TezosSignTx' }
                  )),
                  (n.TezosSignedTx = r.Type.Object(
                    {
                      signature: r.Type.String(),
                      sig_op_contents: r.Type.String(),
                      operation_hash: r.Type.String(),
                    },
                    { $id: 'TezosSignedTx' }
                  )),
                  (n.MessageType = r.Type.Object(
                    {
                      BinanceGetAddress: n.BinanceGetAddress,
                      BinanceAddress: n.BinanceAddress,
                      BinanceGetPublicKey: n.BinanceGetPublicKey,
                      BinancePublicKey: n.BinancePublicKey,
                      BinanceSignTx: n.BinanceSignTx,
                      BinanceTxRequest: n.BinanceTxRequest,
                      BinanceCoin: n.BinanceCoin,
                      BinanceInputOutput: n.BinanceInputOutput,
                      BinanceTransferMsg: n.BinanceTransferMsg,
                      BinanceOrderMsg: n.BinanceOrderMsg,
                      BinanceCancelMsg: n.BinanceCancelMsg,
                      BinanceSignedTx: n.BinanceSignedTx,
                      HDNodeType: n.HDNodeType,
                      HDNodePathType: n.HDNodePathType,
                      MultisigRedeemScriptType: n.MultisigRedeemScriptType,
                      GetPublicKey: n.GetPublicKey,
                      PublicKey: n.PublicKey,
                      GetAddress: n.GetAddress,
                      Address: n.Address,
                      GetOwnershipId: n.GetOwnershipId,
                      OwnershipId: n.OwnershipId,
                      SignMessage: n.SignMessage,
                      MessageSignature: n.MessageSignature,
                      VerifyMessage: n.VerifyMessage,
                      CoinJoinRequest: n.CoinJoinRequest,
                      SignTx: n.SignTx,
                      TxRequestDetailsType: n.TxRequestDetailsType,
                      TxRequestSerializedType: n.TxRequestSerializedType,
                      TxRequest: n.TxRequest,
                      TxInputType: n.TxInputType,
                      TxOutputBinType: n.TxOutputBinType,
                      TxOutputType: n.TxOutputType,
                      PrevTx: n.PrevTx,
                      PrevInput: n.PrevInput,
                      PrevOutput: n.PrevOutput,
                      TextMemo: n.TextMemo,
                      RefundMemo: n.RefundMemo,
                      CoinPurchaseMemo: n.CoinPurchaseMemo,
                      PaymentRequestMemo: n.PaymentRequestMemo,
                      TxAckPaymentRequest: n.TxAckPaymentRequest,
                      TxAck: n.TxAck,
                      TxAckInputWrapper: n.TxAckInputWrapper,
                      TxAckInput: n.TxAckInput,
                      TxAckOutputWrapper: n.TxAckOutputWrapper,
                      TxAckOutput: n.TxAckOutput,
                      TxAckPrevMeta: n.TxAckPrevMeta,
                      TxAckPrevInputWrapper: n.TxAckPrevInputWrapper,
                      TxAckPrevInput: n.TxAckPrevInput,
                      TxAckPrevOutputWrapper: n.TxAckPrevOutputWrapper,
                      TxAckPrevOutput: n.TxAckPrevOutput,
                      TxAckPrevExtraDataWrapper: n.TxAckPrevExtraDataWrapper,
                      TxAckPrevExtraData: n.TxAckPrevExtraData,
                      GetOwnershipProof: n.GetOwnershipProof,
                      OwnershipProof: n.OwnershipProof,
                      AuthorizeCoinJoin: n.AuthorizeCoinJoin,
                      FirmwareErase: n.FirmwareErase,
                      FirmwareRequest: n.FirmwareRequest,
                      FirmwareUpload: n.FirmwareUpload,
                      ProdTestT1: n.ProdTestT1,
                      CardanoBlockchainPointerType: n.CardanoBlockchainPointerType,
                      CardanoNativeScript: n.CardanoNativeScript,
                      CardanoGetNativeScriptHash: n.CardanoGetNativeScriptHash,
                      CardanoNativeScriptHash: n.CardanoNativeScriptHash,
                      CardanoAddressParametersType: n.CardanoAddressParametersType,
                      CardanoGetAddress: n.CardanoGetAddress,
                      CardanoAddress: n.CardanoAddress,
                      CardanoGetPublicKey: n.CardanoGetPublicKey,
                      CardanoPublicKey: n.CardanoPublicKey,
                      CardanoSignTxInit: n.CardanoSignTxInit,
                      CardanoTxInput: n.CardanoTxInput,
                      CardanoTxOutput: n.CardanoTxOutput,
                      CardanoAssetGroup: n.CardanoAssetGroup,
                      CardanoToken: n.CardanoToken,
                      CardanoTxInlineDatumChunk: n.CardanoTxInlineDatumChunk,
                      CardanoTxReferenceScriptChunk: n.CardanoTxReferenceScriptChunk,
                      CardanoPoolOwner: n.CardanoPoolOwner,
                      CardanoPoolRelayParameters: n.CardanoPoolRelayParameters,
                      CardanoPoolMetadataType: n.CardanoPoolMetadataType,
                      CardanoPoolParametersType: n.CardanoPoolParametersType,
                      CardanoDRep: n.CardanoDRep,
                      CardanoTxCertificate: n.CardanoTxCertificate,
                      CardanoTxWithdrawal: n.CardanoTxWithdrawal,
                      CardanoCVoteRegistrationDelegation: n.CardanoCVoteRegistrationDelegation,
                      CardanoCVoteRegistrationParametersType:
                        n.CardanoCVoteRegistrationParametersType,
                      CardanoTxAuxiliaryData: n.CardanoTxAuxiliaryData,
                      CardanoTxMint: n.CardanoTxMint,
                      CardanoTxCollateralInput: n.CardanoTxCollateralInput,
                      CardanoTxRequiredSigner: n.CardanoTxRequiredSigner,
                      CardanoTxReferenceInput: n.CardanoTxReferenceInput,
                      CardanoTxItemAck: n.CardanoTxItemAck,
                      CardanoTxAuxiliaryDataSupplement: n.CardanoTxAuxiliaryDataSupplement,
                      CardanoTxWitnessRequest: n.CardanoTxWitnessRequest,
                      CardanoTxWitnessResponse: n.CardanoTxWitnessResponse,
                      CardanoTxHostAck: n.CardanoTxHostAck,
                      CardanoTxBodyHash: n.CardanoTxBodyHash,
                      CardanoSignTxFinished: n.CardanoSignTxFinished,
                      Success: n.Success,
                      Failure: n.Failure,
                      ButtonRequest: n.ButtonRequest,
                      ButtonAck: n.ButtonAck,
                      PinMatrixRequest: n.PinMatrixRequest,
                      PinMatrixAck: n.PinMatrixAck,
                      PassphraseRequest: n.PassphraseRequest,
                      PassphraseAck: n.PassphraseAck,
                      Deprecated_PassphraseStateRequest: n.Deprecated_PassphraseStateRequest,
                      Deprecated_PassphraseStateAck: n.Deprecated_PassphraseStateAck,
                      CipherKeyValue: n.CipherKeyValue,
                      CipheredKeyValue: n.CipheredKeyValue,
                      IdentityType: n.IdentityType,
                      SignIdentity: n.SignIdentity,
                      SignedIdentity: n.SignedIdentity,
                      GetECDHSessionKey: n.GetECDHSessionKey,
                      ECDHSessionKey: n.ECDHSessionKey,
                      DebugLinkResetDebugEvents: n.DebugLinkResetDebugEvents,
                      DebugLinkOptigaSetSecMax: n.DebugLinkOptigaSetSecMax,
                      EosGetPublicKey: n.EosGetPublicKey,
                      EosPublicKey: n.EosPublicKey,
                      EosTxHeader: n.EosTxHeader,
                      EosSignTx: n.EosSignTx,
                      EosTxActionRequest: n.EosTxActionRequest,
                      EosAsset: n.EosAsset,
                      EosPermissionLevel: n.EosPermissionLevel,
                      EosAuthorizationKey: n.EosAuthorizationKey,
                      EosAuthorizationAccount: n.EosAuthorizationAccount,
                      EosAuthorizationWait: n.EosAuthorizationWait,
                      EosAuthorization: n.EosAuthorization,
                      EosActionCommon: n.EosActionCommon,
                      EosActionTransfer: n.EosActionTransfer,
                      EosActionDelegate: n.EosActionDelegate,
                      EosActionUndelegate: n.EosActionUndelegate,
                      EosActionRefund: n.EosActionRefund,
                      EosActionBuyRam: n.EosActionBuyRam,
                      EosActionBuyRamBytes: n.EosActionBuyRamBytes,
                      EosActionSellRam: n.EosActionSellRam,
                      EosActionVoteProducer: n.EosActionVoteProducer,
                      EosActionUpdateAuth: n.EosActionUpdateAuth,
                      EosActionDeleteAuth: n.EosActionDeleteAuth,
                      EosActionLinkAuth: n.EosActionLinkAuth,
                      EosActionUnlinkAuth: n.EosActionUnlinkAuth,
                      EosActionNewAccount: n.EosActionNewAccount,
                      EosActionUnknown: n.EosActionUnknown,
                      EosTxActionAck: n.EosTxActionAck,
                      EosSignedTx: n.EosSignedTx,
                      EthereumNetworkInfo: n.EthereumNetworkInfo,
                      EthereumTokenInfo: n.EthereumTokenInfo,
                      EthereumDefinitions: n.EthereumDefinitions,
                      EthereumSignTypedData: n.EthereumSignTypedData,
                      EthereumTypedDataStructRequest: n.EthereumTypedDataStructRequest,
                      EthereumFieldType: n.EthereumFieldType,
                      EthereumStructMember: n.EthereumStructMember,
                      EthereumTypedDataStructAck: n.EthereumTypedDataStructAck,
                      EthereumTypedDataValueRequest: n.EthereumTypedDataValueRequest,
                      EthereumTypedDataValueAck: n.EthereumTypedDataValueAck,
                      EthereumGetPublicKey: n.EthereumGetPublicKey,
                      EthereumPublicKey: n.EthereumPublicKey,
                      EthereumGetAddress: n.EthereumGetAddress,
                      EthereumAddress: n.EthereumAddress,
                      EthereumSignTx: n.EthereumSignTx,
                      EthereumAccessList: n.EthereumAccessList,
                      EthereumSignTxEIP1559: n.EthereumSignTxEIP1559,
                      EthereumTxRequest: n.EthereumTxRequest,
                      EthereumTxAck: n.EthereumTxAck,
                      EthereumSignMessage: n.EthereumSignMessage,
                      EthereumMessageSignature: n.EthereumMessageSignature,
                      EthereumVerifyMessage: n.EthereumVerifyMessage,
                      EthereumSignTypedHash: n.EthereumSignTypedHash,
                      EthereumTypedDataSignature: n.EthereumTypedDataSignature,
                      Initialize: n.Initialize,
                      GetFeatures: n.GetFeatures,
                      RecoveryDevice: n.RecoveryDevice,
                      Features: n.Features,
                      LockDevice: n.LockDevice,
                      SetBusy: n.SetBusy,
                      EndSession: n.EndSession,
                      ApplySettings: n.ApplySettings,
                      ChangeLanguage: n.ChangeLanguage,
                      TranslationDataRequest: n.TranslationDataRequest,
                      TranslationDataAck: n.TranslationDataAck,
                      ApplyFlags: n.ApplyFlags,
                      ChangePin: n.ChangePin,
                      ChangeWipeCode: n.ChangeWipeCode,
                      SdProtect: n.SdProtect,
                      Ping: n.Ping,
                      Cancel: n.Cancel,
                      GetEntropy: n.GetEntropy,
                      Entropy: n.Entropy,
                      GetFirmwareHash: n.GetFirmwareHash,
                      FirmwareHash: n.FirmwareHash,
                      AuthenticateDevice: n.AuthenticateDevice,
                      AuthenticityProof: n.AuthenticityProof,
                      WipeDevice: n.WipeDevice,
                      LoadDevice: n.LoadDevice,
                      ResetDevice: n.ResetDevice,
                      Slip39Group: n.Slip39Group,
                      BackupDevice: n.BackupDevice,
                      EntropyRequest: n.EntropyRequest,
                      EntropyAck: n.EntropyAck,
                      WordRequest: n.WordRequest,
                      WordAck: n.WordAck,
                      SetU2FCounter: n.SetU2FCounter,
                      GetNextU2FCounter: n.GetNextU2FCounter,
                      NextU2FCounter: n.NextU2FCounter,
                      DoPreauthorized: n.DoPreauthorized,
                      PreauthorizedRequest: n.PreauthorizedRequest,
                      CancelAuthorization: n.CancelAuthorization,
                      RebootToBootloader: n.RebootToBootloader,
                      GetNonce: n.GetNonce,
                      Nonce: n.Nonce,
                      UnlockPath: n.UnlockPath,
                      UnlockedPathRequest: n.UnlockedPathRequest,
                      ShowDeviceTutorial: n.ShowDeviceTutorial,
                      UnlockBootloader: n.UnlockBootloader,
                      SetBrightness: n.SetBrightness,
                      NEMGetAddress: n.NEMGetAddress,
                      NEMAddress: n.NEMAddress,
                      NEMTransactionCommon: n.NEMTransactionCommon,
                      NEMMosaic: n.NEMMosaic,
                      NEMTransfer: n.NEMTransfer,
                      NEMProvisionNamespace: n.NEMProvisionNamespace,
                      NEMMosaicDefinition: n.NEMMosaicDefinition,
                      NEMMosaicCreation: n.NEMMosaicCreation,
                      NEMMosaicSupplyChange: n.NEMMosaicSupplyChange,
                      NEMCosignatoryModification: n.NEMCosignatoryModification,
                      NEMAggregateModification: n.NEMAggregateModification,
                      NEMImportanceTransfer: n.NEMImportanceTransfer,
                      NEMSignTx: n.NEMSignTx,
                      NEMSignedTx: n.NEMSignedTx,
                      NEMDecryptMessage: n.NEMDecryptMessage,
                      NEMDecryptedMessage: n.NEMDecryptedMessage,
                      RippleGetAddress: n.RippleGetAddress,
                      RippleAddress: n.RippleAddress,
                      RipplePayment: n.RipplePayment,
                      RippleSignTx: n.RippleSignTx,
                      RippleSignedTx: n.RippleSignedTx,
                      SolanaGetPublicKey: n.SolanaGetPublicKey,
                      SolanaPublicKey: n.SolanaPublicKey,
                      SolanaGetAddress: n.SolanaGetAddress,
                      SolanaAddress: n.SolanaAddress,
                      SolanaTxTokenAccountInfo: n.SolanaTxTokenAccountInfo,
                      SolanaTxAdditionalInfo: n.SolanaTxAdditionalInfo,
                      SolanaSignTx: n.SolanaSignTx,
                      SolanaTxSignature: n.SolanaTxSignature,
                      StellarAsset: n.StellarAsset,
                      StellarGetAddress: n.StellarGetAddress,
                      StellarAddress: n.StellarAddress,
                      StellarSignTx: n.StellarSignTx,
                      StellarTxOpRequest: n.StellarTxOpRequest,
                      StellarPaymentOp: n.StellarPaymentOp,
                      StellarCreateAccountOp: n.StellarCreateAccountOp,
                      StellarPathPaymentStrictReceiveOp: n.StellarPathPaymentStrictReceiveOp,
                      StellarPathPaymentStrictSendOp: n.StellarPathPaymentStrictSendOp,
                      StellarManageSellOfferOp: n.StellarManageSellOfferOp,
                      StellarManageBuyOfferOp: n.StellarManageBuyOfferOp,
                      StellarCreatePassiveSellOfferOp: n.StellarCreatePassiveSellOfferOp,
                      StellarSetOptionsOp: n.StellarSetOptionsOp,
                      StellarChangeTrustOp: n.StellarChangeTrustOp,
                      StellarAllowTrustOp: n.StellarAllowTrustOp,
                      StellarAccountMergeOp: n.StellarAccountMergeOp,
                      StellarManageDataOp: n.StellarManageDataOp,
                      StellarBumpSequenceOp: n.StellarBumpSequenceOp,
                      StellarClaimClaimableBalanceOp: n.StellarClaimClaimableBalanceOp,
                      StellarSignedTx: n.StellarSignedTx,
                      TezosGetAddress: n.TezosGetAddress,
                      TezosAddress: n.TezosAddress,
                      TezosGetPublicKey: n.TezosGetPublicKey,
                      TezosPublicKey: n.TezosPublicKey,
                      TezosContractID: n.TezosContractID,
                      TezosRevealOp: n.TezosRevealOp,
                      TezosManagerTransfer: n.TezosManagerTransfer,
                      TezosParametersManager: n.TezosParametersManager,
                      TezosTransactionOp: n.TezosTransactionOp,
                      TezosOriginationOp: n.TezosOriginationOp,
                      TezosDelegationOp: n.TezosDelegationOp,
                      TezosProposalOp: n.TezosProposalOp,
                      TezosBallotOp: n.TezosBallotOp,
                      TezosSignTx: n.TezosSignTx,
                      TezosSignedTx: n.TezosSignedTx,
                    },
                    { $id: 'MessageType' }
                  ));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/messages-schema.js',
      },
    ],
    [
      3378,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r,
                  i,
                  o,
                  s,
                  a,
                  c,
                  u,
                  p,
                  l,
                  d,
                  _,
                  T,
                  y,
                  E,
                  m,
                  g,
                  S,
                  h,
                  O,
                  f,
                  R,
                  A,
                  b,
                  N,
                  I,
                  C,
                  v,
                  P,
                  w,
                  D,
                  x,
                  M,
                  L,
                  j,
                  U,
                  B,
                  k,
                  F,
                  z,
                  G,
                  H,
                  V,
                  $,
                  W,
                  q,
                  K,
                  Y,
                  X,
                  J,
                  Q;
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TezosBallotType =
                    n.TezosContractType =
                    n.StellarSignerType =
                    n.StellarMemoType =
                    n.StellarAssetType =
                    n.NEMImportanceTransferMode =
                    n.NEMModificationType =
                    n.NEMSupplyChangeType =
                    n.NEMMosaicLevy =
                    n.BootCommand =
                    n.Enum_WordRequestType =
                    n.SdProtectOperationType =
                    n.Enum_RecoveryType =
                    n.RecoveryDeviceInputMethod =
                    n.Enum_Capability =
                    n.Enum_RecoveryStatus =
                    n.Enum_BackupAvailability =
                    n.Enum_HomescreenFormat =
                    n.Enum_DisplayRotation =
                    n.Enum_SafetyCheckLevel =
                    n.Enum_BackupType =
                    n.EthereumDataType =
                    n.EthereumDefinitionType =
                    n.DebugWaitType =
                    n.DebugPhysicalButton =
                    n.DebugButton =
                    n.Enum_PinMatrixRequestType =
                    n.Enum_ButtonRequestType =
                    n.FailureType =
                    n.CardanoTxWitnessType =
                    n.CardanoTxSigningMode =
                    n.CardanoCVoteRegistrationFormat =
                    n.CardanoTxAuxiliaryDataSupplementType =
                    n.CardanoPoolRelayType =
                    n.CardanoDRepType =
                    n.CardanoCertificateType =
                    n.CardanoTxOutputSerializationFormat =
                    n.CardanoNativeScriptHashDisplayFormat =
                    n.CardanoNativeScriptType =
                    n.CardanoAddressType =
                    n.CardanoDerivationType =
                    n.Enum_RequestType =
                    n.AmountUnit =
                    n.DecredStakingSpendType =
                    n.Enum_OutputScriptType =
                    n.Enum_InputScriptType =
                    n.BinanceTimeInForce =
                    n.BinanceOrderSide =
                    n.BinanceOrderType =
                    n.DeviceModelInternal =
                      void 0),
                  (function (e) {
                    (e.T1B1 = 'T1B1'),
                      (e.T2T1 = 'T2T1'),
                      (e.T2B1 = 'T2B1'),
                      (e.T3B1 = 'T3B1'),
                      (e.T3T1 = 'T3T1'),
                      (e.T3W1 = 'T3W1');
                  })(r || (n.DeviceModelInternal = r = {})),
                  (function (e) {
                    (e[(e.OT_UNKNOWN = 0)] = 'OT_UNKNOWN'),
                      (e[(e.MARKET = 1)] = 'MARKET'),
                      (e[(e.LIMIT = 2)] = 'LIMIT'),
                      (e[(e.OT_RESERVED = 3)] = 'OT_RESERVED');
                  })(i || (n.BinanceOrderType = i = {})),
                  (function (e) {
                    (e[(e.SIDE_UNKNOWN = 0)] = 'SIDE_UNKNOWN'),
                      (e[(e.BUY = 1)] = 'BUY'),
                      (e[(e.SELL = 2)] = 'SELL');
                  })(o || (n.BinanceOrderSide = o = {})),
                  (function (e) {
                    (e[(e.TIF_UNKNOWN = 0)] = 'TIF_UNKNOWN'),
                      (e[(e.GTE = 1)] = 'GTE'),
                      (e[(e.TIF_RESERVED = 2)] = 'TIF_RESERVED'),
                      (e[(e.IOC = 3)] = 'IOC');
                  })(s || (n.BinanceTimeInForce = s = {})),
                  (function (e) {
                    (e[(e.SPENDADDRESS = 0)] = 'SPENDADDRESS'),
                      (e[(e.SPENDMULTISIG = 1)] = 'SPENDMULTISIG'),
                      (e[(e.EXTERNAL = 2)] = 'EXTERNAL'),
                      (e[(e.SPENDWITNESS = 3)] = 'SPENDWITNESS'),
                      (e[(e.SPENDP2SHWITNESS = 4)] = 'SPENDP2SHWITNESS'),
                      (e[(e.SPENDTAPROOT = 5)] = 'SPENDTAPROOT');
                  })(a || (n.Enum_InputScriptType = a = {})),
                  (function (e) {
                    (e[(e.PAYTOADDRESS = 0)] = 'PAYTOADDRESS'),
                      (e[(e.PAYTOSCRIPTHASH = 1)] = 'PAYTOSCRIPTHASH'),
                      (e[(e.PAYTOMULTISIG = 2)] = 'PAYTOMULTISIG'),
                      (e[(e.PAYTOOPRETURN = 3)] = 'PAYTOOPRETURN'),
                      (e[(e.PAYTOWITNESS = 4)] = 'PAYTOWITNESS'),
                      (e[(e.PAYTOP2SHWITNESS = 5)] = 'PAYTOP2SHWITNESS'),
                      (e[(e.PAYTOTAPROOT = 6)] = 'PAYTOTAPROOT');
                  })(c || (n.Enum_OutputScriptType = c = {})),
                  (function (e) {
                    (e[(e.SSGen = 0)] = 'SSGen'), (e[(e.SSRTX = 1)] = 'SSRTX');
                  })(u || (n.DecredStakingSpendType = u = {})),
                  (function (e) {
                    (e[(e.BITCOIN = 0)] = 'BITCOIN'),
                      (e[(e.MILLIBITCOIN = 1)] = 'MILLIBITCOIN'),
                      (e[(e.MICROBITCOIN = 2)] = 'MICROBITCOIN'),
                      (e[(e.SATOSHI = 3)] = 'SATOSHI');
                  })(p || (n.AmountUnit = p = {})),
                  (function (e) {
                    (e[(e.TXINPUT = 0)] = 'TXINPUT'),
                      (e[(e.TXOUTPUT = 1)] = 'TXOUTPUT'),
                      (e[(e.TXMETA = 2)] = 'TXMETA'),
                      (e[(e.TXFINISHED = 3)] = 'TXFINISHED'),
                      (e[(e.TXEXTRADATA = 4)] = 'TXEXTRADATA'),
                      (e[(e.TXORIGINPUT = 5)] = 'TXORIGINPUT'),
                      (e[(e.TXORIGOUTPUT = 6)] = 'TXORIGOUTPUT'),
                      (e[(e.TXPAYMENTREQ = 7)] = 'TXPAYMENTREQ');
                  })(l || (n.Enum_RequestType = l = {})),
                  (function (e) {
                    (e[(e.LEDGER = 0)] = 'LEDGER'),
                      (e[(e.ICARUS = 1)] = 'ICARUS'),
                      (e[(e.ICARUS_TREZOR = 2)] = 'ICARUS_TREZOR');
                  })(d || (n.CardanoDerivationType = d = {})),
                  (function (e) {
                    (e[(e.BASE = 0)] = 'BASE'),
                      (e[(e.BASE_SCRIPT_KEY = 1)] = 'BASE_SCRIPT_KEY'),
                      (e[(e.BASE_KEY_SCRIPT = 2)] = 'BASE_KEY_SCRIPT'),
                      (e[(e.BASE_SCRIPT_SCRIPT = 3)] = 'BASE_SCRIPT_SCRIPT'),
                      (e[(e.POINTER = 4)] = 'POINTER'),
                      (e[(e.POINTER_SCRIPT = 5)] = 'POINTER_SCRIPT'),
                      (e[(e.ENTERPRISE = 6)] = 'ENTERPRISE'),
                      (e[(e.ENTERPRISE_SCRIPT = 7)] = 'ENTERPRISE_SCRIPT'),
                      (e[(e.BYRON = 8)] = 'BYRON'),
                      (e[(e.REWARD = 14)] = 'REWARD'),
                      (e[(e.REWARD_SCRIPT = 15)] = 'REWARD_SCRIPT');
                  })(_ || (n.CardanoAddressType = _ = {})),
                  (function (e) {
                    (e[(e.PUB_KEY = 0)] = 'PUB_KEY'),
                      (e[(e.ALL = 1)] = 'ALL'),
                      (e[(e.ANY = 2)] = 'ANY'),
                      (e[(e.N_OF_K = 3)] = 'N_OF_K'),
                      (e[(e.INVALID_BEFORE = 4)] = 'INVALID_BEFORE'),
                      (e[(e.INVALID_HEREAFTER = 5)] = 'INVALID_HEREAFTER');
                  })(T || (n.CardanoNativeScriptType = T = {})),
                  (function (e) {
                    (e[(e.HIDE = 0)] = 'HIDE'),
                      (e[(e.BECH32 = 1)] = 'BECH32'),
                      (e[(e.POLICY_ID = 2)] = 'POLICY_ID');
                  })(y || (n.CardanoNativeScriptHashDisplayFormat = y = {})),
                  (function (e) {
                    (e[(e.ARRAY_LEGACY = 0)] = 'ARRAY_LEGACY'),
                      (e[(e.MAP_BABBAGE = 1)] = 'MAP_BABBAGE');
                  })(E || (n.CardanoTxOutputSerializationFormat = E = {})),
                  (function (e) {
                    (e[(e.STAKE_REGISTRATION = 0)] = 'STAKE_REGISTRATION'),
                      (e[(e.STAKE_DEREGISTRATION = 1)] = 'STAKE_DEREGISTRATION'),
                      (e[(e.STAKE_DELEGATION = 2)] = 'STAKE_DELEGATION'),
                      (e[(e.STAKE_POOL_REGISTRATION = 3)] = 'STAKE_POOL_REGISTRATION'),
                      (e[(e.STAKE_REGISTRATION_CONWAY = 7)] = 'STAKE_REGISTRATION_CONWAY'),
                      (e[(e.STAKE_DEREGISTRATION_CONWAY = 8)] = 'STAKE_DEREGISTRATION_CONWAY'),
                      (e[(e.VOTE_DELEGATION = 9)] = 'VOTE_DELEGATION');
                  })(m || (n.CardanoCertificateType = m = {})),
                  (function (e) {
                    (e[(e.KEY_HASH = 0)] = 'KEY_HASH'),
                      (e[(e.SCRIPT_HASH = 1)] = 'SCRIPT_HASH'),
                      (e[(e.ABSTAIN = 2)] = 'ABSTAIN'),
                      (e[(e.NO_CONFIDENCE = 3)] = 'NO_CONFIDENCE');
                  })(g || (n.CardanoDRepType = g = {})),
                  (function (e) {
                    (e[(e.SINGLE_HOST_IP = 0)] = 'SINGLE_HOST_IP'),
                      (e[(e.SINGLE_HOST_NAME = 1)] = 'SINGLE_HOST_NAME'),
                      (e[(e.MULTIPLE_HOST_NAME = 2)] = 'MULTIPLE_HOST_NAME');
                  })(S || (n.CardanoPoolRelayType = S = {})),
                  (function (e) {
                    (e[(e.NONE = 0)] = 'NONE'),
                      (e[(e.CVOTE_REGISTRATION_SIGNATURE = 1)] = 'CVOTE_REGISTRATION_SIGNATURE');
                  })(h || (n.CardanoTxAuxiliaryDataSupplementType = h = {})),
                  (function (e) {
                    (e[(e.CIP15 = 0)] = 'CIP15'), (e[(e.CIP36 = 1)] = 'CIP36');
                  })(O || (n.CardanoCVoteRegistrationFormat = O = {})),
                  (function (e) {
                    (e[(e.ORDINARY_TRANSACTION = 0)] = 'ORDINARY_TRANSACTION'),
                      (e[(e.POOL_REGISTRATION_AS_OWNER = 1)] = 'POOL_REGISTRATION_AS_OWNER'),
                      (e[(e.MULTISIG_TRANSACTION = 2)] = 'MULTISIG_TRANSACTION'),
                      (e[(e.PLUTUS_TRANSACTION = 3)] = 'PLUTUS_TRANSACTION');
                  })(f || (n.CardanoTxSigningMode = f = {})),
                  (function (e) {
                    (e[(e.BYRON_WITNESS = 0)] = 'BYRON_WITNESS'),
                      (e[(e.SHELLEY_WITNESS = 1)] = 'SHELLEY_WITNESS');
                  })(R || (n.CardanoTxWitnessType = R = {})),
                  (function (e) {
                    (e[(e.Failure_UnexpectedMessage = 1)] = 'Failure_UnexpectedMessage'),
                      (e[(e.Failure_ButtonExpected = 2)] = 'Failure_ButtonExpected'),
                      (e[(e.Failure_DataError = 3)] = 'Failure_DataError'),
                      (e[(e.Failure_ActionCancelled = 4)] = 'Failure_ActionCancelled'),
                      (e[(e.Failure_PinExpected = 5)] = 'Failure_PinExpected'),
                      (e[(e.Failure_PinCancelled = 6)] = 'Failure_PinCancelled'),
                      (e[(e.Failure_PinInvalid = 7)] = 'Failure_PinInvalid'),
                      (e[(e.Failure_InvalidSignature = 8)] = 'Failure_InvalidSignature'),
                      (e[(e.Failure_ProcessError = 9)] = 'Failure_ProcessError'),
                      (e[(e.Failure_NotEnoughFunds = 10)] = 'Failure_NotEnoughFunds'),
                      (e[(e.Failure_NotInitialized = 11)] = 'Failure_NotInitialized'),
                      (e[(e.Failure_PinMismatch = 12)] = 'Failure_PinMismatch'),
                      (e[(e.Failure_WipeCodeMismatch = 13)] = 'Failure_WipeCodeMismatch'),
                      (e[(e.Failure_InvalidSession = 14)] = 'Failure_InvalidSession'),
                      (e[(e.Failure_FirmwareError = 99)] = 'Failure_FirmwareError');
                  })(A || (n.FailureType = A = {})),
                  (function (e) {
                    (e[(e.ButtonRequest_Other = 1)] = 'ButtonRequest_Other'),
                      (e[(e.ButtonRequest_FeeOverThreshold = 2)] =
                        'ButtonRequest_FeeOverThreshold'),
                      (e[(e.ButtonRequest_ConfirmOutput = 3)] = 'ButtonRequest_ConfirmOutput'),
                      (e[(e.ButtonRequest_ResetDevice = 4)] = 'ButtonRequest_ResetDevice'),
                      (e[(e.ButtonRequest_ConfirmWord = 5)] = 'ButtonRequest_ConfirmWord'),
                      (e[(e.ButtonRequest_WipeDevice = 6)] = 'ButtonRequest_WipeDevice'),
                      (e[(e.ButtonRequest_ProtectCall = 7)] = 'ButtonRequest_ProtectCall'),
                      (e[(e.ButtonRequest_SignTx = 8)] = 'ButtonRequest_SignTx'),
                      (e[(e.ButtonRequest_FirmwareCheck = 9)] = 'ButtonRequest_FirmwareCheck'),
                      (e[(e.ButtonRequest_Address = 10)] = 'ButtonRequest_Address'),
                      (e[(e.ButtonRequest_PublicKey = 11)] = 'ButtonRequest_PublicKey'),
                      (e[(e.ButtonRequest_MnemonicWordCount = 12)] =
                        'ButtonRequest_MnemonicWordCount'),
                      (e[(e.ButtonRequest_MnemonicInput = 13)] = 'ButtonRequest_MnemonicInput'),
                      (e[(e._Deprecated_ButtonRequest_PassphraseType = 14)] =
                        '_Deprecated_ButtonRequest_PassphraseType'),
                      (e[(e.ButtonRequest_UnknownDerivationPath = 15)] =
                        'ButtonRequest_UnknownDerivationPath'),
                      (e[(e.ButtonRequest_RecoveryHomepage = 16)] =
                        'ButtonRequest_RecoveryHomepage'),
                      (e[(e.ButtonRequest_Success = 17)] = 'ButtonRequest_Success'),
                      (e[(e.ButtonRequest_Warning = 18)] = 'ButtonRequest_Warning'),
                      (e[(e.ButtonRequest_PassphraseEntry = 19)] = 'ButtonRequest_PassphraseEntry'),
                      (e[(e.ButtonRequest_PinEntry = 20)] = 'ButtonRequest_PinEntry');
                  })(b || (n.Enum_ButtonRequestType = b = {})),
                  (function (e) {
                    (e[(e.PinMatrixRequestType_Current = 1)] = 'PinMatrixRequestType_Current'),
                      (e[(e.PinMatrixRequestType_NewFirst = 2)] = 'PinMatrixRequestType_NewFirst'),
                      (e[(e.PinMatrixRequestType_NewSecond = 3)] =
                        'PinMatrixRequestType_NewSecond'),
                      (e[(e.PinMatrixRequestType_WipeCodeFirst = 4)] =
                        'PinMatrixRequestType_WipeCodeFirst'),
                      (e[(e.PinMatrixRequestType_WipeCodeSecond = 5)] =
                        'PinMatrixRequestType_WipeCodeSecond');
                  })(N || (n.Enum_PinMatrixRequestType = N = {})),
                  (function (e) {
                    (e[(e.NO = 0)] = 'NO'), (e[(e.YES = 1)] = 'YES'), (e[(e.INFO = 2)] = 'INFO');
                  })(I || (n.DebugButton = I = {})),
                  (function (e) {
                    (e[(e.LEFT_BTN = 0)] = 'LEFT_BTN'),
                      (e[(e.MIDDLE_BTN = 1)] = 'MIDDLE_BTN'),
                      (e[(e.RIGHT_BTN = 2)] = 'RIGHT_BTN');
                  })(C || (n.DebugPhysicalButton = C = {})),
                  (function (e) {
                    (e[(e.IMMEDIATE = 0)] = 'IMMEDIATE'),
                      (e[(e.NEXT_LAYOUT = 1)] = 'NEXT_LAYOUT'),
                      (e[(e.CURRENT_LAYOUT = 2)] = 'CURRENT_LAYOUT');
                  })(v || (n.DebugWaitType = v = {})),
                  (function (e) {
                    (e[(e.NETWORK = 0)] = 'NETWORK'), (e[(e.TOKEN = 1)] = 'TOKEN');
                  })(P || (n.EthereumDefinitionType = P = {})),
                  (function (e) {
                    (e[(e.UINT = 1)] = 'UINT'),
                      (e[(e.INT = 2)] = 'INT'),
                      (e[(e.BYTES = 3)] = 'BYTES'),
                      (e[(e.STRING = 4)] = 'STRING'),
                      (e[(e.BOOL = 5)] = 'BOOL'),
                      (e[(e.ADDRESS = 6)] = 'ADDRESS'),
                      (e[(e.ARRAY = 7)] = 'ARRAY'),
                      (e[(e.STRUCT = 8)] = 'STRUCT');
                  })(w || (n.EthereumDataType = w = {})),
                  (function (e) {
                    (e[(e.Bip39 = 0)] = 'Bip39'),
                      (e[(e.Slip39_Basic = 1)] = 'Slip39_Basic'),
                      (e[(e.Slip39_Advanced = 2)] = 'Slip39_Advanced'),
                      (e[(e.Slip39_Single_Extendable = 3)] = 'Slip39_Single_Extendable'),
                      (e[(e.Slip39_Basic_Extendable = 4)] = 'Slip39_Basic_Extendable'),
                      (e[(e.Slip39_Advanced_Extendable = 5)] = 'Slip39_Advanced_Extendable');
                  })(D || (n.Enum_BackupType = D = {})),
                  (function (e) {
                    (e[(e.Strict = 0)] = 'Strict'),
                      (e[(e.PromptAlways = 1)] = 'PromptAlways'),
                      (e[(e.PromptTemporarily = 2)] = 'PromptTemporarily');
                  })(x || (n.Enum_SafetyCheckLevel = x = {})),
                  (function (e) {
                    (e[(e.North = 0)] = 'North'),
                      (e[(e.East = 90)] = 'East'),
                      (e[(e.South = 180)] = 'South'),
                      (e[(e.West = 270)] = 'West');
                  })(M || (n.Enum_DisplayRotation = M = {})),
                  (function (e) {
                    (e[(e.Toif = 1)] = 'Toif'),
                      (e[(e.Jpeg = 2)] = 'Jpeg'),
                      (e[(e.ToiG = 3)] = 'ToiG');
                  })(L || (n.Enum_HomescreenFormat = L = {})),
                  (function (e) {
                    (e[(e.NotAvailable = 0)] = 'NotAvailable'),
                      (e[(e.Required = 1)] = 'Required'),
                      (e[(e.Available = 2)] = 'Available');
                  })(j || (n.Enum_BackupAvailability = j = {})),
                  (function (e) {
                    (e[(e.Nothing = 0)] = 'Nothing'),
                      (e[(e.Recovery = 1)] = 'Recovery'),
                      (e[(e.Backup = 2)] = 'Backup');
                  })(U || (n.Enum_RecoveryStatus = U = {})),
                  (function (e) {
                    (e[(e.Capability_Bitcoin = 1)] = 'Capability_Bitcoin'),
                      (e[(e.Capability_Bitcoin_like = 2)] = 'Capability_Bitcoin_like'),
                      (e[(e.Capability_Binance = 3)] = 'Capability_Binance'),
                      (e[(e.Capability_Cardano = 4)] = 'Capability_Cardano'),
                      (e[(e.Capability_Crypto = 5)] = 'Capability_Crypto'),
                      (e[(e.Capability_EOS = 6)] = 'Capability_EOS'),
                      (e[(e.Capability_Ethereum = 7)] = 'Capability_Ethereum'),
                      (e[(e.Capability_Lisk = 8)] = 'Capability_Lisk'),
                      (e[(e.Capability_Monero = 9)] = 'Capability_Monero'),
                      (e[(e.Capability_NEM = 10)] = 'Capability_NEM'),
                      (e[(e.Capability_Ripple = 11)] = 'Capability_Ripple'),
                      (e[(e.Capability_Stellar = 12)] = 'Capability_Stellar'),
                      (e[(e.Capability_Tezos = 13)] = 'Capability_Tezos'),
                      (e[(e.Capability_U2F = 14)] = 'Capability_U2F'),
                      (e[(e.Capability_Shamir = 15)] = 'Capability_Shamir'),
                      (e[(e.Capability_ShamirGroups = 16)] = 'Capability_ShamirGroups'),
                      (e[(e.Capability_PassphraseEntry = 17)] = 'Capability_PassphraseEntry'),
                      (e[(e.Capability_Solana = 18)] = 'Capability_Solana'),
                      (e[(e.Capability_Translations = 19)] = 'Capability_Translations'),
                      (e[(e.Capability_Brightness = 20)] = 'Capability_Brightness'),
                      (e[(e.Capability_Haptic = 21)] = 'Capability_Haptic');
                  })(B || (n.Enum_Capability = B = {})),
                  (function (e) {
                    (e[(e.ScrambledWords = 0)] = 'ScrambledWords'), (e[(e.Matrix = 1)] = 'Matrix');
                  })(k || (n.RecoveryDeviceInputMethod = k = {})),
                  (function (e) {
                    (e[(e.NormalRecovery = 0)] = 'NormalRecovery'),
                      (e[(e.DryRun = 1)] = 'DryRun'),
                      (e[(e.UnlockRepeatedBackup = 2)] = 'UnlockRepeatedBackup');
                  })(F || (n.Enum_RecoveryType = F = {})),
                  (function (e) {
                    (e[(e.DISABLE = 0)] = 'DISABLE'),
                      (e[(e.ENABLE = 1)] = 'ENABLE'),
                      (e[(e.REFRESH = 2)] = 'REFRESH');
                  })(z || (n.SdProtectOperationType = z = {})),
                  (function (e) {
                    (e[(e.WordRequestType_Plain = 0)] = 'WordRequestType_Plain'),
                      (e[(e.WordRequestType_Matrix9 = 1)] = 'WordRequestType_Matrix9'),
                      (e[(e.WordRequestType_Matrix6 = 2)] = 'WordRequestType_Matrix6');
                  })(G || (n.Enum_WordRequestType = G = {})),
                  (function (e) {
                    (e[(e.STOP_AND_WAIT = 0)] = 'STOP_AND_WAIT'),
                      (e[(e.INSTALL_UPGRADE = 1)] = 'INSTALL_UPGRADE');
                  })(H || (n.BootCommand = H = {})),
                  (function (e) {
                    (e[(e.MosaicLevy_Absolute = 1)] = 'MosaicLevy_Absolute'),
                      (e[(e.MosaicLevy_Percentile = 2)] = 'MosaicLevy_Percentile');
                  })(V || (n.NEMMosaicLevy = V = {})),
                  (function (e) {
                    (e[(e.SupplyChange_Increase = 1)] = 'SupplyChange_Increase'),
                      (e[(e.SupplyChange_Decrease = 2)] = 'SupplyChange_Decrease');
                  })($ || (n.NEMSupplyChangeType = $ = {})),
                  (function (e) {
                    (e[(e.CosignatoryModification_Add = 1)] = 'CosignatoryModification_Add'),
                      (e[(e.CosignatoryModification_Delete = 2)] =
                        'CosignatoryModification_Delete');
                  })(W || (n.NEMModificationType = W = {})),
                  (function (e) {
                    (e[(e.ImportanceTransfer_Activate = 1)] = 'ImportanceTransfer_Activate'),
                      (e[(e.ImportanceTransfer_Deactivate = 2)] = 'ImportanceTransfer_Deactivate');
                  })(q || (n.NEMImportanceTransferMode = q = {})),
                  (function (e) {
                    (e[(e.NATIVE = 0)] = 'NATIVE'),
                      (e[(e.ALPHANUM4 = 1)] = 'ALPHANUM4'),
                      (e[(e.ALPHANUM12 = 2)] = 'ALPHANUM12');
                  })(K || (n.StellarAssetType = K = {})),
                  (function (e) {
                    (e[(e.NONE = 0)] = 'NONE'),
                      (e[(e.TEXT = 1)] = 'TEXT'),
                      (e[(e.ID = 2)] = 'ID'),
                      (e[(e.HASH = 3)] = 'HASH'),
                      (e[(e.RETURN = 4)] = 'RETURN');
                  })(Y || (n.StellarMemoType = Y = {})),
                  (function (e) {
                    (e[(e.ACCOUNT = 0)] = 'ACCOUNT'),
                      (e[(e.PRE_AUTH = 1)] = 'PRE_AUTH'),
                      (e[(e.HASH = 2)] = 'HASH');
                  })(X || (n.StellarSignerType = X = {})),
                  (function (e) {
                    (e[(e.Implicit = 0)] = 'Implicit'), (e[(e.Originated = 1)] = 'Originated');
                  })(J || (n.TezosContractType = J = {})),
                  (function (e) {
                    (e[(e.Yay = 0)] = 'Yay'), (e[(e.Nay = 1)] = 'Nay'), (e[(e.Pass = 2)] = 'Pass');
                  })(Q || (n.TezosBallotType = Q = {}));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/messages.js',
      },
    ],
    [
      3379,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/types.js',
      },
    ],
    [
      3380,
      { 'protobufjs/light': 5104, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.createMessageFromType = n.createMessageFromName = n.isPrimitiveField = void 0),
                  (n.parseConfigure = function (e) {
                    if ('string' == typeof e) return r.Root.fromJSON(JSON.parse(e));
                    return r.Root.fromJSON(e);
                  });
                const r = e('tslib').__importStar(e('protobufjs/light')),
                  i = [
                    'bool',
                    'string',
                    'bytes',
                    'int32',
                    'int64',
                    'uint32',
                    'uint64',
                    'sint32',
                    'sint64',
                    'fixed32',
                    'fixed64',
                    'sfixed32',
                    'sfixed64',
                    'double',
                    'float',
                  ];
                n.isPrimitiveField = e => i.includes(e);
                n.createMessageFromName = (e, t) => {
                  const n = e.lookupType(t);
                  let r = e.lookupEnum('MessageType').values[t];
                  return (
                    'number' != typeof r && n.options && (r = n.options['(wire_type)']),
                    { Message: n, messageType: null != r ? r : t }
                  );
                };
                n.createMessageFromType = (e, t) => {
                  if ('string' == typeof t) {
                    return { Message: e.lookupType(t), messageName: t };
                  }
                  const n = e.lookupEnum('MessageType').valuesById[t];
                  return { Message: e.lookupType(n), messageName: n };
                };
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/protobuf',
        file: 'node_modules/@trezor/protobuf/lib/utils.js',
      },
    ],
    [
      3381,
      { '@sinclair/typebox': 3392 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.ArrayBufferBuilder = void 0);
                const r = e('@sinclair/typebox');
                r.TypeRegistry.Set('ArrayBuffer', (e, t) => t instanceof ArrayBuffer);
                class i extends r.JavaScriptTypeBuilder {
                  ArrayBuffer(e) {
                    return (0, r.CreateType)({ [r.Kind]: 'ArrayBuffer', type: 'ArrayBuffer' }, e);
                  }
                }
                n.ArrayBufferBuilder = i;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/custom-types/array-buffer.js',
      },
    ],
    [
      3382,
      { '@sinclair/typebox': 3392, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                (function (t) {
                  (function () {
                    Object.defineProperty(n, '__esModule', { value: !0 }),
                      (n.BufferBuilder = void 0);
                    const r = e('@sinclair/typebox');
                    r.TypeRegistry.Set('Buffer', (e, n) => n instanceof t);
                    class i extends r.JavaScriptTypeBuilder {
                      Buffer(e) {
                        return (0, r.CreateType)({ [r.Kind]: 'Buffer', type: 'Buffer' }, e);
                      }
                    }
                    n.BufferBuilder = i;
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/custom-types/buffer.js',
      },
    ],
    [
      3383,
      { './array-buffer': 3381, './buffer': 3382, './keyof-enum': 3384, './uint': 3385 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.UintBuilder =
                    n.KeyofEnumBuilder =
                    n.BufferBuilder =
                    n.ArrayBufferBuilder =
                      void 0);
                var r = e('./array-buffer');
                Object.defineProperty(n, 'ArrayBufferBuilder', {
                  enumerable: !0,
                  get: function () {
                    return r.ArrayBufferBuilder;
                  },
                });
                var i = e('./buffer');
                Object.defineProperty(n, 'BufferBuilder', {
                  enumerable: !0,
                  get: function () {
                    return i.BufferBuilder;
                  },
                });
                var o = e('./keyof-enum');
                Object.defineProperty(n, 'KeyofEnumBuilder', {
                  enumerable: !0,
                  get: function () {
                    return o.KeyofEnumBuilder;
                  },
                });
                var s = e('./uint');
                Object.defineProperty(n, 'UintBuilder', {
                  enumerable: !0,
                  get: function () {
                    return s.UintBuilder;
                  },
                });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/custom-types/index.js',
      },
    ],
    [
      3384,
      { '@sinclair/typebox': 3392 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.KeyofEnumBuilder = void 0);
                const r = e('@sinclair/typebox');
                class i extends r.JavaScriptTypeBuilder {
                  KeyOfEnum(e, t) {
                    const n = Object.keys(e).map(e => this.Literal(e));
                    return this.Union(
                      n,
                      Object.assign(Object.assign({}, t), { [r.Hint]: 'KeyOfEnum' })
                    );
                  }
                  Enum(e, t) {
                    const n = Object.entries(e)
                      .filter(([e, t]) => 'string' == typeof e || !isNaN(e))
                      .map(([e, t]) => this.Literal(t, { $id: e }));
                    return this.Union(n, Object.assign(Object.assign({}, t), { [r.Hint]: 'Enum' }));
                  }
                }
                n.KeyofEnumBuilder = i;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/custom-types/keyof-enum.js',
      },
    ],
    [
      3385,
      { '@sinclair/typebox': 3392 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }), (n.UintBuilder = void 0);
                const r = e('@sinclair/typebox');
                r.TypeRegistry.Set(
                  'Uint',
                  (e, t) =>
                    ('string' == typeof t || 'number' == typeof t) &&
                    !(
                      ('number' == typeof t && !Number.isSafeInteger(t)) ||
                      !/^(?:[1-9]\d*|\d)$/.test(
                        t.toString().replace(/^-/, e.allowNegative ? '' : '-')
                      )
                    )
                );
                class i extends r.JavaScriptTypeBuilder {
                  Uint(e) {
                    return (0, r.CreateType)({ [r.Kind]: 'Uint', type: 'Uint' }, e);
                  }
                }
                n.UintBuilder = i;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/custom-types/uint.js',
      },
    ],
    [
      3386,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.InvalidParameter = void 0);
                class r extends Error {
                  constructor(e, t, n, r) {
                    let i = 'Invalid parameter';
                    (i += ` "${t.substring(1)}"`),
                      (i += ` (= ${JSON.stringify(r)})`),
                      (i += `: ${e.replace(/'/g, '"')}`),
                      super(i),
                      (this.name = 'InvalidParameter'),
                      (this.field = t),
                      (this.type = n);
                  }
                }
                n.InvalidParameter = r;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/errors.js',
      },
    ],
    [
      3387,
      {
        './custom-types': 3383,
        './errors': 3386,
        './utils': 3388,
        '@sinclair/typebox': 3392,
        '@sinclair/typebox/errors': 3391,
        'ts-mixer': 5679,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.CloneType = n.Optional = n.Type = void 0),
                  (n.Validate = p),
                  (n.Assert = d),
                  (n.AssertWeak = function (e, t) {
                    try {
                      d(e, t);
                    } catch (e) {
                      if (!(e instanceof a.InvalidParameter)) throw e;
                      if (e.type === i.ValueErrorType.ObjectRequiredProperty) throw e;
                      console.warn('Method params validation failed', e);
                    }
                  });
                const r = e('@sinclair/typebox');
                Object.defineProperty(n, 'Optional', {
                  enumerable: !0,
                  get: function () {
                    return r.Optional;
                  },
                }),
                  Object.defineProperty(n, 'CloneType', {
                    enumerable: !0,
                    get: function () {
                      return r.CloneType;
                    },
                  });
                const i = e('@sinclair/typebox/errors'),
                  o = e('ts-mixer'),
                  s = e('./custom-types'),
                  a = e('./errors'),
                  c = e('./utils');
                class u extends (0, o.Mixin)(
                  r.JavaScriptTypeBuilder,
                  s.ArrayBufferBuilder,
                  s.BufferBuilder,
                  s.KeyofEnumBuilder,
                  s.UintBuilder
                ) {}
                function p(e, t) {
                  try {
                    return d(e, t), !0;
                  } catch (e) {
                    return !1;
                  }
                }
                function l(e) {
                  const t = e.value,
                    n = e.schema.anyOf;
                  if (!n.find(e => p(e, t))) {
                    const o = n.filter(
                      e =>
                        'Object' === e[r.Kind] &&
                        !Object.entries(e.properties).find(([e, n]) => n.const && n.const !== t[e])
                    );
                    if (1 === o.length) d(o[0], t);
                    else if (o.length > 1) {
                      const e = o
                          .map(e => ({ schema: e, errors: [...(0, i.Errors)(e, t)] }))
                          .sort((e, t) => e.errors.length - t.errors.length),
                        [n] = e;
                      d(n.schema, t);
                    }
                    throw new a.InvalidParameter(e.message, e.path, e.type, e.value);
                  }
                }
                function d(e, t) {
                  const n = [...(0, i.Errors)(e, t)];
                  let [o] = n;
                  for (; o; ) {
                    if ('/' === o.path && n.length > 1);
                    else if (null == o.value && 'Optional' === o.schema[r.OptionalKind]);
                    else if (o.type === i.ValueErrorType.Union) l(o);
                    else {
                      if (o.type !== i.ValueErrorType.Number || 'string' != typeof o.value)
                        throw new a.InvalidParameter(o.message, o.path, o.type, o.value);
                      {
                        const e = o.value,
                          n = Number(e);
                        if (Number.isNaN(n) || e !== n.toString())
                          throw new a.InvalidParameter(o.message, o.path, o.type, o.value);
                        {
                          const e = o.path.slice(1).split('/');
                          (0, c.setDeepValue)(t, e, n);
                        }
                      }
                    }
                    n.shift(), ([o] = n);
                  }
                }
                n.Type = new u();
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/index.js',
      },
    ],
    [
      3388,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.setDeepValue = function e(t, [n, ...r], i) {
                    r.length ? (n in t || (t[n] = {}), e(t[n], r, i)) : (t[n] = i);
                  }),
                  (n.getDeepValue = function e(t, [n, ...r]) {
                    return r.length ? (n in t ? e(t[n], r) : undefined) : t[n];
                  });
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils',
        file: 'node_modules/@trezor/schema-utils/lib/utils.js',
      },
    ],
    [
      3389,
      {
        '../system/index': 3393,
        '../type/error/index': 3431,
        '../type/extends/extends-undefined': 3439,
        '../type/keyof/index': 3477,
        '../type/never/index': 3488,
        '../type/registry/index': 3532,
        '../type/symbols/index': 3554,
        '../value/check/index': 3588,
        '../value/deref/index': 3590,
        '../value/guard/index': 3592,
        '../value/hash/index': 3594,
        './function': 3390,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.ValueErrorIterator =
                    n.ValueErrorsUnknownTypeError =
                    n.ValueErrorType =
                      void 0),
                  (n.Errors = function (...e) {
                    const t = 3 === e.length ? O(e[0], e[1], '', e[2]) : O(e[0], [], '', e[1]);
                    return new S(t);
                  });
                const r = e('../system/index'),
                  i = e('../type/keyof/index'),
                  o = e('../type/registry/index'),
                  s = e('../type/extends/extends-undefined'),
                  a = e('./function'),
                  c = e('../type/error/index'),
                  u = e('../value/deref/index'),
                  p = e('../value/hash/index'),
                  l = e('../value/check/index'),
                  d = e('../type/symbols/index'),
                  _ = e('../type/never/index'),
                  T = e('../value/guard/index');
                var y;
                !(function (e) {
                  (e[(e.ArrayContains = 0)] = 'ArrayContains'),
                    (e[(e.ArrayMaxContains = 1)] = 'ArrayMaxContains'),
                    (e[(e.ArrayMaxItems = 2)] = 'ArrayMaxItems'),
                    (e[(e.ArrayMinContains = 3)] = 'ArrayMinContains'),
                    (e[(e.ArrayMinItems = 4)] = 'ArrayMinItems'),
                    (e[(e.ArrayUniqueItems = 5)] = 'ArrayUniqueItems'),
                    (e[(e.Array = 6)] = 'Array'),
                    (e[(e.AsyncIterator = 7)] = 'AsyncIterator'),
                    (e[(e.BigIntExclusiveMaximum = 8)] = 'BigIntExclusiveMaximum'),
                    (e[(e.BigIntExclusiveMinimum = 9)] = 'BigIntExclusiveMinimum'),
                    (e[(e.BigIntMaximum = 10)] = 'BigIntMaximum'),
                    (e[(e.BigIntMinimum = 11)] = 'BigIntMinimum'),
                    (e[(e.BigIntMultipleOf = 12)] = 'BigIntMultipleOf'),
                    (e[(e.BigInt = 13)] = 'BigInt'),
                    (e[(e.Boolean = 14)] = 'Boolean'),
                    (e[(e.DateExclusiveMaximumTimestamp = 15)] = 'DateExclusiveMaximumTimestamp'),
                    (e[(e.DateExclusiveMinimumTimestamp = 16)] = 'DateExclusiveMinimumTimestamp'),
                    (e[(e.DateMaximumTimestamp = 17)] = 'DateMaximumTimestamp'),
                    (e[(e.DateMinimumTimestamp = 18)] = 'DateMinimumTimestamp'),
                    (e[(e.DateMultipleOfTimestamp = 19)] = 'DateMultipleOfTimestamp'),
                    (e[(e.Date = 20)] = 'Date'),
                    (e[(e.Function = 21)] = 'Function'),
                    (e[(e.IntegerExclusiveMaximum = 22)] = 'IntegerExclusiveMaximum'),
                    (e[(e.IntegerExclusiveMinimum = 23)] = 'IntegerExclusiveMinimum'),
                    (e[(e.IntegerMaximum = 24)] = 'IntegerMaximum'),
                    (e[(e.IntegerMinimum = 25)] = 'IntegerMinimum'),
                    (e[(e.IntegerMultipleOf = 26)] = 'IntegerMultipleOf'),
                    (e[(e.Integer = 27)] = 'Integer'),
                    (e[(e.IntersectUnevaluatedProperties = 28)] = 'IntersectUnevaluatedProperties'),
                    (e[(e.Intersect = 29)] = 'Intersect'),
                    (e[(e.Iterator = 30)] = 'Iterator'),
                    (e[(e.Kind = 31)] = 'Kind'),
                    (e[(e.Literal = 32)] = 'Literal'),
                    (e[(e.Never = 33)] = 'Never'),
                    (e[(e.Not = 34)] = 'Not'),
                    (e[(e.Null = 35)] = 'Null'),
                    (e[(e.NumberExclusiveMaximum = 36)] = 'NumberExclusiveMaximum'),
                    (e[(e.NumberExclusiveMinimum = 37)] = 'NumberExclusiveMinimum'),
                    (e[(e.NumberMaximum = 38)] = 'NumberMaximum'),
                    (e[(e.NumberMinimum = 39)] = 'NumberMinimum'),
                    (e[(e.NumberMultipleOf = 40)] = 'NumberMultipleOf'),
                    (e[(e.Number = 41)] = 'Number'),
                    (e[(e.ObjectAdditionalProperties = 42)] = 'ObjectAdditionalProperties'),
                    (e[(e.ObjectMaxProperties = 43)] = 'ObjectMaxProperties'),
                    (e[(e.ObjectMinProperties = 44)] = 'ObjectMinProperties'),
                    (e[(e.ObjectRequiredProperty = 45)] = 'ObjectRequiredProperty'),
                    (e[(e.Object = 46)] = 'Object'),
                    (e[(e.Promise = 47)] = 'Promise'),
                    (e[(e.RegExp = 48)] = 'RegExp'),
                    (e[(e.StringFormatUnknown = 49)] = 'StringFormatUnknown'),
                    (e[(e.StringFormat = 50)] = 'StringFormat'),
                    (e[(e.StringMaxLength = 51)] = 'StringMaxLength'),
                    (e[(e.StringMinLength = 52)] = 'StringMinLength'),
                    (e[(e.StringPattern = 53)] = 'StringPattern'),
                    (e[(e.String = 54)] = 'String'),
                    (e[(e.Symbol = 55)] = 'Symbol'),
                    (e[(e.TupleLength = 56)] = 'TupleLength'),
                    (e[(e.Tuple = 57)] = 'Tuple'),
                    (e[(e.Uint8ArrayMaxByteLength = 58)] = 'Uint8ArrayMaxByteLength'),
                    (e[(e.Uint8ArrayMinByteLength = 59)] = 'Uint8ArrayMinByteLength'),
                    (e[(e.Uint8Array = 60)] = 'Uint8Array'),
                    (e[(e.Undefined = 61)] = 'Undefined'),
                    (e[(e.Union = 62)] = 'Union'),
                    (e[(e.Void = 63)] = 'Void');
                })(y || (n.ValueErrorType = y = {}));
                class E extends c.TypeBoxError {
                  constructor(e) {
                    super('Unknown type'), (this.schema = e);
                  }
                }
                function m(e) {
                  return e.replace(/~/g, '~0').replace(/\//g, '~1');
                }
                function g(e) {
                  return e !== undefined;
                }
                n.ValueErrorsUnknownTypeError = E;
                class S {
                  constructor(e) {
                    this.iterator = e;
                  }
                  [Symbol.iterator]() {
                    return this.iterator;
                  }
                  First() {
                    const e = this.iterator.next();
                    return e.done ? undefined : e.value;
                  }
                }
                function h(e, t, n, r, i = []) {
                  return {
                    type: e,
                    schema: t,
                    path: n,
                    value: r,
                    message: (0, a.GetErrorFunction)()({
                      errorType: e,
                      path: n,
                      schema: t,
                      value: r,
                      errors: i,
                    }),
                    errors: i,
                  };
                }
                function* O(e, t, n, a) {
                  const c = g(e.$id) ? [...t, e] : t,
                    f = e;
                  switch (f[d.Kind]) {
                    case 'Any':
                    case 'Unknown':
                      return yield* (function* (e, t, n, r) {})();
                    case 'Array':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsArray)(r)) return yield h(y.Array, e, n, r);
                        !g(e.minItems) ||
                          r.length >= e.minItems ||
                          (yield h(y.ArrayMinItems, e, n, r)),
                          !g(e.maxItems) ||
                            r.length <= e.maxItems ||
                            (yield h(y.ArrayMaxItems, e, n, r));
                        for (let i = 0; i < r.length; i++) yield* O(e.items, t, `${n}/${i}`, r[i]);
                        if (
                          (!0 !== e.uniqueItems ||
                            (function () {
                              const e = new Set();
                              for (const t of r) {
                                const n = (0, p.Hash)(t);
                                if (e.has(n)) return !1;
                                e.add(n);
                              }
                              return !0;
                            })() ||
                            (yield h(y.ArrayUniqueItems, e, n, r)),
                          !(g(e.contains) || g(e.minContains) || g(e.maxContains)))
                        )
                          return;
                        const i = g(e.contains) ? e.contains : (0, _.Never)(),
                          o = r.reduce(
                            (e, r, o) => (!0 === O(i, t, `${n}${o}`, r).next().done ? e + 1 : e),
                            0
                          );
                        0 === o && (yield h(y.ArrayContains, e, n, r)),
                          (0, T.IsNumber)(e.minContains) &&
                            o < e.minContains &&
                            (yield h(y.ArrayMinContains, e, n, r)),
                          (0, T.IsNumber)(e.maxContains) &&
                            o > e.maxContains &&
                            (yield h(y.ArrayMaxContains, e, n, r));
                      })(f, c, n, a);
                    case 'AsyncIterator':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsAsyncIterator)(r) || (yield h(y.AsyncIterator, e, n, r));
                      })(f, 0, n, a);
                    case 'BigInt':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsBigInt)(r)) return yield h(y.BigInt, e, n, r);
                        !g(e.exclusiveMaximum) ||
                          r < e.exclusiveMaximum ||
                          (yield h(y.BigIntExclusiveMaximum, e, n, r)),
                          !g(e.exclusiveMinimum) ||
                            r > e.exclusiveMinimum ||
                            (yield h(y.BigIntExclusiveMinimum, e, n, r)),
                          !g(e.maximum) || r <= e.maximum || (yield h(y.BigIntMaximum, e, n, r)),
                          !g(e.minimum) || r >= e.minimum || (yield h(y.BigIntMinimum, e, n, r)),
                          g(e.multipleOf) &&
                            r % e.multipleOf !== BigInt(0) &&
                            (yield h(y.BigIntMultipleOf, e, n, r));
                      })(f, 0, n, a);
                    case 'Boolean':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsBoolean)(r) || (yield h(y.Boolean, e, n, r));
                      })(f, 0, n, a);
                    case 'Constructor':
                      return yield* (function* (e, t, n, r) {
                        yield* O(e.returns, t, n, r.prototype);
                      })(f, c, n, a);
                    case 'Date':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsDate)(r)) return yield h(y.Date, e, n, r);
                        !g(e.exclusiveMaximumTimestamp) ||
                          r.getTime() < e.exclusiveMaximumTimestamp ||
                          (yield h(y.DateExclusiveMaximumTimestamp, e, n, r)),
                          !g(e.exclusiveMinimumTimestamp) ||
                            r.getTime() > e.exclusiveMinimumTimestamp ||
                            (yield h(y.DateExclusiveMinimumTimestamp, e, n, r)),
                          !g(e.maximumTimestamp) ||
                            r.getTime() <= e.maximumTimestamp ||
                            (yield h(y.DateMaximumTimestamp, e, n, r)),
                          !g(e.minimumTimestamp) ||
                            r.getTime() >= e.minimumTimestamp ||
                            (yield h(y.DateMinimumTimestamp, e, n, r)),
                          g(e.multipleOfTimestamp) &&
                            r.getTime() % e.multipleOfTimestamp != 0 &&
                            (yield h(y.DateMultipleOfTimestamp, e, n, r));
                      })(f, 0, n, a);
                    case 'Function':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsFunction)(r) || (yield h(y.Function, e, n, r));
                      })(f, 0, n, a);
                    case 'Integer':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsInteger)(r)) return yield h(y.Integer, e, n, r);
                        !g(e.exclusiveMaximum) ||
                          r < e.exclusiveMaximum ||
                          (yield h(y.IntegerExclusiveMaximum, e, n, r)),
                          !g(e.exclusiveMinimum) ||
                            r > e.exclusiveMinimum ||
                            (yield h(y.IntegerExclusiveMinimum, e, n, r)),
                          !g(e.maximum) || r <= e.maximum || (yield h(y.IntegerMaximum, e, n, r)),
                          !g(e.minimum) || r >= e.minimum || (yield h(y.IntegerMinimum, e, n, r)),
                          g(e.multipleOf) &&
                            r % e.multipleOf != 0 &&
                            (yield h(y.IntegerMultipleOf, e, n, r));
                      })(f, 0, n, a);
                    case 'Intersect':
                      return yield* (function* (e, t, n, r) {
                        let o = !1;
                        for (const i of e.allOf) for (const e of O(i, t, n, r)) (o = !0), yield e;
                        if (o) return yield h(y.Intersect, e, n, r);
                        if (!1 === e.unevaluatedProperties) {
                          const t = new RegExp((0, i.KeyOfPattern)(e));
                          for (const i of Object.getOwnPropertyNames(r))
                            t.test(i) ||
                              (yield h(y.IntersectUnevaluatedProperties, e, `${n}/${i}`, r));
                        }
                        if ('object' == typeof e.unevaluatedProperties) {
                          const o = new RegExp((0, i.KeyOfPattern)(e));
                          for (const i of Object.getOwnPropertyNames(r))
                            if (!o.test(i)) {
                              const o = O(e.unevaluatedProperties, t, `${n}/${i}`, r[i]).next();
                              o.done || (yield o.value);
                            }
                        }
                      })(f, c, n, a);
                    case 'Iterator':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsIterator)(r) || (yield h(y.Iterator, e, n, r));
                      })(f, 0, n, a);
                    case 'Literal':
                      return yield* (function* (e, t, n, r) {
                        r !== e.const && (yield h(y.Literal, e, n, r));
                      })(f, 0, n, a);
                    case 'Never':
                      return yield* (function* (e, t, n, r) {
                        yield h(y.Never, e, n, r);
                      })(f, 0, n, a);
                    case 'Not':
                      return yield* (function* (e, t, n, r) {
                        !0 === O(e.not, t, n, r).next().done && (yield h(y.Not, e, n, r));
                      })(f, c, n, a);
                    case 'Null':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsNull)(r) || (yield h(y.Null, e, n, r));
                      })(f, 0, n, a);
                    case 'Number':
                      return yield* (function* (e, t, n, i) {
                        if (!r.TypeSystemPolicy.IsNumberLike(i)) return yield h(y.Number, e, n, i);
                        !g(e.exclusiveMaximum) ||
                          i < e.exclusiveMaximum ||
                          (yield h(y.NumberExclusiveMaximum, e, n, i)),
                          !g(e.exclusiveMinimum) ||
                            i > e.exclusiveMinimum ||
                            (yield h(y.NumberExclusiveMinimum, e, n, i)),
                          !g(e.maximum) || i <= e.maximum || (yield h(y.NumberMaximum, e, n, i)),
                          !g(e.minimum) || i >= e.minimum || (yield h(y.NumberMinimum, e, n, i)),
                          g(e.multipleOf) &&
                            i % e.multipleOf != 0 &&
                            (yield h(y.NumberMultipleOf, e, n, i));
                      })(f, 0, n, a);
                    case 'Object':
                      return yield* (function* (e, t, n, i) {
                        if (!r.TypeSystemPolicy.IsObjectLike(i)) return yield h(y.Object, e, n, i);
                        !g(e.minProperties) ||
                          Object.getOwnPropertyNames(i).length >= e.minProperties ||
                          (yield h(y.ObjectMinProperties, e, n, i)),
                          !g(e.maxProperties) ||
                            Object.getOwnPropertyNames(i).length <= e.maxProperties ||
                            (yield h(y.ObjectMaxProperties, e, n, i));
                        const o = Array.isArray(e.required) ? e.required : [],
                          a = Object.getOwnPropertyNames(e.properties),
                          c = Object.getOwnPropertyNames(i);
                        for (const t of o)
                          c.includes(t) ||
                            (yield h(
                              y.ObjectRequiredProperty,
                              e.properties[t],
                              `${n}/${m(t)}`,
                              undefined
                            ));
                        if (!1 === e.additionalProperties)
                          for (const t of c)
                            a.includes(t) ||
                              (yield h(y.ObjectAdditionalProperties, e, `${n}/${m(t)}`, i[t]));
                        if ('object' == typeof e.additionalProperties)
                          for (const r of c)
                            a.includes(r) ||
                              (yield* O(e.additionalProperties, t, `${n}/${m(r)}`, i[r]));
                        for (const o of a) {
                          const a = e.properties[o];
                          e.required && e.required.includes(o)
                            ? (yield* O(a, t, `${n}/${m(o)}`, i[o]),
                              (0, s.ExtendsUndefinedCheck)(e) &&
                                !(o in i) &&
                                (yield h(y.ObjectRequiredProperty, a, `${n}/${m(o)}`, undefined)))
                            : r.TypeSystemPolicy.IsExactOptionalProperty(i, o) &&
                              (yield* O(a, t, `${n}/${m(o)}`, i[o]));
                        }
                      })(f, c, n, a);
                    case 'Promise':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsPromise)(r) || (yield h(y.Promise, e, n, r));
                      })(f, 0, n, a);
                    case 'Record':
                      return yield* (function* (e, t, n, i) {
                        if (!r.TypeSystemPolicy.IsRecordLike(i)) return yield h(y.Object, e, n, i);
                        !g(e.minProperties) ||
                          Object.getOwnPropertyNames(i).length >= e.minProperties ||
                          (yield h(y.ObjectMinProperties, e, n, i)),
                          !g(e.maxProperties) ||
                            Object.getOwnPropertyNames(i).length <= e.maxProperties ||
                            (yield h(y.ObjectMaxProperties, e, n, i));
                        const [o, s] = Object.entries(e.patternProperties)[0],
                          a = new RegExp(o);
                        for (const [e, r] of Object.entries(i))
                          a.test(e) && (yield* O(s, t, `${n}/${m(e)}`, r));
                        if ('object' == typeof e.additionalProperties)
                          for (const [r, o] of Object.entries(i))
                            a.test(r) || (yield* O(e.additionalProperties, t, `${n}/${m(r)}`, o));
                        if (!1 === e.additionalProperties)
                          for (const [t, r] of Object.entries(i))
                            if (!a.test(t))
                              return yield h(y.ObjectAdditionalProperties, e, `${n}/${m(t)}`, r);
                      })(f, c, n, a);
                    case 'Ref':
                    case 'This':
                      return yield* (function* (e, t, n, r) {
                        yield* O((0, u.Deref)(e, t), t, n, r);
                      })(f, c, n, a);
                    case 'RegExp':
                      return yield* (function* (e, t, n, r) {
                        return (0, T.IsString)(r)
                          ? (!g(e.minLength) ||
                              r.length >= e.minLength ||
                              (yield h(y.StringMinLength, e, n, r)),
                            !g(e.maxLength) ||
                              r.length <= e.maxLength ||
                              (yield h(y.StringMaxLength, e, n, r)),
                            new RegExp(e.source, e.flags).test(r)
                              ? void 0
                              : yield h(y.RegExp, e, n, r))
                          : yield h(y.String, e, n, r);
                      })(f, 0, n, a);
                    case 'String':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsString)(r)) return yield h(y.String, e, n, r);
                        !g(e.minLength) ||
                          r.length >= e.minLength ||
                          (yield h(y.StringMinLength, e, n, r)),
                          !g(e.maxLength) ||
                            r.length <= e.maxLength ||
                            (yield h(y.StringMaxLength, e, n, r)),
                          (0, T.IsString)(e.pattern) &&
                            (new RegExp(e.pattern).test(r) || (yield h(y.StringPattern, e, n, r)));
                        (0, T.IsString)(e.format) &&
                          (o.FormatRegistry.Has(e.format)
                            ? o.FormatRegistry.Get(e.format)(r) ||
                              (yield h(y.StringFormat, e, n, r))
                            : yield h(y.StringFormatUnknown, e, n, r));
                      })(f, 0, n, a);
                    case 'Symbol':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsSymbol)(r) || (yield h(y.Symbol, e, n, r));
                      })(f, 0, n, a);
                    case 'TemplateLiteral':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsString)(r)) return yield h(y.String, e, n, r);
                        new RegExp(e.pattern).test(r) || (yield h(y.StringPattern, e, n, r));
                      })(f, 0, n, a);
                    case 'Tuple':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsArray)(r)) return yield h(y.Tuple, e, n, r);
                        if (e.items === undefined && 0 !== r.length)
                          return yield h(y.TupleLength, e, n, r);
                        if (r.length !== e.maxItems) return yield h(y.TupleLength, e, n, r);
                        if (e.items)
                          for (let i = 0; i < e.items.length; i++)
                            yield* O(e.items[i], t, `${n}/${i}`, r[i]);
                      })(f, c, n, a);
                    case 'Undefined':
                      return yield* (function* (e, t, n, r) {
                        (0, T.IsUndefined)(r) || (yield h(y.Undefined, e, n, r));
                      })(f, 0, n, a);
                    case 'Union':
                      return yield* (function* (e, t, n, r) {
                        if ((0, l.Check)(e, t, r)) return;
                        const i = e.anyOf.map(e => new S(O(e, t, n, r)));
                        yield h(y.Union, e, n, r, i);
                      })(f, c, n, a);
                    case 'Uint8Array':
                      return yield* (function* (e, t, n, r) {
                        if (!(0, T.IsUint8Array)(r)) return yield h(y.Uint8Array, e, n, r);
                        !g(e.maxByteLength) ||
                          r.length <= e.maxByteLength ||
                          (yield h(y.Uint8ArrayMaxByteLength, e, n, r)),
                          !g(e.minByteLength) ||
                            r.length >= e.minByteLength ||
                            (yield h(y.Uint8ArrayMinByteLength, e, n, r));
                      })(f, 0, n, a);
                    case 'Void':
                      return yield* (function* (e, t, n, i) {
                        r.TypeSystemPolicy.IsVoidLike(i) || (yield h(y.Void, e, n, i));
                      })(f, 0, n, a);
                    default:
                      if (!o.TypeRegistry.Has(f[d.Kind])) throw new E(e);
                      return yield* (function* (e, t, n, r) {
                        o.TypeRegistry.Get(e[d.Kind])(e, r) || (yield h(y.Kind, e, n, r));
                      })(f, 0, n, a);
                  }
                }
                n.ValueErrorIterator = S;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/errors/errors.js',
      },
    ],
    [
      3390,
      { '../type/symbols/index': 3554, './errors': 3389 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.DefaultErrorFunction = o),
                  (n.SetErrorFunction = function (e) {
                    s = e;
                  }),
                  (n.GetErrorFunction = function () {
                    return s;
                  });
                const r = e('../type/symbols/index'),
                  i = e('./errors');
                function o(e) {
                  switch (e.errorType) {
                    case i.ValueErrorType.ArrayContains:
                      return 'Expected array to contain at least one matching value';
                    case i.ValueErrorType.ArrayMaxContains:
                      return `Expected array to contain no more than ${e.schema.maxContains} matching values`;
                    case i.ValueErrorType.ArrayMinContains:
                      return `Expected array to contain at least ${e.schema.minContains} matching values`;
                    case i.ValueErrorType.ArrayMaxItems:
                      return `Expected array length to be less or equal to ${e.schema.maxItems}`;
                    case i.ValueErrorType.ArrayMinItems:
                      return `Expected array length to be greater or equal to ${e.schema.minItems}`;
                    case i.ValueErrorType.ArrayUniqueItems:
                      return 'Expected array elements to be unique';
                    case i.ValueErrorType.Array:
                      return 'Expected array';
                    case i.ValueErrorType.AsyncIterator:
                      return 'Expected AsyncIterator';
                    case i.ValueErrorType.BigIntExclusiveMaximum:
                      return `Expected bigint to be less than ${e.schema.exclusiveMaximum}`;
                    case i.ValueErrorType.BigIntExclusiveMinimum:
                      return `Expected bigint to be greater than ${e.schema.exclusiveMinimum}`;
                    case i.ValueErrorType.BigIntMaximum:
                      return `Expected bigint to be less or equal to ${e.schema.maximum}`;
                    case i.ValueErrorType.BigIntMinimum:
                      return `Expected bigint to be greater or equal to ${e.schema.minimum}`;
                    case i.ValueErrorType.BigIntMultipleOf:
                      return `Expected bigint to be a multiple of ${e.schema.multipleOf}`;
                    case i.ValueErrorType.BigInt:
                      return 'Expected bigint';
                    case i.ValueErrorType.Boolean:
                      return 'Expected boolean';
                    case i.ValueErrorType.DateExclusiveMinimumTimestamp:
                      return `Expected Date timestamp to be greater than ${e.schema.exclusiveMinimumTimestamp}`;
                    case i.ValueErrorType.DateExclusiveMaximumTimestamp:
                      return `Expected Date timestamp to be less than ${e.schema.exclusiveMaximumTimestamp}`;
                    case i.ValueErrorType.DateMinimumTimestamp:
                      return `Expected Date timestamp to be greater or equal to ${e.schema.minimumTimestamp}`;
                    case i.ValueErrorType.DateMaximumTimestamp:
                      return `Expected Date timestamp to be less or equal to ${e.schema.maximumTimestamp}`;
                    case i.ValueErrorType.DateMultipleOfTimestamp:
                      return `Expected Date timestamp to be a multiple of ${e.schema.multipleOfTimestamp}`;
                    case i.ValueErrorType.Date:
                      return 'Expected Date';
                    case i.ValueErrorType.Function:
                      return 'Expected function';
                    case i.ValueErrorType.IntegerExclusiveMaximum:
                      return `Expected integer to be less than ${e.schema.exclusiveMaximum}`;
                    case i.ValueErrorType.IntegerExclusiveMinimum:
                      return `Expected integer to be greater than ${e.schema.exclusiveMinimum}`;
                    case i.ValueErrorType.IntegerMaximum:
                      return `Expected integer to be less or equal to ${e.schema.maximum}`;
                    case i.ValueErrorType.IntegerMinimum:
                      return `Expected integer to be greater or equal to ${e.schema.minimum}`;
                    case i.ValueErrorType.IntegerMultipleOf:
                      return `Expected integer to be a multiple of ${e.schema.multipleOf}`;
                    case i.ValueErrorType.Integer:
                      return 'Expected integer';
                    case i.ValueErrorType.IntersectUnevaluatedProperties:
                      return 'Unexpected property';
                    case i.ValueErrorType.Intersect:
                      return 'Expected all values to match';
                    case i.ValueErrorType.Iterator:
                      return 'Expected Iterator';
                    case i.ValueErrorType.Literal:
                      return `Expected ${'string' == typeof e.schema.const ? `'${e.schema.const}'` : e.schema.const}`;
                    case i.ValueErrorType.Never:
                      return 'Never';
                    case i.ValueErrorType.Not:
                      return 'Value should not match';
                    case i.ValueErrorType.Null:
                      return 'Expected null';
                    case i.ValueErrorType.NumberExclusiveMaximum:
                      return `Expected number to be less than ${e.schema.exclusiveMaximum}`;
                    case i.ValueErrorType.NumberExclusiveMinimum:
                      return `Expected number to be greater than ${e.schema.exclusiveMinimum}`;
                    case i.ValueErrorType.NumberMaximum:
                      return `Expected number to be less or equal to ${e.schema.maximum}`;
                    case i.ValueErrorType.NumberMinimum:
                      return `Expected number to be greater or equal to ${e.schema.minimum}`;
                    case i.ValueErrorType.NumberMultipleOf:
                      return `Expected number to be a multiple of ${e.schema.multipleOf}`;
                    case i.ValueErrorType.Number:
                      return 'Expected number';
                    case i.ValueErrorType.Object:
                      return 'Expected object';
                    case i.ValueErrorType.ObjectAdditionalProperties:
                      return 'Unexpected property';
                    case i.ValueErrorType.ObjectMaxProperties:
                      return `Expected object to have no more than ${e.schema.maxProperties} properties`;
                    case i.ValueErrorType.ObjectMinProperties:
                      return `Expected object to have at least ${e.schema.minProperties} properties`;
                    case i.ValueErrorType.ObjectRequiredProperty:
                      return 'Expected required property';
                    case i.ValueErrorType.Promise:
                      return 'Expected Promise';
                    case i.ValueErrorType.RegExp:
                      return 'Expected string to match regular expression';
                    case i.ValueErrorType.StringFormatUnknown:
                      return `Unknown format '${e.schema.format}'`;
                    case i.ValueErrorType.StringFormat:
                      return `Expected string to match '${e.schema.format}' format`;
                    case i.ValueErrorType.StringMaxLength:
                      return `Expected string length less or equal to ${e.schema.maxLength}`;
                    case i.ValueErrorType.StringMinLength:
                      return `Expected string length greater or equal to ${e.schema.minLength}`;
                    case i.ValueErrorType.StringPattern:
                      return `Expected string to match '${e.schema.pattern}'`;
                    case i.ValueErrorType.String:
                      return 'Expected string';
                    case i.ValueErrorType.Symbol:
                      return 'Expected symbol';
                    case i.ValueErrorType.TupleLength:
                      return `Expected tuple to have ${e.schema.maxItems || 0} elements`;
                    case i.ValueErrorType.Tuple:
                      return 'Expected tuple';
                    case i.ValueErrorType.Uint8ArrayMaxByteLength:
                      return `Expected byte length less or equal to ${e.schema.maxByteLength}`;
                    case i.ValueErrorType.Uint8ArrayMinByteLength:
                      return `Expected byte length greater or equal to ${e.schema.minByteLength}`;
                    case i.ValueErrorType.Uint8Array:
                      return 'Expected Uint8Array';
                    case i.ValueErrorType.Undefined:
                      return 'Expected undefined';
                    case i.ValueErrorType.Union:
                      return 'Expected union value';
                    case i.ValueErrorType.Void:
                      return 'Expected void';
                    case i.ValueErrorType.Kind:
                      return `Expected kind '${e.schema[r.Kind]}'`;
                    default:
                      return 'Unknown error type';
                  }
                }
                let s = o;
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/errors/function.js',
      },
    ],
    [
      3391,
      { './errors': 3389, './function': 3390 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  i(e('./errors'), n),
                  i(e('./function'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/errors/index.js',
      },
    ],
    [
      3392,
      {
        './type/any/index': 3397,
        './type/array/index': 3399,
        './type/async-iterator/index': 3401,
        './type/awaited/index': 3403,
        './type/bigint/index': 3405,
        './type/boolean/index': 3407,
        './type/clone/index': 3408,
        './type/composite/index': 3412,
        './type/const/index': 3414,
        './type/constructor-parameters/index': 3416,
        './type/constructor/index': 3418,
        './type/create/index': 3420,
        './type/date/index': 3423,
        './type/deref/index': 3425,
        './type/enum/index': 3429,
        './type/error/index': 3431,
        './type/exclude/index': 3435,
        './type/extends/index': 3441,
        './type/extract/index': 3445,
        './type/function/index': 3447,
        './type/guard/index': 3448,
        './type/helpers/index': 3453,
        './type/indexed/index': 3454,
        './type/instance-type/index': 3459,
        './type/integer/index': 3461,
        './type/intersect/index': 3463,
        './type/intrinsic/index': 3469,
        './type/iterator/index': 3475,
        './type/keyof/index': 3477,
        './type/literal/index': 3482,
        './type/mapped/index': 3484,
        './type/never/index': 3488,
        './type/not/index': 3490,
        './type/null/index': 3492,
        './type/number/index': 3494,
        './type/object/index': 3496,
        './type/omit/index': 3498,
        './type/optional/index': 3502,
        './type/parameters/index': 3505,
        './type/partial/index': 3507,
        './type/patterns/index': 3510,
        './type/pick/index': 3512,
        './type/promise/index': 3516,
        './type/readonly-optional/index': 3518,
        './type/readonly/index': 3520,
        './type/record/index': 3523,
        './type/recursive/index': 3525,
        './type/ref/index': 3527,
        './type/regexp/index': 3529,
        './type/registry/index': 3532,
        './type/required/index': 3534,
        './type/rest/index': 3537,
        './type/return-type/index': 3539,
        './type/schema/index': 3542,
        './type/sets/index': 3544,
        './type/static/index': 3546,
        './type/strict/index': 3548,
        './type/string/index': 3550,
        './type/symbol/index': 3552,
        './type/symbols/index': 3554,
        './type/template-literal/index': 3558,
        './type/transform/index': 3564,
        './type/tuple/index': 3566,
        './type/type/index': 3568,
        './type/uint8array/index': 3572,
        './type/undefined/index': 3574,
        './type/union/index': 3576,
        './type/unknown/index': 3581,
        './type/unsafe/index': 3583,
        './type/void/index': 3585,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  i(e('./type/clone/index'), n),
                  i(e('./type/create/index'), n),
                  i(e('./type/error/index'), n),
                  i(e('./type/guard/index'), n),
                  i(e('./type/helpers/index'), n),
                  i(e('./type/patterns/index'), n),
                  i(e('./type/registry/index'), n),
                  i(e('./type/sets/index'), n),
                  i(e('./type/symbols/index'), n),
                  i(e('./type/any/index'), n),
                  i(e('./type/array/index'), n),
                  i(e('./type/async-iterator/index'), n),
                  i(e('./type/awaited/index'), n),
                  i(e('./type/bigint/index'), n),
                  i(e('./type/boolean/index'), n),
                  i(e('./type/composite/index'), n),
                  i(e('./type/const/index'), n),
                  i(e('./type/constructor/index'), n),
                  i(e('./type/constructor-parameters/index'), n),
                  i(e('./type/date/index'), n),
                  i(e('./type/deref/index'), n),
                  i(e('./type/enum/index'), n),
                  i(e('./type/exclude/index'), n),
                  i(e('./type/extends/index'), n),
                  i(e('./type/extract/index'), n),
                  i(e('./type/function/index'), n),
                  i(e('./type/indexed/index'), n),
                  i(e('./type/instance-type/index'), n),
                  i(e('./type/integer/index'), n),
                  i(e('./type/intersect/index'), n),
                  i(e('./type/iterator/index'), n),
                  i(e('./type/intrinsic/index'), n),
                  i(e('./type/keyof/index'), n),
                  i(e('./type/literal/index'), n),
                  i(e('./type/mapped/index'), n),
                  i(e('./type/never/index'), n),
                  i(e('./type/not/index'), n),
                  i(e('./type/null/index'), n),
                  i(e('./type/number/index'), n),
                  i(e('./type/object/index'), n),
                  i(e('./type/omit/index'), n),
                  i(e('./type/optional/index'), n),
                  i(e('./type/parameters/index'), n),
                  i(e('./type/partial/index'), n),
                  i(e('./type/pick/index'), n),
                  i(e('./type/promise/index'), n),
                  i(e('./type/readonly/index'), n),
                  i(e('./type/readonly-optional/index'), n),
                  i(e('./type/record/index'), n),
                  i(e('./type/recursive/index'), n),
                  i(e('./type/ref/index'), n),
                  i(e('./type/regexp/index'), n),
                  i(e('./type/required/index'), n),
                  i(e('./type/rest/index'), n),
                  i(e('./type/return-type/index'), n),
                  i(e('./type/schema/index'), n),
                  i(e('./type/static/index'), n),
                  i(e('./type/strict/index'), n),
                  i(e('./type/string/index'), n),
                  i(e('./type/symbol/index'), n),
                  i(e('./type/template-literal/index'), n),
                  i(e('./type/transform/index'), n),
                  i(e('./type/tuple/index'), n),
                  i(e('./type/uint8array/index'), n),
                  i(e('./type/undefined/index'), n),
                  i(e('./type/union/index'), n),
                  i(e('./type/unknown/index'), n),
                  i(e('./type/unsafe/index'), n),
                  i(e('./type/void/index'), n),
                  i(e('./type/type/index'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/index.js',
      },
    ],
    [
      3393,
      { './policy': 3394, './system': 3395 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  i(e('./policy'), n),
                  i(e('./system'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/system/index.js',
      },
    ],
    [
      3394,
      { '../value/guard/index': 3592 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TypeSystemPolicy = void 0);
                const r = e('../value/guard/index');
                var i;
                !(function (e) {
                  function t(t) {
                    const n = (0, r.IsObject)(t);
                    return e.AllowArrayObject ? n : n && !(0, r.IsArray)(t);
                  }
                  (e.InstanceMode = 'default'),
                    (e.ExactOptionalPropertyTypes = !1),
                    (e.AllowArrayObject = !1),
                    (e.AllowNaN = !1),
                    (e.AllowNullVoid = !1),
                    (e.IsExactOptionalProperty = function (t, n) {
                      return e.ExactOptionalPropertyTypes ? n in t : t[n] !== undefined;
                    }),
                    (e.IsObjectLike = t),
                    (e.IsRecordLike = function (e) {
                      return t(e) && !(e instanceof Date) && !(e instanceof Uint8Array);
                    }),
                    (e.IsNumberLike = function (t) {
                      return e.AllowNaN ? (0, r.IsNumber)(t) : Number.isFinite(t);
                    }),
                    (e.IsVoidLike = function (t) {
                      const n = (0, r.IsUndefined)(t);
                      return e.AllowNullVoid ? n || null === t : n;
                    });
                })(i || (n.TypeSystemPolicy = i = {}));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/system/policy.js',
      },
    ],
    [
      3395,
      {
        '../type/error/index': 3431,
        '../type/registry/index': 3532,
        '../type/symbols/index': 3554,
        '../type/unsafe/index': 3583,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.TypeSystem =
                    n.TypeSystemDuplicateFormat =
                    n.TypeSystemDuplicateTypeKind =
                      void 0);
                const r = e('../type/registry/index'),
                  i = e('../type/unsafe/index'),
                  o = e('../type/symbols/index'),
                  s = e('../type/error/index');
                class a extends s.TypeBoxError {
                  constructor(e) {
                    super(`Duplicate type kind '${e}' detected`);
                  }
                }
                n.TypeSystemDuplicateTypeKind = a;
                class c extends s.TypeBoxError {
                  constructor(e) {
                    super(`Duplicate string format '${e}' detected`);
                  }
                }
                var u;
                (n.TypeSystemDuplicateFormat = c),
                  (function (e) {
                    (e.Type = function (e, t) {
                      if (r.TypeRegistry.Has(e)) throw new a(e);
                      return (
                        r.TypeRegistry.Set(e, t), (t = {}) => (0, i.Unsafe)({ ...t, [o.Kind]: e })
                      );
                    }),
                      (e.Format = function (e, t) {
                        if (r.FormatRegistry.Has(e)) throw new c(e);
                        return r.FormatRegistry.Set(e, t), e;
                      });
                  })(u || (n.TypeSystem = u = {}));
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/system/system.js',
      },
    ],
    [
      3396,
      { '../create/index': 3420, '../symbols/index': 3554 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.Any = function (e) {
                    return (0, r.CreateType)({ [i.Kind]: 'Any' }, e);
                  });
                const r = e('../create/index'),
                  i = e('../symbols/index');
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/any/any.js',
      },
    ],
    [
      3397,
      { './any': 3396 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }), i(e('./any'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/any/index.js',
      },
    ],
    [
      3398,
      { '../create/type': 3421, '../symbols/index': 3554 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.Array = function (e, t) {
                    return (0, r.CreateType)({ [i.Kind]: 'Array', type: 'array', items: e }, t);
                  });
                const r = e('../create/type'),
                  i = e('../symbols/index');
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/array/array.js',
      },
    ],
    [
      3399,
      { './array': 3398 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }), i(e('./array'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/array/index.js',
      },
    ],
    [
      3400,
      { '../create/type': 3421, '../symbols/index': 3554 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.AsyncIterator = function (e, t) {
                    return (0, i.CreateType)(
                      { [r.Kind]: 'AsyncIterator', type: 'AsyncIterator', items: e },
                      t
                    );
                  });
                const r = e('../symbols/index'),
                  i = e('../create/type');
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/async-iterator/async-iterator.js',
      },
    ],
    [
      3401,
      { './async-iterator': 3400 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                var r =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, n, r) {
                          r === undefined && (r = n);
                          var i = Object.getOwnPropertyDescriptor(t, n);
                          (i && !('get' in i ? !t.__esModule : i.writable || i.configurable)) ||
                            (i = {
                              enumerable: !0,
                              get: function () {
                                return t[n];
                              },
                            }),
                            Object.defineProperty(e, r, i);
                        }
                      : function (e, t, n, r) {
                          r === undefined && (r = n), (e[r] = t[n]);
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var n in e)
                        'default' === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n);
                    };
                Object.defineProperty(n, '__esModule', { value: !0 }), i(e('./async-iterator'), n);
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/async-iterator/index.js',
      },
    ],
    [
      3402,
      {
        '../create/type': 3421,
        '../guard/kind': 3449,
        '../intersect/index': 3463,
        '../union/index': 3576,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, n) {
                Object.defineProperty(n, '__esModule', { value: !0 }),
                  (n.Awaited = function (e, t) {
                    return (0, o.CreateType)(c(e), t);
                  });
                const r = e('../intersect/index'),
                  i = e('../union/index'),
                  o = e('../create/type'),
                  s = e('../guard/kind');
                function a(e) {
                  return e.map(e => c(e));
                }
                function c(e) {
                  return (0, s.IsIntersect)(e)
                    ? (function (e) {
                        return (0, r.Intersect)(a(e));
                      })(e.allOf)
                    : (0, s.IsUnion)(e)
                      ? (function (e) {
                          return (0, i.Union)(a(e));
                        })(e.anyOf)
                      : (0, s.IsPromise)(e)
                        ? (function (e) {
                            return c(e);
                          })(e.item)
                        : e;
                }
              };
            };
      },
      {
        package: '@trezor/connect-web>@trezor/connect>@trezor/schema-utils>@sinclair/typebox',
        file: 'node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/build/cjs/type/awaited/awaited.js',
      },
    ],
  ],
  [],
  {}
);
