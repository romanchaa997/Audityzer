LavaPack.loadBundle(
  [
    [
      2056,
      { buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (e) {
                  (function () {
                    function t(e) {
                      if ('string' != typeof e)
                        throw new Error(
                          "[isHexPrefixed] input must be type 'string', received type " + typeof e
                        );
                      return '0' === e[0] && 'x' === e[1];
                    }
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.isHexString =
                        r.getKeys =
                        r.fromAscii =
                        r.fromUtf8 =
                        r.toAscii =
                        r.arrayContainsArray =
                        r.getBinarySize =
                        r.padToEven =
                        r.stripHexPrefix =
                        r.isHexPrefixed =
                          void 0),
                      (r.isHexPrefixed = t);
                    function n(e) {
                      let t = e;
                      if ('string' != typeof t)
                        throw new Error(
                          "[padToEven] value must be type 'string', received " + typeof t
                        );
                      return t.length % 2 && (t = `0${t}`), t;
                    }
                    (r.stripHexPrefix = e => {
                      if ('string' != typeof e)
                        throw new Error(
                          "[stripHexPrefix] input must be type 'string', received " + typeof e
                        );
                      return t(e) ? e.slice(2) : e;
                    }),
                      (r.padToEven = n),
                      (r.getBinarySize = function (t) {
                        if ('string' != typeof t)
                          throw new Error(
                            "[getBinarySize] method requires input type 'string', received " +
                              typeof t
                          );
                        return e.byteLength(t, 'utf8');
                      }),
                      (r.arrayContainsArray = function (e, t, r) {
                        if (!0 !== Array.isArray(e))
                          throw new Error(
                            `[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof e}'`
                          );
                        if (!0 !== Array.isArray(t))
                          throw new Error(
                            `[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof t}'`
                          );
                        return t[!0 === r ? 'some' : 'every'](t => e.indexOf(t) >= 0);
                      }),
                      (r.toAscii = function (e) {
                        let t = '',
                          r = 0;
                        const n = e.length;
                        for ('0x' === e.substring(0, 2) && (r = 2); r < n; r += 2) {
                          const n = parseInt(e.substr(r, 2), 16);
                          t += String.fromCharCode(n);
                        }
                        return t;
                      }),
                      (r.fromUtf8 = function (t) {
                        return `0x${n(e.from(t, 'utf8').toString('hex')).replace(/^0+|0+$/g, '')}`;
                      }),
                      (r.fromAscii = function (e) {
                        let t = '';
                        for (let r = 0; r < e.length; r++) {
                          const n = e.charCodeAt(r).toString(16);
                          t += n.length < 2 ? `0${n}` : n;
                        }
                        return `0x${t}`;
                      }),
                      (r.getKeys = function (e, t, r) {
                        if (!Array.isArray(e))
                          throw new Error(
                            "[getKeys] method expects input 'params' to be an array, got " +
                              typeof e
                          );
                        if ('string' != typeof t)
                          throw new Error(
                            "[getKeys] method expects input 'key' to be type 'string', got " +
                              typeof e
                          );
                        const n = [];
                        for (let s = 0; s < e.length; s++) {
                          let i = e[s][t];
                          if (!0 !== r || i) {
                            if ('string' != typeof i)
                              throw new Error(
                                "invalid abi - expected type 'string', received " + typeof i
                              );
                          } else i = '';
                          n.push(i);
                        }
                        return n;
                      }),
                      (r.isHexString = function (e, t) {
                        return (
                          !('string' != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) &&
                          !(void 0 !== t && t > 0 && e.length !== 2 + 2 * t)
                        );
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/internal.js',
      },
    ],
    [
      2057,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.Lock = void 0);
                r.Lock = class {
                  constructor() {
                    (this.permits = 1), (this.promiseResolverQueue = []);
                  }
                  async acquire() {
                    return this.permits > 0
                      ? ((this.permits -= 1), Promise.resolve(!0))
                      : new Promise(e => this.promiseResolverQueue.push(e));
                  }
                  release() {
                    if (
                      ((this.permits += 1),
                      this.permits > 1 && this.promiseResolverQueue.length > 0)
                    )
                      console.warn(
                        'Lock.permits should never be > 0 when there is someone waiting.'
                      );
                    else if (1 === this.permits && this.promiseResolverQueue.length > 0) {
                      this.permits -= 1;
                      const e = this.promiseResolverQueue.shift();
                      e && e(!0);
                    }
                  }
                };
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/lock.js',
      },
    ],
    [
      2058,
      { 'micro-ftch': 4977 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getProvider = r.fetchFromProvider = void 0);
                const n = e('micro-ftch');
                r.fetchFromProvider = async (e, t) =>
                  (
                    await (0, n.default)(e, {
                      headers: { 'content-type': 'application/json' },
                      type: 'json',
                      data: { method: t.method, params: t.params, jsonrpc: '2.0', id: 1 },
                    })
                  ).result;
                r.getProvider = e => {
                  if ('string' == typeof e) return e;
                  if (e?.connection?.url !== undefined) return e.connection.url;
                  throw new Error('Must provide valid provider URL or Web3Provider');
                };
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/provider.js',
      },
    ],
    [
      2059,
      {
        './bytes': 2051,
        './constants': 2052,
        './helpers': 2054,
        buffer: 4139,
        'ethereum-cryptography/keccak': 4366,
        'ethereum-cryptography/secp256k1': 4383,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.hashPersonalMessage =
                        r.isValidSignature =
                        r.fromRpcSig =
                        r.toCompactSig =
                        r.toRpcSig =
                        r.ecrecover =
                        r.ecsign =
                          void 0);
                    const n = e('ethereum-cryptography/keccak'),
                      s = e('ethereum-cryptography/secp256k1'),
                      i = e('./bytes'),
                      o = e('./constants'),
                      a = e('./helpers');
                    function c(e, t) {
                      return e === BigInt(0) || e === BigInt(1)
                        ? e
                        : t === undefined
                          ? e - BigInt(27)
                          : e - (t * BigInt(2) + BigInt(35));
                    }
                    function u(e) {
                      return e === BigInt(0) || e === BigInt(1);
                    }
                    r.ecsign = function (e, r, n) {
                      const i = s.secp256k1.sign(e, r),
                        o = i.toCompactRawBytes();
                      return {
                        r: t.from(o.slice(0, 32)),
                        s: t.from(o.slice(32, 64)),
                        v:
                          n === undefined
                            ? BigInt(i.recovery + 27)
                            : BigInt(i.recovery + 35) + BigInt(n) * BigInt(2),
                      };
                    };
                    r.ecrecover = function (e, r, n, o, a) {
                      const l = t.concat(
                          [(0, i.setLengthLeft)(n, 32), (0, i.setLengthLeft)(o, 32)],
                          64
                        ),
                        d = c(r, a);
                      if (!u(d)) throw new Error('Invalid signature v value');
                      const m = s.secp256k1.Signature.fromCompact(l)
                        .addRecoveryBit(Number(d))
                        .recoverPublicKey(e);
                      return t.from(m.toRawBytes(!1).slice(1));
                    };
                    r.toRpcSig = function (e, r, n, s) {
                      if (!u(c(e, s))) throw new Error('Invalid signature v value');
                      return (0, i.bufferToHex)(
                        t.concat([
                          (0, i.setLengthLeft)(r, 32),
                          (0, i.setLengthLeft)(n, 32),
                          (0, i.toBuffer)(e),
                        ])
                      );
                    };
                    r.toCompactSig = function (e, r, n, s) {
                      if (!u(c(e, s))) throw new Error('Invalid signature v value');
                      let o = n;
                      return (
                        ((e > BigInt(28) && e % BigInt(2) === BigInt(1)) ||
                          e === BigInt(1) ||
                          e === BigInt(28)) &&
                          ((o = t.from(n)), (o[0] |= 128)),
                        (0, i.bufferToHex)(
                          t.concat([(0, i.setLengthLeft)(r, 32), (0, i.setLengthLeft)(o, 32)])
                        )
                      );
                    };
                    r.fromRpcSig = function (e) {
                      const t = (0, i.toBuffer)(e);
                      let r, n, s;
                      if (t.length >= 65)
                        (r = t.slice(0, 32)),
                          (n = t.slice(32, 64)),
                          (s = (0, i.bufferToBigInt)(t.slice(64)));
                      else {
                        if (64 !== t.length) throw new Error('Invalid signature length');
                        (r = t.slice(0, 32)),
                          (n = t.slice(32, 64)),
                          (s = BigInt((0, i.bufferToInt)(t.slice(32, 33)) >> 7)),
                          (n[0] &= 127);
                      }
                      return s < 27 && (s += BigInt(27)), { v: s, r: r, s: n };
                    };
                    r.isValidSignature = function (e, t, r, n = !0, s) {
                      if (32 !== t.length || 32 !== r.length) return !1;
                      if (!u(c(e, s))) return !1;
                      const a = (0, i.bufferToBigInt)(t),
                        l = (0, i.bufferToBigInt)(r);
                      return (
                        !(
                          a === BigInt(0) ||
                          a >= o.SECP256K1_ORDER ||
                          l === BigInt(0) ||
                          l >= o.SECP256K1_ORDER
                        ) && !(n && l >= o.SECP256K1_ORDER_DIV_2)
                      );
                    };
                    r.hashPersonalMessage = function (e) {
                      (0, a.assertIsBuffer)(e);
                      const r = t.from(`Ethereum Signed Message:\n${e.length}`, 'utf-8');
                      return t.from((0, n.keccak256)(t.concat([r, e])));
                    };
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/signature.js',
      },
    ],
    [
      2060,
      { './bytes': 2051, './internal': 2056 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toType = r.TypeOutput = void 0);
                const n = e('./bytes'),
                  s = e('./internal');
                var i;
                !(function (e) {
                  (e[(e.Number = 0)] = 'Number'),
                    (e[(e.BigInt = 1)] = 'BigInt'),
                    (e[(e.Buffer = 2)] = 'Buffer'),
                    (e[(e.PrefixedHexString = 3)] = 'PrefixedHexString');
                })((i = r.TypeOutput || (r.TypeOutput = {}))),
                  (r.toType = function (e, t) {
                    if (null === e) return null;
                    if (e === undefined) return undefined;
                    if ('string' == typeof e && !(0, s.isHexString)(e))
                      throw new Error(`A string must be provided with a 0x-prefix, given: ${e}`);
                    if ('number' == typeof e && !Number.isSafeInteger(e))
                      throw new Error(
                        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'
                      );
                    const r = (0, n.toBuffer)(e);
                    switch (t) {
                      case i.Buffer:
                        return r;
                      case i.BigInt:
                        return (0, n.bufferToBigInt)(r);
                      case i.Number: {
                        const e = (0, n.bufferToBigInt)(r);
                        if (e > BigInt(Number.MAX_SAFE_INTEGER))
                          throw new Error(
                            'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'
                          );
                        return Number(e);
                      }
                      case i.PrefixedHexString:
                        return (0, n.bufferToHex)(r);
                      default:
                        throw new Error('unknown outputType');
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/types.js',
      },
    ],
    [
      2061,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.GWEI_TO_WEI = void 0),
                  (r.GWEI_TO_WEI = BigInt(1e9));
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/units.js',
      },
    ],
    [
      2062,
      { './address': 2049, './bytes': 2051, './types': 2060, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }), (r.Withdrawal = void 0);
                    const n = e('./address'),
                      s = e('./bytes'),
                      i = e('./types');
                    class o {
                      constructor(e, t, r, n) {
                        (this.index = e),
                          (this.validatorIndex = t),
                          (this.address = r),
                          (this.amount = n);
                      }
                      static fromWithdrawalData(e) {
                        const { index: t, validatorIndex: r, address: s, amount: a } = e,
                          c = (0, i.toType)(t, i.TypeOutput.BigInt),
                          u = (0, i.toType)(r, i.TypeOutput.BigInt),
                          l = new n.Address((0, i.toType)(s, i.TypeOutput.Buffer)),
                          d = (0, i.toType)(a, i.TypeOutput.BigInt);
                        return new o(c, u, l, d);
                      }
                      static fromValuesArray(e) {
                        if (4 !== e.length)
                          throw Error(
                            `Invalid withdrawalArray length expected=4 actual=${e.length}`
                          );
                        const [t, r, n, s] = e;
                        return o.fromWithdrawalData({
                          index: t,
                          validatorIndex: r,
                          address: n,
                          amount: s,
                        });
                      }
                      static toBufferArray(e) {
                        const { index: r, validatorIndex: s, address: o, amount: a } = e,
                          c =
                            (0, i.toType)(r, i.TypeOutput.BigInt) === BigInt(0)
                              ? t.alloc(0)
                              : (0, i.toType)(r, i.TypeOutput.Buffer),
                          u =
                            (0, i.toType)(s, i.TypeOutput.BigInt) === BigInt(0)
                              ? t.alloc(0)
                              : (0, i.toType)(s, i.TypeOutput.Buffer);
                        let l;
                        l = o instanceof n.Address ? o.buf : (0, i.toType)(o, i.TypeOutput.Buffer);
                        return [
                          c,
                          u,
                          l,
                          (0, i.toType)(a, i.TypeOutput.BigInt) === BigInt(0)
                            ? t.alloc(0)
                            : (0, i.toType)(a, i.TypeOutput.Buffer),
                        ];
                      }
                      raw() {
                        return o.toBufferArray(this);
                      }
                      toValue() {
                        return {
                          index: this.index,
                          validatorIndex: this.validatorIndex,
                          address: this.address.buf,
                          amount: this.amount,
                        };
                      }
                      toJSON() {
                        return {
                          index: (0, s.bigIntToHex)(this.index),
                          validatorIndex: (0, s.bigIntToHex)(this.validatorIndex),
                          address: '0x' + this.address.buf.toString('hex'),
                          amount: (0, s.bigIntToHex)(this.amount),
                        };
                      }
                    }
                    r.Withdrawal = o;
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/withdrawal.js',
      },
    ],
    [
      2063,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                function n(e) {
                  if (!Number.isSafeInteger(e)) throw new Error(`Wrong integer: ${e}`);
                }
                function s(e) {
                  return (
                    e instanceof Uint8Array ||
                    (null != e && 'object' == typeof e && 'Uint8Array' === e.constructor.name)
                  );
                }
                function i(...e) {
                  const t = e => e,
                    r = (e, t) => r => e(t(r));
                  return {
                    encode: e.map(e => e.encode).reduceRight(r, t),
                    decode: e.map(e => e.decode).reduce(r, t),
                  };
                }
                function o(e) {
                  return {
                    encode: t => {
                      if (!Array.isArray(t) || (t.length && 'number' != typeof t[0]))
                        throw new Error('alphabet.encode input should be an array of numbers');
                      return t.map(t => {
                        if ((n(t), t < 0 || t >= e.length))
                          throw new Error(
                            `Digit index outside alphabet: ${t} (alphabet: ${e.length})`
                          );
                        return e[t];
                      });
                    },
                    decode: t => {
                      if (!Array.isArray(t) || (t.length && 'string' != typeof t[0]))
                        throw new Error('alphabet.decode input should be array of strings');
                      return t.map(t => {
                        if ('string' != typeof t)
                          throw new Error(`alphabet.decode: not string element=${t}`);
                        const r = e.indexOf(t);
                        if (-1 === r) throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);
                        return r;
                      });
                    },
                  };
                }
                function a(e = '') {
                  if ('string' != typeof e) throw new Error('join separator should be string');
                  return {
                    encode: t => {
                      if (!Array.isArray(t) || (t.length && 'string' != typeof t[0]))
                        throw new Error('join.encode input should be array of strings');
                      for (let e of t)
                        if ('string' != typeof e)
                          throw new Error(`join.encode: non-string input=${e}`);
                      return t.join(e);
                    },
                    decode: t => {
                      if ('string' != typeof t)
                        throw new Error('join.decode input should be string');
                      return t.split(e);
                    },
                  };
                }
                function c(e, t = '=') {
                  if ((n(e), 'string' != typeof t)) throw new Error('padding chr should be string');
                  return {
                    encode(r) {
                      if (!Array.isArray(r) || (r.length && 'string' != typeof r[0]))
                        throw new Error('padding.encode input should be array of strings');
                      for (let e of r)
                        if ('string' != typeof e)
                          throw new Error(`padding.encode: non-string input=${e}`);
                      for (; (r.length * e) % 8; ) r.push(t);
                      return r;
                    },
                    decode(r) {
                      if (!Array.isArray(r) || (r.length && 'string' != typeof r[0]))
                        throw new Error('padding.encode input should be array of strings');
                      for (let e of r)
                        if ('string' != typeof e)
                          throw new Error(`padding.decode: non-string input=${e}`);
                      let n = r.length;
                      if ((n * e) % 8)
                        throw new Error(
                          'Invalid padding: string should have whole number of bytes'
                        );
                      for (; n > 0 && r[n - 1] === t; n--)
                        if (!(((n - 1) * e) % 8))
                          throw new Error('Invalid padding: string has too much padding');
                      return r.slice(0, n);
                    },
                  };
                }
                function u(e) {
                  if ('function' != typeof e) throw new Error('normalize fn should be function');
                  return { encode: e => e, decode: t => e(t) };
                }
                function l(e, t, r) {
                  if (t < 2)
                    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
                  if (r < 2)
                    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
                  if (!Array.isArray(e)) throw new Error('convertRadix: data should be array');
                  if (!e.length) return [];
                  let s = 0;
                  const i = [],
                    o = Array.from(e);
                  for (
                    o.forEach(e => {
                      if ((n(e), e < 0 || e >= t)) throw new Error(`Wrong integer: ${e}`);
                    });
                    ;

                  ) {
                    let e = 0,
                      n = !0;
                    for (let i = s; i < o.length; i++) {
                      const a = o[i],
                        c = t * e + a;
                      if (!Number.isSafeInteger(c) || (t * e) / t !== e || c - a != t * e)
                        throw new Error('convertRadix: carry overflow');
                      e = c % r;
                      const u = Math.floor(c / r);
                      if (((o[i] = u), !Number.isSafeInteger(u) || u * r + e !== c))
                        throw new Error('convertRadix: carry overflow');
                      n && (u ? (n = !1) : (s = i));
                    }
                    if ((i.push(e), n)) break;
                  }
                  for (let t = 0; t < e.length - 1 && 0 === e[t]; t++) i.push(0);
                  return i.reverse();
                }
                /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.bytes =
                    r.stringToBytes =
                    r.str =
                    r.bytesToString =
                    r.hex =
                    r.utf8 =
                    r.bech32m =
                    r.bech32 =
                    r.base58check =
                    r.createBase58check =
                    r.base58xmr =
                    r.base58xrp =
                    r.base58flickr =
                    r.base58 =
                    r.base64urlnopad =
                    r.base64url =
                    r.base64nopad =
                    r.base64 =
                    r.base32crockford =
                    r.base32hexnopad =
                    r.base32hex =
                    r.base32nopad =
                    r.base32 =
                    r.base16 =
                    r.utils =
                      void 0),
                  (r.assertNumber = n);
                const d = (e, t) => (t ? d(t, e % t) : e),
                  m = (e, t) => e + (t - d(e, t));
                function f(e, t, r, s) {
                  if (!Array.isArray(e)) throw new Error('convertRadix2: data should be array');
                  if (t <= 0 || t > 32) throw new Error(`convertRadix2: wrong from=${t}`);
                  if (r <= 0 || r > 32) throw new Error(`convertRadix2: wrong to=${r}`);
                  if (m(t, r) > 32)
                    throw new Error(
                      `convertRadix2: carry overflow from=${t} to=${r} carryBits=${m(t, r)}`
                    );
                  let i = 0,
                    o = 0;
                  const a = 2 ** r - 1,
                    c = [];
                  for (const s of e) {
                    if ((n(s), s >= 2 ** t))
                      throw new Error(`convertRadix2: invalid data word=${s} from=${t}`);
                    if (((i = (i << t) | s), o + t > 32))
                      throw new Error(`convertRadix2: carry overflow pos=${o} from=${t}`);
                    for (o += t; o >= r; o -= r) c.push(((i >> (o - r)) & a) >>> 0);
                    i &= 2 ** o - 1;
                  }
                  if (((i = (i << (r - o)) & a), !s && o >= t)) throw new Error('Excess padding');
                  if (!s && i) throw new Error(`Non-zero padding: ${i}`);
                  return s && o > 0 && c.push(i >>> 0), c;
                }
                function p(e) {
                  return (
                    n(e),
                    {
                      encode: t => {
                        if (!s(t)) throw new Error('radix.encode input should be Uint8Array');
                        return l(Array.from(t), 256, e);
                      },
                      decode: t => {
                        if (!Array.isArray(t) || (t.length && 'number' != typeof t[0]))
                          throw new Error('radix.decode input should be array of numbers');
                        return Uint8Array.from(l(t, e, 256));
                      },
                    }
                  );
                }
                function h(e, t = !1) {
                  if ((n(e), e <= 0 || e > 32))
                    throw new Error('radix2: bits should be in (0..32]');
                  if (m(8, e) > 32 || m(e, 8) > 32) throw new Error('radix2: carry overflow');
                  return {
                    encode: r => {
                      if (!s(r)) throw new Error('radix2.encode input should be Uint8Array');
                      return f(Array.from(r), 8, e, !t);
                    },
                    decode: r => {
                      if (!Array.isArray(r) || (r.length && 'number' != typeof r[0]))
                        throw new Error('radix2.decode input should be array of numbers');
                      return Uint8Array.from(f(r, e, 8, t));
                    },
                  };
                }
                function g(e) {
                  if ('function' != typeof e)
                    throw new Error('unsafeWrapper fn should be function');
                  return function (...t) {
                    try {
                      return e.apply(null, t);
                    } catch (e) {}
                  };
                }
                function y(e, t) {
                  if ((n(e), 'function' != typeof t))
                    throw new Error('checksum fn should be function');
                  return {
                    encode(r) {
                      if (!s(r)) throw new Error('checksum.encode: input should be Uint8Array');
                      const n = t(r).slice(0, e),
                        i = new Uint8Array(r.length + e);
                      return i.set(r), i.set(n, r.length), i;
                    },
                    decode(r) {
                      if (!s(r)) throw new Error('checksum.decode: input should be Uint8Array');
                      const n = r.slice(0, -e),
                        i = t(n).slice(0, e),
                        o = r.slice(-e);
                      for (let t = 0; t < e; t++)
                        if (i[t] !== o[t]) throw new Error('Invalid checksum');
                      return n;
                    },
                  };
                }
                (r.utils = {
                  alphabet: o,
                  chain: i,
                  checksum: y,
                  convertRadix: l,
                  convertRadix2: f,
                  radix: p,
                  radix2: h,
                  join: a,
                  padding: c,
                }),
                  (r.base16 = i(h(4), o('0123456789ABCDEF'), a(''))),
                  (r.base32 = i(h(5), o('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), c(5), a(''))),
                  (r.base32nopad = i(h(5), o('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), a(''))),
                  (r.base32hex = i(h(5), o('0123456789ABCDEFGHIJKLMNOPQRSTUV'), c(5), a(''))),
                  (r.base32hexnopad = i(h(5), o('0123456789ABCDEFGHIJKLMNOPQRSTUV'), a(''))),
                  (r.base32crockford = i(
                    h(5),
                    o('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),
                    a(''),
                    u(e => e.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))
                  )),
                  (r.base64 = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
                    c(6),
                    a('')
                  )),
                  (r.base64nopad = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
                    a('')
                  )),
                  (r.base64url = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
                    c(6),
                    a('')
                  )),
                  (r.base64urlnopad = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
                    a('')
                  ));
                const w = e => i(p(58), o(e), a(''));
                (r.base58 = w('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz')),
                  (r.base58flickr = w(
                    '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
                  )),
                  (r.base58xrp = w('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'));
                const k = [0, 2, 3, 5, 6, 7, 9, 10, 11];
                r.base58xmr = {
                  encode(e) {
                    let t = '';
                    for (let n = 0; n < e.length; n += 8) {
                      const s = e.subarray(n, n + 8);
                      t += r.base58.encode(s).padStart(k[s.length], '1');
                    }
                    return t;
                  },
                  decode(e) {
                    let t = [];
                    for (let n = 0; n < e.length; n += 11) {
                      const s = e.slice(n, n + 11),
                        i = k.indexOf(s.length),
                        o = r.base58.decode(s);
                      for (let e = 0; e < o.length - i; e++)
                        if (0 !== o[e]) throw new Error('base58xmr: wrong padding');
                      t = t.concat(Array.from(o.slice(o.length - i)));
                    }
                    return Uint8Array.from(t);
                  },
                };
                (r.createBase58check = e =>
                  i(
                    y(4, t => e(e(t))),
                    r.base58
                  )),
                  (r.base58check = r.createBase58check);
                const b = i(o('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), a('')),
                  _ = [996825010, 642813549, 513874426, 1027748829, 705979059];
                function S(e) {
                  const t = e >> 25;
                  let r = (33554431 & e) << 5;
                  for (let e = 0; e < _.length; e++) 1 == ((t >> e) & 1) && (r ^= _[e]);
                  return r;
                }
                function E(e, t, r = 1) {
                  const n = e.length;
                  let s = 1;
                  for (let t = 0; t < n; t++) {
                    const r = e.charCodeAt(t);
                    if (r < 33 || r > 126) throw new Error(`Invalid prefix (${e})`);
                    s = S(s) ^ (r >> 5);
                  }
                  s = S(s);
                  for (let t = 0; t < n; t++) s = S(s) ^ (31 & e.charCodeAt(t));
                  for (let e of t) s = S(s) ^ e;
                  for (let e = 0; e < 6; e++) s = S(s);
                  return (s ^= r), b.encode(f([s % 2 ** 30], 30, 5, !1));
                }
                function T(e) {
                  const t = 'bech32' === e ? 1 : 734539939,
                    r = h(5),
                    n = r.decode,
                    s = r.encode,
                    i = g(n);
                  function o(e, r, n = 90) {
                    if ('string' != typeof e)
                      throw new Error('bech32.encode prefix should be string, not ' + typeof e);
                    if (
                      (r instanceof Uint8Array && (r = Array.from(r)),
                      !Array.isArray(r) || (r.length && 'number' != typeof r[0]))
                    )
                      throw new Error(
                        'bech32.encode words should be array of numbers, not ' + typeof r
                      );
                    if (0 === e.length) throw new TypeError(`Invalid prefix length ${e.length}`);
                    const s = e.length + 7 + r.length;
                    if (!1 !== n && s > n) throw new TypeError(`Length ${s} exceeds limit ${n}`);
                    const i = e.toLowerCase(),
                      o = E(i, r, t);
                    return `${i}1${b.encode(r)}${o}`;
                  }
                  function a(e, r = 90) {
                    if ('string' != typeof e)
                      throw new Error('bech32.decode input should be string, not ' + typeof e);
                    if (e.length < 8 || (!1 !== r && e.length > r))
                      throw new TypeError(
                        `Wrong string length: ${e.length} (${e}). Expected (8..${r})`
                      );
                    const n = e.toLowerCase();
                    if (e !== n && e !== e.toUpperCase())
                      throw new Error('String must be lowercase or uppercase');
                    const s = n.lastIndexOf('1');
                    if (0 === s || -1 === s)
                      throw new Error('Letter "1" must be present between prefix and data only');
                    const i = n.slice(0, s),
                      o = n.slice(s + 1);
                    if (o.length < 6) throw new Error('Data must be at least 6 characters long');
                    const a = b.decode(o).slice(0, -6),
                      c = E(i, a, t);
                    if (!o.endsWith(c))
                      throw new Error(`Invalid checksum in ${e}: expected "${c}"`);
                    return { prefix: i, words: a };
                  }
                  return {
                    encode: o,
                    decode: a,
                    encodeFromBytes: function (e, t) {
                      return o(e, s(t));
                    },
                    decodeToBytes: function (e) {
                      const { prefix: t, words: r } = a(e, !1);
                      return { prefix: t, words: r, bytes: n(r) };
                    },
                    decodeUnsafe: g(a),
                    fromWords: n,
                    fromWordsUnsafe: i,
                    toWords: s,
                  };
                }
                (r.bech32 = T('bech32')),
                  (r.bech32m = T('bech32m')),
                  (r.utf8 = {
                    encode: e => new TextDecoder().decode(e),
                    decode: e => new TextEncoder().encode(e),
                  }),
                  (r.hex = i(
                    h(4),
                    o('0123456789abcdef'),
                    a(''),
                    u(e => {
                      if ('string' != typeof e || e.length % 2)
                        throw new TypeError(
                          `hex.decode: expected string, got ${typeof e} with length ${e.length}`
                        );
                      return e.toLowerCase();
                    })
                  ));
                const v = {
                    utf8: r.utf8,
                    hex: r.hex,
                    base16: r.base16,
                    base32: r.base32,
                    base64: r.base64,
                    base64url: r.base64url,
                    base58: r.base58,
                    base58xmr: r.base58xmr,
                  },
                  A =
                    'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';
                (r.bytesToString = (e, t) => {
                  if ('string' != typeof e || !v.hasOwnProperty(e)) throw new TypeError(A);
                  if (!s(t)) throw new TypeError('bytesToString() expects Uint8Array');
                  return v[e].encode(t);
                }),
                  (r.str = r.bytesToString);
                (r.stringToBytes = (e, t) => {
                  if (!v.hasOwnProperty(e)) throw new TypeError(A);
                  if ('string' != typeof t) throw new TypeError('stringToBytes() expects string');
                  return v[e].decode(t);
                }),
                  (r.bytes = r.stringToBytes);
              };
            };
      },
      {
        package: '@metamask/keyring-controller>@metamask/eth-sig-util>@scure/base',
        file: 'node_modules/@metamask/keyring-controller/node_modules/@scure/base/lib/index.js',
      },
    ],
    [
      2064,
      { '@metamask/keyring-snap-client': 2068 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  u =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.KeyringInternalSnapClient = void 0);
                const l = e('@metamask/keyring-snap-client');
                class d {
                  constructor(e, t, r, a) {
                    n.set(this, void 0),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o.set(this, void 0),
                      c(this, i, e, 'f'),
                      c(this, n, t, 'f'),
                      c(this, s, r, 'f'),
                      c(this, o, a, 'f');
                  }
                  async send(e) {
                    return u(this, i, 'f').call('SnapController:handleRequest', {
                      snapId: u(this, n, 'f'),
                      origin: u(this, s, 'f'),
                      handler: u(this, o, 'f'),
                      request: e,
                    });
                  }
                }
                (n = new WeakMap()), (s = new WeakMap()), (i = new WeakMap()), (o = new WeakMap());
                class m extends l.KeyringClient {
                  constructor({
                    messenger: e,
                    snapId: t = 'undefined',
                    origin: r = 'metamask',
                    handler: n = 'onKeyringRequest',
                  }) {
                    super(new d(e, t, r, n)), a.set(this, void 0), c(this, a, e, 'f');
                  }
                  withSnapId(e) {
                    return new m({ messenger: u(this, a, 'f'), snapId: e });
                  }
                }
                (r.KeyringInternalSnapClient = m), (a = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/keyring-internal-snap-client',
        file: 'node_modules/@metamask/keyring-internal-snap-client/dist/KeyringInternalSnapClient.cjs',
      },
    ],
    [
      2065,
      { './KeyringInternalSnapClient.cjs': 2064 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./KeyringInternalSnapClient.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/keyring-internal-snap-client',
        file: 'node_modules/@metamask/keyring-internal-snap-client/dist/index.cjs',
      },
    ],
    [
      2066,
      {
        '@metamask/keyring-api': 2014,
        '@metamask/keyring-utils': 2088,
        '@metamask/superstruct': 2913,
        uuid: 2069,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  a =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.KeyringClient = void 0);
                const c = e('@metamask/keyring-api'),
                  u = e('@metamask/keyring-utils'),
                  l = e('@metamask/superstruct'),
                  d = e('uuid');
                (r.KeyringClient = class {
                  constructor(e) {
                    n.add(this), s.set(this, void 0), o(this, s, e, 'f');
                  }
                  async listAccounts() {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ListAccounts,
                      }),
                      c.ListAccountsResponseStruct
                    );
                  }
                  async getAccount(e) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.GetAccount,
                        params: { id: e },
                      }),
                      c.GetAccountResponseStruct
                    );
                  }
                  async getAccountBalances(e, t) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.GetAccountBalances,
                        params: { id: e, assets: t },
                      }),
                      c.GetAccountBalancesResponseStruct
                    );
                  }
                  async createAccount(e = {}) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.CreateAccount,
                        params: { options: e },
                      }),
                      c.CreateAccountResponseStruct
                    );
                  }
                  async discoverAccounts(e, t, r) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.DiscoverAccounts,
                        params: { scopes: e, entropySource: t, groupIndex: r },
                      }),
                      c.DiscoverAccountsResponseStruct
                    );
                  }
                  async listAccountTransactions(e, t) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ListAccountTransactions,
                        params: { id: e, pagination: t },
                      }),
                      c.ListAccountTransactionsResponseStruct
                    );
                  }
                  async listAccountAssets(e) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ListAccountAssets,
                        params: { id: e },
                      }),
                      c.ListAccountAssetsResponseStruct
                    );
                  }
                  async resolveAccountAddress(e, t) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ResolveAccountAddress,
                        params: { scope: e, request: t },
                      }),
                      c.ResolveAccountAddressResponseStruct
                    );
                  }
                  async filterAccountChains(e, t) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.FilterAccountChains,
                        params: { id: e, chains: t },
                      }),
                      c.FilterAccountChainsResponseStruct
                    );
                  }
                  async updateAccount(e) {
                    (0, l.assert)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.UpdateAccount,
                        params: { account: e },
                      }),
                      c.UpdateAccountResponseStruct
                    );
                  }
                  async deleteAccount(e) {
                    (0, l.assert)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.DeleteAccount,
                        params: { id: e },
                      }),
                      c.DeleteAccountResponseStruct
                    );
                  }
                  async exportAccount(e) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ExportAccount,
                        params: { id: e },
                      }),
                      c.ExportAccountResponseStruct
                    );
                  }
                  async listRequests() {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ListRequests,
                      }),
                      c.ListRequestsResponseStruct
                    );
                  }
                  async getRequest(e) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.GetRequest,
                        params: { id: e },
                      }),
                      c.GetRequestResponseStruct
                    );
                  }
                  async submitRequest(e) {
                    return (0, u.strictMask)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.SubmitRequest,
                        params: e,
                      }),
                      c.SubmitRequestResponseStruct
                    );
                  }
                  async approveRequest(e, t = {}) {
                    (0, l.assert)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.ApproveRequest,
                        params: { id: e, data: t },
                      }),
                      c.ApproveRequestResponseStruct
                    );
                  }
                  async rejectRequest(e) {
                    (0, l.assert)(
                      await a(this, n, 'm', i).call(this, {
                        method: c.KeyringRpcMethod.RejectRequest,
                        params: { id: e },
                      }),
                      c.RejectRequestResponseStruct
                    );
                  }
                }),
                  (s = new WeakMap()),
                  (n = new WeakSet()),
                  (i = async function (e) {
                    return a(this, s, 'f').send({ jsonrpc: '2.0', id: (0, d.v4)(), ...e });
                  });
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client',
        file: 'node_modules/@metamask/keyring-snap-client/dist/KeyringClient.cjs',
      },
    ],
    [
      2067,
      { './KeyringClient.cjs': 2066 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  o =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.KeyringSnapRpcClient = r.SnapRpcSender = void 0);
                const a = e('./KeyringClient.cjs');
                class c {
                  constructor(e, t) {
                    n.set(this, void 0),
                      s.set(this, void 0),
                      i(this, n, e, 'f'),
                      i(this, s, t, 'f');
                  }
                  async send(e) {
                    return o(this, s, 'f').request({
                      method: 'wallet_invokeKeyring',
                      params: { snapId: o(this, n, 'f'), request: e },
                    });
                  }
                }
                (r.SnapRpcSender = c), (n = new WeakMap()), (s = new WeakMap());
                class u extends a.KeyringClient {
                  constructor(e, t) {
                    super(new c(e, t));
                  }
                }
                r.KeyringSnapRpcClient = u;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client',
        file: 'node_modules/@metamask/keyring-snap-client/dist/KeyringSnapRpcClient.cjs',
      },
    ],
    [
      2068,
      { './KeyringClient.cjs': 2066, './KeyringSnapRpcClient.cjs': 2067 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./KeyringClient.cjs'), r),
                  s(e('./KeyringSnapRpcClient.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client',
        file: 'node_modules/@metamask/keyring-snap-client/dist/index.cjs',
      },
    ],
    [
      2069,
      {
        './nil.js': 2072,
        './parse.js': 2073,
        './stringify.js': 2077,
        './v1.js': 2078,
        './v3.js': 2079,
        './v4.js': 2081,
        './v5.js': 2082,
        './validate.js': 2083,
        './version.js': 2084,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  Object.defineProperty(r, 'NIL', {
                    enumerable: !0,
                    get: function () {
                      return a.default;
                    },
                  }),
                  Object.defineProperty(r, 'parse', {
                    enumerable: !0,
                    get: function () {
                      return d.default;
                    },
                  }),
                  Object.defineProperty(r, 'stringify', {
                    enumerable: !0,
                    get: function () {
                      return l.default;
                    },
                  }),
                  Object.defineProperty(r, 'v1', {
                    enumerable: !0,
                    get: function () {
                      return n.default;
                    },
                  }),
                  Object.defineProperty(r, 'v3', {
                    enumerable: !0,
                    get: function () {
                      return s.default;
                    },
                  }),
                  Object.defineProperty(r, 'v4', {
                    enumerable: !0,
                    get: function () {
                      return i.default;
                    },
                  }),
                  Object.defineProperty(r, 'v5', {
                    enumerable: !0,
                    get: function () {
                      return o.default;
                    },
                  }),
                  Object.defineProperty(r, 'validate', {
                    enumerable: !0,
                    get: function () {
                      return u.default;
                    },
                  }),
                  Object.defineProperty(r, 'version', {
                    enumerable: !0,
                    get: function () {
                      return c.default;
                    },
                  });
                var n = m(e('./v1.js')),
                  s = m(e('./v3.js')),
                  i = m(e('./v4.js')),
                  o = m(e('./v5.js')),
                  a = m(e('./nil.js')),
                  c = m(e('./version.js')),
                  u = m(e('./validate.js')),
                  l = m(e('./stringify.js')),
                  d = m(e('./parse.js'));
                function m(e) {
                  return e && e.__esModule ? e : { default: e };
                }
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/index.js',
      },
    ],
    [
      2070,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                function n(e) {
                  return 14 + (((e + 64) >>> 9) << 4) + 1;
                }
                function s(e, t) {
                  const r = (65535 & e) + (65535 & t);
                  return (((e >> 16) + (t >> 16) + (r >> 16)) << 16) | (65535 & r);
                }
                function i(e, t, r, n, i, o) {
                  return s(((a = s(s(t, e), s(n, o))) << (c = i)) | (a >>> (32 - c)), r);
                  var a, c;
                }
                function o(e, t, r, n, s, o, a) {
                  return i((t & r) | (~t & n), e, t, s, o, a);
                }
                function a(e, t, r, n, s, o, a) {
                  return i((t & n) | (r & ~n), e, t, s, o, a);
                }
                function c(e, t, r, n, s, o, a) {
                  return i(t ^ r ^ n, e, t, s, o, a);
                }
                function u(e, t, r, n, s, o, a) {
                  return i(r ^ (t | ~n), e, t, s, o, a);
                }
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var l = function (e) {
                  if ('string' == typeof e) {
                    const t = unescape(encodeURIComponent(e));
                    e = new Uint8Array(t.length);
                    for (let r = 0; r < t.length; ++r) e[r] = t.charCodeAt(r);
                  }
                  return (function (e) {
                    const t = [],
                      r = 32 * e.length,
                      n = '0123456789abcdef';
                    for (let s = 0; s < r; s += 8) {
                      const r = (e[s >> 5] >>> s % 32) & 255,
                        i = parseInt(n.charAt((r >>> 4) & 15) + n.charAt(15 & r), 16);
                      t.push(i);
                    }
                    return t;
                  })(
                    (function (e, t) {
                      (e[t >> 5] |= 128 << t % 32), (e[n(t) - 1] = t);
                      let r = 1732584193,
                        i = -271733879,
                        l = -1732584194,
                        d = 271733878;
                      for (let t = 0; t < e.length; t += 16) {
                        const n = r,
                          m = i,
                          f = l,
                          p = d;
                        (r = o(r, i, l, d, e[t], 7, -680876936)),
                          (d = o(d, r, i, l, e[t + 1], 12, -389564586)),
                          (l = o(l, d, r, i, e[t + 2], 17, 606105819)),
                          (i = o(i, l, d, r, e[t + 3], 22, -1044525330)),
                          (r = o(r, i, l, d, e[t + 4], 7, -176418897)),
                          (d = o(d, r, i, l, e[t + 5], 12, 1200080426)),
                          (l = o(l, d, r, i, e[t + 6], 17, -1473231341)),
                          (i = o(i, l, d, r, e[t + 7], 22, -45705983)),
                          (r = o(r, i, l, d, e[t + 8], 7, 1770035416)),
                          (d = o(d, r, i, l, e[t + 9], 12, -1958414417)),
                          (l = o(l, d, r, i, e[t + 10], 17, -42063)),
                          (i = o(i, l, d, r, e[t + 11], 22, -1990404162)),
                          (r = o(r, i, l, d, e[t + 12], 7, 1804603682)),
                          (d = o(d, r, i, l, e[t + 13], 12, -40341101)),
                          (l = o(l, d, r, i, e[t + 14], 17, -1502002290)),
                          (i = o(i, l, d, r, e[t + 15], 22, 1236535329)),
                          (r = a(r, i, l, d, e[t + 1], 5, -165796510)),
                          (d = a(d, r, i, l, e[t + 6], 9, -1069501632)),
                          (l = a(l, d, r, i, e[t + 11], 14, 643717713)),
                          (i = a(i, l, d, r, e[t], 20, -373897302)),
                          (r = a(r, i, l, d, e[t + 5], 5, -701558691)),
                          (d = a(d, r, i, l, e[t + 10], 9, 38016083)),
                          (l = a(l, d, r, i, e[t + 15], 14, -660478335)),
                          (i = a(i, l, d, r, e[t + 4], 20, -405537848)),
                          (r = a(r, i, l, d, e[t + 9], 5, 568446438)),
                          (d = a(d, r, i, l, e[t + 14], 9, -1019803690)),
                          (l = a(l, d, r, i, e[t + 3], 14, -187363961)),
                          (i = a(i, l, d, r, e[t + 8], 20, 1163531501)),
                          (r = a(r, i, l, d, e[t + 13], 5, -1444681467)),
                          (d = a(d, r, i, l, e[t + 2], 9, -51403784)),
                          (l = a(l, d, r, i, e[t + 7], 14, 1735328473)),
                          (i = a(i, l, d, r, e[t + 12], 20, -1926607734)),
                          (r = c(r, i, l, d, e[t + 5], 4, -378558)),
                          (d = c(d, r, i, l, e[t + 8], 11, -2022574463)),
                          (l = c(l, d, r, i, e[t + 11], 16, 1839030562)),
                          (i = c(i, l, d, r, e[t + 14], 23, -35309556)),
                          (r = c(r, i, l, d, e[t + 1], 4, -1530992060)),
                          (d = c(d, r, i, l, e[t + 4], 11, 1272893353)),
                          (l = c(l, d, r, i, e[t + 7], 16, -155497632)),
                          (i = c(i, l, d, r, e[t + 10], 23, -1094730640)),
                          (r = c(r, i, l, d, e[t + 13], 4, 681279174)),
                          (d = c(d, r, i, l, e[t], 11, -358537222)),
                          (l = c(l, d, r, i, e[t + 3], 16, -722521979)),
                          (i = c(i, l, d, r, e[t + 6], 23, 76029189)),
                          (r = c(r, i, l, d, e[t + 9], 4, -640364487)),
                          (d = c(d, r, i, l, e[t + 12], 11, -421815835)),
                          (l = c(l, d, r, i, e[t + 15], 16, 530742520)),
                          (i = c(i, l, d, r, e[t + 2], 23, -995338651)),
                          (r = u(r, i, l, d, e[t], 6, -198630844)),
                          (d = u(d, r, i, l, e[t + 7], 10, 1126891415)),
                          (l = u(l, d, r, i, e[t + 14], 15, -1416354905)),
                          (i = u(i, l, d, r, e[t + 5], 21, -57434055)),
                          (r = u(r, i, l, d, e[t + 12], 6, 1700485571)),
                          (d = u(d, r, i, l, e[t + 3], 10, -1894986606)),
                          (l = u(l, d, r, i, e[t + 10], 15, -1051523)),
                          (i = u(i, l, d, r, e[t + 1], 21, -2054922799)),
                          (r = u(r, i, l, d, e[t + 8], 6, 1873313359)),
                          (d = u(d, r, i, l, e[t + 15], 10, -30611744)),
                          (l = u(l, d, r, i, e[t + 6], 15, -1560198380)),
                          (i = u(i, l, d, r, e[t + 13], 21, 1309151649)),
                          (r = u(r, i, l, d, e[t + 4], 6, -145523070)),
                          (d = u(d, r, i, l, e[t + 11], 10, -1120210379)),
                          (l = u(l, d, r, i, e[t + 2], 15, 718787259)),
                          (i = u(i, l, d, r, e[t + 9], 21, -343485551)),
                          (r = s(r, n)),
                          (i = s(i, m)),
                          (l = s(l, f)),
                          (d = s(d, p));
                      }
                      return [r, i, l, d];
                    })(
                      (function (e) {
                        if (0 === e.length) return [];
                        const t = 8 * e.length,
                          r = new Uint32Array(n(t));
                        for (let n = 0; n < t; n += 8) r[n >> 5] |= (255 & e[n / 8]) << n % 32;
                        return r;
                      })(e),
                      8 * e.length
                    )
                  );
                };
                r.default = l;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/md5-browser.js',
      },
    ],
    [
      2071,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n = {
                  randomUUID:
                    'undefined' != typeof crypto &&
                    crypto.randomUUID &&
                    crypto.randomUUID.bind(crypto),
                };
                r.default = n;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/native-browser.js',
      },
    ],
    [
      2072,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                r.default = '00000000-0000-0000-0000-000000000000';
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/nil.js',
      },
    ],
    [
      2073,
      { './validate.js': 2083 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n,
                  s = (n = e('./validate.js')) && n.__esModule ? n : { default: n };
                var i = function (e) {
                  if (!(0, s.default)(e)) throw TypeError('Invalid UUID');
                  let t;
                  const r = new Uint8Array(16);
                  return (
                    (r[0] = (t = parseInt(e.slice(0, 8), 16)) >>> 24),
                    (r[1] = (t >>> 16) & 255),
                    (r[2] = (t >>> 8) & 255),
                    (r[3] = 255 & t),
                    (r[4] = (t = parseInt(e.slice(9, 13), 16)) >>> 8),
                    (r[5] = 255 & t),
                    (r[6] = (t = parseInt(e.slice(14, 18), 16)) >>> 8),
                    (r[7] = 255 & t),
                    (r[8] = (t = parseInt(e.slice(19, 23), 16)) >>> 8),
                    (r[9] = 255 & t),
                    (r[10] = ((t = parseInt(e.slice(24, 36), 16)) / 1099511627776) & 255),
                    (r[11] = (t / 4294967296) & 255),
                    (r[12] = (t >>> 24) & 255),
                    (r[13] = (t >>> 16) & 255),
                    (r[14] = (t >>> 8) & 255),
                    (r[15] = 255 & t),
                    r
                  );
                };
                r.default = i;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/parse.js',
      },
    ],
    [
      2074,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                r.default =
                  /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/regex.js',
      },
    ],
    [
      2075,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                let n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.default = function () {
                    if (
                      !n &&
                      ((n =
                        'undefined' != typeof crypto &&
                        crypto.getRandomValues &&
                        crypto.getRandomValues.bind(crypto)),
                      !n)
                    )
                      throw new Error(
                        'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported'
                      );
                    return n(s);
                  });
                const s = new Uint8Array(16);
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/rng-browser.js',
      },
    ],
    [
      2076,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                function n(e, t, r, n) {
                  switch (e) {
                    case 0:
                      return (t & r) ^ (~t & n);
                    case 1:
                    case 3:
                      return t ^ r ^ n;
                    case 2:
                      return (t & r) ^ (t & n) ^ (r & n);
                  }
                }
                function s(e, t) {
                  return (e << t) | (e >>> (32 - t));
                }
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var i = function (e) {
                  const t = [1518500249, 1859775393, 2400959708, 3395469782],
                    r = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
                  if ('string' == typeof e) {
                    const t = unescape(encodeURIComponent(e));
                    e = [];
                    for (let r = 0; r < t.length; ++r) e.push(t.charCodeAt(r));
                  } else Array.isArray(e) || (e = Array.prototype.slice.call(e));
                  e.push(128);
                  const i = e.length / 4 + 2,
                    o = Math.ceil(i / 16),
                    a = new Array(o);
                  for (let t = 0; t < o; ++t) {
                    const r = new Uint32Array(16);
                    for (let n = 0; n < 16; ++n)
                      r[n] =
                        (e[64 * t + 4 * n] << 24) |
                        (e[64 * t + 4 * n + 1] << 16) |
                        (e[64 * t + 4 * n + 2] << 8) |
                        e[64 * t + 4 * n + 3];
                    a[t] = r;
                  }
                  (a[o - 1][14] = (8 * (e.length - 1)) / Math.pow(2, 32)),
                    (a[o - 1][14] = Math.floor(a[o - 1][14])),
                    (a[o - 1][15] = (8 * (e.length - 1)) & 4294967295);
                  for (let e = 0; e < o; ++e) {
                    const i = new Uint32Array(80);
                    for (let t = 0; t < 16; ++t) i[t] = a[e][t];
                    for (let e = 16; e < 80; ++e)
                      i[e] = s(i[e - 3] ^ i[e - 8] ^ i[e - 14] ^ i[e - 16], 1);
                    let o = r[0],
                      c = r[1],
                      u = r[2],
                      l = r[3],
                      d = r[4];
                    for (let e = 0; e < 80; ++e) {
                      const r = Math.floor(e / 20),
                        a = (s(o, 5) + n(r, c, u, l) + d + t[r] + i[e]) >>> 0;
                      (d = l), (l = u), (u = s(c, 30) >>> 0), (c = o), (o = a);
                    }
                    (r[0] = (r[0] + o) >>> 0),
                      (r[1] = (r[1] + c) >>> 0),
                      (r[2] = (r[2] + u) >>> 0),
                      (r[3] = (r[3] + l) >>> 0),
                      (r[4] = (r[4] + d) >>> 0);
                  }
                  return [
                    (r[0] >> 24) & 255,
                    (r[0] >> 16) & 255,
                    (r[0] >> 8) & 255,
                    255 & r[0],
                    (r[1] >> 24) & 255,
                    (r[1] >> 16) & 255,
                    (r[1] >> 8) & 255,
                    255 & r[1],
                    (r[2] >> 24) & 255,
                    (r[2] >> 16) & 255,
                    (r[2] >> 8) & 255,
                    255 & r[2],
                    (r[3] >> 24) & 255,
                    (r[3] >> 16) & 255,
                    (r[3] >> 8) & 255,
                    255 & r[3],
                    (r[4] >> 24) & 255,
                    (r[4] >> 16) & 255,
                    (r[4] >> 8) & 255,
                    255 & r[4],
                  ];
                };
                r.default = i;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/sha1-browser.js',
      },
    ],
    [
      2077,
      { './validate.js': 2083 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.default = void 0),
                  (r.unsafeStringify = o);
                var n,
                  s = (n = e('./validate.js')) && n.__esModule ? n : { default: n };
                const i = [];
                for (let e = 0; e < 256; ++e) i.push((e + 256).toString(16).slice(1));
                function o(e, t = 0) {
                  return (
                    i[e[t + 0]] +
                    i[e[t + 1]] +
                    i[e[t + 2]] +
                    i[e[t + 3]] +
                    '-' +
                    i[e[t + 4]] +
                    i[e[t + 5]] +
                    '-' +
                    i[e[t + 6]] +
                    i[e[t + 7]] +
                    '-' +
                    i[e[t + 8]] +
                    i[e[t + 9]] +
                    '-' +
                    i[e[t + 10]] +
                    i[e[t + 11]] +
                    i[e[t + 12]] +
                    i[e[t + 13]] +
                    i[e[t + 14]] +
                    i[e[t + 15]]
                  );
                }
                var a = function (e, t = 0) {
                  const r = o(e, t);
                  if (!(0, s.default)(r)) throw TypeError('Stringified UUID is invalid');
                  return r;
                };
                r.default = a;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/stringify.js',
      },
    ],
    [
      2078,
      { './rng.js': 2075, './stringify.js': 2077 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n,
                  s = (n = e('./rng.js')) && n.__esModule ? n : { default: n },
                  i = e('./stringify.js');
                let o,
                  a,
                  c = 0,
                  u = 0;
                var l = function (e, t, r) {
                  let n = (t && r) || 0;
                  const l = t || new Array(16);
                  let d = (e = e || {}).node || o,
                    m = e.clockseq !== undefined ? e.clockseq : a;
                  if (null == d || null == m) {
                    const t = e.random || (e.rng || s.default)();
                    null == d && (d = o = [1 | t[0], t[1], t[2], t[3], t[4], t[5]]),
                      null == m && (m = a = 16383 & ((t[6] << 8) | t[7]));
                  }
                  let f = e.msecs !== undefined ? e.msecs : Date.now(),
                    p = e.nsecs !== undefined ? e.nsecs : u + 1;
                  const h = f - c + (p - u) / 1e4;
                  if (
                    (h < 0 && e.clockseq === undefined && (m = (m + 1) & 16383),
                    (h < 0 || f > c) && e.nsecs === undefined && (p = 0),
                    p >= 1e4)
                  )
                    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                  (c = f), (u = p), (a = m), (f += 122192928e5);
                  const g = (1e4 * (268435455 & f) + p) % 4294967296;
                  (l[n++] = (g >>> 24) & 255),
                    (l[n++] = (g >>> 16) & 255),
                    (l[n++] = (g >>> 8) & 255),
                    (l[n++] = 255 & g);
                  const y = ((f / 4294967296) * 1e4) & 268435455;
                  (l[n++] = (y >>> 8) & 255),
                    (l[n++] = 255 & y),
                    (l[n++] = ((y >>> 24) & 15) | 16),
                    (l[n++] = (y >>> 16) & 255),
                    (l[n++] = (m >>> 8) | 128),
                    (l[n++] = 255 & m);
                  for (let e = 0; e < 6; ++e) l[n + e] = d[e];
                  return t || (0, i.unsafeStringify)(l);
                };
                r.default = l;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/v1.js',
      },
    ],
    [
      2079,
      { './md5.js': 2070, './v35.js': 2080 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n = i(e('./v35.js')),
                  s = i(e('./md5.js'));
                function i(e) {
                  return e && e.__esModule ? e : { default: e };
                }
                var o = (0, n.default)('v3', 48, s.default);
                r.default = o;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/v3.js',
      },
    ],
    [
      2080,
      { './parse.js': 2073, './stringify.js': 2077 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.URL = r.DNS = void 0),
                  (r.default = function (e, t, r) {
                    function n(e, n, o, a) {
                      var c;
                      if (
                        ('string' == typeof e &&
                          (e = (function (e) {
                            e = unescape(encodeURIComponent(e));
                            const t = [];
                            for (let r = 0; r < e.length; ++r) t.push(e.charCodeAt(r));
                            return t;
                          })(e)),
                        'string' == typeof n && (n = (0, i.default)(n)),
                        16 !== (null === (c = n) || void 0 === c ? void 0 : c.length))
                      )
                        throw TypeError(
                          'Namespace must be array-like (16 iterable integer values, 0-255)'
                        );
                      let u = new Uint8Array(16 + e.length);
                      if (
                        (u.set(n),
                        u.set(e, n.length),
                        (u = r(u)),
                        (u[6] = (15 & u[6]) | t),
                        (u[8] = (63 & u[8]) | 128),
                        o)
                      ) {
                        a = a || 0;
                        for (let e = 0; e < 16; ++e) o[a + e] = u[e];
                        return o;
                      }
                      return (0, s.unsafeStringify)(u);
                    }
                    try {
                      n.name = e;
                    } catch (e) {}
                    return (n.DNS = o), (n.URL = a), n;
                  });
                var n,
                  s = e('./stringify.js'),
                  i = (n = e('./parse.js')) && n.__esModule ? n : { default: n };
                const o = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
                r.DNS = o;
                const a = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
                r.URL = a;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/v35.js',
      },
    ],
    [
      2081,
      { './native.js': 2071, './rng.js': 2075, './stringify.js': 2077 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n = o(e('./native.js')),
                  s = o(e('./rng.js')),
                  i = e('./stringify.js');
                function o(e) {
                  return e && e.__esModule ? e : { default: e };
                }
                var a = function (e, t, r) {
                  if (n.default.randomUUID && !t && !e) return n.default.randomUUID();
                  const o = (e = e || {}).random || (e.rng || s.default)();
                  if (((o[6] = (15 & o[6]) | 64), (o[8] = (63 & o[8]) | 128), t)) {
                    r = r || 0;
                    for (let e = 0; e < 16; ++e) t[r + e] = o[e];
                    return t;
                  }
                  return (0, i.unsafeStringify)(o);
                };
                r.default = a;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/v4.js',
      },
    ],
    [
      2082,
      { './sha1.js': 2076, './v35.js': 2080 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n = i(e('./v35.js')),
                  s = i(e('./sha1.js'));
                function i(e) {
                  return e && e.__esModule ? e : { default: e };
                }
                var o = (0, n.default)('v5', 80, s.default);
                r.default = o;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/v5.js',
      },
    ],
    [
      2083,
      { './regex.js': 2074 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n,
                  s = (n = e('./regex.js')) && n.__esModule ? n : { default: n };
                var i = function (e) {
                  return 'string' == typeof e && s.default.test(e);
                };
                r.default = i;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/validate.js',
      },
    ],
    [
      2084,
      { './validate.js': 2083 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.default = void 0);
                var n,
                  s = (n = e('./validate.js')) && n.__esModule ? n : { default: n };
                var i = function (e) {
                  if (!(0, s.default)(e)) throw TypeError('Invalid UUID');
                  return parseInt(e.slice(14, 15), 16);
                };
                r.default = i;
              };
            };
      },
      {
        package: '@metamask/keyring-snap-client>uuid',
        file: 'node_modules/@metamask/keyring-snap-client/node_modules/uuid/dist/version.js',
      },
    ],
    [
      2085,
      { './index.cjs': 2088, '@metamask/superstruct': 2913, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.JsonRpcRequestStruct = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils'),
                  i = e('./index.cjs');
                r.JsonRpcRequestStruct = (0, i.object)({
                  jsonrpc: (0, n.literal)('2.0'),
                  id: (0, n.union)([(0, n.string)(), (0, n.number)(), (0, n.literal)(null)]),
                  method: (0, n.string)(),
                  params: (0, i.exactOptional)(
                    (0, n.union)([
                      (0, n.array)(s.JsonStruct),
                      (0, n.record)((0, n.string)(), s.JsonStruct),
                    ])
                  ),
                });
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/JsonRpcRequest.cjs',
      },
    ],
    [
      2086,
      { 'bitcoin-address-validation': 4031 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isBtcMainnetAddress = function (e) {
                    return (0, n.validate)(e, n.Network.mainnet);
                  }),
                  (r.isBtcTestnetAddress = function (e) {
                    return (0, n.validate)(e, n.Network.testnet);
                  });
                const n = e('bitcoin-address-validation');
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/btc/address.cjs',
      },
    ],
    [
      2087,
      { './address.cjs': 2086 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), s(e('./address.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/btc/index.cjs',
      },
    ],
    [
      2088,
      {
        './JsonRpcRequest.cjs': 2085,
        './btc/index.cjs': 2087,
        './scopes.cjs': 2089,
        './superstruct.cjs': 2090,
        './types.cjs': 2091,
        './typing.cjs': 2092,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./btc/index.cjs'), r),
                  s(e('./types.cjs'), r),
                  s(e('./typing.cjs'), r),
                  s(e('./scopes.cjs'), r),
                  s(e('./superstruct.cjs'), r),
                  s(e('./JsonRpcRequest.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/index.cjs',
      },
    ],
    [
      2089,
      { '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.ETH_SCOPE_EOA = void 0),
                  (r.isScopeEqual = i),
                  (r.isScopeEqualToAny = function (e, t) {
                    return t.some(t => i(e, t));
                  });
                const n = e('@metamask/utils');
                r.ETH_SCOPE_EOA = `${n.KnownCaipNamespace.Eip155}:0`;
                const s = `${n.KnownCaipNamespace.Eip155}:`;
                function i(e, t) {
                  const n = e === r.ETH_SCOPE_EOA,
                    i = t === r.ETH_SCOPE_EOA;
                  return n ? t.startsWith(s) : i ? e.startsWith(s) : e === t;
                }
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/scopes.cjs',
      },
    ],
    [
      2090,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.object = function (e) {
                    return (0, n.object)(e);
                  }),
                  (r.exactOptional = function (e) {
                    return new n.Struct({
                      ...e,
                      validator: (t, r) => !s(r) || e.validator(t, r),
                      refiner: (t, r) => !s(r) || e.refiner(t, r),
                    });
                  }),
                  (r.strictMask = function (e, t, r) {
                    return (0, n.assert)(e, t, r), e;
                  }),
                  (r.selectiveUnion = function (e) {
                    return new n.Struct({
                      type: 'union',
                      schema: null,
                      *entries(t, r) {
                        yield* e(t).entries(t, r);
                      },
                      *refiner(t, r) {
                        yield* e(t).refiner(t, r);
                      },
                      coercer: (t, r) => e(t).coercer(t, r),
                      validator: (t, r) => e(t).validator(t, r),
                    });
                  });
                const n = e('@metamask/superstruct');
                function s(e) {
                  return e.path[e.path.length - 1] in e.branch[e.branch.length - 2];
                }
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/superstruct.cjs',
      },
    ],
    [
      2091,
      { '@metamask/superstruct': 2913, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.StringNumberStruct = r.UrlStruct = r.AccountIdStruct = r.UuidStruct = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils');
                (r.UuidStruct = (0, s.definePattern)(
                  'UuidV4',
                  /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/iu
                )),
                  (r.AccountIdStruct = r.UuidStruct),
                  (r.UrlStruct = (0, n.define)('Url', e => {
                    try {
                      const t = new URL(e);
                      return 'http:' === t.protocol || 'https:' === t.protocol;
                    } catch {
                      return !1;
                    }
                  })),
                  (r.StringNumberStruct = (0, s.definePattern)('StringNumber', /^\d+(\.\d+)?$/u));
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/types.cjs',
      },
    ],
    [
      2092,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.expectTrue = function () {});
              };
            };
      },
      {
        package: '@metamask/keyring-api>@metamask/keyring-utils',
        file: 'node_modules/@metamask/keyring-utils/dist/typing.cjs',
      },
    ],
    [
      2093,
      { '@metamask/base-controller': 1407, uuid: 5733 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.LoggingController = void 0);
                const o = e('@metamask/base-controller'),
                  a = e('uuid'),
                  c = 'LoggingController',
                  u = { logs: { persist: !0, anonymous: !1 } },
                  l = { logs: {} };
                class d extends o.BaseController {
                  constructor({ messenger: e, state: t }) {
                    super({ name: c, metadata: u, messenger: e, state: { ...l, ...t } }),
                      n.add(this),
                      this.messagingSystem.registerActionHandler(`${c}:add`, e => this.add(e));
                  }
                  add(e) {
                    const t = { id: i(this, n, 'm', s).call(this), timestamp: Date.now(), log: e };
                    this.update(e => {
                      e.logs[t.id] = t;
                    });
                  }
                  clear() {
                    this.update(e => {
                      e.logs = {};
                    });
                  }
                }
                (r.LoggingController = d),
                  (n = new WeakSet()),
                  (s = function () {
                    let e = (0, a.v1)();
                    for (; e in this.state.logs; ) e = (0, a.v1)();
                    return e;
                  });
              };
            };
      },
      {
        package: '@metamask/logging-controller',
        file: 'node_modules/@metamask/logging-controller/dist/LoggingController.cjs',
      },
    ],
    [
      2094,
      { './LoggingController.cjs': 2093, './logTypes/index.cjs': 2098 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./LoggingController.cjs'), r),
                  s(e('./logTypes/index.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/logging-controller',
        file: 'node_modules/@metamask/logging-controller/dist/index.cjs',
      },
    ],
    [
      2095,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n, s;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.SigningStage = r.SigningMethod = void 0),
                  (function (e) {
                    (e.PersonalSign = 'personal_sign'),
                      (e.EthSignTypedData = 'eth_signTypedData'),
                      (e.EthSignTypedDataV3 = 'eth_signTypedData_v3'),
                      (e.EthSignTypedDataV4 = 'eth_signTypedData_v4');
                  })(n || (r.SigningMethod = n = {})),
                  (function (e) {
                    (e.Proposed = 'proposed'), (e.Rejected = 'rejected'), (e.Signed = 'signed');
                  })(s || (r.SigningStage = s = {}));
              };
            };
      },
      {
        package: '@metamask/logging-controller',
        file: 'node_modules/@metamask/logging-controller/dist/logTypes/EthSignLog.cjs',
      },
    ],
    [
      2096,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/logging-controller',
        file: 'node_modules/@metamask/logging-controller/dist/logTypes/GenericLog.cjs',
      },
    ],
    [
      2097,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.LogType = void 0),
                  (function (e) {
                    (e.GenericLog = 'GenericLog'), (e.EthSignLog = 'EthSignLog');
                  })(n || (r.LogType = n = {}));
              };
            };
      },
      {
        package: '@metamask/logging-controller',
        file: 'node_modules/@metamask/logging-controller/dist/logTypes/LogType.cjs',
      },
    ],
    [
      2098,
      { './EthSignLog.cjs': 2095, './GenericLog.cjs': 2096, './LogType.cjs': 2097 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./EthSignLog.cjs'), r),
                  s(e('./GenericLog.cjs'), r),
                  s(e('./LogType.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/logging-controller',
        file: 'node_modules/@metamask/logging-controller/dist/logTypes/index.cjs',
      },
    ],
    [
      2109,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.abiERC1155 = void 0),
                  (r.abiERC1155 = [
                    {
                      inputs: [{ internalType: 'string', name: 'uri_', type: 'string' }],
                      stateMutability: 'nonpayable',
                      type: 'constructor',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'account', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'operator', type: 'address' },
                        { indexed: !1, internalType: 'bool', name: 'approved', type: 'bool' },
                      ],
                      name: 'ApprovalForAll',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'operator', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'from', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'to', type: 'address' },
                        { indexed: !1, internalType: 'uint256[]', name: 'ids', type: 'uint256[]' },
                        {
                          indexed: !1,
                          internalType: 'uint256[]',
                          name: 'values',
                          type: 'uint256[]',
                        },
                      ],
                      name: 'TransferBatch',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'operator', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'from', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'to', type: 'address' },
                        { indexed: !1, internalType: 'uint256', name: 'id', type: 'uint256' },
                        { indexed: !1, internalType: 'uint256', name: 'value', type: 'uint256' },
                      ],
                      name: 'TransferSingle',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !1, internalType: 'string', name: 'value', type: 'string' },
                        { indexed: !0, internalType: 'uint256', name: 'id', type: 'uint256' },
                      ],
                      name: 'URI',
                      type: 'event',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'account', type: 'address' },
                        { internalType: 'uint256', name: 'id', type: 'uint256' },
                      ],
                      name: 'balanceOf',
                      outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address[]', name: 'accounts', type: 'address[]' },
                        { internalType: 'uint256[]', name: 'ids', type: 'uint256[]' },
                      ],
                      name: 'balanceOfBatch',
                      outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'account', type: 'address' },
                        { internalType: 'address', name: 'operator', type: 'address' },
                      ],
                      name: 'isApprovedForAll',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256[]', name: 'ids', type: 'uint256[]' },
                        { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },
                        { internalType: 'bytes', name: 'data', type: 'bytes' },
                      ],
                      name: 'safeBatchTransferFrom',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'id', type: 'uint256' },
                        { internalType: 'uint256', name: 'amount', type: 'uint256' },
                        { internalType: 'bytes', name: 'data', type: 'bytes' },
                      ],
                      name: 'safeTransferFrom',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'operator', type: 'address' },
                        { internalType: 'bool', name: 'approved', type: 'bool' },
                      ],
                      name: 'setApprovalForAll',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
                      name: 'supportsInterface',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      name: 'uri',
                      outputs: [{ internalType: 'string', name: '', type: 'string' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                  ]);
              };
            };
      },
      {
        package: '@metamask/metamask-eth-abis',
        file: 'node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC1155.js',
      },
    ],
    [
      2110,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.abiERC20 = void 0),
                  (r.abiERC20 = [
                    {
                      constant: !0,
                      inputs: [],
                      name: 'name',
                      outputs: [{ name: '', type: 'string' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_spender', type: 'address' },
                        { name: '_value', type: 'uint256' },
                      ],
                      name: 'approve',
                      outputs: [{ name: 'success', type: 'bool' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'totalSupply',
                      outputs: [{ name: '', type: 'uint256' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_from', type: 'address' },
                        { name: '_to', type: 'address' },
                        { name: '_value', type: 'uint256' },
                      ],
                      name: 'transferFrom',
                      outputs: [{ name: 'success', type: 'bool' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'decimals',
                      outputs: [{ name: '', type: 'uint256' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'version',
                      outputs: [{ name: '', type: 'string' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [{ name: '_owner', type: 'address' }],
                      name: 'balanceOf',
                      outputs: [{ name: 'balance', type: 'uint256' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'symbol',
                      outputs: [{ name: '', type: 'string' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_to', type: 'address' },
                        { name: '_value', type: 'uint256' },
                      ],
                      name: 'transfer',
                      outputs: [{ name: 'success', type: 'bool' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_spender', type: 'address' },
                        { name: '_value', type: 'uint256' },
                        { name: '_extraData', type: 'bytes' },
                      ],
                      name: 'approveAndCall',
                      outputs: [{ name: 'success', type: 'bool' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [
                        { name: '_owner', type: 'address' },
                        { name: '_spender', type: 'address' },
                      ],
                      name: 'allowance',
                      outputs: [{ name: 'remaining', type: 'uint256' }],
                      payable: !1,
                      type: 'function',
                    },
                    {
                      inputs: [
                        { name: '_initialAmount', type: 'uint256' },
                        { name: '_tokenName', type: 'string' },
                        { name: '_decimalUnits', type: 'uint8' },
                        { name: '_tokenSymbol', type: 'string' },
                      ],
                      type: 'constructor',
                    },
                    { payable: !1, type: 'fallback' },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, name: '_from', type: 'address' },
                        { indexed: !0, name: '_to', type: 'address' },
                        { indexed: !1, name: '_value', type: 'uint256' },
                      ],
                      name: 'Transfer',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, name: '_owner', type: 'address' },
                        { indexed: !0, name: '_spender', type: 'address' },
                        { indexed: !1, name: '_value', type: 'uint256' },
                      ],
                      name: 'Approval',
                      type: 'event',
                    },
                  ]);
              };
            };
      },
      {
        package: '@metamask/metamask-eth-abis',
        file: 'node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC20.js',
      },
    ],
    [
      2111,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.abiERC721 = void 0),
                  (r.abiERC721 = [
                    {
                      constant: !0,
                      inputs: [{ name: 'interfaceID', type: 'bytes4' }],
                      name: 'supportsInterface',
                      outputs: [{ name: '', type: 'bool' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'name',
                      outputs: [{ name: '_name', type: 'string' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [{ name: '_tokenId', type: 'uint256' }],
                      name: 'getApproved',
                      outputs: [{ name: '', type: 'address' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_approved', type: 'address' },
                        { name: '_tokenId', type: 'uint256' },
                      ],
                      name: 'approve',
                      outputs: [],
                      payable: !0,
                      stateMutability: 'payable',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'totalSupply',
                      outputs: [{ name: '', type: 'uint256' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_from', type: 'address' },
                        { name: '_to', type: 'address' },
                        { name: '_tokenId', type: 'uint256' },
                      ],
                      name: 'transferFrom',
                      outputs: [],
                      payable: !0,
                      stateMutability: 'payable',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [
                        { name: '_owner', type: 'address' },
                        { name: '_index', type: 'uint256' },
                      ],
                      name: 'tokenOfOwnerByIndex',
                      outputs: [{ name: '', type: 'uint256' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_from', type: 'address' },
                        { name: '_to', type: 'address' },
                        { name: '_tokenId', type: 'uint256' },
                      ],
                      name: 'safeTransferFrom',
                      outputs: [],
                      payable: !0,
                      stateMutability: 'payable',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [{ name: '_index', type: 'uint256' }],
                      name: 'tokenByIndex',
                      outputs: [{ name: '', type: 'uint256' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [{ name: '_tokenId', type: 'uint256' }],
                      name: 'ownerOf',
                      outputs: [{ name: '', type: 'address' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [{ name: '_owner', type: 'address' }],
                      name: 'balanceOf',
                      outputs: [{ name: '', type: 'uint256' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [],
                      name: 'symbol',
                      outputs: [{ name: '_symbol', type: 'string' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_operator', type: 'address' },
                        { name: '_approved', type: 'bool' },
                      ],
                      name: 'setApprovalForAll',
                      outputs: [],
                      payable: !1,
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      constant: !1,
                      inputs: [
                        { name: '_from', type: 'address' },
                        { name: '_to', type: 'address' },
                        { name: '_tokenId', type: 'uint256' },
                        { name: 'data', type: 'bytes' },
                      ],
                      name: 'safeTransferFrom',
                      outputs: [],
                      payable: !0,
                      stateMutability: 'payable',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [{ name: '_tokenId', type: 'uint256' }],
                      name: 'tokenURI',
                      outputs: [{ name: '', type: 'string' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      constant: !0,
                      inputs: [
                        { name: '_owner', type: 'address' },
                        { name: '_operator', type: 'address' },
                      ],
                      name: 'isApprovedForAll',
                      outputs: [{ name: '', type: 'bool' }],
                      payable: !1,
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, name: '_from', type: 'address' },
                        { indexed: !0, name: '_to', type: 'address' },
                        { indexed: !0, name: '_tokenId', type: 'uint256' },
                      ],
                      name: 'Transfer',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, name: '_owner', type: 'address' },
                        { indexed: !0, name: '_approved', type: 'address' },
                        { indexed: !0, name: '_tokenId', type: 'uint256' },
                      ],
                      name: 'Approval',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, name: '_owner', type: 'address' },
                        { indexed: !0, name: '_operator', type: 'address' },
                        { indexed: !1, name: '_approved', type: 'bool' },
                      ],
                      name: 'ApprovalForAll',
                      type: 'event',
                    },
                  ]);
              };
            };
      },
      {
        package: '@metamask/metamask-eth-abis',
        file: 'node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC721.js',
      },
    ],
    [
      2112,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.abiFiatTokenV2 = void 0),
                  (r.abiFiatTokenV2 = [
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'owner', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'spender', type: 'address' },
                        { indexed: !1, internalType: 'uint256', name: 'value', type: 'uint256' },
                      ],
                      name: 'Approval',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'authorizer',
                          type: 'address',
                        },
                        { indexed: !0, internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                      ],
                      name: 'AuthorizationCanceled',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'authorizer',
                          type: 'address',
                        },
                        { indexed: !0, internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                      ],
                      name: 'AuthorizationUsed',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: '_account', type: 'address' },
                      ],
                      name: 'Blacklisted',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'newBlacklister',
                          type: 'address',
                        },
                      ],
                      name: 'BlacklisterChanged',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'burner', type: 'address' },
                        { indexed: !1, internalType: 'uint256', name: 'amount', type: 'uint256' },
                      ],
                      name: 'Burn',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'newMasterMinter',
                          type: 'address',
                        },
                      ],
                      name: 'MasterMinterChanged',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'minter', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'to', type: 'address' },
                        { indexed: !1, internalType: 'uint256', name: 'amount', type: 'uint256' },
                      ],
                      name: 'Mint',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'minter', type: 'address' },
                        {
                          indexed: !1,
                          internalType: 'uint256',
                          name: 'minterAllowedAmount',
                          type: 'uint256',
                        },
                      ],
                      name: 'MinterConfigured',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'oldMinter',
                          type: 'address',
                        },
                      ],
                      name: 'MinterRemoved',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !1,
                          internalType: 'address',
                          name: 'previousOwner',
                          type: 'address',
                        },
                        { indexed: !1, internalType: 'address', name: 'newOwner', type: 'address' },
                      ],
                      name: 'OwnershipTransferred',
                      type: 'event',
                    },
                    { anonymous: !1, inputs: [], name: 'Pause', type: 'event' },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'newAddress',
                          type: 'address',
                        },
                      ],
                      name: 'PauserChanged',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        {
                          indexed: !0,
                          internalType: 'address',
                          name: 'newRescuer',
                          type: 'address',
                        },
                      ],
                      name: 'RescuerChanged',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: 'from', type: 'address' },
                        { indexed: !0, internalType: 'address', name: 'to', type: 'address' },
                        { indexed: !1, internalType: 'uint256', name: 'value', type: 'uint256' },
                      ],
                      name: 'Transfer',
                      type: 'event',
                    },
                    {
                      anonymous: !1,
                      inputs: [
                        { indexed: !0, internalType: 'address', name: '_account', type: 'address' },
                      ],
                      name: 'UnBlacklisted',
                      type: 'event',
                    },
                    { anonymous: !1, inputs: [], name: 'Unpause', type: 'event' },
                    {
                      inputs: [],
                      name: 'CANCEL_AUTHORIZATION_TYPEHASH',
                      outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'DOMAIN_SEPARATOR',
                      outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'PERMIT_TYPEHASH',
                      outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'RECEIVE_WITH_AUTHORIZATION_TYPEHASH',
                      outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'TRANSFER_WITH_AUTHORIZATION_TYPEHASH',
                      outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'owner', type: 'address' },
                        { internalType: 'address', name: 'spender', type: 'address' },
                      ],
                      name: 'allowance',
                      outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'spender', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                      ],
                      name: 'approve',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'authorizer', type: 'address' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                      ],
                      name: 'authorizationState',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
                      name: 'balanceOf',
                      outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: '_account', type: 'address' }],
                      name: 'blacklist',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'blacklister',
                      outputs: [{ internalType: 'address', name: '', type: 'address' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'uint256', name: '_amount', type: 'uint256' }],
                      name: 'burn',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'authorizer', type: 'address' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                        { internalType: 'uint8', name: 'v', type: 'uint8' },
                        { internalType: 'bytes32', name: 'r', type: 'bytes32' },
                        { internalType: 'bytes32', name: 's', type: 'bytes32' },
                      ],
                      name: 'cancelAuthorization',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'authorizer', type: 'address' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                        { internalType: 'bytes', name: 'signature', type: 'bytes' },
                      ],
                      name: 'cancelAuthorization',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'minter', type: 'address' },
                        { internalType: 'uint256', name: 'minterAllowedAmount', type: 'uint256' },
                      ],
                      name: 'configureMinter',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'currency',
                      outputs: [{ internalType: 'string', name: '', type: 'string' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'decimals',
                      outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'spender', type: 'address' },
                        { internalType: 'uint256', name: 'decrement', type: 'uint256' },
                      ],
                      name: 'decreaseAllowance',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'spender', type: 'address' },
                        { internalType: 'uint256', name: 'increment', type: 'uint256' },
                      ],
                      name: 'increaseAllowance',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'string', name: 'tokenName', type: 'string' },
                        { internalType: 'string', name: 'tokenSymbol', type: 'string' },
                        { internalType: 'string', name: 'tokenCurrency', type: 'string' },
                        { internalType: 'uint8', name: 'tokenDecimals', type: 'uint8' },
                        { internalType: 'address', name: 'newMasterMinter', type: 'address' },
                        { internalType: 'address', name: 'newPauser', type: 'address' },
                        { internalType: 'address', name: 'newBlacklister', type: 'address' },
                        { internalType: 'address', name: 'newOwner', type: 'address' },
                      ],
                      name: 'initialize',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'string', name: 'newName', type: 'string' }],
                      name: 'initializeV2',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'lostAndFound', type: 'address' }],
                      name: 'initializeV2_1',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        {
                          internalType: 'address[]',
                          name: 'accountsToBlacklist',
                          type: 'address[]',
                        },
                        { internalType: 'string', name: 'newSymbol', type: 'string' },
                      ],
                      name: 'initializeV2_2',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: '_account', type: 'address' }],
                      name: 'isBlacklisted',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
                      name: 'isMinter',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'masterMinter',
                      outputs: [{ internalType: 'address', name: '', type: 'address' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: '_to', type: 'address' },
                        { internalType: 'uint256', name: '_amount', type: 'uint256' },
                      ],
                      name: 'mint',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'minter', type: 'address' }],
                      name: 'minterAllowance',
                      outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'name',
                      outputs: [{ internalType: 'string', name: '', type: 'string' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],
                      name: 'nonces',
                      outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'owner',
                      outputs: [{ internalType: 'address', name: '', type: 'address' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'pause',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'paused',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'pauser',
                      outputs: [{ internalType: 'address', name: '', type: 'address' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'owner', type: 'address' },
                        { internalType: 'address', name: 'spender', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                        { internalType: 'uint256', name: 'deadline', type: 'uint256' },
                        { internalType: 'bytes', name: 'signature', type: 'bytes' },
                      ],
                      name: 'permit',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'owner', type: 'address' },
                        { internalType: 'address', name: 'spender', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                        { internalType: 'uint256', name: 'deadline', type: 'uint256' },
                        { internalType: 'uint8', name: 'v', type: 'uint8' },
                        { internalType: 'bytes32', name: 'r', type: 'bytes32' },
                        { internalType: 'bytes32', name: 's', type: 'bytes32' },
                      ],
                      name: 'permit',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                        { internalType: 'uint256', name: 'validAfter', type: 'uint256' },
                        { internalType: 'uint256', name: 'validBefore', type: 'uint256' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                        { internalType: 'bytes', name: 'signature', type: 'bytes' },
                      ],
                      name: 'receiveWithAuthorization',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                        { internalType: 'uint256', name: 'validAfter', type: 'uint256' },
                        { internalType: 'uint256', name: 'validBefore', type: 'uint256' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                        { internalType: 'uint8', name: 'v', type: 'uint8' },
                        { internalType: 'bytes32', name: 'r', type: 'bytes32' },
                        { internalType: 'bytes32', name: 's', type: 'bytes32' },
                      ],
                      name: 'receiveWithAuthorization',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'minter', type: 'address' }],
                      name: 'removeMinter',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'contract IERC20', name: 'tokenContract', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'amount', type: 'uint256' },
                      ],
                      name: 'rescueERC20',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'rescuer',
                      outputs: [{ internalType: 'address', name: '', type: 'address' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'symbol',
                      outputs: [{ internalType: 'string', name: '', type: 'string' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'totalSupply',
                      outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
                      stateMutability: 'view',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                      ],
                      name: 'transfer',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                      ],
                      name: 'transferFrom',
                      outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
                      name: 'transferOwnership',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                        { internalType: 'uint256', name: 'validAfter', type: 'uint256' },
                        { internalType: 'uint256', name: 'validBefore', type: 'uint256' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                        { internalType: 'bytes', name: 'signature', type: 'bytes' },
                      ],
                      name: 'transferWithAuthorization',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: 'from', type: 'address' },
                        { internalType: 'address', name: 'to', type: 'address' },
                        { internalType: 'uint256', name: 'value', type: 'uint256' },
                        { internalType: 'uint256', name: 'validAfter', type: 'uint256' },
                        { internalType: 'uint256', name: 'validBefore', type: 'uint256' },
                        { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
                        { internalType: 'uint8', name: 'v', type: 'uint8' },
                        { internalType: 'bytes32', name: 'r', type: 'bytes32' },
                        { internalType: 'bytes32', name: 's', type: 'bytes32' },
                      ],
                      name: 'transferWithAuthorization',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: '_account', type: 'address' }],
                      name: 'unBlacklist',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'unpause',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: '_newBlacklister', type: 'address' },
                      ],
                      name: 'updateBlacklister',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [
                        { internalType: 'address', name: '_newMasterMinter', type: 'address' },
                      ],
                      name: 'updateMasterMinter',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: '_newPauser', type: 'address' }],
                      name: 'updatePauser',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [{ internalType: 'address', name: 'newRescuer', type: 'address' }],
                      name: 'updateRescuer',
                      outputs: [],
                      stateMutability: 'nonpayable',
                      type: 'function',
                    },
                    {
                      inputs: [],
                      name: 'version',
                      outputs: [{ internalType: 'string', name: '', type: 'string' }],
                      stateMutability: 'pure',
                      type: 'function',
                    },
                  ]);
              };
            };
      },
      {
        package: '@metamask/metamask-eth-abis',
        file: 'node_modules/@metamask/metamask-eth-abis/dist/abis/fiatTokenV2.js',
      },
    ],
    [
      2113,
      {
        './abis/abiERC1155': 2109,
        './abis/abiERC20': 2110,
        './abis/abiERC721': 2111,
        './abis/fiatTokenV2': 2112,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.abiFiatTokenV2 = r.abiERC1155 = r.abiERC721 = r.abiERC20 = void 0);
                const n = e('./abis/abiERC20');
                Object.defineProperty(r, 'abiERC20', {
                  enumerable: !0,
                  get: function () {
                    return n.abiERC20;
                  },
                });
                const s = e('./abis/abiERC721');
                Object.defineProperty(r, 'abiERC721', {
                  enumerable: !0,
                  get: function () {
                    return s.abiERC721;
                  },
                });
                const i = e('./abis/abiERC1155');
                Object.defineProperty(r, 'abiERC1155', {
                  enumerable: !0,
                  get: function () {
                    return i.abiERC1155;
                  },
                });
                const o = e('./abis/fiatTokenV2');
                Object.defineProperty(r, 'abiFiatTokenV2', {
                  enumerable: !0,
                  get: function () {
                    return o.abiFiatTokenV2;
                  },
                });
              };
            };
      },
      {
        package: '@metamask/metamask-eth-abis',
        file: 'node_modules/@metamask/metamask-eth-abis/dist/index.js',
      },
    ],
    [
      2139,
      {
        './constants.cjs': 2140,
        './types.cjs': 2142,
        './utils.cjs': 2143,
        '@metamask/base-controller': 1407,
        '@metamask/keyring-api': 2014,
        '@metamask/utils': 2995,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MultichainNetworkController = void 0);
                const m = e('@metamask/base-controller'),
                  f = e('@metamask/keyring-api'),
                  p = e('@metamask/utils'),
                  h = e('./constants.cjs'),
                  g = e('./types.cjs'),
                  y = e('./utils.cjs');
                class w extends m.BaseController {
                  constructor({ messenger: e, state: t }) {
                    super({
                      messenger: e,
                      name: g.MULTICHAIN_NETWORK_CONTROLLER_NAME,
                      metadata: h.MULTICHAIN_NETWORK_CONTROLLER_METADATA,
                      state: {
                        ...(0, h.getDefaultMultichainNetworkControllerState)(),
                        ...t,
                        multichainNetworkConfigurationsByChainId:
                          h.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS,
                      },
                    }),
                      n.add(this),
                      d(this, n, 'm', u).call(this),
                      d(this, n, 'm', l).call(this);
                  }
                  async setActiveNetwork(e) {
                    if ((0, p.isCaipChainId)(e)) {
                      if (!(0, y.checkIfSupportedCaipChainId)(e))
                        throw new Error(`Unsupported Caip chain ID: ${String(e)}`);
                      return d(this, n, 'm', i).call(this, e);
                    }
                    return await d(this, n, 'm', s).call(this, e);
                  }
                  async removeNetwork(e) {
                    return (0, y.isEvmCaipChainId)(e)
                      ? await d(this, n, 'm', o).call(this, e)
                      : d(this, n, 'm', a).call(this, e);
                  }
                }
                (r.MultichainNetworkController = w),
                  (n = new WeakSet()),
                  (s = async function (e) {
                    const { selectedNetworkClientId: t } = this.messagingSystem.call(
                        'NetworkController:getState'
                      ),
                      r = !this.state.isEvmSelected,
                      n = e !== t;
                    (r || n) &&
                      (r &&
                        this.update(e => {
                          e.isEvmSelected = !0;
                        }),
                      n &&
                        (await this.messagingSystem.call('NetworkController:setActiveNetwork', e)),
                      (r || n) &&
                        this.messagingSystem.publish(
                          'MultichainNetworkController:networkDidChange',
                          e
                        ));
                  }),
                  (i = function (e) {
                    (e !== this.state.selectedMultichainNetworkChainId ||
                      this.state.isEvmSelected) &&
                      (this.update(t => {
                        (t.selectedMultichainNetworkChainId = e), (t.isEvmSelected = !1);
                      }),
                      this.messagingSystem.publish(
                        'MultichainNetworkController:networkDidChange',
                        e
                      ));
                  }),
                  (o = async function (e) {
                    const t = (0, y.convertEvmCaipToHexChainId)(e);
                    if (this.messagingSystem.call('NetworkController:getSelectedChainId') === t) {
                      if (this.state.isEvmSelected)
                        throw new Error('Cannot remove the currently selected network');
                      const e = '0x1',
                        t = this.messagingSystem.call(
                          'NetworkController:findNetworkClientIdByChainId',
                          e
                        );
                      await this.messagingSystem.call('NetworkController:setActiveNetwork', t);
                    }
                    this.messagingSystem.call('NetworkController:removeNetwork', t);
                  }),
                  (a = function (e) {
                    throw new Error('Removal of non-EVM networks is not supported');
                  }),
                  (c = function (e) {
                    const { type: t, address: r, scopes: n } = e;
                    if ((0, f.isEvmAccountType)(t)) {
                      if (this.state.isEvmSelected) return;
                      return void this.update(e => {
                        e.isEvmSelected = !0;
                      });
                    }
                    if (n.includes(this.state.selectedMultichainNetworkChainId))
                      return void this.update(e => {
                        e.isEvmSelected = !1;
                      });
                    const s = (0, y.getChainIdForNonEvmAddress)(r);
                    this.update(e => {
                      (e.selectedMultichainNetworkChainId = s), (e.isEvmSelected = !1);
                    });
                  }),
                  (u = function () {
                    this.messagingSystem.subscribe('AccountsController:selectedAccountChange', e =>
                      d(this, n, 'm', c).call(this, e)
                    );
                  }),
                  (l = function () {
                    this.messagingSystem.registerActionHandler(
                      'MultichainNetworkController:setActiveNetwork',
                      this.setActiveNetwork.bind(this)
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller',
        file: 'node_modules/@metamask/multichain-network-controller/dist/MultichainNetworkController.cjs',
      },
    ],
    [
      2140,
      { '@metamask/keyring-api': 2014, '@metamask/network-controller': 2202 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MULTICHAIN_NETWORK_DECIMAL_PLACES =
                    r.MULTICHAIN_NETWORK_TICKER =
                    r.MULTICHAIN_NETWORK_CONTROLLER_METADATA =
                    r.getDefaultMultichainNetworkControllerState =
                    r.NETWORKS_METADATA =
                    r.NON_EVM_TESTNET_IDS =
                    r.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS =
                    r.SOL_DEVNET_NATIVE_ASSET =
                    r.SOL_TESTNET_NATIVE_ASSET =
                    r.SOL_NATIVE_ASSET =
                    r.BTC_SIGNET_NATIVE_ASSET =
                    r.BTC_TESTNET_NATIVE_ASSET =
                    r.BTC_NATIVE_ASSET =
                      void 0);
                const n = e('@metamask/keyring-api'),
                  s = e('@metamask/network-controller');
                (r.BTC_NATIVE_ASSET = `${n.BtcScope.Mainnet}/slip44:0`),
                  (r.BTC_TESTNET_NATIVE_ASSET = `${n.BtcScope.Testnet}/slip44:0`),
                  (r.BTC_SIGNET_NATIVE_ASSET = `${n.BtcScope.Signet}/slip44:0`),
                  (r.SOL_NATIVE_ASSET = `${n.SolScope.Mainnet}/slip44:501`),
                  (r.SOL_TESTNET_NATIVE_ASSET = `${n.SolScope.Testnet}/slip44:501`),
                  (r.SOL_DEVNET_NATIVE_ASSET = `${n.SolScope.Devnet}/slip44:501`),
                  (r.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS = {
                    [n.BtcScope.Mainnet]: {
                      chainId: n.BtcScope.Mainnet,
                      name: 'Bitcoin',
                      nativeCurrency: r.BTC_NATIVE_ASSET,
                      isEvm: !1,
                    },
                    [n.BtcScope.Testnet]: {
                      chainId: n.BtcScope.Testnet,
                      name: 'Bitcoin Testnet',
                      nativeCurrency: r.BTC_TESTNET_NATIVE_ASSET,
                      isEvm: !1,
                    },
                    [n.BtcScope.Signet]: {
                      chainId: n.BtcScope.Signet,
                      name: 'Bitcoin Signet',
                      nativeCurrency: r.BTC_SIGNET_NATIVE_ASSET,
                      isEvm: !1,
                    },
                    [n.SolScope.Mainnet]: {
                      chainId: n.SolScope.Mainnet,
                      name: 'Solana',
                      nativeCurrency: r.SOL_NATIVE_ASSET,
                      isEvm: !1,
                    },
                    [n.SolScope.Testnet]: {
                      chainId: n.SolScope.Testnet,
                      name: 'Solana Testnet',
                      nativeCurrency: r.SOL_TESTNET_NATIVE_ASSET,
                      isEvm: !1,
                    },
                    [n.SolScope.Devnet]: {
                      chainId: n.SolScope.Devnet,
                      name: 'Solana Devnet',
                      nativeCurrency: r.SOL_DEVNET_NATIVE_ASSET,
                      isEvm: !1,
                    },
                  }),
                  (r.NON_EVM_TESTNET_IDS = [
                    n.BtcScope.Testnet,
                    n.BtcScope.Signet,
                    n.SolScope.Testnet,
                    n.SolScope.Devnet,
                  ]),
                  (r.NETWORKS_METADATA = {
                    [n.BtcScope.Mainnet]: { features: [], status: s.NetworkStatus.Available },
                    [n.SolScope.Mainnet]: { features: [], status: s.NetworkStatus.Available },
                  });
                (r.getDefaultMultichainNetworkControllerState = () => ({
                  multichainNetworkConfigurationsByChainId:
                    r.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS,
                  selectedMultichainNetworkChainId: n.SolScope.Mainnet,
                  isEvmSelected: !0,
                })),
                  (r.MULTICHAIN_NETWORK_CONTROLLER_METADATA = {
                    multichainNetworkConfigurationsByChainId: { persist: !0, anonymous: !0 },
                    selectedMultichainNetworkChainId: { persist: !0, anonymous: !0 },
                    isEvmSelected: { persist: !0, anonymous: !0 },
                  }),
                  (r.MULTICHAIN_NETWORK_TICKER = {
                    [n.BtcScope.Mainnet]: 'BTC',
                    [n.BtcScope.Testnet]: 'tBTC',
                    [n.BtcScope.Signet]: 'sBTC',
                    [n.SolScope.Mainnet]: 'SOL',
                    [n.SolScope.Testnet]: 'tSOL',
                    [n.SolScope.Devnet]: 'dSOL',
                  }),
                  (r.MULTICHAIN_NETWORK_DECIMAL_PLACES = {
                    [n.BtcScope.Mainnet]: 8,
                    [n.BtcScope.Testnet]: 8,
                    [n.BtcScope.Signet]: 8,
                    [n.SolScope.Mainnet]: 5,
                    [n.SolScope.Testnet]: 5,
                    [n.SolScope.Devnet]: 5,
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller',
        file: 'node_modules/@metamask/multichain-network-controller/dist/constants.cjs',
      },
    ],
    [
      2141,
      { './MultichainNetworkController.cjs': 2139, './constants.cjs': 2140, './utils.cjs': 2143 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toEvmCaipChainId =
                    r.toMultichainNetworkConfigurationsByChainId =
                    r.toMultichainNetworkConfiguration =
                    r.checkIfSupportedCaipChainId =
                    r.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS =
                    r.MULTICHAIN_NETWORK_DECIMAL_PLACES =
                    r.MULTICHAIN_NETWORK_TICKER =
                    r.NON_EVM_TESTNET_IDS =
                    r.getDefaultMultichainNetworkControllerState =
                    r.MultichainNetworkController =
                      void 0);
                var n = e('./MultichainNetworkController.cjs');
                Object.defineProperty(r, 'MultichainNetworkController', {
                  enumerable: !0,
                  get: function () {
                    return n.MultichainNetworkController;
                  },
                });
                var s = e('./constants.cjs');
                Object.defineProperty(r, 'getDefaultMultichainNetworkControllerState', {
                  enumerable: !0,
                  get: function () {
                    return s.getDefaultMultichainNetworkControllerState;
                  },
                }),
                  Object.defineProperty(r, 'NON_EVM_TESTNET_IDS', {
                    enumerable: !0,
                    get: function () {
                      return s.NON_EVM_TESTNET_IDS;
                    },
                  }),
                  Object.defineProperty(r, 'MULTICHAIN_NETWORK_TICKER', {
                    enumerable: !0,
                    get: function () {
                      return s.MULTICHAIN_NETWORK_TICKER;
                    },
                  }),
                  Object.defineProperty(r, 'MULTICHAIN_NETWORK_DECIMAL_PLACES', {
                    enumerable: !0,
                    get: function () {
                      return s.MULTICHAIN_NETWORK_DECIMAL_PLACES;
                    },
                  }),
                  Object.defineProperty(r, 'AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS', {
                    enumerable: !0,
                    get: function () {
                      return s.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS;
                    },
                  });
                var i = e('./utils.cjs');
                Object.defineProperty(r, 'checkIfSupportedCaipChainId', {
                  enumerable: !0,
                  get: function () {
                    return i.checkIfSupportedCaipChainId;
                  },
                }),
                  Object.defineProperty(r, 'toMultichainNetworkConfiguration', {
                    enumerable: !0,
                    get: function () {
                      return i.toMultichainNetworkConfiguration;
                    },
                  }),
                  Object.defineProperty(r, 'toMultichainNetworkConfigurationsByChainId', {
                    enumerable: !0,
                    get: function () {
                      return i.toMultichainNetworkConfigurationsByChainId;
                    },
                  }),
                  Object.defineProperty(r, 'toEvmCaipChainId', {
                    enumerable: !0,
                    get: function () {
                      return i.toEvmCaipChainId;
                    },
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller',
        file: 'node_modules/@metamask/multichain-network-controller/dist/index.cjs',
      },
    ],
    [
      2142,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MULTICHAIN_NETWORK_CONTROLLER_NAME = void 0),
                  (r.MULTICHAIN_NETWORK_CONTROLLER_NAME = 'MultichainNetworkController');
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller',
        file: 'node_modules/@metamask/multichain-network-controller/dist/types.cjs',
      },
    ],
    [
      2143,
      {
        './constants.cjs': 2140,
        '@metamask/keyring-api': 2014,
        '@metamask/utils': 2995,
        '@solana/addresses': 2144,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toMultichainNetworkConfigurationsByChainId =
                    r.toMultichainNetworkConfiguration =
                    r.convertEvmCaipToHexChainId =
                    r.toEvmCaipChainId =
                    r.checkIfSupportedCaipChainId =
                    r.getChainIdForNonEvmAddress =
                    r.isEvmCaipChainId =
                      void 0);
                const n = e('@metamask/keyring-api'),
                  s = e('@metamask/utils'),
                  i = e('@solana/addresses'),
                  o = e('./constants.cjs');
                (r.isEvmCaipChainId = function (e) {
                  const { namespace: t } = (0, s.parseCaipChainId)(e);
                  return t === s.KnownCaipNamespace.Eip155;
                }),
                  (r.getChainIdForNonEvmAddress = function (e) {
                    return (0, i.isAddress)(e) ? n.SolScope.Mainnet : n.BtcScope.Mainnet;
                  }),
                  (r.checkIfSupportedCaipChainId = function (e) {
                    return Object.keys(o.AVAILABLE_MULTICHAIN_NETWORK_CONFIGURATIONS).includes(e);
                  });
                (r.toEvmCaipChainId = e =>
                  (0, s.toCaipChainId)(
                    s.KnownCaipNamespace.Eip155,
                    (0, s.hexToNumber)(e).toString()
                  )),
                  (r.convertEvmCaipToHexChainId = function (e) {
                    const { namespace: t, reference: r } = (0, s.parseCaipChainId)(e);
                    if (t === s.KnownCaipNamespace.Eip155)
                      return (0, s.add0x)(parseInt(r, 10).toString(16));
                    throw new Error(
                      `Unsupported CAIP chain ID namespace: ${t}. Only eip155 is supported.`
                    );
                  });
                r.toMultichainNetworkConfiguration = e => {
                  const {
                    chainId: t,
                    name: n,
                    rpcEndpoints: s,
                    defaultRpcEndpointIndex: i,
                    nativeCurrency: o,
                    blockExplorerUrls: a,
                    defaultBlockExplorerUrlIndex: c,
                  } = e;
                  return {
                    chainId: (0, r.toEvmCaipChainId)(t),
                    isEvm: !0,
                    name: n || s[i].url,
                    nativeCurrency: o,
                    blockExplorerUrls: a,
                    defaultBlockExplorerUrlIndex: c || 0,
                  };
                };
                r.toMultichainNetworkConfigurationsByChainId = e =>
                  Object.entries(e).reduce(
                    (e, [, t]) => ({
                      ...e,
                      [(0, r.toEvmCaipChainId)(t.chainId)]: (0, r.toMultichainNetworkConfiguration)(
                        t
                      ),
                    }),
                    {}
                  );
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller',
        file: 'node_modules/@metamask/multichain-network-controller/dist/utils.cjs',
      },
    ],
    [
      2144,
      {
        '@solana/assertions': 3295,
        '@solana/codecs-core': 3296,
        '@solana/codecs-strings': 3297,
        '@solana/errors': 3298,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i = e('@solana/codecs-core'),
                  o = e('@solana/codecs-strings'),
                  a = e('@solana/errors'),
                  c = e('@solana/assertions');
                function u() {
                  return n || (n = o.getBase58Encoder()), n;
                }
                function l(e) {
                  if (e.length < 32 || e.length > 44) return !1;
                  const t = u();
                  try {
                    return 32 === t.encode(e).byteLength;
                  } catch {
                    return !1;
                  }
                }
                function d(e) {
                  if (e.length < 32 || e.length > 44)
                    throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE, {
                      actualLength: e.length,
                    });
                  const t = u().encode(e).byteLength;
                  if (32 !== t)
                    throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH, {
                      actualLength: t,
                    });
                }
                function m(e) {
                  return d(e), e;
                }
                function f() {
                  return i.transformEncoder(i.fixEncoderSize(u(), 32), e => m(e));
                }
                function p() {
                  return i.fixDecoderSize((s || (s = o.getBase58Decoder()), s), 32);
                }
                function h() {
                  return i.combineCodec(f(), p());
                }
                var g =
                    37095705934669439343138083508754565189542113879843219016388785533085940283555n,
                  y =
                    57896044618658097711785492504343953926634992332820282019728792003956564819949n,
                  w =
                    19681161376707505956807079304988542015446066515923890162744021073123829784752n;
                function k(e) {
                  const t = e % y;
                  return t >= 0n ? t : y + t;
                }
                function b(e, t) {
                  let r = e;
                  for (; t-- > 0n; ) (r *= r), (r %= y);
                  return r;
                }
                function _(e, t) {
                  const r = k(t * t * t),
                    n = (function (e) {
                      const t = (((e * e) % y) * e) % y,
                        r = (b(t, 2n) * t) % y,
                        n = (b(r, 1n) * e) % y,
                        s = (b(n, 5n) * n) % y,
                        i = (b(s, 10n) * s) % y,
                        o = (b(i, 20n) * i) % y,
                        a = (b(o, 40n) * o) % y,
                        c = (b(a, 80n) * a) % y,
                        u = (b(c, 80n) * a) % y,
                        l = (b(u, 10n) * s) % y;
                      return (b(l, 2n) * e) % y;
                    })(e * k(r * r * t));
                  let s = k(e * r * n);
                  const i = k(t * s * s),
                    o = s,
                    a = k(s * w),
                    c = i === e,
                    u = i === k(-e),
                    l = i === k(-e * w);
                  return (
                    c && (s = o),
                    (u || l) && (s = a),
                    1n === (1n & k(s)) && (s = k(-s)),
                    c || u ? s : null
                  );
                }
                function S(e) {
                  if (32 !== e.byteLength) return !1;
                  const t = (function (e) {
                    const t = e.reduce(
                      (e, t, r) =>
                        `${(function (e) {
                          const t = e.toString(16);
                          return 1 === t.length ? `0${t}` : t;
                        })(31 === r ? -129 & t : t)}${e}`,
                      ''
                    );
                    return BigInt(`0x${t}`);
                  })(e);
                  return (function (e, t) {
                    const r = k(e * e),
                      n = _(k(r - 1n), k(g * r + 1n));
                    return null !== n && (0n !== n || !(128 & t));
                  })(t, e[31]);
                }
                var E = 32,
                  T = 16,
                  v = [
                    80, 114, 111, 103, 114, 97, 109, 68, 101, 114, 105, 118, 101, 100, 65, 100, 100,
                    114, 101, 115, 115,
                  ];
                async function A({ programAddress: e, seeds: t }) {
                  if ((c.assertDigestCapabilityIsAvailable(), t.length > T))
                    throw new a.SolanaError(
                      a.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED,
                      { actual: t.length, maxSeeds: T }
                    );
                  let r;
                  const n = t.reduce((e, t, n) => {
                      const s = 'string' == typeof t ? (r || (r = new TextEncoder())).encode(t) : t;
                      if (s.byteLength > E)
                        throw new a.SolanaError(
                          a.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED,
                          { actual: s.byteLength, index: n, maxSeedLength: E }
                        );
                      return e.push(...s), e;
                    }, []),
                    s = h(),
                    i = s.encode(e),
                    o = await crypto.subtle.digest('SHA-256', new Uint8Array([...n, ...i, ...v])),
                    u = new Uint8Array(o);
                  if (S(u))
                    throw new a.SolanaError(
                      a.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE
                    );
                  return s.decode(u);
                }
                (r.address = m),
                  (r.assertIsAddress = d),
                  (r.assertIsProgramDerivedAddress = function (e) {
                    if (
                      !(
                        Array.isArray(e) &&
                        2 === e.length &&
                        'string' == typeof e[0] &&
                        'number' == typeof e[1]
                      )
                    )
                      throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA);
                    if (e[1] < 0 || e[1] > 255)
                      throw new a.SolanaError(
                        a.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE,
                        { bump: e[1] }
                      );
                    d(e[0]);
                  }),
                  (r.createAddressWithSeed = async function ({
                    baseAddress: e,
                    programAddress: t,
                    seed: r,
                  }) {
                    const { encode: n, decode: s } = h(),
                      i = 'string' == typeof r ? new TextEncoder().encode(r) : r;
                    if (i.byteLength > E)
                      throw new a.SolanaError(
                        a.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED,
                        { actual: i.byteLength, index: 0, maxSeedLength: E }
                      );
                    const o = n(t);
                    if (o.length >= v.length && o.slice(-v.length).every((e, t) => e === v[t]))
                      throw new a.SolanaError(a.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER);
                    const c = await crypto.subtle.digest(
                      'SHA-256',
                      new Uint8Array([...n(e), ...i, ...o])
                    );
                    return s(new Uint8Array(c));
                  }),
                  (r.getAddressCodec = h),
                  (r.getAddressComparator = function () {
                    return new Intl.Collator('en', {
                      caseFirst: 'lower',
                      ignorePunctuation: !1,
                      localeMatcher: 'best fit',
                      numeric: !1,
                      sensitivity: 'variant',
                      usage: 'sort',
                    }).compare;
                  }),
                  (r.getAddressDecoder = p),
                  (r.getAddressEncoder = f),
                  (r.getAddressFromPublicKey = async function (e) {
                    if (
                      (c.assertKeyExporterIsAvailable(),
                      'public' !== e.type || 'Ed25519' !== e.algorithm.name)
                    )
                      throw new a.SolanaError(
                        a.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY
                      );
                    const t = await crypto.subtle.exportKey('raw', e);
                    return p().decode(new Uint8Array(t));
                  }),
                  (r.getProgramDerivedAddress = async function ({ programAddress: e, seeds: t }) {
                    let r = 255;
                    for (; r > 0; )
                      try {
                        return [
                          await A({ programAddress: e, seeds: [...t, new Uint8Array([r])] }),
                          r,
                        ];
                      } catch (e) {
                        if (
                          !a.isSolanaError(
                            e,
                            a.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE
                          )
                        )
                          throw e;
                        r--;
                      }
                    throw new a.SolanaError(
                      a.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED
                    );
                  }),
                  (r.isAddress = l),
                  (r.isProgramDerivedAddress = function (e) {
                    return (
                      Array.isArray(e) &&
                      2 === e.length &&
                      'string' == typeof e[0] &&
                      'number' == typeof e[1] &&
                      e[1] >= 0 &&
                      e[1] <= 255 &&
                      l(e[0])
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-network-controller>@solana/addresses',
        file: 'node_modules/@metamask/multichain-network-controller/node_modules/@solana/addresses/dist/index.browser.cjs',
      },
    ],
    [
      2145,
      {
        './constants.cjs': 2146,
        '@metamask/base-controller': 1407,
        '@metamask/keyring-api': 2014,
        '@metamask/keyring-snap-client': 2068,
        '@metamask/snaps-utils': 2166,
        '@metamask/utils': 2995,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d,
                  m,
                  f =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MultichainTransactionsController =
                    r.getDefaultMultichainTransactionsControllerState =
                      void 0);
                const p = e('@metamask/base-controller'),
                  h = e('@metamask/keyring-api'),
                  g = e('@metamask/keyring-snap-client'),
                  y = e('@metamask/snaps-utils'),
                  w = e('@metamask/utils'),
                  k = e('./constants.cjs');
                function b() {
                  return { nonEvmTransactions: {} };
                }
                r.getDefaultMultichainTransactionsControllerState = b;
                const _ = { nonEvmTransactions: { persist: !0, anonymous: !1 } };
                class S extends p.BaseController {
                  constructor({ messenger: e, state: t }) {
                    super({
                      messenger: e,
                      name: 'MultichainTransactionsController',
                      metadata: _,
                      state: { nonEvmTransactions: {}, ...t },
                    }),
                      n.add(this);
                    for (const e of f(this, n, 'm', i).call(this))
                      this.updateTransactionsForAccount(e.id).catch(t => {
                        console.error(
                          `Failed to fetch initial transactions for account ${e.id}:`,
                          t
                        );
                      });
                    this.messagingSystem.subscribe('AccountsController:accountAdded', e =>
                      f(this, n, 'm', u).call(this, e)
                    ),
                      this.messagingSystem.subscribe('AccountsController:accountRemoved', e =>
                        f(this, n, 'm', l).call(this, e)
                      ),
                      this.messagingSystem.subscribe(
                        'AccountsController:accountTransactionsUpdated',
                        e => f(this, n, 'm', d).call(this, e)
                      );
                  }
                  async updateTransactionsForAccount(e) {
                    const { isUnlocked: t } = this.messagingSystem.call(
                      'KeyringController:getState'
                    );
                    if (t)
                      try {
                        const t = f(this, n, 'm', i)
                          .call(this)
                          .find(t => t.id === e);
                        if (t?.metadata.snap) {
                          const e = await f(this, n, 'm', o).call(this, t.id, t.metadata.snap.id, {
                              limit: 10,
                            }),
                            r = f(this, n, 'm', a).call(this, e.data);
                          this.update(n => {
                            const s = { transactions: r, next: e.next, lastUpdated: Date.now() };
                            Object.assign(n.nonEvmTransactions, { [t.id]: s });
                          });
                        }
                      } catch (t) {
                        console.error(`Failed to fetch transactions for account ${e}:`, t);
                      }
                  }
                }
                (r.MultichainTransactionsController = S),
                  (n = new WeakSet()),
                  (s = function () {
                    return this.messagingSystem.call('AccountsController:listMultichainAccounts');
                  }),
                  (i = function () {
                    return f(this, n, 'm', s)
                      .call(this)
                      .filter(e => f(this, n, 'm', c).call(this, e));
                  }),
                  (o = async function (e, t, r) {
                    return await f(this, n, 'm', m).call(this, t).listAccountTransactions(e, r);
                  }),
                  (a = function (e) {
                    return e.filter(e => {
                      const t = e.chain,
                        { namespace: r } = (0, w.parseCaipChainId)(t);
                      return r !== w.KnownCaipNamespace.Solana || t === k.MultichainNetwork.Solana;
                    });
                  }),
                  (c = function (e) {
                    return !(0, h.isEvmAccountType)(e.type) && e.metadata.snap !== undefined;
                  }),
                  (u = async function (e) {
                    f(this, n, 'm', c).call(this, e) &&
                      (await this.updateTransactionsForAccount(e.id));
                  }),
                  (l = async function (e) {
                    e in this.state.nonEvmTransactions &&
                      this.update(t => {
                        delete t.nonEvmTransactions[e];
                      });
                  }),
                  (d = function (e) {
                    const t = {};
                    e?.transactions &&
                      (Object.entries(e.transactions).forEach(([e, r]) => {
                        const s = this.state.nonEvmTransactions[e]?.transactions ?? [],
                          i = f(this, n, 'm', a).call(this, r),
                          o = new Map();
                        s.forEach(e => {
                          o.set(e.id, e);
                        }),
                          i.forEach(e => {
                            o.set(e.id, e);
                          }),
                          (t[e] = Array.from(o.values()).sort(
                            (e, t) => (t.timestamp ?? 0) - (e.timestamp ?? 0)
                          ));
                      }),
                      this.update(e => {
                        Object.entries(t).forEach(([t, r]) => {
                          e.nonEvmTransactions[t] = {
                            ...e.nonEvmTransactions[t],
                            transactions: r,
                            lastUpdated: Date.now(),
                          };
                        });
                      }));
                  }),
                  (m = function (e) {
                    return new g.KeyringClient({
                      send: async t =>
                        await this.messagingSystem.call('SnapController:handleRequest', {
                          snapId: e,
                          origin: 'metamask',
                          handler: y.HandlerType.OnKeyringRequest,
                          request: t,
                        }),
                    });
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller',
        file: 'node_modules/@metamask/multichain-transactions-controller/dist/MultichainTransactionsController.cjs',
      },
    ],
    [
      2146,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n, s;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MultichainNativeAsset = r.MultichainNetwork = void 0),
                  (function (e) {
                    (e.Bitcoin = 'bip122:000000000019d6689c085ae165831e93'),
                      (e.BitcoinTestnet = 'bip122:000000000933ea01ad0ee984209779ba'),
                      (e.Solana = 'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp'),
                      (e.SolanaDevnet = 'solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1'),
                      (e.SolanaTestnet = 'solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z');
                  })(n || (r.MultichainNetwork = n = {})),
                  (function (e) {
                    (e.Bitcoin = 'bip122:000000000019d6689c085ae165831e93/slip44:0'),
                      (e.BitcoinTestnet = 'bip122:000000000933ea01ad0ee984209779ba/slip44:0'),
                      (e.Solana = 'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501'),
                      (e.SolanaDevnet = 'solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1/slip44:501'),
                      (e.SolanaTestnet = 'solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z/slip44:501');
                  })(s || (r.MultichainNativeAsset = s = {}));
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller',
        file: 'node_modules/@metamask/multichain-transactions-controller/dist/constants.cjs',
      },
    ],
    [
      2147,
      { './MultichainTransactionsController.cjs': 2145, './constants.cjs': 2146 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MultichainNativeAsset =
                    r.MultichainNetwork =
                    r.MultichainTransactionsController =
                      void 0);
                var n = e('./MultichainTransactionsController.cjs');
                Object.defineProperty(r, 'MultichainTransactionsController', {
                  enumerable: !0,
                  get: function () {
                    return n.MultichainTransactionsController;
                  },
                });
                var s = e('./constants.cjs');
                Object.defineProperty(r, 'MultichainNetwork', {
                  enumerable: !0,
                  get: function () {
                    return s.MultichainNetwork;
                  },
                }),
                  Object.defineProperty(r, 'MultichainNativeAsset', {
                    enumerable: !0,
                    get: function () {
                      return s.MultichainNativeAsset;
                    },
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller',
        file: 'node_modules/@metamask/multichain-transactions-controller/dist/index.cjs',
      },
    ],
    [
      2148,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isEqual = void 0),
                  (r.isEqual = function (e, t) {
                    return e.length === t.length && e.every((e, r) => e === t[r]);
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/array.cjs',
      },
    ],
    [
      2149,
      {
        './base64.cjs': 2150,
        './constants.cjs': 2154,
        '@metamask/snaps-sdk': 2779,
        '@metamask/utils': 2995,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.validateAuxiliaryFiles = r.encodeAuxiliaryFile = void 0);
                const n = e('@metamask/snaps-sdk'),
                  s = e('@metamask/utils'),
                  i = e('./base64.cjs'),
                  o = e('./constants.cjs');
                (r.encodeAuxiliaryFile = async function (e, t) {
                  if (t === n.AuxiliaryFileEncoding.Base64) return e;
                  const r = await (0, i.decodeBase64)(e);
                  return t === n.AuxiliaryFileEncoding.Utf8
                    ? (0, s.bytesToString)(r)
                    : (0, s.bytesToHex)(r);
                }),
                  (r.validateAuxiliaryFiles = function (e) {
                    for (const t of e)
                      (0, s.assert)(
                        t.size < o.MAX_FILE_SIZE,
                        'Static files required by the Snap must be smaller than 64 MB.'
                      );
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/auxiliary-files.cjs',
      },
    ],
    [
      2150,
      { './bytes.cjs': 2151, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.decodeBase64 = r.encodeBase64 = void 0);
                const n = e('@metamask/utils'),
                  s = e('./bytes.cjs');
                (r.encodeBase64 = async function (e) {
                  const t = (0, s.getBytes)(e);
                  return 'FileReader' in globalThis
                    ? await new Promise((e, r) => {
                        const n = Object.assign(new FileReader(), {
                          onload: () =>
                            e(n.result.replace('data:application/octet-stream;base64,', '')),
                          onerror: () => r(n.error),
                        });
                        n.readAsDataURL(new File([t], '', { type: 'application/octet-stream' }));
                      })
                    : (0, n.bytesToBase64)(t);
                }),
                  (r.decodeBase64 = async function (e) {
                    const t = await fetch(`data:application/octet-stream;base64,${e}`);
                    return new Uint8Array(await t.arrayBuffer());
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/base64.cjs',
      },
    ],
    [
      2151,
      { './virtual-file/VirtualFile.cjs': 2186, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.getBytes = void 0);
                const n = e('@metamask/utils'),
                  s = e('./virtual-file/VirtualFile.cjs');
                r.getBytes = function (e) {
                  const t = e instanceof s.VirtualFile ? e.value : e;
                  return 'string' == typeof t ? (0, n.stringToBytes)(t) : t;
                };
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/bytes.cjs',
      },
    ],
    [
      2152,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.SnapCaveatType = void 0),
                  (function (e) {
                    (e.PermittedDerivationPaths = 'permittedDerivationPaths'),
                      (e.PermittedCoinTypes = 'permittedCoinTypes'),
                      (e.SnapCronjob = 'snapCronjob'),
                      (e.TransactionOrigin = 'transactionOrigin'),
                      (e.SignatureOrigin = 'signatureOrigin'),
                      (e.RpcOrigin = 'rpcOrigin'),
                      (e.KeyringOrigin = 'keyringOrigin'),
                      (e.SnapIds = 'snapIds'),
                      (e.ChainIds = 'chainIds'),
                      (e.LookupMatchers = 'lookupMatchers'),
                      (e.MaxRequestTime = 'maxRequestTime'),
                      (e.ProtocolSnapScopes = 'protocolSnapScopes');
                  })(n || (r.SnapCaveatType = n = {}));
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/caveats.cjs',
      },
    ],
    [
      2153,
      { './bytes.cjs': 2151, '@metamask/utils': 2995, '@noble/hashes/sha256': 3054 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.checksumFiles = r.checksum = void 0);
                const n = e('@metamask/utils'),
                  s = e('@noble/hashes/sha256'),
                  i = e('./bytes.cjs');
                async function o(e) {
                  const t = (0, i.getBytes)(e);
                  return 'crypto' in globalThis &&
                    'object' == typeof globalThis.crypto &&
                    crypto.subtle?.digest
                    ? new Uint8Array(await crypto.subtle.digest('SHA-256', t))
                    : (0, s.sha256)(t);
                }
                (r.checksum = o),
                  (r.checksumFiles = async function (e) {
                    const t = await Promise.all(
                      [...e]
                        .sort(
                          (e, t) => (
                            (0, n.assert)(
                              e.path !== t.path,
                              'Tried to sort files with non-unique paths.'
                            ),
                            e.path < t.path ? -1 : 1
                          )
                        )
                        .map(async e => o(e))
                    );
                    return o((0, n.concatBytes)(t));
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/checksum.cjs',
      },
    ],
    [
      2154,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MAX_FILE_SIZE = void 0),
                  (r.MAX_FILE_SIZE = 64e6);
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/constants.cjs',
      },
    ],
    [
      2155,
      { '@metamask/superstruct': 2913, '@metamask/utils': 2995, 'cron-parser': 4246 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isCronjobSpecificationArray =
                    r.CronjobSpecificationArrayStruct =
                    r.isCronjobSpecification =
                    r.CronjobSpecificationStruct =
                    r.parseCronExpression =
                    r.CronExpressionStruct =
                    r.CronjobRpcRequestStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils'),
                  i = e('cron-parser');
                (r.CronjobRpcRequestStruct = (0, n.object)({
                  jsonrpc: (0, n.optional)(s.JsonRpcVersionStruct),
                  id: (0, n.optional)(s.JsonRpcIdStruct),
                  method: (0, n.string)(),
                  params: (0, n.optional)(s.JsonRpcParamsStruct),
                })),
                  (r.CronExpressionStruct = (0, n.refine)((0, n.string)(), 'CronExpression', e => {
                    try {
                      return (0, i.parseExpression)(e), !0;
                    } catch {
                      return !1;
                    }
                  })),
                  (r.parseCronExpression = function (e) {
                    const t = (0, n.create)(e, r.CronExpressionStruct);
                    return (0, i.parseExpression)(t);
                  }),
                  (r.CronjobSpecificationStruct = (0, n.object)({
                    expression: r.CronExpressionStruct,
                    request: r.CronjobRpcRequestStruct,
                  })),
                  (r.isCronjobSpecification = function (e) {
                    try {
                      return (0, n.create)(e, r.CronjobSpecificationStruct), !0;
                    } catch {
                      return !1;
                    }
                  }),
                  (r.CronjobSpecificationArrayStruct = (0, n.array)(r.CronjobSpecificationStruct)),
                  (r.isCronjobSpecificationArray = function (e) {
                    try {
                      return (0, n.create)(e, r.CronjobSpecificationArrayStruct), !0;
                    } catch {
                      return !1;
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/cronjob.cjs',
      },
    ],
    [
      2156,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.currency = void 0);
                const n = e('@metamask/superstruct');
                r.currency = function (e) {
                  const t = e.toLowerCase();
                  return (0, n.coerce)((0, n.literal)(t), (0, n.literal)(e.toUpperCase()), e =>
                    (0, n.create)(e.toLowerCase(), (0, n.literal)(t))
                  );
                };
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/currency.cjs',
      },
    ],
    [
      2157,
      { rfdc: 5357 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.deepClone = void 0);
                const s = n(e('rfdc'));
                r.deepClone = (0, s.default)({ proto: !1, circles: !1 });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/deep-clone.cjs',
      },
    ],
    [
      2158,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.DEFAULT_ENDOWMENTS = void 0),
                  (r.DEFAULT_ENDOWMENTS = Object.freeze([
                    'atob',
                    'btoa',
                    'BigInt',
                    'console',
                    'crypto',
                    'Date',
                    'Math',
                    'setTimeout',
                    'clearTimeout',
                    'SubtleCrypto',
                    'TextDecoder',
                    'TextEncoder',
                    'URL',
                    'URLSearchParams',
                    'setInterval',
                    'clearInterval',
                    'Int8Array',
                    'Uint8Array',
                    'Uint8ClampedArray',
                    'Int16Array',
                    'Uint16Array',
                    'Int32Array',
                    'isSecureContext',
                    'Intl',
                    'Uint32Array',
                    'Float32Array',
                    'Float64Array',
                    'BigInt64Array',
                    'BigUint64Array',
                    'DataView',
                    'ArrayBuffer',
                    'AbortController',
                    'AbortSignal',
                  ]));
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/default-endowments.cjs',
      },
    ],
    [
      2159,
      { './array.cjs': 2148, '@metamask/slip44': 2657 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getSlip44ProtocolName =
                    r.getSnapDerivationPathName =
                    r.SNAPS_DERIVATION_PATHS =
                      void 0);
                const s = n(e('@metamask/slip44')),
                  i = e('./array.cjs');
                function o(e) {
                  return '1' === String(e) ? 'Test Networks' : (s.default[e]?.name ?? null);
                }
                (r.SNAPS_DERIVATION_PATHS = [
                  {
                    path: ['m', "44'", "0'"],
                    curve: 'ed25519',
                    name: 'Test BIP-32 Path (ed25519)',
                  },
                  { path: ['m', "44'", "1'"], curve: 'secp256k1', name: 'Testnet' },
                  { path: ['m', "44'", "0'"], curve: 'secp256k1', name: 'Bitcoin Legacy' },
                  { path: ['m', "49'", "0'"], curve: 'secp256k1', name: 'Bitcoin Nested SegWit' },
                  {
                    path: ['m', "49'", "1'"],
                    curve: 'secp256k1',
                    name: 'Bitcoin Testnet Nested SegWit',
                  },
                  { path: ['m', "84'", "0'"], curve: 'secp256k1', name: 'Bitcoin Native SegWit' },
                  {
                    path: ['m', "84'", "1'"],
                    curve: 'secp256k1',
                    name: 'Bitcoin Testnet Native SegWit',
                  },
                  { path: ['m', "86'", "0'"], curve: 'secp256k1', name: 'Bitcoin Taproot' },
                  { path: ['m', "86'", "1'"], curve: 'secp256k1', name: 'Bitcoin Testnet Taproot' },
                  { path: ['m', "44'", "501'"], curve: 'ed25519', name: 'Solana' },
                  { path: ['m', "44'", "501'", "0'", "0'"], curve: 'ed25519', name: 'Solana' },
                  { path: ['m', "44'", "2'"], curve: 'secp256k1', name: 'Litecoin' },
                  { path: ['m', "44'", "3'"], curve: 'secp256k1', name: 'Dogecoin' },
                  { path: ['m', "44'", "60'"], curve: 'secp256k1', name: 'Ethereum' },
                  { path: ['m', "44'", "118'"], curve: 'secp256k1', name: 'Atom' },
                  { path: ['m', "44'", "145'"], curve: 'secp256k1', name: 'Bitcoin Cash' },
                  { path: ['m', "44'", "637'"], curve: 'ed25519', name: 'Aptos' },
                  { path: ['m', "44'", "714'"], curve: 'secp256k1', name: 'Binance (BNB)' },
                  { path: ['m', "44'", "784'"], curve: 'ed25519', name: 'Sui' },
                  { path: ['m', "44'", "931'"], curve: 'secp256k1', name: 'THORChain (RUNE)' },
                  { path: ['m', "44'", "330'"], curve: 'secp256k1', name: 'Terra (LUNA)' },
                  { path: ['m', "44'", "459'"], curve: 'secp256k1', name: 'Kava' },
                  { path: ['m', "44'", "529'"], curve: 'secp256k1', name: 'Secret Network' },
                  { path: ['m', "44'", "397'", "0'"], curve: 'ed25519', name: 'NEAR Protocol' },
                  { path: ['m', "44'", "1'", "0'"], curve: 'ed25519', name: 'Testnet' },
                  { path: ['m', "44'", "472'"], curve: 'ed25519', name: 'Arweave' },
                  { path: ['m', "44'", "12586'"], curve: 'secp256k1', name: 'Mina' },
                  { path: ['m', "44'", "242'"], curve: 'ed25519', name: 'Nimiq' },
                  { path: ['m', "44'", "1729'", "0'", "0'"], curve: 'ed25519', name: 'Tezos' },
                  { path: ['m', "1789'", "0'"], curve: 'ed25519', name: 'Vega' },
                  { path: ['m', "1852'", "1815'"], curve: 'ed25519Bip32', name: 'Cardano' },
                  {
                    path: ['m', "44'", "508'", "0'", "0'", "0'"],
                    curve: 'ed25519',
                    name: 'MultiversX',
                  },
                  { path: ['m', "44'", "709'"], curve: 'secp256k1', name: 'Avail' },
                  { path: ['m', "44'", "626'"], curve: 'ed25519', name: 'Kadena' },
                  { path: ['m', "44'", "632'"], curve: 'ed25519', name: 'Massa' },
                ]),
                  (r.getSnapDerivationPathName = function (e, t) {
                    const n = r.SNAPS_DERIVATION_PATHS.find(
                      r => r.curve === t && (0, i.isEqual)(r.path, e)
                    );
                    if (n) return n.name;
                    if ('secp256k1' === t && 'm' === e[0] && "44'" === e[1] && e[2].endsWith("'")) {
                      return o(e[2].slice(0, -1)) ?? null;
                    }
                    return null;
                  }),
                  (r.getSlip44ProtocolName = o);
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/derivation-paths.cjs',
      },
    ],
    [
      2160,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.STATE_ENCRYPTION_MAGIC_VALUE = r.SIP_6_MAGIC_VALUE = void 0),
                  (r.SIP_6_MAGIC_VALUE = "1399742832'"),
                  (r.STATE_ENCRYPTION_MAGIC_VALUE = "572232532'");
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/entropy.cjs',
      },
    ],
    [
      2161,
      { '@metamask/rpc-errors': 2585, '@metamask/snaps-sdk': 2779, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  a =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.unwrapError =
                    r.isWrappedSnapError =
                    r.isSerializedSnapError =
                    r.isSnapError =
                    r.WrappedSnapError =
                    r.SNAP_ERROR_WRAPPER_MESSAGE =
                    r.SNAP_ERROR_WRAPPER_CODE =
                      void 0);
                const c = e('@metamask/rpc-errors'),
                  u = e('@metamask/snaps-sdk'),
                  l = e('@metamask/utils');
                (r.SNAP_ERROR_WRAPPER_CODE = -31001),
                  (r.SNAP_ERROR_WRAPPER_MESSAGE = 'Wrapped Snap Error');
                class d extends Error {
                  constructor(e) {
                    const t = (0, u.getErrorMessage)(e);
                    super(t),
                      n.set(this, void 0),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o(this, n, e, 'f'),
                      o(this, s, t, 'f'),
                      o(this, i, (0, u.getErrorStack)(e), 'f');
                  }
                  get name() {
                    return 'WrappedSnapError';
                  }
                  get message() {
                    return a(this, s, 'f');
                  }
                  get stack() {
                    return a(this, i, 'f');
                  }
                  toJSON() {
                    const e = m(a(this, n, 'f'))
                      ? a(this, n, 'f').serialize()
                      : (0, c.serializeCause)(a(this, n, 'f'));
                    return {
                      code: r.SNAP_ERROR_WRAPPER_CODE,
                      message: r.SNAP_ERROR_WRAPPER_MESSAGE,
                      data: { cause: e },
                    };
                  }
                  serialize() {
                    return this.toJSON();
                  }
                }
                function m(e) {
                  if ((0, l.isObject)(e) && 'serialize' in e && 'function' == typeof e.serialize) {
                    const t = e.serialize();
                    return (0, l.isJsonRpcError)(t) && f(t);
                  }
                  return !1;
                }
                function f(e) {
                  return e.code === u.SNAP_ERROR_CODE && e.message === u.SNAP_ERROR_MESSAGE;
                }
                function p(e) {
                  return (
                    (0, l.isJsonRpcError)(e) &&
                    e.code === r.SNAP_ERROR_WRAPPER_CODE &&
                    e.message === r.SNAP_ERROR_WRAPPER_MESSAGE
                  );
                }
                function h(e, t, r, n) {
                  const s = new c.JsonRpcError(e, t, n);
                  return (s.stack = r), s;
                }
                (r.WrappedSnapError = d),
                  (n = new WeakMap()),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (r.isSnapError = m),
                  (r.isSerializedSnapError = f),
                  (r.isWrappedSnapError = p),
                  (r.unwrapError = function (e) {
                    if (p(e)) {
                      if ((0, l.isJsonRpcError)(e.data.cause)) {
                        if (f(e.data.cause)) {
                          const {
                            code: t,
                            message: r,
                            stack: n,
                            data: s,
                          } = e.data.cause.data.cause;
                          return [h(t, r, n, s), !0];
                        }
                        const { code: t, message: r, stack: n, data: s } = e.data.cause;
                        return [h(t, r, n, s), !1];
                      }
                      return [
                        h(
                          c.errorCodes.rpc.internal,
                          (0, u.getErrorMessage)(e.data.cause),
                          (0, u.getErrorStack)(e.data.cause)
                        ),
                        !1,
                      ];
                    }
                    if ((0, l.isJsonRpcError)(e)) {
                      const { code: t, message: r, stack: n, data: s } = e;
                      return [h(t, r, n, s), !1];
                    }
                    return [
                      h(
                        c.errorCodes.rpc.internal,
                        (0, u.getErrorMessage)(e),
                        (0, u.getErrorStack)(e)
                      ),
                      !1,
                    ];
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/errors.cjs',
      },
    ],
    [
      2162,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.SNAP_EXPORT_NAMES = r.HandlerType = void 0),
                  (function (e) {
                    (e.OnRpcRequest = 'onRpcRequest'),
                      (e.OnSignature = 'onSignature'),
                      (e.OnTransaction = 'onTransaction'),
                      (e.OnCronjob = 'onCronjob'),
                      (e.OnInstall = 'onInstall'),
                      (e.OnUpdate = 'onUpdate'),
                      (e.OnNameLookup = 'onNameLookup'),
                      (e.OnKeyringRequest = 'onKeyringRequest'),
                      (e.OnHomePage = 'onHomePage'),
                      (e.OnSettingsPage = 'onSettingsPage'),
                      (e.OnUserInput = 'onUserInput'),
                      (e.OnAssetsLookup = 'onAssetsLookup'),
                      (e.OnAssetsConversion = 'onAssetsConversion'),
                      (e.OnProtocolRequest = 'onProtocolRequest');
                  })(n || (r.HandlerType = n = {})),
                  (r.SNAP_EXPORT_NAMES = Object.values(n));
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/handler-types.cjs',
      },
    ],
    [
      2163,
      { './handler-types.cjs': 2162, '@metamask/snaps-sdk': 2779, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.OnNameLookupResponseStruct =
                    r.DomainResolutionResponseStruct =
                    r.AddressResolutionResponseStruct =
                    r.DomainResolutionStruct =
                    r.AddressResolutionStruct =
                    r.OnSettingsPageResponseStruct =
                    r.OnHomePageResponseStruct =
                    r.OnHomePageResponseWithIdStruct =
                    r.OnHomePageResponseWithContentStruct =
                    r.OnSignatureResponseStruct =
                    r.OnTransactionResponseStruct =
                    r.OnTransactionResponseWithContentStruct =
                    r.OnTransactionResponseWithIdStruct =
                    r.OnTransactionSeverityResponseStruct =
                    r.SNAP_EXPORTS =
                      void 0);
                const n = e('@metamask/snaps-sdk'),
                  s = e('@metamask/superstruct'),
                  i = e('./handler-types.cjs');
                (r.SNAP_EXPORTS = {
                  [i.HandlerType.OnRpcRequest]: {
                    type: i.HandlerType.OnRpcRequest,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnTransaction]: {
                    type: i.HandlerType.OnTransaction,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnCronjob]: {
                    type: i.HandlerType.OnCronjob,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnNameLookup]: {
                    type: i.HandlerType.OnNameLookup,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnInstall]: {
                    type: i.HandlerType.OnInstall,
                    required: !1,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnUpdate]: {
                    type: i.HandlerType.OnUpdate,
                    required: !1,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnKeyringRequest]: {
                    type: i.HandlerType.OnKeyringRequest,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnHomePage]: {
                    type: i.HandlerType.OnHomePage,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnSettingsPage]: {
                    type: i.HandlerType.OnSettingsPage,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnSignature]: {
                    type: i.HandlerType.OnSignature,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnUserInput]: {
                    type: i.HandlerType.OnUserInput,
                    required: !1,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnAssetsLookup]: {
                    type: i.HandlerType.OnAssetsLookup,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnAssetsConversion]: {
                    type: i.HandlerType.OnAssetsConversion,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                  [i.HandlerType.OnProtocolRequest]: {
                    type: i.HandlerType.OnProtocolRequest,
                    required: !0,
                    validator: e => 'function' == typeof e,
                  },
                }),
                  (r.OnTransactionSeverityResponseStruct = (0, s.object)({
                    severity: (0, s.optional)((0, s.literal)(n.SeverityLevel.Critical)),
                  })),
                  (r.OnTransactionResponseWithIdStruct = (0, s.assign)(
                    r.OnTransactionSeverityResponseStruct,
                    (0, s.object)({ id: (0, s.string)() })
                  )),
                  (r.OnTransactionResponseWithContentStruct = (0, s.assign)(
                    r.OnTransactionSeverityResponseStruct,
                    (0, s.object)({ content: n.ComponentOrElementStruct })
                  )),
                  (r.OnTransactionResponseStruct = (0, s.nullable)(
                    (0, s.union)([
                      r.OnTransactionResponseWithContentStruct,
                      r.OnTransactionResponseWithIdStruct,
                    ])
                  )),
                  (r.OnSignatureResponseStruct = r.OnTransactionResponseStruct),
                  (r.OnHomePageResponseWithContentStruct = (0, s.object)({
                    content: n.ComponentOrElementStruct,
                  })),
                  (r.OnHomePageResponseWithIdStruct = (0, s.object)({ id: (0, s.string)() })),
                  (r.OnHomePageResponseStruct = (0, s.union)([
                    r.OnHomePageResponseWithContentStruct,
                    r.OnHomePageResponseWithIdStruct,
                  ])),
                  (r.OnSettingsPageResponseStruct = r.OnHomePageResponseStruct),
                  (r.AddressResolutionStruct = (0, s.object)({
                    protocol: (0, s.string)(),
                    resolvedDomain: (0, s.string)(),
                  })),
                  (r.DomainResolutionStruct = (0, s.object)({
                    protocol: (0, s.string)(),
                    resolvedAddress: (0, s.string)(),
                    domainName: (0, s.string)(),
                  })),
                  (r.AddressResolutionResponseStruct = (0, s.object)({
                    resolvedDomains: (0, s.size)(
                      (0, s.array)(r.AddressResolutionStruct),
                      1,
                      Infinity
                    ),
                  })),
                  (r.DomainResolutionResponseStruct = (0, s.object)({
                    resolvedAddresses: (0, s.size)(
                      (0, s.array)(r.DomainResolutionStruct),
                      1,
                      Infinity
                    ),
                  })),
                  (r.OnNameLookupResponseStruct = (0, s.nullable)(
                    (0, s.union)([
                      r.AddressResolutionResponseStruct,
                      r.DomainResolutionResponseStruct,
                    ])
                  ));
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/handlers.cjs',
      },
    ],
    [
      2164,
      { './svg.cjs': 2180, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getSvgDimensions =
                    r.assertIsSnapIcon =
                    r.SVG_MAX_BYTE_SIZE_TEXT =
                    r.SVG_MAX_BYTE_SIZE =
                      void 0);
                const n = e('@metamask/utils'),
                  s = e('./svg.cjs');
                (r.SVG_MAX_BYTE_SIZE = 1e5),
                  (r.SVG_MAX_BYTE_SIZE_TEXT = `${Math.floor(r.SVG_MAX_BYTE_SIZE / 1e3)}kb`),
                  (r.assertIsSnapIcon = function (e) {
                    (0, n.assert)(e.path.endsWith('.svg'), 'Expected snap icon to end in ".svg".');
                    const t =
                      'string' == typeof e.value
                        ? (0, n.stringToBytes)(e.value).byteLength
                        : e.value.byteLength;
                    (0, n.assert)(
                      t <= r.SVG_MAX_BYTE_SIZE,
                      `The specified SVG icon exceeds the maximum size of ${r.SVG_MAX_BYTE_SIZE_TEXT}.`
                    ),
                      (0, n.assert)((0, s.isSvg)(e.toString()), 'Snap icon must be a valid SVG.');
                  }),
                  (r.getSvgDimensions = function (e) {
                    try {
                      const t = (0, s.parseSvg)(e),
                        r = t['@_height'],
                        i = t['@_width'];
                      if (r && i) return { height: r, width: i };
                      const o = t['@_viewBox'];
                      if (o) {
                        const [e, t, r, s] = o.split(' ');
                        if (r && s) {
                          const e = parseInt(r, 10),
                            t = parseInt(s, 10);
                          return (
                            (0, n.assert)(Number.isInteger(e) && e > 0),
                            (0, n.assert)(Number.isInteger(t) && t > 0),
                            { width: e, height: t }
                          );
                        }
                      }
                    } catch {
                      throw new Error('Snap icon must be a valid SVG.');
                    }
                    return null;
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/icon.cjs',
      },
    ],
    [
      2165,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createWindow = void 0),
                  (r.createWindow = async function ({
                    uri: e,
                    id: t,
                    sandbox: r = !0,
                    testId: n = 'snaps-iframe',
                  }) {
                    return await new Promise((s, i) => {
                      const o = document.createElement('iframe');
                      o.setAttribute('id', t),
                        o.setAttribute('data-testid', n),
                        r && o.setAttribute('sandbox', 'allow-scripts'),
                        o.setAttribute('src', e),
                        document.body.appendChild(o),
                        o.addEventListener('load', () => {
                          o.contentWindow
                            ? s(o.contentWindow)
                            : i(
                                new Error(
                                  `iframe.contentWindow not present on load for job "${t}".`
                                )
                              );
                        });
                    });
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/iframe.cjs',
      },
    ],
    [
      2166,
      {
        './array.cjs': 2148,
        './auxiliary-files.cjs': 2149,
        './base64.cjs': 2150,
        './bytes.cjs': 2151,
        './caveats.cjs': 2152,
        './checksum.cjs': 2153,
        './constants.cjs': 2154,
        './cronjob.cjs': 2155,
        './currency.cjs': 2156,
        './deep-clone.cjs': 2157,
        './default-endowments.cjs': 2158,
        './derivation-paths.cjs': 2159,
        './entropy.cjs': 2160,
        './errors.cjs': 2161,
        './handler-types.cjs': 2162,
        './handlers.cjs': 2163,
        './iframe.cjs': 2165,
        './json-rpc.cjs': 2167,
        './json.cjs': 2168,
        './localization.cjs': 2169,
        './logging.cjs': 2170,
        './manifest/index.cjs': 2171,
        './namespace.cjs': 2173,
        './path.cjs': 2174,
        './platform-version.cjs': 2175,
        './promise.cjs': 2176,
        './snaps.cjs': 2177,
        './strings.cjs': 2178,
        './structs.cjs': 2179,
        './types.cjs': 2181,
        './ui.cjs': 2182,
        './url.cjs': 2183,
        './validation.cjs': 2184,
        './versions.cjs': 2185,
        './virtual-file/index.cjs': 2187,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./array.cjs'), r),
                  s(e('./auxiliary-files.cjs'), r),
                  s(e('./base64.cjs'), r),
                  s(e('./bytes.cjs'), r),
                  s(e('./caveats.cjs'), r),
                  s(e('./checksum.cjs'), r),
                  s(e('./constants.cjs'), r),
                  s(e('./cronjob.cjs'), r),
                  s(e('./currency.cjs'), r),
                  s(e('./deep-clone.cjs'), r),
                  s(e('./default-endowments.cjs'), r),
                  s(e('./derivation-paths.cjs'), r),
                  s(e('./entropy.cjs'), r),
                  s(e('./errors.cjs'), r),
                  s(e('./handlers.cjs'), r),
                  s(e('./handler-types.cjs'), r),
                  s(e('./iframe.cjs'), r),
                  s(e('./json.cjs'), r),
                  s(e('./json-rpc.cjs'), r),
                  s(e('./localization.cjs'), r),
                  s(e('./logging.cjs'), r),
                  s(e('./manifest/index.cjs'), r),
                  s(e('./namespace.cjs'), r),
                  s(e('./path.cjs'), r),
                  s(e('./platform-version.cjs'), r),
                  s(e('./snaps.cjs'), r),
                  s(e('./strings.cjs'), r),
                  s(e('./structs.cjs'), r),
                  s(e('./types.cjs'), r),
                  s(e('./ui.cjs'), r),
                  s(e('./url.cjs'), r),
                  s(e('./validation.cjs'), r),
                  s(e('./versions.cjs'), r),
                  s(e('./virtual-file/index.cjs'), r),
                  s(e('./promise.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/index.cjs',
      },
    ],
    [
      2167,
      {
        '@metamask/permission-controller': 2421,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2995,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.assertIsJsonRpcSuccess =
                    r.isOriginAllowed =
                    r.assertIsKeyringOrigins =
                    r.KeyringOriginsStruct =
                    r.assertIsRpcOrigins =
                    r.RpcOriginsStruct =
                      void 0);
                const n = e('@metamask/permission-controller'),
                  s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = (0, s.array)(
                    (0, s.refine)(
                      (0, s.string)(),
                      'Allowed origin',
                      e =>
                        !(e.split('*').length - 1 > 2) ||
                        'No more than two wildcards ("*") are allowed in an origin specifier.'
                    )
                  );
                function a(e, t) {
                  if ('*' === e || e === t) return !0;
                  const r = (function (e) {
                    const t = e.replace(/[.*+?^${}()|[\]\\]/gu, '\\$&').replace(/\\\*/gu, '.*');
                    return RegExp(`^${t}$`, 'u');
                  })(e);
                  return r.test(t);
                }
                (r.RpcOriginsStruct = (0, s.refine)(
                  (0, s.object)({
                    dapps: (0, s.optional)((0, s.boolean)()),
                    snaps: (0, s.optional)((0, s.boolean)()),
                    allowedOrigins: (0, s.optional)(o),
                  }),
                  'RPC origins',
                  e =>
                    !!Boolean(
                      !0 === e.snaps ||
                        !0 === e.dapps ||
                        (e.allowedOrigins && e.allowedOrigins.length > 0)
                    ) || 'Must specify at least one JSON-RPC origin.'
                )),
                  (r.assertIsRpcOrigins = function (e, t) {
                    (0, i.assertStruct)(e, r.RpcOriginsStruct, 'Invalid JSON-RPC origins', t);
                  }),
                  (r.KeyringOriginsStruct = (0, s.object)({ allowedOrigins: (0, s.optional)(o) })),
                  (r.assertIsKeyringOrigins = function (e, t) {
                    (0, i.assertStruct)(e, r.KeyringOriginsStruct, 'Invalid keyring origins', t);
                  }),
                  (r.isOriginAllowed = function (e, t, r) {
                    return (
                      'metamask' === r ||
                      !!e.allowedOrigins?.some(e => a(e, r)) ||
                      !(t !== n.SubjectType.Website || !e.dapps) ||
                      Boolean(t === n.SubjectType.Snap && e.snaps)
                    );
                  }),
                  (r.assertIsJsonRpcSuccess = function (e) {
                    if (!(0, i.isJsonRpcSuccess)(e)) {
                      if ((0, i.isJsonRpcFailure)(e))
                        throw new Error(`JSON-RPC request failed: ${e.error.message}`);
                      throw new Error('Invalid JSON-RPC response.');
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/json-rpc.cjs',
      },
    ],
    [
      2168,
      { '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getJsonSizeUnsafe = r.parseJson = void 0);
                const n = e('@metamask/utils');
                (r.parseJson = function (e) {
                  return (0, n.getSafeJson)(JSON.parse(e));
                }),
                  (r.getJsonSizeUnsafe = function (e) {
                    const t = JSON.stringify(e);
                    return new TextEncoder().encode(t).byteLength;
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/json.cjs',
      },
    ],
    [
      2169,
      { './json.cjs': 2168, '@metamask/snaps-sdk': 2779, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.validateSnapManifestLocalizations =
                    r.getLocalizedSnapManifest =
                    r.translate =
                    r.TRANSLATION_REGEX =
                    r.getLocalizationFile =
                    r.getValidatedLocalizationFiles =
                    r.LocalizationFileStruct =
                    r.LOCALIZABLE_FIELDS =
                      void 0);
                const n = e('@metamask/snaps-sdk'),
                  s = e('@metamask/superstruct'),
                  i = e('./json.cjs');
                function o(e, t) {
                  const r = t.find(t => t.locale === e);
                  return r || t.find(e => 'en' === e.locale);
                }
                function a(e, t) {
                  const n = e.matchAll(r.TRANSLATION_REGEX);
                  return Array.from(n).reduce((r, [n, s]) => {
                    if (!t)
                      throw new Error(`Failed to translate "${e}": No localization file found.`);
                    const i = t.messages[s.trim()];
                    if (!i)
                      throw new Error(
                        `Failed to translate "${e}": No translation found for "${s.trim()}" in "${t.locale}" file.`
                      );
                    return r.replace(n, i.message);
                  }, e);
                }
                function c(e, t, n) {
                  const s = o(t, n);
                  return r.LOCALIZABLE_FIELDS.reduce((e, t) => {
                    const r = a(e[t], s);
                    return { ...e, [t]: r };
                  }, e);
                }
                (r.LOCALIZABLE_FIELDS = ['description', 'proposedName']),
                  (r.LocalizationFileStruct = (0, s.object)({
                    locale: (0, s.string)(),
                    messages: (0, s.record)(
                      (0, s.string)(),
                      (0, s.object)({
                        message: (0, s.string)(),
                        description: (0, s.optional)((0, s.string)()),
                      })
                    ),
                  })),
                  (r.getValidatedLocalizationFiles = function (e) {
                    for (const t of e)
                      try {
                        t.result = (0, s.create)(
                          (0, i.parseJson)(t.toString()),
                          r.LocalizationFileStruct
                        );
                      } catch (e) {
                        if (e instanceof s.StructError)
                          throw new Error(
                            `Failed to validate localization file "${t.path}": ${e.message}.`
                          );
                        if (e instanceof SyntaxError)
                          throw new Error(`Failed to parse localization file "${t.path}" as JSON.`);
                        throw e;
                      }
                    return e;
                  }),
                  (r.getLocalizationFile = o),
                  (r.TRANSLATION_REGEX = /\{\{\s?([a-zA-Z0-9-_\s]+)\s?\}\}/gu),
                  (r.translate = a),
                  (r.getLocalizedSnapManifest = c),
                  (r.validateSnapManifestLocalizations = function (e, t) {
                    try {
                      t
                        .filter(e => 'en' !== e.locale)
                        .forEach(r => {
                          c(e, r.locale, t);
                        }),
                        c(e, 'en', t);
                    } catch (e) {
                      throw new Error(
                        `Failed to localize Snap manifest: ${(0, n.getErrorMessage)(e)}`
                      );
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/localization.cjs',
      },
    ],
    [
      2170,
      { '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.logWarning = r.logError = r.logInfo = r.snapsLogger = void 0);
                const n = e('@metamask/utils');
                (r.snapsLogger = (0, n.createProjectLogger)('snaps')),
                  (r.logInfo = function (e, ...t) {
                    console.log(e, ...t);
                  }),
                  (r.logError = function (e, ...t) {
                    console.error(e, ...t);
                  }),
                  (r.logWarning = function (e, ...t) {
                    console.warn(e, ...t);
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/logging.cjs',
      },
    ],
    [
      2171,
      { './validation.cjs': 2172 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), s(e('./validation.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/manifest/index.cjs',
      },
    ],
    [
      2172,
      {
        '../array.cjs': 2148,
        '../cronjob.cjs': 2155,
        '../entropy.cjs': 2160,
        '../json-rpc.cjs': 2167,
        '../namespace.cjs': 2173,
        '../snaps.cjs': 2177,
        '../structs.cjs': 2179,
        '../types.cjs': 2181,
        '@metamask/key-tree': 1988,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2995,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createSnapManifest =
                    r.assertIsSnapManifest =
                    r.isSnapManifest =
                    r.SnapManifestStruct =
                    r.InitialConnectionsStruct =
                    r.SnapAuxilaryFilesStruct =
                    r.PermissionsStruct =
                    r.EmptyObjectStruct =
                    r.HandlerCaveatsStruct =
                    r.ProtocolScopesStruct =
                    r.MaxRequestTimeStruct =
                    r.MAXIMUM_REQUEST_TIMEOUT =
                    r.MINIMUM_REQUEST_TIMEOUT =
                    r.LookupMatchersStruct =
                    r.ChainIdsStruct =
                    r.SnapIdsStruct =
                    r.SemVerRangeStruct =
                    r.SnapGetBip32EntropyPermissionsStruct =
                    r.Bip32EntropyStruct =
                    r.CurveStruct =
                    r.bip32entropy =
                    r.Bip32PathStruct =
                    r.FORBIDDEN_COIN_TYPES =
                      void 0);
                const n = e('@metamask/key-tree'),
                  s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = e('../array.cjs'),
                  a = e('../cronjob.cjs'),
                  c = e('../entropy.cjs'),
                  u = e('../json-rpc.cjs'),
                  l = e('../namespace.cjs'),
                  d = e('../snaps.cjs'),
                  m = e('../structs.cjs'),
                  f = e('../types.cjs'),
                  p = [c.SIP_6_MAGIC_VALUE, c.STATE_ENCRYPTION_MAGIC_VALUE];
                r.FORBIDDEN_COIN_TYPES = [60];
                const h = r.FORBIDDEN_COIN_TYPES.map(e => ['m', "44'", `${e}'`]);
                r.Bip32PathStruct = (0, s.refine)(
                  (0, s.array)((0, s.string)()),
                  'BIP-32 path',
                  e =>
                    0 === e.length
                      ? 'Path must be a non-empty BIP-32 derivation path array'
                      : 'm' !== e[0]
                        ? 'Path must start with "m".'
                        : e.length < 3
                          ? 'Paths must have a length of at least three.'
                          : e.slice(1).some(e => !(0, n.isValidBIP32PathSegment)(e))
                            ? 'Path must be a valid BIP-32 derivation path array.'
                            : p.includes(e[1])
                              ? `The purpose "${e[1]}" is not allowed for entropy derivation.`
                              : !h.some(t => (0, o.isEqual)(e.slice(0, t.length), t)) ||
                                `The path "${e.join('/')}" is not allowed for entropy derivation.`
                );
                (r.bip32entropy = e =>
                  (0, s.refine)(
                    e,
                    'BIP-32 entropy',
                    e =>
                      'ed25519' !== e.curve ||
                      !e.path.slice(1).some(e => !e.endsWith("'")) ||
                      'Ed25519 does not support unhardened paths.'
                  )),
                  (r.CurveStruct = (0, s.enums)(['ed25519', 'secp256k1', 'ed25519Bip32'])),
                  (r.Bip32EntropyStruct = (0, r.bip32entropy)(
                    (0, s.type)({ path: r.Bip32PathStruct, curve: r.CurveStruct })
                  )),
                  (r.SnapGetBip32EntropyPermissionsStruct = (0, s.size)(
                    (0, s.array)(r.Bip32EntropyStruct),
                    1,
                    Infinity
                  )),
                  (r.SemVerRangeStruct = (0, s.refine)(
                    (0, s.string)(),
                    'SemVer range',
                    e => !!(0, i.isValidSemVerRange)(e) || 'Expected a valid SemVer range.'
                  )),
                  (r.SnapIdsStruct = (0, s.refine)(
                    (0, s.record)(
                      d.SnapIdStruct,
                      (0, s.object)({ version: (0, s.optional)(r.SemVerRangeStruct) })
                    ),
                    'SnapIds',
                    e => 0 !== Object.keys(e).length
                  )),
                  (r.ChainIdsStruct = (0, s.size)((0, s.array)(l.ChainIdStruct), 1, Infinity)),
                  (r.LookupMatchersStruct = (0, s.union)([
                    (0, s.object)({
                      tlds: (0, s.size)((0, s.array)((0, s.string)()), 1, Infinity),
                    }),
                    (0, s.object)({
                      schemes: (0, s.size)((0, s.array)((0, s.string)()), 1, Infinity),
                    }),
                    (0, s.object)({
                      tlds: (0, s.size)((0, s.array)((0, s.string)()), 1, Infinity),
                      schemes: (0, s.size)((0, s.array)((0, s.string)()), 1, Infinity),
                    }),
                  ])),
                  (r.MINIMUM_REQUEST_TIMEOUT = (0, i.inMilliseconds)(5, i.Duration.Second)),
                  (r.MAXIMUM_REQUEST_TIMEOUT = (0, i.inMilliseconds)(3, i.Duration.Minute)),
                  (r.MaxRequestTimeStruct = (0, s.size)(
                    (0, s.integer)(),
                    r.MINIMUM_REQUEST_TIMEOUT,
                    r.MAXIMUM_REQUEST_TIMEOUT
                  )),
                  (r.ProtocolScopesStruct = (0, s.record)(
                    i.CaipChainIdStruct,
                    (0, s.object)({ methods: (0, s.array)((0, s.string)()) })
                  )),
                  (r.HandlerCaveatsStruct = (0, s.object)({
                    maxRequestTime: (0, s.optional)(r.MaxRequestTimeStruct),
                  })),
                  (r.EmptyObjectStruct = (0, s.object)({})),
                  (r.PermissionsStruct = (0, s.type)({
                    'endowment:assets': (0, s.optional)(
                      (0, m.mergeStructs)(
                        r.HandlerCaveatsStruct,
                        (0, s.object)({ scopes: r.ChainIdsStruct })
                      )
                    ),
                    'endowment:cronjob': (0, s.optional)(
                      (0, m.mergeStructs)(
                        r.HandlerCaveatsStruct,
                        (0, s.object)({ jobs: (0, s.optional)(a.CronjobSpecificationArrayStruct) })
                      )
                    ),
                    'endowment:ethereum-provider': (0, s.optional)(r.EmptyObjectStruct),
                    'endowment:keyring': (0, s.optional)(
                      (0, m.mergeStructs)(r.HandlerCaveatsStruct, u.KeyringOriginsStruct)
                    ),
                    'endowment:protocol': (0, s.optional)(
                      (0, m.mergeStructs)(
                        r.HandlerCaveatsStruct,
                        (0, s.object)({ scopes: r.ProtocolScopesStruct })
                      )
                    ),
                    'endowment:lifecycle-hooks': (0, s.optional)(r.HandlerCaveatsStruct),
                    'endowment:name-lookup': (0, s.optional)(
                      (0, m.mergeStructs)(
                        r.HandlerCaveatsStruct,
                        (0, s.object)({
                          chains: (0, s.optional)(r.ChainIdsStruct),
                          matchers: (0, s.optional)(r.LookupMatchersStruct),
                        })
                      )
                    ),
                    'endowment:network-access': (0, s.optional)(r.EmptyObjectStruct),
                    'endowment:page-home': (0, s.optional)(r.HandlerCaveatsStruct),
                    'endowment:rpc': (0, s.optional)(
                      (0, m.mergeStructs)(r.HandlerCaveatsStruct, u.RpcOriginsStruct)
                    ),
                    'endowment:signature-insight': (0, s.optional)(
                      (0, m.mergeStructs)(
                        r.HandlerCaveatsStruct,
                        (0, s.object)({ allowSignatureOrigin: (0, s.optional)((0, s.boolean)()) })
                      )
                    ),
                    'endowment:transaction-insight': (0, s.optional)(
                      (0, m.mergeStructs)(
                        r.HandlerCaveatsStruct,
                        (0, s.object)({ allowTransactionOrigin: (0, s.optional)((0, s.boolean)()) })
                      )
                    ),
                    'endowment:webassembly': (0, s.optional)(r.EmptyObjectStruct),
                    snap_dialog: (0, s.optional)(r.EmptyObjectStruct),
                    snap_manageState: (0, s.optional)(r.EmptyObjectStruct),
                    snap_manageAccounts: (0, s.optional)(r.EmptyObjectStruct),
                    snap_notify: (0, s.optional)(r.EmptyObjectStruct),
                    snap_getBip32Entropy: (0, s.optional)(r.SnapGetBip32EntropyPermissionsStruct),
                    snap_getBip32PublicKey: (0, s.optional)(r.SnapGetBip32EntropyPermissionsStruct),
                    snap_getBip44Entropy: (0, s.optional)(
                      (0, s.size)(
                        (0, s.array)(
                          (0, s.object)({ coinType: (0, s.size)((0, s.integer)(), 0, 2 ** 32 - 1) })
                        ),
                        1,
                        Infinity
                      )
                    ),
                    snap_getEntropy: (0, s.optional)(r.EmptyObjectStruct),
                    snap_getLocale: (0, s.optional)(r.EmptyObjectStruct),
                    wallet_snap: (0, s.optional)(r.SnapIdsStruct),
                  })),
                  (r.SnapAuxilaryFilesStruct = (0, s.array)((0, s.string)())),
                  (r.InitialConnectionsStruct = (0, s.record)(
                    (0, s.intersection)([(0, s.string)(), (0, f.uri)()]),
                    (0, s.object)({})
                  )),
                  (r.SnapManifestStruct = (0, s.object)({
                    version: i.VersionStruct,
                    description: (0, s.size)((0, s.string)(), 1, 280),
                    proposedName: (0, s.size)((0, s.string)(), 1, 214),
                    repository: (0, s.optional)(
                      (0, s.type)({
                        type: (0, s.size)((0, s.string)(), 1, Infinity),
                        url: (0, s.size)((0, s.string)(), 1, Infinity),
                      })
                    ),
                    source: (0, s.object)({
                      shasum: i.ChecksumStruct,
                      location: (0, s.object)({
                        npm: (0, s.object)({
                          filePath: (0, s.size)((0, s.string)(), 1, Infinity),
                          iconPath: (0, s.optional)((0, s.size)((0, s.string)(), 1, Infinity)),
                          packageName: f.NameStruct,
                          registry: (0, s.union)([
                            (0, s.literal)('https://registry.npmjs.org'),
                            (0, s.literal)('https://registry.npmjs.org/'),
                          ]),
                        }),
                      }),
                      files: (0, s.optional)(r.SnapAuxilaryFilesStruct),
                      locales: (0, s.optional)(r.SnapAuxilaryFilesStruct),
                    }),
                    initialConnections: (0, s.optional)(r.InitialConnectionsStruct),
                    initialPermissions: r.PermissionsStruct,
                    manifestVersion: (0, s.literal)('0.1'),
                    platformVersion: (0, s.optional)(i.VersionStruct),
                    $schema: (0, s.optional)((0, s.string)()),
                  })),
                  (r.isSnapManifest = function (e) {
                    return (0, s.is)(e, r.SnapManifestStruct);
                  }),
                  (r.assertIsSnapManifest = function (e) {
                    (0, i.assertStruct)(
                      e,
                      r.SnapManifestStruct,
                      `"${f.NpmSnapFileNames.Manifest}" is invalid`
                    );
                  }),
                  (r.createSnapManifest = function (e) {
                    return (0, s.create)(e, r.SnapManifestStruct);
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/manifest/validation.cjs',
      },
    ],
    [
      2173,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isNamespace =
                    r.isAccountIdArray =
                    r.isAccountId =
                    r.isChainId =
                    r.isNamespaceId =
                    r.NamespaceIdStruct =
                    r.NamespaceStruct =
                    r.ChainStruct =
                    r.AccountAddressStruct =
                    r.AccountIdArrayStruct =
                    r.AccountIdStruct =
                    r.ChainIdStruct =
                    r.ChainIdStringStruct =
                    r.LimitedString =
                    r.parseAccountId =
                    r.parseChainId =
                    r.ACCOUNT_ADDRESS_REGEX =
                    r.ACCOUNT_ID_REGEX =
                    r.CHAIN_ID_REGEX =
                      void 0);
                const n = e('@metamask/superstruct');
                (r.CHAIN_ID_REGEX =
                  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u),
                  (r.ACCOUNT_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})):(?<accountAddress>[a-zA-Z0-9]{1,64})$/u),
                  (r.ACCOUNT_ADDRESS_REGEX = /^(?<accountAddress>[a-zA-Z0-9]{1,64})$/u),
                  (r.parseChainId = function (e) {
                    const t = r.CHAIN_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid chain ID.');
                    return { namespace: t.groups.namespace, reference: t.groups.reference };
                  }),
                  (r.parseAccountId = function (e) {
                    const t = r.ACCOUNT_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid account ID.');
                    return {
                      address: t.groups.accountAddress,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.LimitedString = (0, n.size)((0, n.string)(), 1, 40)),
                  (r.ChainIdStringStruct = (0, n.define)('Chain ID', (0, n.string)().validator)),
                  (r.ChainIdStruct = (0, n.pattern)(r.ChainIdStringStruct, r.CHAIN_ID_REGEX)),
                  (r.AccountIdStruct = (0, n.pattern)((0, n.string)(), r.ACCOUNT_ID_REGEX)),
                  (r.AccountIdArrayStruct = (0, n.array)(r.AccountIdStruct)),
                  (r.AccountAddressStruct = (0, n.pattern)(
                    (0, n.string)(),
                    r.ACCOUNT_ADDRESS_REGEX
                  )),
                  (r.ChainStruct = (0, n.object)({ id: r.ChainIdStruct, name: r.LimitedString })),
                  (r.NamespaceStruct = (0, n.object)({
                    chains: (0, n.array)(r.ChainStruct),
                    methods: (0, n.optional)((0, n.array)(r.LimitedString)),
                    events: (0, n.optional)((0, n.array)(r.LimitedString)),
                  })),
                  (r.NamespaceIdStruct = (0, n.pattern)((0, n.string)(), /^[-a-z0-9]{3,8}$/u)),
                  (r.isNamespaceId = function (e) {
                    return (0, n.is)(e, r.NamespaceIdStruct);
                  }),
                  (r.isChainId = function (e) {
                    return (0, n.is)(e, r.ChainIdStruct);
                  }),
                  (r.isAccountId = function (e) {
                    return (0, n.is)(e, r.AccountIdStruct);
                  }),
                  (r.isAccountIdArray = function (e) {
                    return (0, n.is)(e, r.AccountIdArrayStruct);
                  }),
                  (r.isNamespace = function (e) {
                    return (0, n.is)(e, r.NamespaceStruct);
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/namespace.cjs',
      },
    ],
    [
      2174,
      { '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.normalizeRelative = void 0);
                const n = e('@metamask/utils');
                r.normalizeRelative = function (e) {
                  return (
                    (0, n.assert)(!e.startsWith('/')),
                    (0, n.assert)(
                      -1 === e.search(/:|\/\//u),
                      `Path "${e}" potentially an URI instead of local relative`
                    ),
                    e.startsWith('./') ? e.slice(2) : e
                  );
                };
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/path.cjs',
      },
    ],
    [
      2175,
      { '@metamask/snaps-sdk/package.json': 2863 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getPlatformVersion = void 0);
                const s = n(e('@metamask/snaps-sdk/package.json'));
                r.getPlatformVersion = function () {
                  return s.default.version;
                };
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/platform-version.cjs',
      },
    ],
    [
      2176,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/promise.cjs',
      },
    ],
    [
      2177,
      {
        './caveats.cjs': 2152,
        './checksum.cjs': 2153,
        './types.cjs': 2181,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2995,
        '@scure/base': 3078,
        'fast-json-stable-stringify': 4501,
        'validate-npm-package-name': 5749,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.verifyRequestedSnapPermissions =
                    r.isSnapPermitted =
                    r.isCaipChainId =
                    r.assertIsValidSnapId =
                    r.isSnapId =
                    r.stripSnapPrefix =
                    r.getSnapPrefix =
                    r.SnapIdStruct =
                    r.HttpSnapIdStruct =
                    r.NpmSnapIdStruct =
                    r.LocalSnapIdStruct =
                    r.BaseSnapIdStruct =
                    r.LOCALHOST_HOSTNAMES =
                    r.validateSnapShasum =
                    r.getSnapChecksum =
                    r.SnapStatusEvents =
                    r.SnapStatus =
                    r.PROPOSED_NAME_REGEX =
                      void 0);
                const s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = e('@scure/base'),
                  a = n(e('fast-json-stable-stringify')),
                  c = n(e('validate-npm-package-name')),
                  u = e('./caveats.cjs'),
                  l = e('./checksum.cjs'),
                  d = e('./types.cjs');
                var m, f;
                function p(e) {
                  const t = e.clone();
                  return delete t.result.source.shasum, (t.value = (0, a.default)(t.result)), t;
                }
                async function h(e) {
                  const {
                      manifest: t,
                      sourceCode: r,
                      svgIcon: n,
                      auxiliaryFiles: s,
                      localizationFiles: i,
                    } = e,
                    a = [p(t), r, n, ...s, ...i].filter(e => e !== undefined);
                  return o.base64.encode(await (0, l.checksumFiles)(a));
                }
                (r.PROPOSED_NAME_REGEX =
                  /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u),
                  (function (e) {
                    (e.Installing = 'installing'),
                      (e.Updating = 'updating'),
                      (e.Running = 'running'),
                      (e.Stopped = 'stopped'),
                      (e.Crashed = 'crashed');
                  })(m || (r.SnapStatus = m = {})),
                  (function (e) {
                    (e.Start = 'START'),
                      (e.Stop = 'STOP'),
                      (e.Crash = 'CRASH'),
                      (e.Update = 'UPDATE');
                  })(f || (r.SnapStatusEvents = f = {})),
                  (r.getSnapChecksum = h),
                  (r.validateSnapShasum = async function (
                    e,
                    t = 'Invalid Snap manifest: manifest shasum does not match computed shasum.'
                  ) {
                    if (e.manifest.result.source.shasum !== (await h(e))) throw new Error(t);
                  }),
                  (r.LOCALHOST_HOSTNAMES = ['localhost', '127.0.0.1', '[::1]']),
                  (r.BaseSnapIdStruct = (0, s.pattern)((0, s.string)(), /^[\x21-\x7E]*$/u));
                const g = (0, d.uri)({
                  protocol: (0, s.enums)(['http:', 'https:']),
                  hostname: (0, s.enums)(r.LOCALHOST_HOSTNAMES),
                  hash: (0, s.empty)((0, s.string)()),
                  search: (0, s.empty)((0, s.string)()),
                });
                function y(e) {
                  const t = Object.values(d.SnapIdPrefixes).find(t => e.startsWith(t));
                  if (t !== undefined) return t;
                  throw new Error(`Invalid or no prefix found for "${e}"`);
                }
                (r.LocalSnapIdStruct = (0, s.refine)(r.BaseSnapIdStruct, 'local Snap Id', e => {
                  if (!e.startsWith(d.SnapIdPrefixes.local))
                    return `Expected local snap ID, got "${e}".`;
                  const [t] = (0, s.validate)(e.slice(d.SnapIdPrefixes.local.length), g);
                  return t ?? !0;
                })),
                  (r.NpmSnapIdStruct = (0, s.intersection)([
                    r.BaseSnapIdStruct,
                    (0, d.uri)({
                      protocol: (0, s.literal)(d.SnapIdPrefixes.npm),
                      pathname: (0, s.refine)((0, s.string)(), 'package name', function* (e) {
                        const t = e.startsWith('/') ? e.slice(1) : e,
                          { errors: r, validForNewPackages: n, warnings: s } = (0, c.default)(t);
                        return (
                          n ||
                            (r === undefined
                              ? ((0, i.assert)(s !== undefined), yield* s)
                              : yield* r),
                          !0
                        );
                      }),
                      search: (0, s.empty)((0, s.string)()),
                      hash: (0, s.empty)((0, s.string)()),
                    }),
                  ])),
                  (r.HttpSnapIdStruct = (0, s.intersection)([
                    r.BaseSnapIdStruct,
                    (0, d.uri)({
                      protocol: (0, s.enums)(['http:', 'https:']),
                      search: (0, s.empty)((0, s.string)()),
                      hash: (0, s.empty)((0, s.string)()),
                    }),
                  ])),
                  (r.SnapIdStruct = (0, s.union)([r.NpmSnapIdStruct, r.LocalSnapIdStruct])),
                  (r.getSnapPrefix = y),
                  (r.stripSnapPrefix = function (e) {
                    return e.replace(y(e), '');
                  }),
                  (r.isSnapId = function (e) {
                    return (0, s.is)(e, r.SnapIdStruct);
                  }),
                  (r.assertIsValidSnapId = function (e) {
                    (0, i.assertStruct)(e, r.SnapIdStruct, 'Invalid snap ID');
                  }),
                  (r.isCaipChainId = function (e) {
                    return (
                      'string' == typeof e &&
                      /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u.test(e)
                    );
                  }),
                  (r.isSnapPermitted = function (e, t) {
                    return Boolean(
                      (
                        e?.wallet_snap?.caveats?.find(e => e.type === u.SnapCaveatType.SnapIds) ??
                        {}
                      ).value?.[t]
                    );
                  }),
                  (r.verifyRequestedSnapPermissions = function (e) {
                    (0, i.assert)((0, i.isObject)(e), 'Requested permissions must be an object.');
                    const { wallet_snap: t } = e;
                    (0, i.assert)(
                      (0, i.isObject)(t),
                      'wallet_snap is missing from the requested permissions.'
                    );
                    const { caveats: r } = t;
                    (0, i.assert)(
                      Array.isArray(r) && 1 === r.length,
                      'wallet_snap must have a caveat property with a single-item array value.'
                    );
                    const [n] = r;
                    (0, i.assert)(
                      (0, i.isObject)(n) &&
                        n.type === u.SnapCaveatType.SnapIds &&
                        (0, i.isObject)(n.value),
                      `The requested permissions do not have a valid ${u.SnapCaveatType.SnapIds} caveat.`
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/snaps.cjs',
      },
    ],
    [
      2178,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.indent = void 0),
                  (r.indent = function (e, t = 2) {
                    return e.replace(/^/gmu, ' '.repeat(t));
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/strings.cjs',
      },
    ],
    [
      2179,
      {
        './strings.cjs': 2178,
        '@metamask/snaps-sdk': 2779,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2995,
        chalk: 4160,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.mergeStructs =
                    r.createUnion =
                    r.validateUnion =
                    r.getStructErrorMessage =
                    r.getStructFailureMessage =
                    r.getStructErrorPrefix =
                    r.getUnionStructNames =
                    r.getStructFromPath =
                    r.createFromStruct =
                    r.getError =
                    r.arrayToGenerator =
                    r.SnapsStructError =
                    r.named =
                      void 0);
                const n = e('@metamask/snaps-sdk'),
                  s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = e('chalk'),
                  a = e('./strings.cjs');
                function c(e, t, r) {
                  return r ? t(e) : e;
                }
                r.named = function (e, t) {
                  return new s.Struct({ ...t, type: e });
                };
                class u extends s.StructError {
                  constructor(e, t, r, n, s, i = !0) {
                    super(n, s),
                      (this.name = 'SnapsStructError'),
                      (this.message = `${t}.\n\n${g(e, [...s()], i)}${r ? `\n\n${r}` : ''}`);
                  }
                }
                function* l(e) {
                  for (const t of e) yield t;
                }
                function d({ struct: e, prefix: t, suffix: r = '', error: n, colorize: s }) {
                  return new u(e, t, r, n, () => l(n.failures()), s);
                }
                function m(e, t) {
                  return t.reduce(
                    (t, r) => ((0, i.isObject)(e.schema) && e.schema[r] ? e.schema[r] : t),
                    e
                  );
                }
                function f(e, t = !0) {
                  return Array.isArray(e.schema)
                    ? e.schema.map(({ type: e }) => c(e, o.green, t))
                    : null;
                }
                function p(e, t = !0) {
                  return 'never' === e.type || 0 === e.path.length
                    ? ''
                    : `At path: ${c(e.path.join('.'), o.bold, t)} — `;
                }
                function h(e, t, r = !0) {
                  const n = c(JSON.stringify(t.value), o.red, r),
                    s = p(t, r);
                  if ('union' === t.type) {
                    const i = f(m(e, t.path), r);
                    return i
                      ? `${s}Expected the value to be one of: ${i.join(', ')}, but received: ${n}.`
                      : `${s}${t.message}.`;
                  }
                  if ('literal' === t.type) {
                    return `${s}${t.message.replace(/the literal `(.+)`,/u, `the value to be \`${c('$1', o.green, r)}\`,`).replace(/, but received: (.+)/u, `, but received: ${c('$1', o.red, r)}`)}.`;
                  }
                  if ('never' === t.type)
                    return `Unknown key: ${c(t.path.join('.'), o.bold, r)}, received: ${n}.`;
                  if ('size' === t.refinement) {
                    return `${s}${t.message
                      .replace(
                        /length between `(\d+)` and `(\d+)`/u,
                        `length between ${c('$1', o.green, r)} and ${c('$2', o.green, r)},`
                      )
                      .replace(/length of `(\d+)`/u, `length of ${c('$1', o.red, r)}`)
                      .replace(/a array/u, 'an array')}.`;
                  }
                  return t.refinement !== undefined
                    ? `${s}${t.message}.`
                    : `${s}Expected a value of type ${c(t.type, o.green, r)}, but received: ${n}.`;
                }
                function g(e, t, r = !0) {
                  return t.map(t => (0, a.indent)(`• ${h(e, t, r)}`)).join('\n');
                }
                function y(e, t, r, o = !1) {
                  (0, i.assert)(
                    t.schema,
                    'Expected a struct with a schema. Make sure to use `union` from `@metamask/snaps-sdk`.'
                  ),
                    (0, i.assert)(t.schema.length > 0, 'Expected a non-empty array of structs.');
                  const a = t.schema.map(e => e.schema[r]),
                    c = (0, s.type)({ [r]: (0, n.union)(a) }),
                    [u] = (0, s.validate)(e, c, { coerce: o });
                  if (u) throw new Error(h(c, u.failures()[0], !1));
                  const l = e,
                    d = t.schema.filter(e => (0, s.is)(l[r], e.schema[r]));
                  (0, i.assert)(d.length > 0, 'Expected a struct to match the value.');
                  const m = d.map(e => (0, s.validate)(l, e, { coerce: o })),
                    f = m.find(([e]) => !e);
                  if (f) return f[1];
                  (0, i.assert)(m[0][0], 'Expected at least one error.');
                  const p = m.reduce(
                    (e, [t]) => (
                      (0, i.assert)(t, 'Expected an error.'),
                      t.failures().length < e.failures().length ? t : e
                    ),
                    m[0][0]
                  );
                  throw new Error(h(t, p.failures()[0], !1));
                }
                (r.SnapsStructError = u),
                  (r.arrayToGenerator = l),
                  (r.getError = d),
                  (r.createFromStruct = function (e, t, r, n = '') {
                    try {
                      return (0, s.create)(e, t);
                    } catch (e) {
                      if (e instanceof s.StructError)
                        throw d({ struct: t, prefix: r, suffix: n, error: e });
                      throw e;
                    }
                  }),
                  (r.getStructFromPath = m),
                  (r.getUnionStructNames = f),
                  (r.getStructErrorPrefix = p),
                  (r.getStructFailureMessage = h),
                  (r.getStructErrorMessage = g),
                  (r.validateUnion = y),
                  (r.createUnion = function (e, t, r) {
                    return y(e, t, r, !0);
                  }),
                  (r.mergeStructs = function (...e) {
                    const t = s.assign(...e);
                    return new s.Struct({
                      ...t,
                      *refiner(t, r) {
                        for (const n of e) yield* n.refiner(t, r);
                      },
                    });
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/structs.cjs',
      },
    ],
    [
      2180,
      { '@metamask/utils': 2995, 'fast-xml-parser': 4503 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isSvg = r.parseSvg = void 0);
                const n = e('@metamask/utils'),
                  s = e('fast-xml-parser');
                function i(e) {
                  try {
                    const t = e.trim();
                    (0, n.assert)(t.length > 0);
                    const r = new s.XMLParser({
                      ignoreAttributes: !1,
                      parseAttributeValue: !0,
                    }).parse(t, !0);
                    return (
                      (0, n.assert)((0, n.hasProperty)(r, 'svg')),
                      (0, n.isObject)(r.svg) ? r.svg : {}
                    );
                  } catch {
                    throw new Error('Snap icon must be a valid SVG.');
                  }
                }
                (r.parseSvg = i),
                  (r.isSvg = function (e) {
                    try {
                      return i(e), !0;
                    } catch {
                      return !1;
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/svg.cjs',
      },
    ],
    [
      2181,
      { '@metamask/superstruct': 2913, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.WALLET_SNAP_PERMISSION_KEY =
                    r.isValidUrl =
                    r.uri =
                    r.SNAP_STREAM_NAMES =
                    r.SnapIdPrefixes =
                    r.NpmSnapPackageJsonStruct =
                    r.NameStruct =
                    r.NpmSnapFileNames =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils');
                var i, o, a;
                !(function (e) {
                  (e.PackageJson = 'package.json'), (e.Manifest = 'snap.manifest.json');
                })(i || (r.NpmSnapFileNames = i = {})),
                  (r.NameStruct = (0, n.size)(
                    (0, n.pattern)(
                      (0, n.string)(),
                      /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/u
                    ),
                    1,
                    214
                  )),
                  (r.NpmSnapPackageJsonStruct = (0, n.type)({
                    version: s.VersionStruct,
                    name: r.NameStruct,
                    main: (0, n.optional)((0, n.size)((0, n.string)(), 1, Infinity)),
                    repository: (0, n.optional)(
                      (0, n.type)({
                        type: (0, n.size)((0, n.string)(), 1, Infinity),
                        url: (0, n.size)((0, n.string)(), 1, Infinity),
                      })
                    ),
                  })),
                  (function (e) {
                    (e.npm = 'npm:'), (e.local = 'local:');
                  })(o || (r.SnapIdPrefixes = o = {})),
                  (function (e) {
                    (e.JSON_RPC = 'jsonRpc'), (e.COMMAND = 'command');
                  })(a || (r.SNAP_STREAM_NAMES = a = {}));
                (r.uri = (e = {}) =>
                  (0, n.refine)((0, n.union)([(0, n.string)(), (0, n.instance)(URL)]), 'uri', t => {
                    try {
                      const r = new URL(t),
                        s = (0, n.type)(e);
                      return (0, n.assert)(r, s), !0;
                    } catch {
                      return `Expected URL, got "${t.toString()}".`;
                    }
                  })),
                  (r.isValidUrl = function (e, t = {}) {
                    return (0, n.is)(e, (0, r.uri)(t));
                  }),
                  (r.WALLET_SNAP_PERMISSION_KEY = 'wallet_snap');
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/types.cjs',
      },
    ],
    [
      2182,
      {
        './url.cjs': 2183,
        '@metamask/snaps-sdk': 2779,
        '@metamask/snaps-sdk/jsx': 2862,
        '@metamask/snaps-sdk/jsx-runtime': 2861,
        '@metamask/utils': 2995,
        marked: 4932,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.serialiseJsx =
                    r.walkJsx =
                    r.getJsxChildren =
                    r.hasChildren =
                    r.getTotalTextLength =
                    r.validateJsxLinks =
                    r.validateTextLinks =
                    r.validateLink =
                    r.getJsxElementFromComponent =
                    r.getTextChildren =
                      void 0);
                const n = e('@metamask/snaps-sdk/jsx-runtime'),
                  s = e('@metamask/snaps-sdk'),
                  i = e('@metamask/snaps-sdk/jsx'),
                  o = e('@metamask/utils'),
                  a = e('marked'),
                  c = e('./url.cjs'),
                  u = 5e4,
                  l = ['https:', 'mailto:', 'metamask:'];
                function d(e) {
                  switch (e) {
                    case 'primary':
                      return 'primary';
                    case 'secondary':
                      return 'destructive';
                    default:
                      return undefined;
                  }
                }
                function m(e) {
                  return 1 === e.length ? e[0] : e;
                }
                function f(e) {
                  return e.tokens && e.tokens.length > 0 ? m(e.tokens.flatMap(h)) : e.href;
                }
                function p(e) {
                  return m(e.flatMap(h));
                }
                function h(e) {
                  switch (e.type) {
                    case 'link':
                      return (0, n.jsx)(i.Link, { href: e.href, children: f(e) });
                    case 'text':
                      return e.text;
                    case 'strong':
                      return (0, n.jsx)(i.Bold, { children: p(e.tokens) });
                    case 'em':
                      return (0, n.jsx)(i.Italic, { children: p(e.tokens) });
                    default:
                      return null;
                  }
                }
                function g(e) {
                  const t = (0, a.lexer)(e, { gfm: !1 }),
                    r = [];
                  return (
                    (0, a.walkTokens)(t, e => {
                      if ('paragraph' === e.type) {
                        r.length > 0 && r.push('\n\n');
                        const { tokens: t } = e;
                        r.push(...t.flatMap(h));
                      }
                    }),
                    r.filter(e => null !== e)
                  );
                }
                function y(e, t, r) {
                  try {
                    const n = new URL(e);
                    if (
                      ((0, o.assert)(
                        l.includes(n.protocol),
                        `Protocol must be one of: ${l.join(', ')}.`
                      ),
                      'metamask:' === n.protocol)
                    ) {
                      const t = (0, c.parseMetaMaskUrl)(e);
                      t.snapId &&
                        (0, o.assert)(r(t.snapId), 'The Snap being navigated to is not installed.');
                    } else if ('mailto:' === n.protocol) {
                      const e = n.pathname.split(',');
                      for (const r of e) {
                        const e = r.split('@')[1];
                        (0, o.assert)(!e.includes(':'));
                        const n = `https://${e}`;
                        (0, o.assert)(!t(n), 'The specified URL is not allowed.');
                      }
                      return;
                    }
                    (0, o.assert)(!t(n.href), 'The specified URL is not allowed.');
                  } catch (e) {
                    throw new Error(
                      `Invalid URL: ${'ERR_ASSERTION' === e?.code ? e.message : 'Unable to parse URL.'}`
                    );
                  }
                }
                function w(e) {
                  const { type: t } = e;
                  switch (t) {
                    case s.NodeType.Panel:
                      return e.children.reduce((e, t) => e + w(t), 0);
                    case s.NodeType.Row:
                      return w(e.value);
                    case s.NodeType.Text:
                      return e.value.length;
                    default:
                      return 0;
                  }
                }
                function k(e) {
                  return (0, o.hasProperty)(e.props, 'children');
                }
                function b(e) {
                  return Boolean(e) && !0 !== e;
                }
                function _(e) {
                  if (k(e)) {
                    if (Array.isArray(e.props.children))
                      return e.props.children.filter(b).flat(Infinity);
                    if (e.props.children) return [e.props.children];
                  }
                  return [];
                }
                function S(e, t, r = 0) {
                  if (Array.isArray(e)) {
                    for (const n of e) {
                      const e = S(n, t, r);
                      if (e !== undefined) return e;
                    }
                    return undefined;
                  }
                  const n = t(e, r);
                  if (n !== undefined) return n;
                  if (
                    (0, o.hasProperty)(e, 'props') &&
                    (0, o.isPlainObject)(e.props) &&
                    (0, o.hasProperty)(e.props, 'children')
                  ) {
                    const n = _(e);
                    for (const e of n)
                      if ((0, o.isPlainObject)(e)) {
                        const n = S(e, t, r + 1);
                        if (n !== undefined) return n;
                      }
                  }
                  return undefined;
                }
                function E(e) {
                  return Object.entries(e)
                    .filter(([e]) => 'children' !== e)
                    .sort(([e], [t]) => e.localeCompare(t))
                    .map(([e, t]) => {
                      return ` ${e}=${((r = t), 'string' == typeof r ? `"${r}"` : `{${JSON.stringify(r)}}`)}`;
                      var r;
                    })
                    .join('');
                }
                (r.getTextChildren = g),
                  (r.getJsxElementFromComponent = function (e) {
                    return (
                      (function (e) {
                        const t = w(e);
                        (0, o.assert)(
                          t <= u,
                          `The text in a Snap UI may not be larger than ${u / 1e3} kB.`
                        );
                      })(e),
                      (function e(t) {
                        switch (t.type) {
                          case s.NodeType.Address:
                            return (0, n.jsx)(i.Address, { address: t.value });
                          case s.NodeType.Button:
                            return (0, n.jsx)(i.Button, {
                              name: t.name,
                              variant: d(t.variant),
                              type: t.buttonType,
                              children: t.value,
                            });
                          case s.NodeType.Copyable:
                            return (0, n.jsx)(i.Copyable, {
                              value: t.value,
                              sensitive: t.sensitive,
                            });
                          case s.NodeType.Divider:
                            return (0, n.jsx)(i.Divider, {});
                          case s.NodeType.Form:
                            return (0, n.jsx)(i.Form, {
                              name: t.name,
                              children: m(t.children.map(e)),
                            });
                          case s.NodeType.Heading:
                            return (0, n.jsx)(i.Heading, { children: t.value });
                          case s.NodeType.Image:
                            return (0, n.jsx)(i.Image, { src: t.value });
                          case s.NodeType.Input:
                            return (0, n.jsx)(i.Field, {
                              label: t.label,
                              error: t.error,
                              children: (0, n.jsx)(i.Input, {
                                name: t.name,
                                type: t.inputType,
                                value: t.value,
                                placeholder: t.placeholder,
                              }),
                            });
                          case s.NodeType.Panel:
                            return (0, n.jsx)(i.Box, { children: m(t.children.map(e)) });
                          case s.NodeType.Row:
                            return (0, n.jsx)(i.Row, {
                              label: t.label,
                              variant: t.variant,
                              children: e(t.value),
                            });
                          case s.NodeType.Spinner:
                            return (0, n.jsx)(i.Spinner, {});
                          case s.NodeType.Text:
                            return (0, n.jsx)(i.Text, { children: m(g(t.value)) });
                          default:
                            return (0, o.assertExhaustive)(t);
                        }
                      })(e)
                    );
                  }),
                  (r.validateLink = y),
                  (r.validateTextLinks = function (e, t, r) {
                    const n = (function (e) {
                      const t = (0, a.lexer)(e, { gfm: !1 }),
                        r = [];
                      return (
                        (0, a.walkTokens)(t, e => {
                          'link' === e.type && r.push(e);
                        }),
                        r
                      );
                    })(e);
                    for (const e of n) y(e.href, t, r);
                  }),
                  (r.validateJsxLinks = function (e, t, r) {
                    S(e, e => {
                      'Link' === e.type && y(e.props.href, t, r);
                    });
                  }),
                  (r.getTotalTextLength = w),
                  (r.hasChildren = k),
                  (r.getJsxChildren = _),
                  (r.walkJsx = S),
                  (r.serialiseJsx = function e(t, r = 0) {
                    if (Array.isArray(t)) return t.map(t => e(t, r)).join('');
                    const n = '  '.repeat(r);
                    if ('string' == typeof t) return `${n}${t}\n`;
                    if (!t) return '';
                    const { type: s, props: i } = t,
                      a = r > 0 ? '\n' : '';
                    if ((0, o.hasProperty)(i, 'children')) {
                      const t = e(i.children, r + 1);
                      return `${n}<${s}${E(i)}>\n${t}${n}</${s}>${a}`;
                    }
                    return `${n}<${s}${E(i)} />${a}`;
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/ui.cjs',
      },
    ],
    [
      2183,
      { './snaps.cjs': 2177, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.parseMetaMaskUrl = r.SNAP_PATHS = r.CLIENT_PATHS = void 0);
                const n = e('@metamask/utils'),
                  s = e('./snaps.cjs');
                (r.CLIENT_PATHS = ['/']),
                  (r.SNAP_PATHS = ['/home']),
                  (r.parseMetaMaskUrl = function (e) {
                    const t = new URL(e),
                      { protocol: i } = t;
                    if ('metamask:' !== i)
                      throw new Error(
                        `Unable to parse URL. Expected the protocol to be "metamask:", but received "${i}".`
                      );
                    const [o, ...a] = t.href.replace('metamask://', '').split('/'),
                      c = `/${a.join('/')}`;
                    switch (o) {
                      case 'client':
                        return (
                          (0, n.assert)(
                            r.CLIENT_PATHS.includes(c),
                            `Unable to navigate to "${c}". The provided path is not allowed.`
                          ),
                          { authority: o, path: c }
                        );
                      case 'snap':
                        return (function (e) {
                          const t = 'Invalid MetaMask url:',
                            i = (0, s.stripSnapPrefix)(e.slice(1)),
                            o = e.slice(1).startsWith('npm:') ? 'npm:' : 'local:',
                            a = i.startsWith('@'),
                            c = i.split('/'),
                            u = `/${c[c.length - 1]}`;
                          let l;
                          if ('local:' === o) {
                            const [e, , ...s] = c.slice(0, -1);
                            (l = `${e}//${s.join('/')}`),
                              (0, n.assert)(r.SNAP_PATHS.includes(u), `${t} invalid snap path.`);
                          } else
                            (l = a ? `${c[0]}/${c[1]}` : c[0]),
                              (0, n.assert)(
                                a
                                  ? 3 === c.length && r.SNAP_PATHS.includes(u)
                                  : 2 === c.length && r.SNAP_PATHS.includes(u),
                                `${t} invalid snap path.`
                              );
                          const d = `${o}${l}`;
                          return (
                            (0, s.assertIsValidSnapId)(d), { authority: 'snap', snapId: d, path: u }
                          );
                        })(c);
                      default:
                        throw new Error(
                          `Expected "metamask:" URL to start with "client" or "snap", but received "${o}".`
                        );
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/url.cjs',
      },
    ],
    [
      2184,
      {
        './icon.cjs': 2164,
        './localization.cjs': 2169,
        './manifest/validation.cjs': 2172,
        './snaps.cjs': 2177,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.validateFetchedSnap = void 0);
                const n = e('./icon.cjs'),
                  s = e('./localization.cjs'),
                  i = e('./manifest/validation.cjs'),
                  o = e('./snaps.cjs');
                r.validateFetchedSnap = async function (e) {
                  (0, i.assertIsSnapManifest)(e.manifest.result),
                    await (0, o.validateSnapShasum)(e),
                    (0, s.validateSnapManifestLocalizations)(
                      e.manifest.result,
                      e.localizationFiles.map(e => e.result)
                    ),
                    e.svgIcon && (0, n.assertIsSnapIcon)(e.svgIcon);
                };
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/validation.cjs',
      },
    ],
    [
      2185,
      { '@metamask/superstruct': 2913, '@metamask/utils': 2995, semver: 5617 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.resolveVersionRange =
                    r.getTargetVersion =
                    r.DEFAULT_REQUESTED_SNAP_VERSION =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils'),
                  i = e('semver');
                (r.DEFAULT_REQUESTED_SNAP_VERSION = '*'),
                  (r.getTargetVersion = function (e, t) {
                    const r = (0, i.maxSatisfying)(e, t);
                    return r || (0, i.maxSatisfying)(e, t, { includePrerelease: !0 });
                  }),
                  (r.resolveVersionRange = function (e) {
                    return e === undefined || 'latest' === e
                      ? [undefined, r.DEFAULT_REQUESTED_SNAP_VERSION]
                      : (0, n.validate)(e, s.VersionRangeStruct);
                  });
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/versions.cjs',
      },
    ],
    [
      2186,
      { '../deep-clone.cjs': 2157, '@metamask/utils': 2995, '@scure/base': 3078 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.VirtualFile = void 0);
                const n = e('@metamask/utils'),
                  s = e('@scure/base'),
                  i = e('../deep-clone.cjs');
                class o {
                  constructor(e) {
                    let t;
                    (t = 'string' == typeof e || e instanceof Uint8Array ? { value: e } : e),
                      (this.value = t?.value ?? ''),
                      (this.result = t?.result ?? undefined),
                      (this.data = t?.data ?? {}),
                      (this.path = t?.path ?? '/');
                  }
                  get size() {
                    return 'string' == typeof this.value
                      ? this.value.length
                      : this.value.byteLength;
                  }
                  toString(e) {
                    if ('string' == typeof this.value)
                      return (0, n.assert)(e === undefined, 'Tried to encode string.'), this.value;
                    if (this.value instanceof Uint8Array && 'hex' === e)
                      return (0, n.bytesToHex)(this.value);
                    if (this.value instanceof Uint8Array && 'base64' === e)
                      return s.base64.encode(this.value);
                    return new TextDecoder(e).decode(this.value);
                  }
                  clone() {
                    const e = new o();
                    return (
                      'string' == typeof this.value
                        ? (e.value = this.value)
                        : (e.value = this.value.slice(0)),
                      (e.result = (0, i.deepClone)(this.result)),
                      (e.data = (0, i.deepClone)(this.data)),
                      (e.path = this.path),
                      e
                    );
                  }
                }
                r.VirtualFile = o;
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/virtual-file/VirtualFile.cjs',
      },
    ],
    [
      2187,
      { './VirtualFile.cjs': 2186 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), s(e('./VirtualFile.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/multichain-transactions-controller>@metamask/snaps-utils',
        file: 'node_modules/@metamask/multichain-transactions-controller/node_modules/@metamask/snaps-utils/dist/virtual-file/index.cjs',
      },
    ],
    [
      2188,
      {
        './types.cjs': 2196,
        '@metamask/base-controller': 1407,
        '@metamask/controller-utils': 1515,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d,
                  m,
                  f,
                  p,
                  h,
                  g,
                  y,
                  w,
                  k,
                  b,
                  _,
                  S,
                  E,
                  T,
                  v,
                  A,
                  I,
                  C,
                  j,
                  N,
                  P =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  R =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NameController =
                    r.NameOrigin =
                    r.PROPOSED_NAME_EXPIRE_DURATION =
                    r.FALLBACK_VARIATION =
                      void 0);
                const O = e('@metamask/base-controller'),
                  M = e('@metamask/controller-utils'),
                  x = e('./types.cjs');
                var B;
                (r.FALLBACK_VARIATION = '*'),
                  (r.PROPOSED_NAME_EXPIRE_DURATION = 86400),
                  (function (e) {
                    (e.ACCOUNT_IDENTITY = 'account-identity'),
                      (e.ADDRESS_BOOK = 'address-book'),
                      (e.API = 'api'),
                      (e.UI = 'ui');
                  })(B || (r.NameOrigin = B = {}));
                const D = {
                  names: { persist: !0, anonymous: !1 },
                  nameSources: { persist: !0, anonymous: !1 },
                };
                class U extends O.BaseController {
                  constructor({ messenger: e, providers: t, state: r, updateDelay: o }) {
                    super({
                      name: 'NameController',
                      metadata: D,
                      messenger: e,
                      state: {
                        names: { [x.NameType.ETHEREUM_ADDRESS]: {} },
                        nameSources: {},
                        ...r,
                      },
                    }),
                      n.add(this),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      P(this, s, t, 'f'),
                      P(this, i, o ?? 120, 'f');
                  }
                  setName(e) {
                    R(this, n, 'm', g).call(this, e);
                    const { value: t, type: r, name: s, sourceId: i, origin: o, variation: a } = e,
                      c = i ?? null,
                      u = null === s ? null : B.API,
                      l = o ?? u;
                    R(this, n, 'm', p).call(this, t, r, a, e => {
                      (e.name = s), (e.sourceId = c), (e.origin = l);
                    });
                  }
                  async updateProposedNames(e) {
                    R(this, n, 'm', y).call(this, e);
                    const t = (
                      await Promise.all(
                        R(this, s, 'f').map(t => R(this, n, 'm', u).call(this, e, t))
                      )
                    ).filter(e => Boolean(e));
                    return (
                      R(this, n, 'm', o).call(this, e, t),
                      R(this, n, 'm', a).call(this, R(this, s, 'f')),
                      R(this, n, 'm', j).call(this),
                      R(this, n, 'm', c).call(this, t)
                    );
                  }
                }
                (r.NameController = U),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (n = new WeakSet()),
                  (o = function (e, t) {
                    const { value: r, type: s, variation: i } = e,
                      o = R(this, n, 'm', h).call(this);
                    R(this, n, 'm', p).call(this, r, s, i, e => {
                      R(this, n, 'm', C).call(this, e.proposedNames, s);
                      for (const r of t) {
                        const { results: t } = r;
                        for (const n of Object.keys(r.results)) {
                          const r = t[n],
                            { proposedNames: s, updateDelay: i } = r,
                            a = e.proposedNames[n] ?? {
                              proposedNames: [],
                              lastRequestTime: null,
                              updateDelay: null,
                            };
                          (e.proposedNames[n] = a),
                            s && (a.proposedNames = s),
                            (a.lastRequestTime = o),
                            (a.updateDelay = i ?? null);
                        }
                      }
                    });
                  }),
                  (a = function (e) {
                    const t = { ...this.state.nameSources };
                    for (const r of e) {
                      const { sourceLabels: e } = r.getMetadata();
                      for (const r of Object.keys(e)) t[r] = { label: e[r] };
                    }
                    this.update(e => {
                      e.nameSources = t;
                    });
                  }),
                  (c = function (e) {
                    return e.reduce(
                      (e, t) => {
                        const { results: r } = t;
                        for (const t of Object.keys(r)) {
                          const { proposedNames: n, error: s } = r[t];
                          e.results[t] = { proposedNames: n, error: s };
                        }
                        return e;
                      },
                      { results: {} }
                    );
                  }),
                  (u = async function (e, t) {
                    const {
                        value: r,
                        type: s,
                        sourceIds: o,
                        onlyUpdateAfterDelay: a,
                        variation: c,
                      } = e,
                      u = c ?? '',
                      d = R(this, n, 'm', I).call(this, t, s),
                      p = R(this, n, 'm', h).call(this),
                      g = R(this, n, 'm', m).call(this, r, s),
                      y = d.filter(e => {
                        if (o && !o.includes(e)) return !1;
                        if (a) {
                          const t = this.state.names[s]?.[g]?.[u] ?? {},
                            r = t.proposedNames?.[e] ?? {},
                            n = r.lastRequestTime ?? 0,
                            o = r.updateDelay ?? R(this, i, 'f');
                          if (p - n < o) return !1;
                        }
                        return !0;
                      });
                    if (!y.length) return undefined;
                    const w = {
                      value: R(this, n, 'm', m).call(this, r, s),
                      type: s,
                      sourceIds: o ? y : undefined,
                      variation: R(this, n, 'm', f).call(this, u, s),
                    };
                    let k, b;
                    try {
                      (b = await t.getProposedNames(w)), (k = b.error);
                    } catch (e) {
                      k = e;
                    }
                    return R(this, n, 'm', l).call(this, b, k, y);
                  }),
                  (l = function (e, t, r) {
                    const s = t ?? undefined;
                    return {
                      results: r.reduce((r, s) => {
                        const i = e?.results?.[s];
                        return { ...r, [s]: R(this, n, 'm', d).call(this, i, t) };
                      }, {}),
                      error: s,
                    };
                  }),
                  (d = function (e, t) {
                    const r = e?.error ?? t ?? undefined,
                      n = e?.updateDelay ?? undefined;
                    let s = r ? undefined : (e?.proposedNames ?? undefined);
                    return (
                      s && (s = s.filter(e => e?.length)),
                      { proposedNames: s, error: r, updateDelay: n }
                    );
                  }),
                  (m = function (e, t) {
                    return t === x.NameType.ETHEREUM_ADDRESS ? e.toLowerCase() : e;
                  }),
                  (f = function (e, t) {
                    return t === x.NameType.ETHEREUM_ADDRESS ? e.toLowerCase() : e;
                  }),
                  (p = function (e, t, r, s) {
                    const i = r ?? '',
                      o = R(this, n, 'm', m).call(this, e, t),
                      a = R(this, n, 'm', f).call(this, i, t);
                    [o, a].some(e => !(0, M.isSafeDynamicKey)(e)) ||
                      this.update(e => {
                        const r = e.names[t] || {};
                        e.names[t] = r;
                        const n = r[o] || {};
                        r[o] = n;
                        const i = n[a] ?? {
                          proposedNames: {},
                          name: null,
                          sourceId: null,
                          origin: null,
                        };
                        (n[a] = i), s(i);
                      });
                  }),
                  (h = function () {
                    return Math.round(Date.now() / 1e3);
                  }),
                  (g = function (e) {
                    const { name: t, value: r, type: s, sourceId: i, variation: o, origin: a } = e,
                      c = [];
                    if (
                      (R(this, n, 'm', w).call(this, r, c),
                      R(this, n, 'm', k).call(this, s, c),
                      R(this, n, 'm', b).call(this, t, c),
                      R(this, n, 'm', S).call(this, i, s, t, c),
                      R(this, n, 'm', T).call(this, o, s, c),
                      R(this, n, 'm', v).call(this, a, t, c),
                      c.length)
                    )
                      throw new Error(c.join(' '));
                  }),
                  (y = function (e) {
                    const { value: t, type: r, sourceIds: s, variation: i } = e,
                      o = [];
                    if (
                      (R(this, n, 'm', w).call(this, t, o),
                      R(this, n, 'm', k).call(this, r, o),
                      R(this, n, 'm', _).call(this, s, r, o),
                      R(this, n, 'm', E).call(this, r, o),
                      R(this, n, 'm', T).call(this, i, r, o),
                      o.length)
                    )
                      throw new Error(o.join(' '));
                  }),
                  (w = function (e, t) {
                    (e?.length && 'string' == typeof e) ||
                      t.push('Must specify a non-empty string for value.');
                  }),
                  (k = function (e, t) {
                    Object.values(x.NameType).includes(e) ||
                      t.push(
                        `Must specify one of the following types: ${Object.values(x.NameType).join(', ')}`
                      );
                  }),
                  (b = function (e, t) {
                    null !== e &&
                      ((e?.length && 'string' == typeof e) ||
                        t.push('Must specify a non-empty string or null for name.'));
                  }),
                  (_ = function (e, t, r) {
                    if (!e) return;
                    const s = R(this, n, 'm', A).call(this, t),
                      i = [];
                    for (const t of e) s.includes(t) || i.push(t);
                    i.length && r.push(`Unknown source IDs for type '${t}': ${i.join(', ')}`);
                  }),
                  (S = function (e, t, r, s) {
                    if (null === e || e === undefined) return;
                    if (null === r)
                      return void s.push(
                        `Cannot specify a source ID when clearing the saved name: ${e}`
                      );
                    const i = R(this, n, 'm', A).call(this, t);
                    e.length && 'string' == typeof e
                      ? i.includes(e) || s.push(`Unknown source ID for type '${t}': ${e}`)
                      : s.push('Must specify a non-empty string for sourceId.');
                  }),
                  (E = function (e, t) {
                    const r = R(this, n, 'm', A).call(this, e),
                      s = r.filter((e, t) => r.indexOf(e) !== t);
                    s.length &&
                      t.push(`Duplicate source IDs found for type '${e}': ${s.join(', ')}`);
                  }),
                  (T = function (e, t, n) {
                    t === x.NameType.ETHEREUM_ADDRESS &&
                      ((e?.length &&
                        'string' == typeof e &&
                        (e.match(/^0x[0-9A-Fa-f]+$/u) || e === r.FALLBACK_VARIATION)) ||
                        n.push(
                          `Must specify a chain ID in hexidecimal format or the fallback, "${r.FALLBACK_VARIATION}", for variation when using '${t}' type.`
                        ));
                  }),
                  (v = function (e, t, r) {
                    e &&
                      (null !== t
                        ? Object.values(B).includes(e) ||
                          r.push(
                            `Must specify one of the following origins: ${Object.values(B).join(', ')}`
                          )
                        : r.push(`Cannot specify an origin when clearing the saved name: ${e}`));
                  }),
                  (A = function (e) {
                    return R(this, s, 'f')
                      .map(t => R(this, n, 'm', I).call(this, t, e))
                      .flat();
                  }),
                  (I = function (e, t) {
                    return e.getMetadata().sourceIds[t];
                  }),
                  (C = function (e, t) {
                    if (0 === Object.keys(e).length) return;
                    const r = R(this, n, 'm', A).call(this, t),
                      s = Object.keys(e).filter(e => !r.includes(e));
                    for (const t of s) delete e[t];
                  }),
                  (j = function () {
                    const e = R(this, n, 'm', h).call(this);
                    this.update(t => {
                      const s = R(this, n, 'm', N).call(this, t);
                      for (const { nameType: n, value: i, variation: o, entry: a } of s) {
                        if (null !== a.name) continue;
                        Object.values(a.proposedNames).every(
                          t => e - (t.lastRequestTime ?? 0) >= r.PROPOSED_NAME_EXPIRE_DURATION
                        ) && delete t.names[n][i][o];
                      }
                    });
                  }),
                  (N = function (e) {
                    return Object.entries(e.names).flatMap(([e, t]) =>
                      Object.entries(t).flatMap(([t, r]) =>
                        Object.entries(r).map(([r, n]) => ({
                          entry: n,
                          nameType: e,
                          value: t,
                          variation: r,
                        }))
                      )
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/NameController.cjs',
      },
    ],
    [
      2189,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.ETHERSCAN_SUPPORTED_NETWORKS = r.CHAIN_IDS = void 0),
                  (r.CHAIN_IDS = {
                    MAINNET: '0x1',
                    GOERLI: '0x5',
                    BSC: '0x38',
                    BSC_TESTNET: '0x61',
                    OPTIMISM: '0xa',
                    OPTIMISM_SEPOLIA: '0xaa37dc',
                    POLYGON: '0x89',
                    POLYGON_TESTNET: '0x13881',
                    AVALANCHE: '0xa86a',
                    AVALANCHE_TESTNET: '0xa869',
                    FANTOM: '0xfa',
                    FANTOM_TESTNET: '0xfa2',
                    SEPOLIA: '0xaa36a7',
                    LINEA_GOERLI: '0xe704',
                    LINEA_SEPOLIA: '0xe705',
                    LINEA_MAINNET: '0xe708',
                    MOONBEAM: '0x504',
                    MOONBEAM_TESTNET: '0x507',
                    MOONRIVER: '0x505',
                    GNOSIS: '0x64',
                  });
                const n = 'etherscan.io',
                  s = 'api';
                r.ETHERSCAN_SUPPORTED_NETWORKS = {
                  [r.CHAIN_IDS.GOERLI]: { domain: n, subdomain: `${s}-goerli` },
                  [r.CHAIN_IDS.MAINNET]: { domain: n, subdomain: s },
                  [r.CHAIN_IDS.SEPOLIA]: { domain: n, subdomain: `${s}-sepolia` },
                  [r.CHAIN_IDS.LINEA_GOERLI]: { domain: 'lineascan.build', subdomain: 'goerli' },
                  [r.CHAIN_IDS.LINEA_SEPOLIA]: { domain: 'lineascan.build', subdomain: 'sepolia' },
                  [r.CHAIN_IDS.LINEA_MAINNET]: { domain: 'lineascan.build', subdomain: s },
                  [r.CHAIN_IDS.BSC]: { domain: 'bscscan.com', subdomain: s },
                  [r.CHAIN_IDS.BSC_TESTNET]: { domain: 'bscscan.com', subdomain: `${s}-testnet` },
                  [r.CHAIN_IDS.OPTIMISM]: { domain: n, subdomain: `${s}-optimistic` },
                  [r.CHAIN_IDS.OPTIMISM_SEPOLIA]: {
                    domain: n,
                    subdomain: `${s}-sepolia-optimistic`,
                  },
                  [r.CHAIN_IDS.POLYGON]: { domain: 'polygonscan.com', subdomain: s },
                  [r.CHAIN_IDS.POLYGON_TESTNET]: {
                    domain: 'polygonscan.com',
                    subdomain: `${s}-mumbai`,
                  },
                  [r.CHAIN_IDS.AVALANCHE]: { domain: 'snowtrace.io', subdomain: s },
                  [r.CHAIN_IDS.AVALANCHE_TESTNET]: {
                    domain: 'snowtrace.io',
                    subdomain: `${s}-testnet`,
                  },
                  [r.CHAIN_IDS.FANTOM]: { domain: 'ftmscan.com', subdomain: s },
                  [r.CHAIN_IDS.FANTOM_TESTNET]: {
                    domain: 'ftmscan.com',
                    subdomain: `${s}-testnet`,
                  },
                  [r.CHAIN_IDS.MOONBEAM]: { domain: 'moonscan.io', subdomain: `${s}-moonbeam` },
                  [r.CHAIN_IDS.MOONBEAM_TESTNET]: {
                    domain: 'moonscan.io',
                    subdomain: `${s}-moonbase`,
                  },
                  [r.CHAIN_IDS.MOONRIVER]: { domain: 'moonscan.io', subdomain: `${s}-moonriver` },
                  [r.CHAIN_IDS.GNOSIS]: { domain: 'gnosisscan.io', subdomain: `${s}-gnosis` },
                };
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/constants.cjs',
      },
    ],
    [
      2190,
      {
        './NameController.cjs': 2188,
        './providers/ens.cjs': 2192,
        './providers/etherscan.cjs': 2193,
        './providers/lens.cjs': 2194,
        './providers/token.cjs': 2195,
        './types.cjs': 2196,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./NameController.cjs'), r),
                  s(e('./types.cjs'), r),
                  s(e('./providers/ens.cjs'), r),
                  s(e('./providers/etherscan.cjs'), r),
                  s(e('./providers/token.cjs'), r),
                  s(e('./providers/lens.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/index.cjs',
      },
    ],
    [
      2191,
      { '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.projectLogger = void 0);
                const n = e('@metamask/utils');
                Object.defineProperty(r, 'createModuleLogger', {
                  enumerable: !0,
                  get: function () {
                    return n.createModuleLogger;
                  },
                }),
                  (r.projectLogger = (0, n.createProjectLogger)('name-controller'));
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/logger.cjs',
      },
    ],
    [
      2192,
      { '../logger.cjs': 2191, '../types.cjs': 2196 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  o =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.ENSNameProvider = void 0);
                const a = e('../logger.cjs'),
                  c = e('../types.cjs'),
                  u = 'ens',
                  l = (0, a.createModuleLogger)(a.projectLogger, 'ens');
                (r.ENSNameProvider = class {
                  constructor({ isEnabled: e, reverseLookup: t }) {
                    n.set(this, void 0),
                      s.set(this, void 0),
                      i(this, n, e || (() => !0), 'f'),
                      i(this, s, t, 'f');
                  }
                  getMetadata() {
                    return {
                      sourceIds: { [c.NameType.ETHEREUM_ADDRESS]: [u] },
                      sourceLabels: { [u]: 'Ethereum Name Service (ENS)' },
                    };
                  }
                  async getProposedNames(e) {
                    if (!o(this, n, 'f').call(this))
                      return (
                        l('Skipping request as disabled'),
                        { results: { [u]: { proposedNames: [] } } }
                      );
                    const { value: t, variation: r } = e;
                    l('Invoking callback', { value: t, chainId: r });
                    try {
                      const e = await o(this, s, 'f').call(this, t, r),
                        n = e ? [e] : [];
                      return l('New proposed names', n), { results: { [u]: { proposedNames: n } } };
                    } catch (e) {
                      throw (l('Request failed', e), e);
                    }
                  }
                }),
                  (n = new WeakMap()),
                  (s = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/providers/ens.cjs',
      },
    ],
    [
      2193,
      {
        '../constants.cjs': 2189,
        '../logger.cjs': 2191,
        '../types.cjs': 2196,
        '../util.cjs': 2197,
        'async-mutex': 3965,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  l =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.EtherscanNameProvider = void 0);
                const d = e('async-mutex'),
                  m = e('../constants.cjs'),
                  f = e('../logger.cjs'),
                  p = e('../types.cjs'),
                  h = e('../util.cjs'),
                  g = 'etherscan',
                  y = (0, f.createModuleLogger)(f.projectLogger, 'etherscan');
                (r.EtherscanNameProvider = class {
                  constructor({ isEnabled: e } = {}) {
                    n.add(this),
                      s.set(this, void 0),
                      i.set(this, 0),
                      o.set(this, new d.Mutex()),
                      u(this, s, e || (() => !0), 'f');
                  }
                  getMetadata() {
                    return {
                      sourceIds: { [p.NameType.ETHEREUM_ADDRESS]: [g] },
                      sourceLabels: { [g]: 'Etherscan (Verified Contract Name)' },
                    };
                  }
                  async getProposedNames(e) {
                    if (!l(this, s, 'f').call(this))
                      return (
                        y('Skipping request as disabled'),
                        { results: { [g]: { proposedNames: [] } } }
                      );
                    const t = await l(this, o, 'f').acquire();
                    try {
                      const { value: t, variation: r } = e,
                        s = Date.now();
                      if (s - l(this, i, 'f') < 5e3)
                        return (
                          y('Skipping request to avoid rate limit'),
                          { results: { [g]: { updateDelay: 5 } } }
                        );
                      const o = l(this, n, 'm', c).call(this, r, {
                          module: 'contract',
                          action: 'getsourcecode',
                          address: t,
                        }),
                        { responseData: u, error: d } = await l(this, n, 'm', a).call(this, o);
                      if (d) throw (y('Request failed', d), d);
                      if ('NOTOK' === u?.message)
                        return (
                          y('Request warning', u.result), { results: { [g]: { updateDelay: 5 } } }
                        );
                      const m = (u?.result ?? []).map(e => e.ContractName);
                      return y('New proposed names', m), { results: { [g]: { proposedNames: m } } };
                    } finally {
                      t();
                    }
                  }
                }),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (n = new WeakSet()),
                  (a = async function (e) {
                    try {
                      y('Sending request', e);
                      return { responseData: await (0, h.handleFetch)(e) };
                    } catch (e) {
                      return (0, h.assertIsError)(e), { error: e };
                    } finally {
                      u(this, i, Date.now(), 'f');
                    }
                  }),
                  (c = function (e, t) {
                    const r = m.ETHERSCAN_SUPPORTED_NETWORKS[e];
                    if (!r) throw new Error(`Etherscan does not support chain with ID: ${e}`);
                    let n = `https://${r.subdomain}.${r.domain}/api`;
                    return (
                      Object.keys(t).forEach((e, r) => {
                        const s = t[e];
                        n += `${0 === r ? '?' : '&'}${e}=${s}`;
                      }),
                      n
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/providers/etherscan.cjs',
      },
    ],
    [
      2194,
      { '../logger.cjs': 2191, '../types.cjs': 2196, '../util.cjs': 2197 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.LensNameProvider = void 0);
                const o = e('../logger.cjs'),
                  a = e('../types.cjs'),
                  c = e('../util.cjs'),
                  u = 'lens',
                  l = (0, o.createModuleLogger)(o.projectLogger, 'lens');
                (r.LensNameProvider = class {
                  constructor({ isEnabled: e } = {}) {
                    n.set(this, void 0), s(this, n, e || (() => !0), 'f');
                  }
                  getMetadata() {
                    return {
                      sourceIds: { [a.NameType.ETHEREUM_ADDRESS]: [u] },
                      sourceLabels: { [u]: 'Lens Protocol' },
                    };
                  }
                  async getProposedNames(e) {
                    if (!i(this, n, 'f').call(this))
                      return (
                        l('Skipping request as disabled'),
                        { results: { [u]: { proposedNames: [] } } }
                      );
                    const { value: t } = e,
                      r = { address: t };
                    l('Sending request', { variables: r });
                    try {
                      const e = await (0, c.graphQL)(
                          'https://api.lens.dev',
                          '\nquery HandlesForAddress($address: EthereumAddress!) {\n  profiles(request: { ownedBy: [$address] }) {\n    items {\n      handle\n    }\n  }\n}',
                          r
                        ),
                        t = (e?.profiles?.items ?? []).map(e => e.handle);
                      return l('New proposed names', t), { results: { [u]: { proposedNames: t } } };
                    } catch (e) {
                      throw (l('Request failed', e), e);
                    }
                  }
                }),
                  (n = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/providers/lens.cjs',
      },
    ],
    [
      2195,
      { '../logger.cjs': 2191, '../types.cjs': 2196, '../util.cjs': 2197 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.TokenNameProvider = void 0);
                const o = e('../logger.cjs'),
                  a = e('../types.cjs'),
                  c = e('../util.cjs'),
                  u = 'token',
                  l = (0, o.createModuleLogger)(o.projectLogger, 'token');
                (r.TokenNameProvider = class {
                  constructor({ isEnabled: e } = {}) {
                    n.set(this, void 0), s(this, n, e || (() => !0), 'f');
                  }
                  getMetadata() {
                    return {
                      sourceIds: { [a.NameType.ETHEREUM_ADDRESS]: [u] },
                      sourceLabels: { [u]: 'Blockchain (Token Name)' },
                    };
                  }
                  async getProposedNames(e) {
                    if (!i(this, n, 'f').call(this))
                      return (
                        l('Skipping request as disabled'),
                        { results: { [u]: { proposedNames: [] } } }
                      );
                    const { value: t, variation: r } = e,
                      s = `https://token.api.cx.metamask.io/token/${r}?address=${t}`;
                    l('Sending request', s);
                    try {
                      const e = (await (0, c.handleFetch)(s)).name,
                        t = e ? [e] : [];
                      return l('New proposed names', t), { results: { [u]: { proposedNames: t } } };
                    } catch (e) {
                      throw (l('Request failed', e), e);
                    }
                  }
                }),
                  (n = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/providers/token.cjs',
      },
    ],
    [
      2196,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NameType = void 0),
                  (function (e) {
                    e.ETHEREUM_ADDRESS = 'ethereumAddress';
                  })(n || (r.NameType = n = {}));
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/types.cjs',
      },
    ],
    [
      2197,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                async function n(e, t) {
                  const r = await s(e, t);
                  return await r.json();
                }
                async function s(e, t) {
                  const r = await fetch(e, t);
                  if (!r.ok)
                    throw new Error(`Fetch failed with status '${r.status}' for request '${e}'`);
                  return r;
                }
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.assertIsError = r.successfulFetch = r.handleFetch = r.graphQL = void 0),
                  (r.graphQL = async function (e, t, r) {
                    const s = JSON.stringify({ query: t, variables: r }),
                      i = await n(e, {
                        body: s,
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                      });
                    return i?.data;
                  }),
                  (r.handleFetch = n),
                  (r.successfulFetch = s),
                  (r.assertIsError = function (e) {
                    if (!(e instanceof Error))
                      throw new Error(`Invalid error of type '${typeof e}'`);
                  });
              };
            };
      },
      {
        package: '@metamask/name-controller',
        file: 'node_modules/@metamask/name-controller/dist/util.cjs',
      },
    ],
    [
      2198,
      {
        './constants.cjs': 2199,
        './create-auto-managed-network-client.cjs': 2200,
        './logger.cjs': 2203,
        './types.cjs': 2204,
        '@metamask/base-controller': 2266,
        '@metamask/controller-utils': 1515,
        '@metamask/eth-query': 1725,
        '@metamask/rpc-errors': 2585,
        '@metamask/swappable-obj-proxy': 2922,
        '@metamask/utils': 2349,
        'fast-deep-equal': 4494,
        reselect: 5353,
        'uri-js': 5708,
        uuid: 5733,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d,
                  m,
                  f,
                  p,
                  h,
                  g,
                  y,
                  w,
                  k,
                  b,
                  _,
                  S,
                  E,
                  T =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  v =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  A =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            T(t, e, r);
                      return v(t, e), t;
                    },
                  I =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  C =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  j =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NetworkController =
                    r.selectAvailableNetworkClientIds =
                    r.getAvailableNetworkClientIds =
                    r.getNetworkConfigurations =
                    r.getDefaultNetworkControllerState =
                    r.knownKeysOf =
                    r.RpcEndpointType =
                      void 0);
                const N = e('@metamask/base-controller'),
                  P = e('@metamask/controller-utils'),
                  R = j(e('@metamask/eth-query')),
                  O = e('@metamask/rpc-errors'),
                  M = e('@metamask/swappable-obj-proxy'),
                  x = e('@metamask/utils'),
                  B = j(e('fast-deep-equal')),
                  D = e('reselect'),
                  U = A(e('uri-js')),
                  L = e('uuid'),
                  H = e('./constants.cjs'),
                  $ = e('./create-auto-managed-network-client.cjs'),
                  F = e('./logger.cjs'),
                  V = e('./types.cjs'),
                  G = (0, F.createModuleLogger)(F.projectLogger, 'NetworkController'),
                  J = /^https:\/\/(?<networkName>[^.]+)\.infura\.io\/v\d+\/(?<apiKey>.+)$/u;
                var K;
                function W(e) {
                  return Object.keys(e);
                }
                function z(e) {
                  return 'object' == typeof e && null !== e && 'code' in e;
                }
                !(function (e) {
                  (e.Custom = 'custom'), (e.Infura = 'infura');
                })(K || (r.RpcEndpointType = K = {})),
                  (r.knownKeysOf = W);
                const q = 'NetworkController';
                function X() {
                  const e = Object.values(P.InfuraNetworkType).reduce((e, t) => {
                    const r = P.ChainId[t],
                      n = `https://${t}.infura.io/v3/{infuraProjectId}`;
                    return {
                      ...e,
                      [r]: {
                        blockExplorerUrls: [],
                        chainId: r,
                        defaultRpcEndpointIndex: 0,
                        name: P.NetworkNickname[t],
                        nativeCurrency: P.NetworksTicker[t],
                        rpcEndpoints: [{ networkClientId: t, type: K.Infura, url: n }],
                      },
                    };
                  }, {});
                  return {
                    selectedNetworkClientId: P.InfuraNetworkType.mainnet,
                    networksMetadata: {},
                    networkConfigurationsByChainId: e,
                  };
                }
                function Y(e) {
                  return Object.values(e.networkConfigurationsByChainId);
                }
                function Z(e) {
                  return e.flatMap(e => e.rpcEndpoints.map(e => e.networkClientId));
                }
                function Q(e) {
                  const t = U.parse(e);
                  return t.error === undefined && ('http' === t.scheme || 'https' === t.scheme);
                }
                function ee(e) {
                  const t = J.exec(e);
                  if (t?.groups) {
                    if ((0, P.isInfuraNetworkType)(t.groups.networkName))
                      return t.groups.networkName;
                    throw new Error(`Unknown Infura network '${t.groups.networkName}'`);
                  }
                  throw new Error('Could not derive Infura network from RPC endpoint URL');
                }
                function te(e) {
                  return new Map(
                    Object.values(e).flatMap(e => e.rpcEndpoints.map(t => [t.networkClientId, e]))
                  );
                }
                (r.getDefaultNetworkControllerState = X),
                  (r.getNetworkConfigurations = Y),
                  (r.getAvailableNetworkClientIds = Z),
                  (r.selectAvailableNetworkClientIds = (0, D.createSelector)([Y], Z));
                class re extends N.BaseController {
                  constructor({ messenger: e, state: t, infuraProjectId: f, log: p }) {
                    const h = { ...X(), ...t };
                    if (
                      ((function (e) {
                        const t = Object.entries(e.networkConfigurationsByChainId),
                          n = (0, r.selectAvailableNetworkClientIds)(e);
                        if (0 === t.length)
                          throw new Error(
                            'NetworkController state is invalid: `networkConfigurationsByChainId` cannot be empty'
                          );
                        for (const [e, r] of t) {
                          if (e !== r.chainId)
                            throw new Error(
                              `NetworkController state has invalid \`networkConfigurationsByChainId\`: Network configuration '${r.name}' is filed under '${e}' which does not match its \`chainId\` of '${r.chainId}'`
                            );
                          if (
                            r.blockExplorerUrls.length > 0
                              ? r.defaultBlockExplorerUrlIndex === undefined ||
                                r.blockExplorerUrls[r.defaultBlockExplorerUrlIndex] === undefined
                              : r.defaultBlockExplorerUrlIndex !== undefined
                          )
                            throw new Error(
                              `NetworkController state has invalid \`networkConfigurationsByChainId\`: Network configuration '${r.name}' has a \`defaultBlockExplorerUrlIndex\` that does not refer to an entry in \`blockExplorerUrls\``
                            );
                          if (r.rpcEndpoints[r.defaultRpcEndpointIndex] === undefined)
                            throw new Error(
                              `NetworkController state has invalid \`networkConfigurationsByChainId\`: Network configuration '${r.name}' has a \`defaultRpcEndpointIndex\` that does not refer to an entry in \`rpcEndpoints\``
                            );
                        }
                        if ([...new Set(n)].length < n.length)
                          throw new Error(
                            'NetworkController state has invalid `networkConfigurationsByChainId`: Every RPC endpoint across all network configurations must have a unique `networkClientId`'
                          );
                        if (!n.includes(e.selectedNetworkClientId))
                          throw new Error(
                            `NetworkController state is invalid: \`selectedNetworkClientId\` '${e.selectedNetworkClientId}' does not refer to an RPC endpoint within a network configuration`
                          );
                      })(h),
                      !f || 'string' != typeof f)
                    )
                      throw new Error('Invalid Infura project ID');
                    super({
                      name: q,
                      metadata: {
                        selectedNetworkClientId: { persist: !0, anonymous: !1 },
                        networksMetadata: { persist: !0, anonymous: !1 },
                        networkConfigurationsByChainId: { persist: !0, anonymous: !1 },
                      },
                      messenger: e,
                      state: h,
                    }),
                      n.add(this),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o.set(this, void 0),
                      a.set(this, void 0),
                      c.set(this, void 0),
                      u.set(this, void 0),
                      l.set(this, void 0),
                      d.set(this, void 0),
                      m.set(this, void 0),
                      I(this, i, f, 'f'),
                      I(this, d, p, 'f'),
                      I(this, o, this.state.selectedNetworkClientId, 'f'),
                      I(this, m, te(this.state.networkConfigurationsByChainId), 'f'),
                      this.messagingSystem.registerActionHandler(`${this.name}:getEthQuery`, () =>
                        C(this, s, 'f')
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:getNetworkClientById`,
                        this.getNetworkClientById.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:getEIP1559Compatibility`,
                        this.getEIP1559Compatibility.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:setActiveNetwork`,
                        this.setActiveNetwork.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:setProviderType`,
                        this.setProviderType.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:findNetworkClientIdByChainId`,
                        this.findNetworkClientIdByChainId.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:getNetworkConfigurationByChainId`,
                        this.getNetworkConfigurationByChainId.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:getNetworkConfigurationByNetworkClientId`,
                        this.getNetworkConfigurationByNetworkClientId.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:getSelectedNetworkClient`,
                        this.getSelectedNetworkClient.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:addNetwork`,
                        this.addNetwork.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:removeNetwork`,
                        this.removeNetwork.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:updateNetwork`,
                        this.updateNetwork.bind(this)
                      );
                  }
                  getProviderAndBlockTracker() {
                    return { provider: C(this, a, 'f'), blockTracker: C(this, c, 'f') };
                  }
                  getSelectedNetworkClient() {
                    return C(this, a, 'f') && C(this, c, 'f')
                      ? { provider: C(this, a, 'f'), blockTracker: C(this, c, 'f') }
                      : undefined;
                  }
                  getNetworkClientRegistry() {
                    const e = C(this, n, 'm', _).call(this);
                    return Object.assign(
                      {},
                      e[V.NetworkClientType.Infura],
                      e[V.NetworkClientType.Custom]
                    );
                  }
                  getNetworkClientById(e) {
                    if (!e) throw new Error('No network client ID was provided.');
                    const t = C(this, n, 'm', _).call(this);
                    if ((0, P.isInfuraNetworkType)(e)) {
                      const r = t[V.NetworkClientType.Infura][e];
                      if (!r)
                        throw new Error(`No Infura network client was found with the ID "${e}".`);
                      return r;
                    }
                    const r = t[V.NetworkClientType.Custom][e];
                    if (!r)
                      throw new Error(`No custom network client was found with the ID "${e}".`);
                    return r;
                  }
                  async initializeProvider() {
                    C(this, n, 'm', E).call(this, this.state.selectedNetworkClientId);
                  }
                  async lookupNetworkByClientId(e) {
                    const t = (0, P.isInfuraNetworkType)(e);
                    let r, s;
                    try {
                      (s = await C(this, n, 'm', h).call(this, e)), (r = H.NetworkStatus.Available);
                    } catch (e) {
                      if ((G('NetworkController: lookupNetworkByClientId: ', e), z(e))) {
                        let n;
                        if (t && (0, x.hasProperty)(e, 'message') && 'string' == typeof e.message)
                          try {
                            n = JSON.parse(e.message);
                          } catch {
                            C(this, d, 'f')?.warn(
                              'NetworkController: lookupNetworkByClientId: json parse error: ',
                              e
                            );
                          }
                        (0, x.isPlainObject)(n) && n.error === H.INFURA_BLOCKED_KEY
                          ? (r = H.NetworkStatus.Blocked)
                          : e.code === O.errorCodes.rpc.internal
                            ? ((r = H.NetworkStatus.Unknown),
                              C(this, d, 'f')?.warn(
                                'NetworkController: lookupNetworkByClientId: rpc internal error: ',
                                e
                              ))
                            : ((r = H.NetworkStatus.Unavailable),
                              C(this, d, 'f')?.warn(
                                'NetworkController: lookupNetworkByClientId: ',
                                e
                              ));
                      } else {
                        if (
                          'undefined' != typeof Error &&
                          (0, x.hasProperty)(e, 'message') &&
                          'string' == typeof e.message &&
                          e.message.includes('No custom network client was found with the ID')
                        )
                          throw e;
                        G('NetworkController - could not determine network status', e),
                          (r = H.NetworkStatus.Unknown),
                          C(this, d, 'f')?.warn('NetworkController: lookupNetworkByClientId: ', e);
                      }
                    }
                    this.update(t => {
                      t.networksMetadata[e] === undefined &&
                        (t.networksMetadata[e] = { status: H.NetworkStatus.Unknown, EIPS: {} });
                      const n = t.networksMetadata[e];
                      (n.status = r), s === undefined ? delete n.EIPS[1559] : (n.EIPS[1559] = s);
                    });
                  }
                  async lookupNetwork(e) {
                    if (e) return void (await this.lookupNetworkByClientId(e));
                    if (!C(this, s, 'f')) return;
                    const t = C(this, l, 'f')?.configuration.type === V.NetworkClientType.Infura;
                    let r = !1;
                    const i = () => {
                      (r = !0),
                        this.messagingSystem.unsubscribe('NetworkController:networkDidChange', i);
                    };
                    let o, a;
                    this.messagingSystem.subscribe('NetworkController:networkDidChange', i);
                    try {
                      const e = await C(this, n, 'm', h).call(
                        this,
                        this.state.selectedNetworkClientId
                      );
                      (o = H.NetworkStatus.Available), (a = e);
                    } catch (e) {
                      if (z(e)) {
                        let r;
                        if (t && (0, x.hasProperty)(e, 'message') && 'string' == typeof e.message)
                          try {
                            r = JSON.parse(e.message);
                          } catch (e) {
                            C(this, d, 'f')?.warn(
                              'NetworkController: lookupNetwork: json parse error',
                              e
                            );
                          }
                        (0, x.isPlainObject)(r) && r.error === H.INFURA_BLOCKED_KEY
                          ? (o = H.NetworkStatus.Blocked)
                          : e.code === O.errorCodes.rpc.internal
                            ? ((o = H.NetworkStatus.Unknown),
                              C(this, d, 'f')?.warn(
                                'NetworkController: lookupNetwork: rpc internal error',
                                e
                              ))
                            : ((o = H.NetworkStatus.Unavailable),
                              C(this, d, 'f')?.warn('NetworkController: lookupNetwork: ', e));
                      } else
                        G('NetworkController - could not determine network status', e),
                          (o = H.NetworkStatus.Unknown),
                          C(this, d, 'f')?.warn('NetworkController: lookupNetwork: ', e);
                    }
                    r ||
                      (this.messagingSystem.unsubscribe('NetworkController:networkDidChange', i),
                      this.update(e => {
                        const t = e.networksMetadata[e.selectedNetworkClientId];
                        (t.status = o), a === undefined ? delete t.EIPS[1559] : (t.EIPS[1559] = a);
                      }),
                      t
                        ? o === H.NetworkStatus.Available
                          ? this.messagingSystem.publish('NetworkController:infuraIsUnblocked')
                          : o === H.NetworkStatus.Blocked &&
                            this.messagingSystem.publish('NetworkController:infuraIsBlocked')
                        : this.messagingSystem.publish('NetworkController:infuraIsUnblocked'));
                  }
                  async setProviderType(e) {
                    if (e === P.NetworkType.rpc)
                      throw new Error(
                        `NetworkController - cannot call "setProviderType" with type "${P.NetworkType.rpc}". Use "setActiveNetwork"`
                      );
                    if (!(0, P.isInfuraNetworkType)(e))
                      throw new Error(`Unknown Infura provider type "${String(e)}".`);
                    await this.setActiveNetwork(e);
                  }
                  async setActiveNetwork(e, t = {}) {
                    I(this, o, this.state.selectedNetworkClientId, 'f'),
                      await C(this, n, 'm', f).call(this, e, t);
                  }
                  async getEIP1559Compatibility(e) {
                    if (e) return this.get1559CompatibilityWithNetworkClientId(e);
                    if (!C(this, s, 'f')) return !1;
                    const { EIPS: t } =
                      this.state.networksMetadata[this.state.selectedNetworkClientId];
                    if (t[1559] !== undefined) return t[1559];
                    const r = await C(this, n, 'm', h).call(
                      this,
                      this.state.selectedNetworkClientId
                    );
                    return (
                      this.update(e => {
                        r !== undefined &&
                          (e.networksMetadata[e.selectedNetworkClientId].EIPS[1559] = r);
                      }),
                      r
                    );
                  }
                  async get1559CompatibilityWithNetworkClientId(e) {
                    let t = this.state.networksMetadata[e];
                    t === undefined &&
                      (await this.lookupNetwork(e), (t = this.state.networksMetadata[e]));
                    const { EIPS: r } = t;
                    return r[1559];
                  }
                  async resetConnection() {
                    await C(this, n, 'm', f).call(this, this.state.selectedNetworkClientId);
                  }
                  getNetworkConfigurationByChainId(e) {
                    return this.state.networkConfigurationsByChainId[e];
                  }
                  getNetworkConfigurationByNetworkClientId(e) {
                    return C(this, m, 'f').get(e);
                  }
                  addNetwork(e) {
                    const { rpcEndpoints: t } = e,
                      r = C(this, n, 'm', _).call(this);
                    C(this, n, 'm', g).call(this, {
                      mode: 'add',
                      networkFields: e,
                      autoManagedNetworkClientRegistry: r,
                    });
                    const s = t.map(e => ({
                        type: 'add',
                        rpcEndpoint:
                          e.type === K.Custom ? { ...e, networkClientId: (0, L.v4)() } : e,
                      })),
                      i = C(this, n, 'm', y).call(this, {
                        networkFields: e,
                        networkClientOperations: s,
                      });
                    return (
                      C(this, n, 'm', w).call(this, {
                        networkFields: e,
                        networkClientOperations: s,
                        autoManagedNetworkClientRegistry: r,
                      }),
                      this.update(t => {
                        C(this, n, 'm', b).call(this, {
                          state: t,
                          mode: 'add',
                          networkFields: e,
                          networkConfigurationToPersist: i,
                        });
                      }),
                      I(this, m, te(this.state.networkConfigurationsByChainId), 'f'),
                      this.messagingSystem.publish(`${q}:networkAdded`, i),
                      i
                    );
                  }
                  async updateNetwork(e, t, { replacementSelectedRpcEndpointIndex: r } = {}) {
                    const s = this.state.networkConfigurationsByChainId[e];
                    if (s === undefined)
                      throw new Error(
                        `Could not update network: Cannot find network configuration for chain '${e}'`
                      );
                    const i = e,
                      { chainId: o, rpcEndpoints: a } = t,
                      c = C(this, n, 'm', _).call(this);
                    C(this, n, 'm', g).call(this, {
                      mode: 'update',
                      networkFields: t,
                      existingNetworkConfiguration: s,
                      autoManagedNetworkClientRegistry: c,
                    });
                    const u = [];
                    for (const e of a) {
                      const t = s.rpcEndpoints.find(
                          t =>
                            t.type === e.type &&
                            t.url === e.url &&
                            (t.networkClientId === e.networkClientId ||
                              e.networkClientId === undefined)
                        ),
                        r = s.rpcEndpoints.find(
                          t =>
                            (t.type === K.Infura && e.type === K.Infura) ||
                            (t.type === e.type &&
                              t.networkClientId === e.networkClientId &&
                              t.url === e.url)
                        ),
                        n = s.rpcEndpoints.find(
                          t =>
                            t.type === e.type &&
                            (t.url === e.url || t.networkClientId === e.networkClientId)
                        );
                      if (o !== i && r !== undefined) {
                        const t = e.type === K.Infura ? e : { ...e, networkClientId: (0, L.v4)() };
                        u.push({ type: 'replace', oldRpcEndpoint: r, newRpcEndpoint: t });
                      } else if (t !== undefined) {
                        let r;
                        (r =
                          t.type === K.Infura
                            ? t
                            : Object.assign({}, e, { networkClientId: t.networkClientId })),
                          u.push({ type: 'noop', rpcEndpoint: r });
                      } else if (n !== undefined) {
                        let t;
                        (t = e.type === K.Infura ? e : { ...e, networkClientId: (0, L.v4)() }),
                          u.push({ type: 'replace', oldRpcEndpoint: n, newRpcEndpoint: t });
                      } else {
                        const t = {
                          type: 'add',
                          rpcEndpoint:
                            e.type === K.Infura ? e : { ...e, networkClientId: (0, L.v4)() },
                        };
                        u.push(t);
                      }
                    }
                    for (const e of s.rpcEndpoints)
                      if (
                        !u.some(t => {
                          const r = 'replace' === t.type ? t.oldRpcEndpoint : t.rpcEndpoint;
                          return (
                            r.type === e.type &&
                            r.networkClientId === e.networkClientId &&
                            r.url === e.url
                          );
                        })
                      ) {
                        const t = { type: 'remove', rpcEndpoint: e };
                        u.push(t);
                      }
                    const l = C(this, n, 'm', y).call(this, {
                      networkFields: t,
                      networkClientOperations: u,
                    });
                    if (
                      r === undefined &&
                      u.some(
                        e =>
                          'remove' === e.type &&
                          e.rpcEndpoint.networkClientId === this.state.selectedNetworkClientId
                      ) &&
                      !u.some(
                        e =>
                          'replace' === e.type &&
                          e.oldRpcEndpoint.networkClientId === this.state.selectedNetworkClientId
                      )
                    )
                      throw new Error(
                        `Could not update network: Cannot update RPC endpoints in such a way that the selected network '${this.state.selectedNetworkClientId}' would be removed without a replacement. Choose a different RPC endpoint as the selected network via the \`replacementSelectedRpcEndpointIndex\` option.`
                      );
                    C(this, n, 'm', w).call(this, {
                      networkFields: t,
                      networkClientOperations: u,
                      autoManagedNetworkClientRegistry: c,
                    });
                    const d = u
                        .map((e, t) => [e, t])
                        .find(
                          ([e, t]) =>
                            'replace' === e.type &&
                            e.oldRpcEndpoint.networkClientId === this.state.selectedNetworkClientId
                        ),
                      f = r ?? d?.[1];
                    let p;
                    if (f !== undefined && ((p = l.rpcEndpoints[f]), p === undefined))
                      throw new Error(
                        `Could not update network: \`replacementSelectedRpcEndpointIndex\` ${f} does not refer to an entry in \`rpcEndpoints\``
                      );
                    return (
                      p && p.networkClientId !== this.state.selectedNetworkClientId
                        ? await this.setActiveNetwork(p.networkClientId, {
                            updateState: e => {
                              C(this, n, 'm', b).call(this, {
                                state: e,
                                mode: 'update',
                                networkFields: t,
                                networkConfigurationToPersist: l,
                                existingNetworkConfiguration: s,
                              });
                            },
                          })
                        : this.update(e => {
                            C(this, n, 'm', b).call(this, {
                              state: e,
                              mode: 'update',
                              networkFields: t,
                              networkConfigurationToPersist: l,
                              existingNetworkConfiguration: s,
                            });
                          }),
                      I(this, m, te(this.state.networkConfigurationsByChainId), 'f'),
                      C(this, n, 'm', k).call(this, {
                        networkClientOperations: u,
                        autoManagedNetworkClientRegistry: c,
                      }),
                      l
                    );
                  }
                  removeNetwork(e) {
                    const t = this.state.networkConfigurationsByChainId[e];
                    if (t === undefined)
                      throw new Error(`Cannot find network configuration for chain '${e}'`);
                    if (
                      t.rpcEndpoints.some(
                        e => e.networkClientId === this.state.selectedNetworkClientId
                      )
                    )
                      throw new Error('Cannot remove the currently selected network');
                    const r = C(this, n, 'm', _).call(this),
                      s = t.rpcEndpoints.map(e => ({ type: 'remove', rpcEndpoint: e }));
                    C(this, n, 'm', k).call(this, {
                      networkClientOperations: s,
                      autoManagedNetworkClientRegistry: r,
                    }),
                      this.update(e => {
                        C(this, n, 'm', b).call(this, {
                          state: e,
                          mode: 'remove',
                          existingNetworkConfiguration: t,
                        });
                      }),
                      I(this, m, te(this.state.networkConfigurationsByChainId), 'f'),
                      this.messagingSystem.publish('NetworkController:networkRemoved', t);
                  }
                  async rollbackToPreviousProvider() {
                    await C(this, n, 'm', f).call(this, C(this, o, 'f'));
                  }
                  async destroy() {
                    await C(this, c, 'f')?.destroy();
                  }
                  loadBackup({ networkConfigurationsByChainId: e }) {
                    this.update(t => {
                      t.networkConfigurationsByChainId = {
                        ...t.networkConfigurationsByChainId,
                        ...e,
                      };
                    });
                  }
                  findNetworkClientIdByChainId(e) {
                    const t = this.getNetworkClientRegistry(),
                      r = Object.entries(t).find(([t, r]) => r.configuration.chainId === e);
                    if (r === undefined)
                      throw new Error("Couldn't find networkClientId for chainId");
                    return r[0];
                  }
                }
                (r.NetworkController = re),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (a = new WeakMap()),
                  (c = new WeakMap()),
                  (u = new WeakMap()),
                  (l = new WeakMap()),
                  (d = new WeakMap()),
                  (m = new WeakMap()),
                  (n = new WeakSet()),
                  (f = async function (e, t = {}) {
                    this.messagingSystem.publish('NetworkController:networkWillChange', this.state),
                      C(this, n, 'm', E).call(this, e, t),
                      this.messagingSystem.publish(
                        'NetworkController:networkDidChange',
                        this.state
                      ),
                      await this.lookupNetwork();
                  }),
                  (p = function (e) {
                    e === undefined && (e = this.state.selectedNetworkClientId);
                    const t = this.getNetworkClientById(e),
                      r = new R.default(t.provider);
                    return new Promise((e, t) => {
                      r.sendAsync(
                        { method: 'eth_getBlockByNumber', params: ['latest', !1] },
                        (r, n) => {
                          r ? t(r) : e(n);
                        }
                      );
                    });
                  }),
                  (h = async function (e) {
                    const t = await C(this, n, 'm', p).call(this, e);
                    return t ? t.baseFeePerGas !== undefined : undefined;
                  }),
                  (g = function (e) {
                    const { mode: t, networkFields: r, autoManagedNetworkClientRegistry: n } = e,
                      s =
                        'existingNetworkConfiguration' in e ? e.existingNetworkConfiguration : null,
                      i = 'update' === t ? 'Could not update network' : 'Could not add network';
                    if (!(0, x.isStrictHexString)(r.chainId) || !(0, P.isSafeChainId)(r.chainId))
                      throw new Error(
                        `${i}: Invalid \`chainId\` '${r.chainId}' (must start with "0x" and not exceed the maximum)`
                      );
                    if (null === s || r.chainId !== s.chainId) {
                      const t = this.state.networkConfigurationsByChainId[r.chainId];
                      if (t !== undefined)
                        throw null === s
                          ? new Error(
                              `Could not add network for chain ${e.networkFields.chainId} as another network for that chain already exists ('${t.name}')`
                            )
                          : new Error(
                              `Cannot move network from chain ${s.chainId} to ${r.chainId} as another network for that chain already exists ('${t.name}')`
                            );
                    }
                    if (
                      r.blockExplorerUrls.length > 0
                        ? r.defaultBlockExplorerUrlIndex === undefined ||
                          r.blockExplorerUrls[r.defaultBlockExplorerUrlIndex] === undefined
                        : r.defaultBlockExplorerUrlIndex !== undefined
                    )
                      throw new Error(
                        `${i}: \`defaultBlockExplorerUrlIndex\` must refer to an entry in \`blockExplorerUrls\``
                      );
                    if (0 === r.rpcEndpoints.length)
                      throw new Error(`${i}: \`rpcEndpoints\` must be a non-empty array`);
                    for (const e of r.rpcEndpoints) {
                      if (!Q(e.url))
                        throw new Error(
                          `${i}: An entry in \`rpcEndpoints\` has invalid URL '${e.url}'`
                        );
                      const o = 'networkClientId' in e ? e.networkClientId : undefined;
                      if (e.type === K.Custom && o !== undefined && (0, P.isInfuraNetworkType)(o))
                        throw new Error(
                          `${i}: Custom RPC endpoint '${e.url}' has invalid network client ID '${o}'`
                        );
                      if (
                        'update' === t &&
                        o !== undefined &&
                        e.type === K.Custom &&
                        !Object.values(n).some(e => o in e)
                      )
                        throw new Error(
                          `${i}: RPC endpoint '${e.url}' refers to network client '${o}' that does not exist`
                        );
                      if (r.rpcEndpoints.some(t => t !== e && U.equal(t.url, e.url)))
                        throw new Error(`${i}: Each entry in rpcEndpoints must have a unique URL`);
                      const a = Object.values(this.state.networkConfigurationsByChainId).filter(
                        e => !s || e.chainId !== s.chainId
                      );
                      for (const r of a) {
                        if (r.rpcEndpoints.find(t => U.equal(e.url, t.url)))
                          throw 'update' === t
                            ? new Error(
                                `Could not update network to point to same RPC endpoint as existing network for chain ${r.chainId} ('${r.name}')`
                              )
                            : new Error(
                                `Could not add network that points to same RPC endpoint as existing network for chain ${r.chainId} ('${r.name}')`
                              );
                      }
                    }
                    if ([...new Set(r.rpcEndpoints)].length < r.rpcEndpoints.length)
                      throw new Error(`${i}: Each entry in rpcEndpoints must be unique`);
                    const o = r.rpcEndpoints
                      .map(e => ('networkClientId' in e ? e.networkClientId : undefined))
                      .filter(e => e !== undefined);
                    if ([...new Set(o)].length < o.length)
                      throw new Error(
                        `${i}: Each entry in rpcEndpoints must have a unique networkClientId`
                      );
                    const a = r.rpcEndpoints.filter(e => e.type === K.Infura);
                    if (a.length > 1)
                      throw new Error(`${i}: There cannot be more than one Infura RPC endpoint`);
                    const c = a[0];
                    if (c) {
                      const e = ee(c.url),
                        n = P.NetworkNickname[e],
                        s = P.ChainId[e];
                      if (r.chainId !== s)
                        throw new Error(
                          'add' === t
                            ? `Could not add network with chain ID ${r.chainId} and Infura RPC endpoint for '${n}' which represents ${s}, as the two conflict`
                            : `Could not update network with chain ID ${r.chainId} and Infura RPC endpoint for '${n}' which represents ${s}, as the two conflict`
                        );
                    }
                    if (r.rpcEndpoints[r.defaultRpcEndpointIndex] === undefined)
                      throw new Error(
                        `${i}: \`defaultRpcEndpointIndex\` must refer to an entry in \`rpcEndpoints\``
                      );
                  }),
                  (y = function ({ networkFields: e, networkClientOperations: t }) {
                    return {
                      ...e,
                      rpcEndpoints: t
                        .filter(e => 'add' === e.type || 'noop' === e.type)
                        .map(e => e.rpcEndpoint)
                        .concat(t.filter(e => 'replace' === e.type).map(e => e.newRpcEndpoint)),
                    };
                  }),
                  (w = function ({
                    networkFields: e,
                    networkClientOperations: t,
                    autoManagedNetworkClientRegistry: r,
                  }) {
                    const n = t
                      .filter(e => 'add' === e.type)
                      .map(e => e.rpcEndpoint)
                      .concat(t.filter(e => 'replace' === e.type).map(e => e.newRpcEndpoint));
                    for (const t of n)
                      t.type === K.Infura
                        ? (r[V.NetworkClientType.Infura][t.networkClientId] = (0,
                          $.createAutoManagedNetworkClient)({
                            type: V.NetworkClientType.Infura,
                            chainId: e.chainId,
                            network: t.networkClientId,
                            infuraProjectId: C(this, i, 'f'),
                            ticker: e.nativeCurrency,
                          }))
                        : (r[V.NetworkClientType.Custom][t.networkClientId] = (0,
                          $.createAutoManagedNetworkClient)({
                            type: V.NetworkClientType.Custom,
                            chainId: e.chainId,
                            rpcUrl: t.url,
                            ticker: e.nativeCurrency,
                          }));
                  }),
                  (k = function ({
                    networkClientOperations: e,
                    autoManagedNetworkClientRegistry: t,
                  }) {
                    const r = e
                      .filter(e => 'remove' === e.type)
                      .map(e => e.rpcEndpoint)
                      .concat(e.filter(e => 'replace' === e.type).map(e => e.oldRpcEndpoint));
                    for (const e of r) {
                      const r = this.getNetworkClientById(e.networkClientId);
                      r.destroy(), delete t[r.configuration.type][e.networkClientId];
                    }
                  }),
                  (b = function (e) {
                    const { state: t, mode: r } = e;
                    ('remove' === r ||
                      ('update' === r &&
                        e.networkFields.chainId !== e.existingNetworkConfiguration.chainId)) &&
                      delete t.networkConfigurationsByChainId[
                        e.existingNetworkConfiguration.chainId
                      ],
                      ('add' !== r && 'update' !== r) ||
                        ((0, B.default)(
                          t.networkConfigurationsByChainId[e.networkFields.chainId],
                          e.networkConfigurationToPersist
                        ) || (e.networkConfigurationToPersist.lastUpdatedAt = Date.now()),
                        (t.networkConfigurationsByChainId[e.networkFields.chainId] =
                          e.networkConfigurationToPersist));
                  }),
                  (_ = function () {
                    return I(this, u, C(this, u, 'f') ?? C(this, n, 'm', S).call(this), 'f');
                  }),
                  (S = function () {
                    return W(this.state.networkConfigurationsByChainId)
                      .flatMap(e => {
                        const t = this.state.networkConfigurationsByChainId[e];
                        return t.rpcEndpoints.map(e => {
                          if (e.type === K.Infura) {
                            const r = ee(e.url);
                            return [
                              e.networkClientId,
                              (0, $.createAutoManagedNetworkClient)({
                                type: V.NetworkClientType.Infura,
                                network: r,
                                infuraProjectId: C(this, i, 'f'),
                                chainId: t.chainId,
                                ticker: t.nativeCurrency,
                              }),
                            ];
                          }
                          return [
                            e.networkClientId,
                            (0, $.createAutoManagedNetworkClient)({
                              type: V.NetworkClientType.Custom,
                              chainId: t.chainId,
                              rpcUrl: e.url,
                              ticker: t.nativeCurrency,
                            }),
                          ];
                        });
                      })
                      .reduce(
                        (e, [t, r]) => ({
                          ...e,
                          [r.configuration.type]: { ...e[r.configuration.type], [t]: r },
                        }),
                        { [V.NetworkClientType.Custom]: {}, [V.NetworkClientType.Infura]: {} }
                      );
                  }),
                  (E = function (e, { updateState: t } = {}) {
                    const r = C(this, n, 'm', _).call(this);
                    let i;
                    if ((0, P.isInfuraNetworkType)(e)) {
                      const t = r[V.NetworkClientType.Infura][e];
                      if (!t) throw new Error(`No Infura network client found with ID '${e}'`);
                      i = t;
                    } else {
                      const t = r[V.NetworkClientType.Custom][e];
                      if (!t) throw new Error(`No network client found with ID '${e}'`);
                      i = t;
                    }
                    I(this, l, i, 'f'),
                      this.update(r => {
                        (r.selectedNetworkClientId = e),
                          r.networksMetadata[e] === undefined &&
                            (r.networksMetadata[e] = { status: H.NetworkStatus.Unknown, EIPS: {} }),
                          t?.(r);
                      }),
                      C(this, a, 'f')
                        ? C(this, a, 'f').setTarget(C(this, l, 'f').provider)
                        : I(this, a, (0, M.createEventEmitterProxy)(C(this, l, 'f').provider), 'f'),
                      C(this, c, 'f')
                        ? C(this, c, 'f').setTarget(C(this, l, 'f').blockTracker)
                        : I(
                            this,
                            c,
                            (0, M.createEventEmitterProxy)(C(this, l, 'f').blockTracker, {
                              eventFilter: 'skipInternal',
                            }),
                            'f'
                          ),
                      I(this, s, new R.default(C(this, a, 'f')), 'f');
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/NetworkController.cjs',
      },
    ],
    [
      2199,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.INFURA_BLOCKED_KEY = r.NetworkStatus = void 0),
                  (function (e) {
                    (e.Unknown = 'unknown'),
                      (e.Available = 'available'),
                      (e.Unavailable = 'unavailable'),
                      (e.Blocked = 'blocked');
                  })(n || (r.NetworkStatus = n = {})),
                  (r.INFURA_BLOCKED_KEY = 'countryBlocked');
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/constants.cjs',
      },
    ],
    [
      2200,
      { './create-network-client.cjs': 2201 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createAutoManagedNetworkClient = void 0);
                const n = e('./create-network-client.cjs'),
                  s = '__target__',
                  i = { __UNINITIALIZED__: !0 };
                r.createAutoManagedNetworkClient = function (e) {
                  let t;
                  const r = new Proxy(i, {
                      get(r, i, o) {
                        if (i === s) return t?.provider;
                        if ((t ?? (t = (0, n.createNetworkClient)(e)), t === undefined))
                          throw new Error(
                            "It looks like `createNetworkClient` didn't return anything. Perhaps it's being mocked?"
                          );
                        const { provider: a } = t;
                        if (i in a) {
                          const e = a[i];
                          return 'function' == typeof e
                            ? function (...t) {
                                return e.apply(this === o ? a : this, t);
                              }
                            : e;
                        }
                        return undefined;
                      },
                      has(r, i) {
                        if (i === s) return !0;
                        t ?? (t = (0, n.createNetworkClient)(e));
                        const { provider: o } = t;
                        return i in o;
                      },
                    }),
                    o = new Proxy(i, {
                      get(r, i, o) {
                        if (i === s) return t?.blockTracker;
                        if ((t ?? (t = (0, n.createNetworkClient)(e)), t === undefined))
                          throw new Error(
                            "It looks like createNetworkClient returned undefined. Perhaps it's mocked?"
                          );
                        const { blockTracker: a } = t;
                        if (i in a) {
                          const e = a[i];
                          return 'function' == typeof e
                            ? function (...t) {
                                return e.apply(this === o ? a : this, t);
                              }
                            : e;
                        }
                        return undefined;
                      },
                      has(r, i) {
                        if (i === s) return !0;
                        t ?? (t = (0, n.createNetworkClient)(e));
                        const { blockTracker: o } = t;
                        return i in o;
                      },
                    });
                  return {
                    configuration: e,
                    provider: r,
                    blockTracker: o,
                    destroy: () => {
                      t?.destroy();
                    },
                  };
                };
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/create-auto-managed-network-client.cjs',
      },
    ],
    [
      2201,
      {
        './types.cjs': 2204,
        '@metamask/controller-utils': 1515,
        '@metamask/eth-block-tracker': 1549,
        '@metamask/eth-json-rpc-infura': 1607,
        '@metamask/eth-json-rpc-middleware': 2272,
        '@metamask/eth-json-rpc-provider': 1671,
        '@metamask/json-rpc-engine': 1964,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createNetworkClient = void 0);
                const n = e('@metamask/controller-utils'),
                  s = e('@metamask/eth-block-tracker'),
                  i = e('@metamask/eth-json-rpc-infura'),
                  o = e('@metamask/eth-json-rpc-middleware'),
                  a = e('@metamask/eth-json-rpc-provider'),
                  c = e('@metamask/json-rpc-engine'),
                  u = e('./types.cjs');
                function l({ network: e }) {
                  return (0, c.createScaffoldMiddleware)({ eth_chainId: n.ChainId[e] });
                }
                r.createNetworkClient = function (e) {
                  const t =
                      e.type === u.NetworkClientType.Infura
                        ? (0, i.createInfuraMiddleware)({
                            network: e.network,
                            projectId: e.infuraProjectId,
                            maxAttempts: 5,
                            source: 'metamask',
                          })
                        : (0, o.createFetchMiddleware)({
                            btoa: global.btoa,
                            fetch: global.fetch,
                            rpcUrl: e.rpcUrl,
                          }),
                    r = (0, a.providerFromMiddleware)(t),
                    n = {},
                    m = new s.PollingBlockTracker({ ...n, provider: r }),
                    f =
                      e.type === u.NetworkClientType.Infura
                        ? (function ({
                            blockTracker: e,
                            network: t,
                            rpcProvider: r,
                            rpcApiMiddleware: n,
                          }) {
                            return (0, c.mergeMiddleware)([
                              l({ network: t }),
                              (0, o.createBlockCacheMiddleware)({ blockTracker: e }),
                              (0, o.createInflightCacheMiddleware)(),
                              (0, o.createBlockRefMiddleware)({ blockTracker: e, provider: r }),
                              (0, o.createRetryOnEmptyMiddleware)({ blockTracker: e, provider: r }),
                              (0, o.createBlockTrackerInspectorMiddleware)({ blockTracker: e }),
                              n,
                            ]);
                          })({
                            blockTracker: m,
                            network: e.network,
                            rpcProvider: r,
                            rpcApiMiddleware: t,
                          })
                        : (function ({ blockTracker: e, chainId: t, rpcApiMiddleware: r }) {
                            const n = [];
                            return (0, c.mergeMiddleware)([
                              ...n,
                              d(t),
                              (0, o.createBlockRefRewriteMiddleware)({ blockTracker: e }),
                              (0, o.createBlockCacheMiddleware)({ blockTracker: e }),
                              (0, o.createInflightCacheMiddleware)(),
                              (0, o.createBlockTrackerInspectorMiddleware)({ blockTracker: e }),
                              r,
                            ]);
                          })({ blockTracker: m, chainId: e.chainId, rpcApiMiddleware: t }),
                    p = new c.JsonRpcEngine();
                  return (
                    p.push(f),
                    {
                      configuration: e,
                      provider: (0, a.providerFromEngine)(p),
                      blockTracker: m,
                      destroy: () => {
                        m.destroy();
                      },
                    }
                  );
                };
                const d = e => (t, r, n, s) =>
                  'eth_chainId' === t.method ? ((r.result = e), s()) : n();
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/create-network-client.cjs',
      },
    ],
    [
      2202,
      { './NetworkController.cjs': 2198, './constants.cjs': 2199, './types.cjs': 2204 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NetworkClientType =
                    r.RpcEndpointType =
                    r.NetworkController =
                    r.knownKeysOf =
                    r.selectAvailableNetworkClientIds =
                    r.getDefaultNetworkControllerState =
                      void 0);
                var i = e('./NetworkController.cjs');
                Object.defineProperty(r, 'getDefaultNetworkControllerState', {
                  enumerable: !0,
                  get: function () {
                    return i.getDefaultNetworkControllerState;
                  },
                }),
                  Object.defineProperty(r, 'selectAvailableNetworkClientIds', {
                    enumerable: !0,
                    get: function () {
                      return i.selectAvailableNetworkClientIds;
                    },
                  }),
                  Object.defineProperty(r, 'knownKeysOf', {
                    enumerable: !0,
                    get: function () {
                      return i.knownKeysOf;
                    },
                  }),
                  Object.defineProperty(r, 'NetworkController', {
                    enumerable: !0,
                    get: function () {
                      return i.NetworkController;
                    },
                  }),
                  Object.defineProperty(r, 'RpcEndpointType', {
                    enumerable: !0,
                    get: function () {
                      return i.RpcEndpointType;
                    },
                  }),
                  s(e('./constants.cjs'), r);
                var o = e('./types.cjs');
                Object.defineProperty(r, 'NetworkClientType', {
                  enumerable: !0,
                  get: function () {
                    return o.NetworkClientType;
                  },
                });
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/index.cjs',
      },
    ],
    [
      2203,
      { '@metamask/utils': 2349 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.projectLogger = void 0);
                const n = e('@metamask/utils');
                Object.defineProperty(r, 'createModuleLogger', {
                  enumerable: !0,
                  get: function () {
                    return n.createModuleLogger;
                  },
                }),
                  (r.projectLogger = (0, n.createProjectLogger)('network-controller'));
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/logger.cjs',
      },
    ],
    [
      2204,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NetworkClientType = void 0),
                  (function (e) {
                    (e.Custom = 'custom'), (e.Infura = 'infura');
                  })(n || (r.NetworkClientType = n = {}));
              };
            };
      },
      {
        package: '@metamask/network-controller',
        file: 'node_modules/@metamask/network-controller/dist/types.cjs',
      },
    ],
    [
      2205,
      {
        './bytes': 2208,
        './constants': 2209,
        './helpers': 2211,
        './internal': 2213,
        '@ethereumjs/rlp': 449,
        buffer: 4139,
        'ethereum-cryptography/keccak': 4366,
        'ethereum-cryptography/secp256k1': 4383,
        'ethereum-cryptography/utils': 4385,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.accountBodyToRLP =
                        r.accountBodyToSlim =
                        r.accountBodyFromSlim =
                        r.isZeroAddress =
                        r.zeroAddress =
                        r.importPublic =
                        r.privateToAddress =
                        r.privateToPublic =
                        r.publicToAddress =
                        r.pubToAddress =
                        r.isValidPublic =
                        r.isValidPrivate =
                        r.generateAddress2 =
                        r.generateAddress =
                        r.isValidChecksumAddress =
                        r.toChecksumAddress =
                        r.isValidAddress =
                        r.Account =
                          void 0);
                    const n = e('@ethereumjs/rlp'),
                      s = e('ethereum-cryptography/keccak'),
                      i = e('ethereum-cryptography/secp256k1'),
                      o = e('ethereum-cryptography/utils'),
                      a = e('./bytes'),
                      c = e('./constants'),
                      u = e('./helpers'),
                      l = e('./internal'),
                      d = BigInt(0);
                    class m {
                      constructor(e = d, t = d, r = c.KECCAK256_RLP, n = c.KECCAK256_NULL) {
                        (this.nonce = e),
                          (this.balance = t),
                          (this.storageRoot = r),
                          (this.codeHash = n),
                          this._validate();
                      }
                      static fromAccountData(e) {
                        const { nonce: t, balance: r, storageRoot: n, codeHash: s } = e;
                        return new m(
                          t !== undefined ? (0, a.bufferToBigInt)((0, a.toBuffer)(t)) : undefined,
                          r !== undefined ? (0, a.bufferToBigInt)((0, a.toBuffer)(r)) : undefined,
                          n !== undefined ? (0, a.toBuffer)(n) : undefined,
                          s !== undefined ? (0, a.toBuffer)(s) : undefined
                        );
                      }
                      static fromRlpSerializedAccount(e) {
                        const t = (0, a.arrToBufArr)(n.RLP.decode(Uint8Array.from(e)));
                        if (!Array.isArray(t))
                          throw new Error('Invalid serialized account input. Must be array');
                        return this.fromValuesArray(t);
                      }
                      static fromValuesArray(e) {
                        const [t, r, n, s] = e;
                        return new m((0, a.bufferToBigInt)(t), (0, a.bufferToBigInt)(r), n, s);
                      }
                      _validate() {
                        if (this.nonce < d) throw new Error('nonce must be greater than zero');
                        if (this.balance < d) throw new Error('balance must be greater than zero');
                        if (32 !== this.storageRoot.length)
                          throw new Error('storageRoot must have a length of 32');
                        if (32 !== this.codeHash.length)
                          throw new Error('codeHash must have a length of 32');
                      }
                      raw() {
                        return [
                          (0, a.bigIntToUnpaddedBuffer)(this.nonce),
                          (0, a.bigIntToUnpaddedBuffer)(this.balance),
                          this.storageRoot,
                          this.codeHash,
                        ];
                      }
                      serialize() {
                        return t.from(n.RLP.encode((0, a.bufArrToArr)(this.raw())));
                      }
                      isContract() {
                        return !this.codeHash.equals(c.KECCAK256_NULL);
                      }
                      isEmpty() {
                        return (
                          this.balance === d &&
                          this.nonce === d &&
                          this.codeHash.equals(c.KECCAK256_NULL)
                        );
                      }
                    }
                    r.Account = m;
                    r.isValidAddress = function (e) {
                      try {
                        (0, u.assertIsString)(e);
                      } catch (e) {
                        return !1;
                      }
                      return /^0x[0-9a-fA-F]{40}$/.test(e);
                    };
                    r.toChecksumAddress = function (e, r) {
                      (0, u.assertIsHexString)(e);
                      const n = (0, l.stripHexPrefix)(e).toLowerCase();
                      let i = '';
                      if (r !== undefined) {
                        i = (0, a.bufferToBigInt)((0, a.toBuffer)(r)).toString() + '0x';
                      }
                      const c = t.from(i + n, 'utf8'),
                        d = (0, o.bytesToHex)((0, s.keccak256)(c));
                      let m = '0x';
                      for (let e = 0; e < n.length; e++)
                        parseInt(d[e], 16) >= 8 ? (m += n[e].toUpperCase()) : (m += n[e]);
                      return m;
                    };
                    r.isValidChecksumAddress = function (e, t) {
                      return (0, r.isValidAddress)(e) && (0, r.toChecksumAddress)(e, t) === e;
                    };
                    r.generateAddress = function (e, r) {
                      return (
                        (0, u.assertIsBuffer)(e),
                        (0, u.assertIsBuffer)(r),
                        (0, a.bufferToBigInt)(r) === BigInt(0)
                          ? t
                              .from((0, s.keccak256)(n.RLP.encode((0, a.bufArrToArr)([e, null]))))
                              .slice(-20)
                          : t
                              .from((0, s.keccak256)(n.RLP.encode((0, a.bufArrToArr)([e, r]))))
                              .slice(-20)
                      );
                    };
                    r.generateAddress2 = function (e, r, n) {
                      if (
                        ((0, u.assertIsBuffer)(e),
                        (0, u.assertIsBuffer)(r),
                        (0, u.assertIsBuffer)(n),
                        20 !== e.length)
                      )
                        throw new Error('Expected from to be of length 20');
                      if (32 !== r.length) throw new Error('Expected salt to be of length 32');
                      const i = (0, s.keccak256)(
                        t.concat([t.from('ff', 'hex'), e, r, (0, s.keccak256)(n)])
                      );
                      return (0, a.toBuffer)(i).slice(-20);
                    };
                    r.isValidPrivate = function (e) {
                      return i.secp256k1.utils.isValidPrivateKey(e);
                    };
                    r.isValidPublic = function (e, r = !1) {
                      if (((0, u.assertIsBuffer)(e), 64 === e.length))
                        try {
                          return (
                            i.secp256k1.ProjectivePoint.fromHex(t.concat([t.from([4]), e])), !0
                          );
                        } catch (e) {
                          return !1;
                        }
                      if (!r) return !1;
                      try {
                        return i.secp256k1.ProjectivePoint.fromHex(e), !0;
                      } catch (e) {
                        return !1;
                      }
                    };
                    (r.pubToAddress = function (e, r = !1) {
                      if (
                        ((0, u.assertIsBuffer)(e),
                        r &&
                          64 !== e.length &&
                          (e = t.from(
                            i.secp256k1.ProjectivePoint.fromHex(e).toRawBytes(!1).slice(1)
                          )),
                        64 !== e.length)
                      )
                        throw new Error('Expected pubKey to be of length 64');
                      return t.from((0, s.keccak256)(e)).slice(-20);
                    }),
                      (r.publicToAddress = r.pubToAddress);
                    r.privateToPublic = function (e) {
                      return (
                        (0, u.assertIsBuffer)(e),
                        t.from(
                          i.secp256k1.ProjectivePoint.fromPrivateKey(e).toRawBytes(!1).slice(1)
                        )
                      );
                    };
                    r.privateToAddress = function (e) {
                      return (0, r.publicToAddress)((0, r.privateToPublic)(e));
                    };
                    r.importPublic = function (e) {
                      return (
                        (0, u.assertIsBuffer)(e),
                        64 !== e.length &&
                          (e = t.from(
                            i.secp256k1.ProjectivePoint.fromHex(e).toRawBytes(!1).slice(1)
                          )),
                        e
                      );
                    };
                    r.zeroAddress = function () {
                      const e = (0, a.zeros)(20);
                      return (0, a.bufferToHex)(e);
                    };
                    function f(e) {
                      const [t, r, n, s] = e;
                      return [
                        t,
                        r,
                        0 === (0, a.arrToBufArr)(n).length ? c.KECCAK256_RLP : n,
                        0 === (0, a.arrToBufArr)(s).length ? c.KECCAK256_NULL : s,
                      ];
                    }
                    (r.isZeroAddress = function (e) {
                      try {
                        (0, u.assertIsString)(e);
                      } catch (e) {
                        return !1;
                      }
                      return (0, r.zeroAddress)() === e;
                    }),
                      (r.accountBodyFromSlim = f);
                    const p = new Uint8Array(0);
                    (r.accountBodyToSlim = function (e) {
                      const [t, r, n, s] = e;
                      return [
                        t,
                        r,
                        (0, a.arrToBufArr)(n).equals(c.KECCAK256_RLP) ? p : n,
                        (0, a.arrToBufArr)(s).equals(c.KECCAK256_NULL) ? p : s,
                      ];
                    }),
                      (r.accountBodyToRLP = function (e, t = !0) {
                        const r = t ? f(e) : e;
                        return (0, a.arrToBufArr)(n.RLP.encode(r));
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/account.js',
      },
    ],
    [
      2206,
      { './account': 2205, './bytes': 2208, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }), (r.Address = void 0);
                    const n = e('./account'),
                      s = e('./bytes');
                    class i {
                      constructor(e) {
                        if (20 !== e.length) throw new Error('Invalid address length');
                        this.buf = e;
                      }
                      static zero() {
                        return new i((0, s.zeros)(20));
                      }
                      static fromString(e) {
                        if (!(0, n.isValidAddress)(e)) throw new Error('Invalid address');
                        return new i((0, s.toBuffer)(e));
                      }
                      static fromPublicKey(e) {
                        if (!t.isBuffer(e)) throw new Error('Public key should be Buffer');
                        const r = (0, n.pubToAddress)(e);
                        return new i(r);
                      }
                      static fromPrivateKey(e) {
                        if (!t.isBuffer(e)) throw new Error('Private key should be Buffer');
                        const r = (0, n.privateToAddress)(e);
                        return new i(r);
                      }
                      static generate(e, t) {
                        if ('bigint' != typeof t) throw new Error('Expected nonce to be a bigint');
                        return new i((0, n.generateAddress)(e.buf, (0, s.bigIntToBuffer)(t)));
                      }
                      static generate2(e, r, s) {
                        if (!t.isBuffer(r)) throw new Error('Expected salt to be a Buffer');
                        if (!t.isBuffer(s)) throw new Error('Expected initCode to be a Buffer');
                        return new i((0, n.generateAddress2)(e.buf, r, s));
                      }
                      equals(e) {
                        return this.buf.equals(e.buf);
                      }
                      isZero() {
                        return this.equals(i.zero());
                      }
                      isPrecompileOrSystemAddress() {
                        const e = (0, s.bufferToBigInt)(this.buf),
                          t = BigInt(0),
                          r = BigInt('0xffff');
                        return e >= t && e <= r;
                      }
                      toString() {
                        return '0x' + this.buf.toString('hex');
                      }
                      toBuffer() {
                        return t.from(this.buf);
                      }
                    }
                    r.Address = i;
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/address.js',
      },
    ],
    [
      2207,
      { events: 4465 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.AsyncEventEmitter = void 0);
                const n = e('events');
                class s extends n.EventEmitter {
                  emit(e, ...t) {
                    let [r, n] = t;
                    const s = this;
                    let i = s._events[e] ?? [];
                    return (
                      n === undefined && 'function' == typeof r && ((n = r), (r = undefined)),
                      ('newListener' !== e && 'removeListener' !== e) ||
                        ((r = { event: r, fn: n }), (n = undefined)),
                      (i = Array.isArray(i) ? i : [i]),
                      (async function (e, t, r) {
                        let n;
                        for await (const s of t)
                          try {
                            s.length < 2
                              ? s.call(e, r)
                              : await new Promise((t, n) => {
                                  s.call(e, r, e => {
                                    e ? n(e) : t();
                                  });
                                });
                          } catch (e) {
                            n = e;
                          }
                        if (n) throw n;
                      })(s, i.slice(), r)
                        .then(n)
                        .catch(n),
                      s.listenerCount(e) > 0
                    );
                  }
                  once(e, t) {
                    const r = this;
                    let n;
                    if ('function' != typeof t) throw new TypeError('listener must be a function');
                    return (
                      (n =
                        t.length >= 2
                          ? function (s, i) {
                              r.removeListener(e, n), t(s, i);
                            }
                          : function (s) {
                              r.removeListener(e, n), t(s, n);
                            }),
                      r.on(e, n),
                      r
                    );
                  }
                  first(e, t) {
                    let r = this._events[e] ?? [];
                    if ('function' != typeof t) throw new TypeError('listener must be a function');
                    return Array.isArray(r) || (this._events[e] = r = [r]), r.unshift(t), this;
                  }
                  before(e, t, r) {
                    return this.beforeOrAfter(e, t, r);
                  }
                  after(e, t, r) {
                    return this.beforeOrAfter(e, t, r, 'after');
                  }
                  beforeOrAfter(e, t, r, n) {
                    let s,
                      i,
                      o = this._events[e] ?? [];
                    const a = 'after' === n ? 1 : 0;
                    if ('function' != typeof r) throw new TypeError('listener must be a function');
                    if ('function' != typeof t) throw new TypeError('target must be a function');
                    for (
                      Array.isArray(o) || (this._events[e] = o = [o]), i = o.length, s = o.length;
                      s--;

                    )
                      if (o[s] === t) {
                        i = s + a;
                        break;
                      }
                    return o.splice(i, 0, r), this;
                  }
                  on(e, t) {
                    return super.on(e, t);
                  }
                  addListener(e, t) {
                    return super.addListener(e, t);
                  }
                  prependListener(e, t) {
                    return super.prependListener(e, t);
                  }
                  prependOnceListener(e, t) {
                    return super.prependOnceListener(e, t);
                  }
                  removeAllListeners(e) {
                    return super.removeAllListeners(e);
                  }
                  removeListener(e, t) {
                    return super.removeListener(e, t);
                  }
                  eventNames() {
                    return super.eventNames();
                  }
                  listeners(e) {
                    return super.listeners(e);
                  }
                  listenerCount(e) {
                    return super.listenerCount(e);
                  }
                  getMaxListeners() {
                    return super.getMaxListeners();
                  }
                  setMaxListeners(e) {
                    return super.setMaxListeners(e);
                  }
                }
                r.AsyncEventEmitter = s;
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/asyncEventEmitter.js',
      },
    ],
    [
      2208,
      { './helpers': 2211, './internal': 2213, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.intToUnpaddedBuffer =
                        r.bigIntToUnpaddedBuffer =
                        r.bigIntToHex =
                        r.bufArrToArr =
                        r.arrToBufArr =
                        r.validateNoLeadingZeroes =
                        r.baToJSON =
                        r.toUtf8 =
                        r.short =
                        r.addHexPrefix =
                        r.toUnsigned =
                        r.fromSigned =
                        r.bufferToInt =
                        r.bigIntToBuffer =
                        r.bufferToBigInt =
                        r.bufferToHex =
                        r.toBuffer =
                        r.unpadHexString =
                        r.unpadArray =
                        r.unpadBuffer =
                        r.setLengthRight =
                        r.setLengthLeft =
                        r.zeros =
                        r.intToBuffer =
                        r.intToHex =
                          void 0);
                    const n = e('./helpers'),
                      s = e('./internal');
                    r.intToHex = function (e) {
                      if (!Number.isSafeInteger(e) || e < 0)
                        throw new Error(`Received an invalid integer type: ${e}`);
                      return `0x${e.toString(16)}`;
                    };
                    r.intToBuffer = function (e) {
                      const n = (0, r.intToHex)(e);
                      return t.from((0, s.padToEven)(n.slice(2)), 'hex');
                    };
                    r.zeros = function (e) {
                      return t.allocUnsafe(e).fill(0);
                    };
                    const i = function (e, t, n) {
                      const s = (0, r.zeros)(t);
                      return n
                        ? e.length < t
                          ? (e.copy(s), s)
                          : e.slice(0, t)
                        : e.length < t
                          ? (e.copy(s, t - e.length), s)
                          : e.slice(-t);
                    };
                    r.setLengthLeft = function (e, t) {
                      return (0, n.assertIsBuffer)(e), i(e, t, !1);
                    };
                    r.setLengthRight = function (e, t) {
                      return (0, n.assertIsBuffer)(e), i(e, t, !0);
                    };
                    const o = function (e) {
                      let t = e[0];
                      for (; e.length > 0 && '0' === t.toString(); ) t = (e = e.slice(1))[0];
                      return e;
                    };
                    r.unpadBuffer = function (e) {
                      return (0, n.assertIsBuffer)(e), o(e);
                    };
                    r.unpadArray = function (e) {
                      return (0, n.assertIsArray)(e), o(e);
                    };
                    r.unpadHexString = function (e) {
                      return (
                        (0, n.assertIsHexString)(e), (e = (0, s.stripHexPrefix)(e)), '0x' + o(e)
                      );
                    };
                    r.toBuffer = function (e) {
                      if (null === e || e === undefined) return t.allocUnsafe(0);
                      if (t.isBuffer(e)) return t.from(e);
                      if (Array.isArray(e) || e instanceof Uint8Array) return t.from(e);
                      if ('string' == typeof e) {
                        if (!(0, s.isHexString)(e))
                          throw new Error(
                            `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${e}`
                          );
                        return t.from((0, s.padToEven)((0, s.stripHexPrefix)(e)), 'hex');
                      }
                      if ('number' == typeof e) return (0, r.intToBuffer)(e);
                      if ('bigint' == typeof e) {
                        if (e < BigInt(0))
                          throw new Error(`Cannot convert negative bigint to buffer. Given: ${e}`);
                        let r = e.toString(16);
                        return r.length % 2 && (r = '0' + r), t.from(r, 'hex');
                      }
                      if (e.toArray) return t.from(e.toArray());
                      if (e.toBuffer) return t.from(e.toBuffer());
                      throw new Error('invalid type');
                    };
                    function a(e) {
                      const t = (0, r.bufferToHex)(e);
                      return '0x' === t ? BigInt(0) : BigInt(t);
                    }
                    function c(e) {
                      return (0, r.toBuffer)('0x' + e.toString(16));
                    }
                    (r.bufferToHex = function (e) {
                      return '0x' + (e = (0, r.toBuffer)(e)).toString('hex');
                    }),
                      (r.bufferToBigInt = a),
                      (r.bigIntToBuffer = c);
                    r.bufferToInt = function (e) {
                      const t = Number(a(e));
                      if (!Number.isSafeInteger(t)) throw new Error('Number exceeds 53 bits');
                      return t;
                    };
                    r.fromSigned = function (e) {
                      return BigInt.asIntN(256, a(e));
                    };
                    r.toUnsigned = function (e) {
                      return c(BigInt.asUintN(256, e));
                    };
                    (r.addHexPrefix = function (e) {
                      return 'string' != typeof e || (0, s.isHexPrefixed)(e) ? e : '0x' + e;
                    }),
                      (r.short = function (e, r = 50) {
                        const n = t.isBuffer(e) ? e.toString('hex') : e;
                        return n.length <= r ? n : n.slice(0, r) + '…';
                      });
                    r.toUtf8 = function (e) {
                      if ((e = (0, s.stripHexPrefix)(e)).length % 2 != 0)
                        throw new Error('Invalid non-even hex string input for toUtf8() provided');
                      return t.from(e.replace(/^(00)+|(00)+$/g, ''), 'hex').toString('utf8');
                    };
                    r.baToJSON = function (e) {
                      if (t.isBuffer(e)) return `0x${e.toString('hex')}`;
                      if (e instanceof Array) {
                        const t = [];
                        for (let n = 0; n < e.length; n++) t.push((0, r.baToJSON)(e[n]));
                        return t;
                      }
                    };
                    (r.validateNoLeadingZeroes = function (e) {
                      for (const [t, r] of Object.entries(e))
                        if (r !== undefined && r.length > 0 && 0 === r[0])
                          throw new Error(
                            `${t} cannot have leading zeroes, received: ${r.toString('hex')}`
                          );
                    }),
                      (r.arrToBufArr = function e(r) {
                        return Array.isArray(r) ? r.map(t => e(t)) : t.from(r);
                      }),
                      (r.bufArrToArr = function e(t) {
                        return Array.isArray(t) ? t.map(t => e(t)) : Uint8Array.from(t ?? []);
                      });
                    (r.bigIntToHex = e => '0x' + e.toString(16)),
                      (r.bigIntToUnpaddedBuffer = function (e) {
                        return (0, r.unpadBuffer)(c(e));
                      }),
                      (r.intToUnpaddedBuffer = function (e) {
                        return (0, r.unpadBuffer)((0, r.intToBuffer)(e));
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/bytes.js',
      },
    ],
    [
      2209,
      { buffer: 4139, 'ethereum-cryptography/secp256k1': 4383 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MAX_WITHDRAWALS_PER_PAYLOAD =
                    r.RLP_EMPTY_STRING =
                    r.KECCAK256_RLP =
                    r.KECCAK256_RLP_S =
                    r.KECCAK256_RLP_ARRAY =
                    r.KECCAK256_RLP_ARRAY_S =
                    r.KECCAK256_NULL =
                    r.KECCAK256_NULL_S =
                    r.TWO_POW256 =
                    r.SECP256K1_ORDER_DIV_2 =
                    r.SECP256K1_ORDER =
                    r.MAX_INTEGER_BIGINT =
                    r.MAX_INTEGER =
                    r.MAX_UINT64 =
                      void 0);
                const n = e('buffer'),
                  s = e('ethereum-cryptography/secp256k1');
                (r.MAX_UINT64 = BigInt('0xffffffffffffffff')),
                  (r.MAX_INTEGER = BigInt(
                    '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
                  )),
                  (r.MAX_INTEGER_BIGINT = BigInt(
                    '115792089237316195423570985008687907853269984665640564039457584007913129639935'
                  )),
                  (r.SECP256K1_ORDER = s.secp256k1.CURVE.n),
                  (r.SECP256K1_ORDER_DIV_2 = s.secp256k1.CURVE.n / BigInt(2)),
                  (r.TWO_POW256 = BigInt(
                    '0x10000000000000000000000000000000000000000000000000000000000000000'
                  )),
                  (r.KECCAK256_NULL_S =
                    'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'),
                  (r.KECCAK256_NULL = n.Buffer.from(r.KECCAK256_NULL_S, 'hex')),
                  (r.KECCAK256_RLP_ARRAY_S =
                    '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'),
                  (r.KECCAK256_RLP_ARRAY = n.Buffer.from(r.KECCAK256_RLP_ARRAY_S, 'hex')),
                  (r.KECCAK256_RLP_S =
                    '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'),
                  (r.KECCAK256_RLP = n.Buffer.from(r.KECCAK256_RLP_S, 'hex')),
                  (r.RLP_EMPTY_STRING = n.Buffer.from([128])),
                  (r.MAX_WITHDRAWALS_PER_PAYLOAD = 16);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/constants.js',
      },
    ],
    [
      2210,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.compactBytesToNibbles =
                    r.bytesToNibbles =
                    r.nibblesToCompactBytes =
                    r.nibblesToBytes =
                    r.hasTerminator =
                      void 0);
                r.hasTerminator = e => e.length > 0 && 16 === e[e.length - 1];
                r.nibblesToBytes = (e, t) => {
                  for (let r = 0, n = 0; n < e.length; r += 1, n += 2)
                    t[r] = (e[n] << 4) | e[n + 1];
                };
                r.nibblesToCompactBytes = e => {
                  let t = 0;
                  (0, r.hasTerminator)(e) && ((t = 1), (e = e.subarray(0, e.length - 1)));
                  const n = new Uint8Array(e.length / 2 + 1);
                  return (
                    (n[0] = t << 5),
                    1 & ~e.length || ((n[0] |= 16), (n[0] |= e[0]), (e = e.subarray(1))),
                    (0, r.nibblesToBytes)(e, n.subarray(1)),
                    n
                  );
                };
                r.bytesToNibbles = e => {
                  const t = 2 * e.length + 1,
                    r = new Uint8Array(t);
                  for (let t = 0; t < e.length; t++) {
                    const n = e[t];
                    (r[2 * t] = n / 16), (r[2 * t + 1] = n % 16);
                  }
                  return (r[t - 1] = 16), r;
                };
                r.compactBytesToNibbles = e => {
                  if (0 === e.length) return e;
                  let t = (0, r.bytesToNibbles)(e);
                  t[0] < 2 && (t = t.subarray(0, t.length - 1));
                  const n = 2 - (1 & t[0]);
                  return t.subarray(n);
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/encoding.js',
      },
    ],
    [
      2211,
      { '../../../../../../is-buffer/index.js': 4723, './internal': 2213 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.assertIsString =
                        r.assertIsArray =
                        r.assertIsBuffer =
                        r.assertIsHexString =
                          void 0);
                    const n = e('./internal');
                    r.assertIsHexString = function (e) {
                      if (!(0, n.isHexString)(e)) {
                        throw new Error(
                          `This method only supports 0x-prefixed hex strings but input was: ${e}`
                        );
                      }
                    };
                    r.assertIsBuffer = function (e) {
                      if (!t.isBuffer(e)) {
                        throw new Error(`This method only supports Buffer but input was: ${e}`);
                      }
                    };
                    r.assertIsArray = function (e) {
                      if (!Array.isArray(e)) {
                        throw new Error(
                          `This method only supports number arrays but input was: ${e}`
                        );
                      }
                    };
                    r.assertIsString = function (e) {
                      if ('string' != typeof e) {
                        throw new Error(`This method only supports strings but input was: ${e}`);
                      }
                    };
                  }).call(this);
                }).call(this, { isBuffer: e('../../../../../../is-buffer/index.js') });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/helpers.js',
      },
    ],
    [
      2212,
      {
        './account': 2205,
        './address': 2206,
        './asyncEventEmitter': 2207,
        './bytes': 2208,
        './constants': 2209,
        './encoding': 2210,
        './internal': 2213,
        './lock': 2214,
        './provider': 2215,
        './signature': 2216,
        './types': 2217,
        './units': 2218,
        './withdrawal': 2219,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toAscii =
                    r.stripHexPrefix =
                    r.padToEven =
                    r.isHexString =
                    r.isHexPrefixed =
                    r.getKeys =
                    r.getBinarySize =
                    r.fromUtf8 =
                    r.fromAscii =
                    r.arrayContainsArray =
                      void 0),
                  s(e('./constants'), r),
                  s(e('./units'), r),
                  s(e('./account'), r),
                  s(e('./address'), r),
                  s(e('./withdrawal'), r),
                  s(e('./signature'), r),
                  s(e('./bytes'), r),
                  s(e('./types'), r),
                  s(e('./encoding'), r),
                  s(e('./asyncEventEmitter'), r);
                var i = e('./internal');
                Object.defineProperty(r, 'arrayContainsArray', {
                  enumerable: !0,
                  get: function () {
                    return i.arrayContainsArray;
                  },
                }),
                  Object.defineProperty(r, 'fromAscii', {
                    enumerable: !0,
                    get: function () {
                      return i.fromAscii;
                    },
                  }),
                  Object.defineProperty(r, 'fromUtf8', {
                    enumerable: !0,
                    get: function () {
                      return i.fromUtf8;
                    },
                  }),
                  Object.defineProperty(r, 'getBinarySize', {
                    enumerable: !0,
                    get: function () {
                      return i.getBinarySize;
                    },
                  }),
                  Object.defineProperty(r, 'getKeys', {
                    enumerable: !0,
                    get: function () {
                      return i.getKeys;
                    },
                  }),
                  Object.defineProperty(r, 'isHexPrefixed', {
                    enumerable: !0,
                    get: function () {
                      return i.isHexPrefixed;
                    },
                  }),
                  Object.defineProperty(r, 'isHexString', {
                    enumerable: !0,
                    get: function () {
                      return i.isHexString;
                    },
                  }),
                  Object.defineProperty(r, 'padToEven', {
                    enumerable: !0,
                    get: function () {
                      return i.padToEven;
                    },
                  }),
                  Object.defineProperty(r, 'stripHexPrefix', {
                    enumerable: !0,
                    get: function () {
                      return i.stripHexPrefix;
                    },
                  }),
                  Object.defineProperty(r, 'toAscii', {
                    enumerable: !0,
                    get: function () {
                      return i.toAscii;
                    },
                  }),
                  s(e('./lock'), r),
                  s(e('./provider'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/index.js',
      },
    ],
    [
      2213,
      { buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (e) {
                  (function () {
                    function t(e) {
                      if ('string' != typeof e)
                        throw new Error(
                          "[isHexPrefixed] input must be type 'string', received type " + typeof e
                        );
                      return '0' === e[0] && 'x' === e[1];
                    }
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.isHexString =
                        r.getKeys =
                        r.fromAscii =
                        r.fromUtf8 =
                        r.toAscii =
                        r.arrayContainsArray =
                        r.getBinarySize =
                        r.padToEven =
                        r.stripHexPrefix =
                        r.isHexPrefixed =
                          void 0),
                      (r.isHexPrefixed = t);
                    function n(e) {
                      let t = e;
                      if ('string' != typeof t)
                        throw new Error(
                          "[padToEven] value must be type 'string', received " + typeof t
                        );
                      return t.length % 2 && (t = `0${t}`), t;
                    }
                    (r.stripHexPrefix = e => {
                      if ('string' != typeof e)
                        throw new Error(
                          "[stripHexPrefix] input must be type 'string', received " + typeof e
                        );
                      return t(e) ? e.slice(2) : e;
                    }),
                      (r.padToEven = n),
                      (r.getBinarySize = function (t) {
                        if ('string' != typeof t)
                          throw new Error(
                            "[getBinarySize] method requires input type 'string', received " +
                              typeof t
                          );
                        return e.byteLength(t, 'utf8');
                      }),
                      (r.arrayContainsArray = function (e, t, r) {
                        if (!0 !== Array.isArray(e))
                          throw new Error(
                            `[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof e}'`
                          );
                        if (!0 !== Array.isArray(t))
                          throw new Error(
                            `[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof t}'`
                          );
                        return t[!0 === r ? 'some' : 'every'](t => e.indexOf(t) >= 0);
                      }),
                      (r.toAscii = function (e) {
                        let t = '',
                          r = 0;
                        const n = e.length;
                        for ('0x' === e.substring(0, 2) && (r = 2); r < n; r += 2) {
                          const n = parseInt(e.substr(r, 2), 16);
                          t += String.fromCharCode(n);
                        }
                        return t;
                      }),
                      (r.fromUtf8 = function (t) {
                        return `0x${n(e.from(t, 'utf8').toString('hex')).replace(/^0+|0+$/g, '')}`;
                      }),
                      (r.fromAscii = function (e) {
                        let t = '';
                        for (let r = 0; r < e.length; r++) {
                          const n = e.charCodeAt(r).toString(16);
                          t += n.length < 2 ? `0${n}` : n;
                        }
                        return `0x${t}`;
                      }),
                      (r.getKeys = function (e, t, r) {
                        if (!Array.isArray(e))
                          throw new Error(
                            "[getKeys] method expects input 'params' to be an array, got " +
                              typeof e
                          );
                        if ('string' != typeof t)
                          throw new Error(
                            "[getKeys] method expects input 'key' to be type 'string', got " +
                              typeof e
                          );
                        const n = [];
                        for (let s = 0; s < e.length; s++) {
                          let i = e[s][t];
                          if (!0 !== r || i) {
                            if ('string' != typeof i)
                              throw new Error(
                                "invalid abi - expected type 'string', received " + typeof i
                              );
                          } else i = '';
                          n.push(i);
                        }
                        return n;
                      }),
                      (r.isHexString = function (e, t) {
                        return (
                          !('string' != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) &&
                          !(void 0 !== t && t > 0 && e.length !== 2 + 2 * t)
                        );
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/internal.js',
      },
    ],
    [
      2214,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.Lock = void 0);
                r.Lock = class {
                  constructor() {
                    (this.permits = 1), (this.promiseResolverQueue = []);
                  }
                  async acquire() {
                    return this.permits > 0
                      ? ((this.permits -= 1), Promise.resolve(!0))
                      : new Promise(e => this.promiseResolverQueue.push(e));
                  }
                  release() {
                    if (
                      ((this.permits += 1),
                      this.permits > 1 && this.promiseResolverQueue.length > 0)
                    )
                      console.warn(
                        'Lock.permits should never be > 0 when there is someone waiting.'
                      );
                    else if (1 === this.permits && this.promiseResolverQueue.length > 0) {
                      this.permits -= 1;
                      const e = this.promiseResolverQueue.shift();
                      e && e(!0);
                    }
                  }
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/lock.js',
      },
    ],
    [
      2215,
      { 'micro-ftch': 4977 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getProvider = r.fetchFromProvider = void 0);
                const n = e('micro-ftch');
                r.fetchFromProvider = async (e, t) =>
                  (
                    await (0, n.default)(e, {
                      headers: { 'content-type': 'application/json' },
                      type: 'json',
                      data: { method: t.method, params: t.params, jsonrpc: '2.0', id: 1 },
                    })
                  ).result;
                r.getProvider = e => {
                  if ('string' == typeof e) return e;
                  if (e?.connection?.url !== undefined) return e.connection.url;
                  throw new Error('Must provide valid provider URL or Web3Provider');
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/provider.js',
      },
    ],
    [
      2216,
      {
        './bytes': 2208,
        './constants': 2209,
        './helpers': 2211,
        buffer: 4139,
        'ethereum-cryptography/keccak': 4366,
        'ethereum-cryptography/secp256k1': 4383,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.hashPersonalMessage =
                        r.isValidSignature =
                        r.fromRpcSig =
                        r.toCompactSig =
                        r.toRpcSig =
                        r.ecrecover =
                        r.ecsign =
                          void 0);
                    const n = e('ethereum-cryptography/keccak'),
                      s = e('ethereum-cryptography/secp256k1'),
                      i = e('./bytes'),
                      o = e('./constants'),
                      a = e('./helpers');
                    function c(e, t) {
                      return e === BigInt(0) || e === BigInt(1)
                        ? e
                        : t === undefined
                          ? e - BigInt(27)
                          : e - (t * BigInt(2) + BigInt(35));
                    }
                    function u(e) {
                      return e === BigInt(0) || e === BigInt(1);
                    }
                    r.ecsign = function (e, r, n) {
                      const i = s.secp256k1.sign(e, r),
                        o = i.toCompactRawBytes();
                      return {
                        r: t.from(o.slice(0, 32)),
                        s: t.from(o.slice(32, 64)),
                        v:
                          n === undefined
                            ? BigInt(i.recovery + 27)
                            : BigInt(i.recovery + 35) + BigInt(n) * BigInt(2),
                      };
                    };
                    r.ecrecover = function (e, r, n, o, a) {
                      const l = t.concat(
                          [(0, i.setLengthLeft)(n, 32), (0, i.setLengthLeft)(o, 32)],
                          64
                        ),
                        d = c(r, a);
                      if (!u(d)) throw new Error('Invalid signature v value');
                      const m = s.secp256k1.Signature.fromCompact(l)
                        .addRecoveryBit(Number(d))
                        .recoverPublicKey(e);
                      return t.from(m.toRawBytes(!1).slice(1));
                    };
                    r.toRpcSig = function (e, r, n, s) {
                      if (!u(c(e, s))) throw new Error('Invalid signature v value');
                      return (0, i.bufferToHex)(
                        t.concat([
                          (0, i.setLengthLeft)(r, 32),
                          (0, i.setLengthLeft)(n, 32),
                          (0, i.toBuffer)(e),
                        ])
                      );
                    };
                    r.toCompactSig = function (e, r, n, s) {
                      if (!u(c(e, s))) throw new Error('Invalid signature v value');
                      let o = n;
                      return (
                        ((e > BigInt(28) && e % BigInt(2) === BigInt(1)) ||
                          e === BigInt(1) ||
                          e === BigInt(28)) &&
                          ((o = t.from(n)), (o[0] |= 128)),
                        (0, i.bufferToHex)(
                          t.concat([(0, i.setLengthLeft)(r, 32), (0, i.setLengthLeft)(o, 32)])
                        )
                      );
                    };
                    r.fromRpcSig = function (e) {
                      const t = (0, i.toBuffer)(e);
                      let r, n, s;
                      if (t.length >= 65)
                        (r = t.slice(0, 32)),
                          (n = t.slice(32, 64)),
                          (s = (0, i.bufferToBigInt)(t.slice(64)));
                      else {
                        if (64 !== t.length) throw new Error('Invalid signature length');
                        (r = t.slice(0, 32)),
                          (n = t.slice(32, 64)),
                          (s = BigInt((0, i.bufferToInt)(t.slice(32, 33)) >> 7)),
                          (n[0] &= 127);
                      }
                      return s < 27 && (s += BigInt(27)), { v: s, r: r, s: n };
                    };
                    r.isValidSignature = function (e, t, r, n = !0, s) {
                      if (32 !== t.length || 32 !== r.length) return !1;
                      if (!u(c(e, s))) return !1;
                      const a = (0, i.bufferToBigInt)(t),
                        l = (0, i.bufferToBigInt)(r);
                      return (
                        !(
                          a === BigInt(0) ||
                          a >= o.SECP256K1_ORDER ||
                          l === BigInt(0) ||
                          l >= o.SECP256K1_ORDER
                        ) && !(n && l >= o.SECP256K1_ORDER_DIV_2)
                      );
                    };
                    r.hashPersonalMessage = function (e) {
                      (0, a.assertIsBuffer)(e);
                      const r = t.from(`Ethereum Signed Message:\n${e.length}`, 'utf-8');
                      return t.from((0, n.keccak256)(t.concat([r, e])));
                    };
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/signature.js',
      },
    ],
    [
      2217,
      { './bytes': 2208, './internal': 2213 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toType = r.TypeOutput = void 0);
                const n = e('./bytes'),
                  s = e('./internal');
                var i;
                !(function (e) {
                  (e[(e.Number = 0)] = 'Number'),
                    (e[(e.BigInt = 1)] = 'BigInt'),
                    (e[(e.Buffer = 2)] = 'Buffer'),
                    (e[(e.PrefixedHexString = 3)] = 'PrefixedHexString');
                })((i = r.TypeOutput || (r.TypeOutput = {}))),
                  (r.toType = function (e, t) {
                    if (null === e) return null;
                    if (e === undefined) return undefined;
                    if ('string' == typeof e && !(0, s.isHexString)(e))
                      throw new Error(`A string must be provided with a 0x-prefix, given: ${e}`);
                    if ('number' == typeof e && !Number.isSafeInteger(e))
                      throw new Error(
                        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'
                      );
                    const r = (0, n.toBuffer)(e);
                    switch (t) {
                      case i.Buffer:
                        return r;
                      case i.BigInt:
                        return (0, n.bufferToBigInt)(r);
                      case i.Number: {
                        const e = (0, n.bufferToBigInt)(r);
                        if (e > BigInt(Number.MAX_SAFE_INTEGER))
                          throw new Error(
                            'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'
                          );
                        return Number(e);
                      }
                      case i.PrefixedHexString:
                        return (0, n.bufferToHex)(r);
                      default:
                        throw new Error('unknown outputType');
                    }
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/types.js',
      },
    ],
    [
      2218,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.GWEI_TO_WEI = void 0),
                  (r.GWEI_TO_WEI = BigInt(1e9));
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/units.js',
      },
    ],
    [
      2219,
      { './address': 2206, './bytes': 2208, './types': 2217, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }), (r.Withdrawal = void 0);
                    const n = e('./address'),
                      s = e('./bytes'),
                      i = e('./types');
                    class o {
                      constructor(e, t, r, n) {
                        (this.index = e),
                          (this.validatorIndex = t),
                          (this.address = r),
                          (this.amount = n);
                      }
                      static fromWithdrawalData(e) {
                        const { index: t, validatorIndex: r, address: s, amount: a } = e,
                          c = (0, i.toType)(t, i.TypeOutput.BigInt),
                          u = (0, i.toType)(r, i.TypeOutput.BigInt),
                          l = new n.Address((0, i.toType)(s, i.TypeOutput.Buffer)),
                          d = (0, i.toType)(a, i.TypeOutput.BigInt);
                        return new o(c, u, l, d);
                      }
                      static fromValuesArray(e) {
                        if (4 !== e.length)
                          throw Error(
                            `Invalid withdrawalArray length expected=4 actual=${e.length}`
                          );
                        const [t, r, n, s] = e;
                        return o.fromWithdrawalData({
                          index: t,
                          validatorIndex: r,
                          address: n,
                          amount: s,
                        });
                      }
                      static toBufferArray(e) {
                        const { index: r, validatorIndex: s, address: o, amount: a } = e,
                          c =
                            (0, i.toType)(r, i.TypeOutput.BigInt) === BigInt(0)
                              ? t.alloc(0)
                              : (0, i.toType)(r, i.TypeOutput.Buffer),
                          u =
                            (0, i.toType)(s, i.TypeOutput.BigInt) === BigInt(0)
                              ? t.alloc(0)
                              : (0, i.toType)(s, i.TypeOutput.Buffer);
                        let l;
                        l = o instanceof n.Address ? o.buf : (0, i.toType)(o, i.TypeOutput.Buffer);
                        return [
                          c,
                          u,
                          l,
                          (0, i.toType)(a, i.TypeOutput.BigInt) === BigInt(0)
                            ? t.alloc(0)
                            : (0, i.toType)(a, i.TypeOutput.Buffer),
                        ];
                      }
                      raw() {
                        return o.toBufferArray(this);
                      }
                      toValue() {
                        return {
                          index: this.index,
                          validatorIndex: this.validatorIndex,
                          address: this.address.buf,
                          amount: this.amount,
                        };
                      }
                      toJSON() {
                        return {
                          index: (0, s.bigIntToHex)(this.index),
                          validatorIndex: (0, s.bigIntToHex)(this.validatorIndex),
                          address: '0x' + this.address.buf.toString('hex'),
                          amount: (0, s.bigIntToHex)(this.amount),
                        };
                      }
                    }
                    r.Withdrawal = o;
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@ethereumjs/util',
        file: 'node_modules/@metamask/network-controller/node_modules/@ethereumjs/util/dist/withdrawal.js',
      },
    ],
    [
      2220,
      { './errors': 2221, './packer': 2224, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.decodeSingle = r.decode = r.encodePacked = r.encodeSingle = r.encode = void 0);
                const n = e('@metamask/utils'),
                  s = e('./errors'),
                  i = e('./packer');
                r.encode = (e, t, r, n) => {
                  try {
                    return (0, i.pack)({ types: e, values: t, packed: r, tight: n });
                  } catch (e) {
                    if (e instanceof s.ParserError)
                      throw new s.ParserError(`Unable to encode value: ${e.message}`, e);
                    throw new s.ParserError(
                      `An unexpected error occurred: ${(0, s.getErrorMessage)(e)}`,
                      e
                    );
                  }
                };
                r.encodeSingle = (e, t) => (0, r.encode)([e], [t]);
                r.encodePacked = (e, t, n) => (0, r.encode)(e, t, !0, n);
                r.decode = (e, t) => {
                  const r = (0, n.createBytes)(t);
                  try {
                    return (0, i.unpack)(e, r);
                  } catch (e) {
                    if (e instanceof s.ParserError)
                      throw new s.ParserError(`Unable to decode value: ${e.message}`, e);
                    throw new s.ParserError(
                      `An unexpected error occurred: ${(0, s.getErrorMessage)(e)}`,
                      e
                    );
                  }
                };
                r.decodeSingle = (e, t) => {
                  const i = (0, r.decode)([e], t);
                  return (
                    (0, n.assert)(
                      1 === i.length,
                      new s.ParserError('Decoded value array has unexpected length.')
                    ),
                    i[0]
                  );
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/abi.js',
      },
    ],
    [
      2221,
      { '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.ParserError = r.getErrorStack = r.getErrorMessage = void 0);
                const n = e('@metamask/utils');
                r.getErrorMessage = e =>
                  'string' == typeof e
                    ? e
                    : e instanceof Error ||
                        ((0, n.isObject)(e) &&
                          (0, n.hasProperty)(e, 'message') &&
                          'string' == typeof e.message)
                      ? e.message
                      : 'Unknown error.';
                r.getErrorStack = e => (e instanceof Error ? e.stack : undefined);
                class s extends Error {
                  constructor(e, t) {
                    super(e), (this.name = 'ParserError');
                    const n = (0, r.getErrorStack)(t);
                    n && (this.stack = n);
                  }
                }
                r.ParserError = s;
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/errors.js',
      },
    ],
    [
      2222,
      { './abi': 2220, './errors': 2221, './types': 2237 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./abi'), r),
                  s(e('./errors'), r),
                  s(e('./types'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/index.js',
      },
    ],
    [
      2223,
      { '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.iterate = void 0);
                const n = e('@metamask/utils');
                r.iterate = function* (e, t = 32) {
                  for (let r = 0; r < e.length; r += t) {
                    const s = e => {
                        (0, n.assert)(e >= 0, 'Cannot skip a negative number of bytes.'),
                          (0, n.assert)(e % t == 0, 'Length must be a multiple of the size.'),
                          (r += e);
                      },
                      i = e.subarray(r);
                    yield { skip: s, value: i };
                  }
                  return { skip: () => undefined, value: new Uint8Array() };
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/iterator.js',
      },
    ],
    [
      2224,
      {
        './errors': 2221,
        './iterator': 2223,
        './parsers': 2231,
        './utils': 2239,
        '@metamask/utils': 2250,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.unpack = r.pack = r.isDynamicParser = r.getParser = void 0);
                const n = e('@metamask/utils'),
                  s = e('./errors'),
                  i = e('./iterator'),
                  o = e('./parsers'),
                  a = e('./utils');
                r.getParser = e => {
                  const t = {
                      address: o.address,
                      array: o.array,
                      bool: o.bool,
                      bytes: o.bytes,
                      fixedBytes: o.fixedBytes,
                      function: o.fn,
                      number: o.number,
                      string: o.string,
                      tuple: o.tuple,
                    },
                    r = t[e];
                  if (r) return r;
                  const n = Object.values(t).find(t => t.isType(e));
                  if (n) return n;
                  throw new s.ParserError(`The type "${e}" is not supported.`);
                };
                r.isDynamicParser = (e, t) => {
                  const { isDynamic: r } = e;
                  return 'function' == typeof r ? r(t) : r;
                };
                r.pack = ({
                  types: e,
                  values: t,
                  packed: i = !1,
                  tight: o = !1,
                  arrayPacked: c = !1,
                  byteArray: u = new Uint8Array(),
                }) => {
                  (0, n.assert)(
                    e.length === t.length,
                    new s.ParserError(
                      `The number of types (${e.length}) does not match the number of values (${t.length}).`
                    )
                  );
                  const {
                    staticBuffer: l,
                    dynamicBuffer: d,
                    pointers: m,
                  } = e.reduce(
                    ({ staticBuffer: e, dynamicBuffer: s, pointers: a }, u, l) => {
                      const d = (0, r.getParser)(u),
                        m = t[l];
                      if (i || c || !(0, r.isDynamicParser)(d, u))
                        return {
                          staticBuffer: d.encode({
                            buffer: e,
                            value: m,
                            type: u,
                            packed: i,
                            tight: o,
                          }),
                          dynamicBuffer: s,
                          pointers: a,
                        };
                      return {
                        staticBuffer: (0, n.concatBytes)([e, new Uint8Array(32)]),
                        dynamicBuffer: d.encode({
                          buffer: s,
                          value: m,
                          type: u,
                          packed: i,
                          tight: o,
                        }),
                        pointers: [...a, { position: e.length, pointer: s.length }],
                      };
                    },
                    {
                      staticBuffer: new Uint8Array(),
                      dynamicBuffer: new Uint8Array(),
                      pointers: [],
                    }
                  );
                  (0, n.assert)(
                    (!i && !c) || 0 === d.length,
                    new s.ParserError('Invalid pack state.')
                  );
                  const f = l.length,
                    p = m.reduce((e, { pointer: t, position: r }) => {
                      const s = (0, a.padStart)((0, n.numberToBytes)(f + t));
                      return (0, a.set)(e, s, r);
                    }, l);
                  return (0, n.concatBytes)([u, p, d]);
                };
                r.unpack = (e, t) => {
                  const o = (0, i.iterate)(t);
                  return e.map(e => {
                    const {
                      value: { value: i, skip: a },
                      done: c,
                    } = o.next();
                    (0, n.assert)(
                      !c,
                      new s.ParserError(
                        `The encoded value is invalid for the provided types. Reached end of buffer while attempting to parse "${e}".`
                      )
                    );
                    const u = (0, r.getParser)(e);
                    if ((0, r.isDynamicParser)(u, e)) {
                      const r = (0, n.bytesToNumber)(i.subarray(0, 32)),
                        s = t.subarray(r);
                      return u.decode({ type: e, value: s, skip: a });
                    }
                    return u.decode({ type: e, value: i, skip: a });
                  });
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/packer.js',
      },
    ],
    [
      2225,
      { '../errors': 2221, '../utils': 2239, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.address = r.getAddress = void 0);
                const n = e('@metamask/utils'),
                  s = e('../errors'),
                  i = e('../utils');
                (r.getAddress = e => {
                  const t = (0, n.createBytes)(e);
                  return (
                    (0, n.assert)(
                      t.length <= 20,
                      new s.ParserError(
                        `Invalid address value. Expected address to be 20 bytes long, but received ${t.length} bytes.`
                      )
                    ),
                    (0, i.padStart)(t, 20)
                  );
                }),
                  (r.address = {
                    isDynamic: !1,
                    isType: e => 'address' === e,
                    getByteLength: () => 32,
                    encode({ buffer: e, value: t, packed: s }) {
                      const o = (0, r.getAddress)(t);
                      if (s) return (0, n.concatBytes)([e, o]);
                      const a = (0, i.padStart)(o);
                      return (0, n.concatBytes)([e, a]);
                    },
                    decode: ({ value: e }) => (0, n.add0x)((0, n.bytesToHex)(e.slice(12, 32))),
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/address.js',
      },
    ],
    [
      2226,
      {
        '../errors': 2221,
        '../packer': 2224,
        '../utils': 2239,
        './fixed-bytes': 2229,
        './tuple': 2235,
        '@metamask/utils': 2250,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.array = r.getTupleType = r.getArrayType = r.isArrayType = void 0);
                const n = e('@metamask/utils'),
                  s = e('../errors'),
                  i = e('../packer'),
                  o = e('../utils'),
                  a = e('./fixed-bytes'),
                  c = e('./tuple'),
                  u = /^(?<type>.*)\[(?<length>\d*?)\]$/u;
                r.isArrayType = e => u.test(e);
                r.getArrayType = e => {
                  const t = e.match(u);
                  return (
                    (0, n.assert)(
                      t?.groups?.type,
                      new s.ParserError(
                        `Invalid array type. Expected an array type, but received "${e}".`
                      )
                    ),
                    [t.groups.type, t.groups.length ? parseInt(t.groups.length, 10) : undefined]
                  );
                };
                (r.getTupleType = (e, t) => `(${new Array(t).fill(e).join(',')})`),
                  (r.array = {
                    isDynamic(e) {
                      const [t, n] = (0, r.getArrayType)(e);
                      return n === undefined || (0, i.isDynamicParser)((0, i.getParser)(t), t);
                    },
                    isType: e => (0, r.isArrayType)(e),
                    getByteLength(e) {
                      (0, n.assert)(
                        (0, r.isArrayType)(e),
                        new s.ParserError(`Expected an array type, but received "${e}".`)
                      );
                      const [t, o] = (0, r.getArrayType)(e);
                      return (0, i.isDynamicParser)(this, e) || o === undefined
                        ? 32
                        : c.tuple.getByteLength((0, r.getTupleType)(t, o));
                    },
                    encode({ type: e, buffer: t, value: u, packed: l, tight: d }) {
                      const [m, f] = (0, r.getArrayType)(e);
                      if (
                        ((0, n.assert)(
                          !l || !(0, r.isArrayType)(m),
                          new s.ParserError('Cannot pack nested arrays.')
                        ),
                        l && (0, i.isDynamicParser)((0, i.getParser)(m), m))
                      )
                        return (0, i.pack)({
                          types: new Array(u.length).fill(m),
                          values: u,
                          byteArray: t,
                          packed: l,
                          arrayPacked: !0,
                          tight: d,
                        });
                      if (f)
                        return (
                          (0, n.assert)(
                            f === u.length,
                            new s.ParserError(
                              `Array length does not match type length. Expected a length of ${f}, but received ${u.length}.`
                            )
                          ),
                          c.tuple.encode({
                            type: (0, r.getTupleType)(m, f),
                            buffer: t,
                            value: u,
                            packed: a.fixedBytes.isType(m) && d,
                            tight: d,
                          })
                        );
                      if (l)
                        return (0, i.pack)({
                          types: new Array(u.length).fill(m),
                          values: u,
                          byteArray: t,
                          packed: a.fixedBytes.isType(m) && d,
                          arrayPacked: !0,
                          tight: d,
                        });
                      const p = (0, o.padStart)((0, n.numberToBytes)(u.length));
                      return (0, i.pack)({
                        types: new Array(u.length).fill(m),
                        values: u,
                        byteArray: (0, n.concatBytes)([t, p]),
                        packed: l,
                        tight: d,
                      });
                    },
                    decode({ type: e, value: t, ...o }) {
                      const [a, u] = (0, r.getArrayType)(e);
                      if (u) {
                        const e = c.tuple.decode({
                          type: (0, r.getTupleType)(a, u),
                          value: t,
                          ...o,
                        });
                        return (
                          (0, n.assert)(
                            e.length === u,
                            new s.ParserError(
                              `Array length does not match type length. Expected a length of ${u}, but received ${e.length}.`
                            )
                          ),
                          e
                        );
                      }
                      const l = (0, n.bytesToNumber)(t.subarray(0, 32));
                      return (0, i.unpack)(new Array(l).fill(a), t.subarray(32));
                    },
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/array.js',
      },
    ],
    [
      2227,
      {
        '../errors': 2221,
        './number': 2232,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2250,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.bool = r.getBooleanValue = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils'),
                  i = e('../errors'),
                  o = e('./number'),
                  a = (0, n.coerce)(
                    (0, n.boolean)(),
                    (0, n.union)([(0, n.literal)('true'), (0, n.literal)('false')]),
                    e => 'true' === e
                  );
                (r.getBooleanValue = e => {
                  try {
                    return (0, n.create)(e, a) ? BigInt(1) : BigInt(0);
                  } catch {
                    throw new i.ParserError(
                      `Invalid boolean value. Expected a boolean literal, or the string "true" or "false", but received "${e}".`
                    );
                  }
                }),
                  (r.bool = {
                    isDynamic: !1,
                    isType: e => 'bool' === e,
                    getByteLength: () => 32,
                    encode({ buffer: e, value: t, packed: n, tight: i }) {
                      const a = (0, r.getBooleanValue)(t);
                      return n
                        ? (0, s.concatBytes)([e, (0, s.bigIntToBytes)(a)])
                        : o.number.encode({
                            type: 'uint256',
                            buffer: e,
                            value: a,
                            packed: n,
                            tight: i,
                          });
                    },
                    decode: e => o.number.decode({ ...e, type: 'uint256' }) === BigInt(1),
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/bool.js',
      },
    ],
    [
      2228,
      { '../utils': 2239, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.bytes = void 0);
                const n = e('@metamask/utils'),
                  s = e('../utils');
                r.bytes = {
                  isDynamic: !0,
                  isType: e => 'bytes' === e,
                  getByteLength: () => 32,
                  encode({ buffer: e, value: t, packed: r }) {
                    const i = (0, n.createBytes)(t);
                    if (r) return (0, n.concatBytes)([e, i]);
                    const o = 32 * Math.ceil(i.byteLength / 32);
                    return (0, n.concatBytes)([
                      e,
                      (0, s.padStart)((0, n.numberToBytes)(i.byteLength)),
                      (0, s.padEnd)(i, o),
                    ]);
                  },
                  decode({ value: e }) {
                    const t = e.subarray(0, 32),
                      r = (0, n.bytesToNumber)(t);
                    return e.slice(32, 32 + r);
                  },
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/bytes.js',
      },
    ],
    [
      2229,
      { '../errors': 2221, '../utils': 2239, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.fixedBytes = r.getByteLength = void 0);
                const n = e('@metamask/utils'),
                  s = e('../errors'),
                  i = e('../utils'),
                  o = /^bytes([0-9]{1,2})$/u;
                (r.getByteLength = e => {
                  const t = e.match(o)?.[1];
                  (0, n.assert)(
                    t,
                    `Invalid byte length. Expected a number between 1 and 32, but received "${e}".`
                  );
                  const r = Number(t);
                  return (
                    (0, n.assert)(
                      r > 0 && r <= 32,
                      new s.ParserError(
                        `Invalid byte length. Expected a number between 1 and 32, but received "${e}".`
                      )
                    ),
                    r
                  );
                }),
                  (r.fixedBytes = {
                    isDynamic: !1,
                    isType: e => o.test(e),
                    getByteLength: () => 32,
                    encode({ type: e, buffer: t, value: o, packed: a }) {
                      const c = (0, r.getByteLength)(e),
                        u = (0, n.createBytes)(o);
                      return (
                        (0, n.assert)(
                          u.length <= c,
                          new s.ParserError(
                            `Expected a value of length ${c}, but received a value of length ${u.length}.`
                          )
                        ),
                        a
                          ? (0, n.concatBytes)([t, (0, i.padEnd)(u, c)])
                          : (0, n.concatBytes)([t, (0, i.padEnd)(u)])
                      );
                    },
                    decode({ type: e, value: t }) {
                      const n = (0, r.getByteLength)(e);
                      return t.slice(0, n);
                    },
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js',
      },
    ],
    [
      2230,
      {
        '../errors': 2221,
        './fixed-bytes': 2229,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2250,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.fn = r.getFunction = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@metamask/utils'),
                  i = e('../errors'),
                  o = e('./fixed-bytes'),
                  a = (0, n.coerce)(
                    (0, n.object)({ address: s.StrictHexStruct, selector: s.StrictHexStruct }),
                    (0, n.union)([s.StrictHexStruct, (0, n.instance)(Uint8Array)]),
                    e => {
                      const t = (0, s.createBytes)(e);
                      return (
                        (0, s.assert)(
                          24 === t.length,
                          new i.ParserError(
                            `Invalid Solidity function. Expected function to be 24 bytes long, but received ${t.length} bytes.`
                          )
                        ),
                        {
                          address: (0, s.bytesToHex)(t.subarray(0, 20)),
                          selector: (0, s.bytesToHex)(t.subarray(20, 24)),
                        }
                      );
                    }
                  );
                (r.getFunction = e => {
                  const t = (0, n.create)(e, a);
                  return (0, s.concatBytes)([
                    (0, s.hexToBytes)(t.address),
                    (0, s.hexToBytes)(t.selector),
                  ]);
                }),
                  (r.fn = {
                    isDynamic: !1,
                    isType: e => 'function' === e,
                    getByteLength: () => 32,
                    encode({ buffer: e, value: t, packed: n, tight: s }) {
                      const i = (0, r.getFunction)(t);
                      return o.fixedBytes.encode({
                        type: 'bytes24',
                        buffer: e,
                        value: i,
                        packed: n,
                        tight: s,
                      });
                    },
                    decode: ({ value: e }) => ({
                      address: (0, s.bytesToHex)(e.slice(0, 20)),
                      selector: (0, s.bytesToHex)(e.slice(20, 24)),
                    }),
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/function.js',
      },
    ],
    [
      2231,
      {
        './address': 2225,
        './array': 2226,
        './bool': 2227,
        './bytes': 2228,
        './fixed-bytes': 2229,
        './function': 2230,
        './number': 2232,
        './parser': 2233,
        './string': 2234,
        './tuple': 2235,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./address'), r),
                  s(e('./array'), r),
                  s(e('./bool'), r),
                  s(e('./bytes'), r),
                  s(e('./fixed-bytes'), r),
                  s(e('./function'), r),
                  s(e('./number'), r),
                  s(e('./parser'), r),
                  s(e('./string'), r),
                  s(e('./tuple'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/index.js',
      },
    ],
    [
      2232,
      { '../errors': 2221, '../utils': 2239, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.number =
                    r.getBigInt =
                    r.assertNumberLength =
                    r.getLength =
                    r.isSigned =
                      void 0);
                const n = e('@metamask/utils'),
                  s = e('../errors'),
                  i = e('../utils'),
                  o = /^u?int(?<length>[0-9]*)?$/u;
                r.isSigned = e => !e.startsWith('u');
                r.getLength = e => {
                  if ('int' === e || 'uint' === e) return 256;
                  const t = e.match(o);
                  (0, n.assert)(
                    t?.groups?.length,
                    new s.ParserError(
                      `Invalid number type. Expected a number type, but received "${e}".`
                    )
                  );
                  const r = parseInt(t.groups.length, 10);
                  return (
                    (0, n.assert)(
                      r >= 8 && r <= 256,
                      new s.ParserError(
                        `Invalid number length. Expected a number between 8 and 256, but received "${e}".`
                      )
                    ),
                    (0, n.assert)(
                      r % 8 == 0,
                      new s.ParserError(
                        `Invalid number length. Expected a multiple of 8, but received "${e}".`
                      )
                    ),
                    r
                  );
                };
                r.assertNumberLength = (e, t) => {
                  const i = (0, r.getLength)(t),
                    o = BigInt(2) ** BigInt(i - ((0, r.isSigned)(t) ? 1 : 0)) - BigInt(1);
                  (0, r.isSigned)(t)
                    ? (0, n.assert)(
                        e >= -(o + BigInt(1)) && e <= o,
                        new s.ParserError(`Number "${e}" is out of range for type "${t}".`)
                      )
                    : (0, n.assert)(
                        e <= o,
                        new s.ParserError(`Number "${e}" is out of range for type "${t}".`)
                      );
                };
                (r.getBigInt = e => {
                  try {
                    return (0, n.createBigInt)(e);
                  } catch {
                    throw new s.ParserError(
                      `Invalid number. Expected a valid number value, but received "${e}".`
                    );
                  }
                }),
                  (r.number = {
                    isDynamic: !1,
                    isType: e => o.test(e),
                    getByteLength: () => 32,
                    encode({ type: e, buffer: t, value: s, packed: o }) {
                      const a = (0, r.getBigInt)(s);
                      if (((0, r.assertNumberLength)(a, e), (0, r.isSigned)(e))) {
                        if (o) {
                          const s = (0, r.getLength)(e) / 8;
                          return (0, n.concatBytes)([t, (0, n.signedBigIntToBytes)(a, s)]);
                        }
                        return (0, n.concatBytes)([
                          t,
                          (0, i.padStart)((0, n.signedBigIntToBytes)(a, 32)),
                        ]);
                      }
                      if (o) {
                        const s = (0, r.getLength)(e) / 8;
                        return (0, n.concatBytes)([t, (0, i.padStart)((0, n.bigIntToBytes)(a), s)]);
                      }
                      return (0, n.concatBytes)([t, (0, i.padStart)((0, n.bigIntToBytes)(a))]);
                    },
                    decode({ type: e, value: t }) {
                      const s = t.subarray(0, 32);
                      if ((0, r.isSigned)(e)) {
                        const t = (0, n.bytesToSignedBigInt)(s);
                        return (0, r.assertNumberLength)(t, e), t;
                      }
                      const i = (0, n.bytesToBigInt)(s);
                      return (0, r.assertNumberLength)(i, e), i;
                    },
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/number.js',
      },
    ],
    [
      2233,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/parser.js',
      },
    ],
    [
      2234,
      { './bytes': 2228, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.string = void 0);
                const n = e('@metamask/utils'),
                  s = e('./bytes');
                r.string = {
                  isDynamic: !0,
                  isType: e => 'string' === e,
                  getByteLength: () => 32,
                  encode: ({ buffer: e, value: t, packed: r, tight: i }) =>
                    s.bytes.encode({
                      type: 'bytes',
                      buffer: e,
                      value: (0, n.stringToBytes)(t),
                      packed: r,
                      tight: i,
                    }),
                  decode: e => (0, n.bytesToString)(s.bytes.decode(e)),
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/string.js',
      },
    ],
    [
      2235,
      { '../errors': 2221, '../packer': 2224, '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.tuple = r.getTupleElements = void 0);
                const n = e('@metamask/utils'),
                  s = e('../errors'),
                  i = e('../packer'),
                  o = /^\((.+)\)$/u;
                (r.getTupleElements = e => {
                  (0, n.assert)(
                    e.startsWith('(') && e.endsWith(')'),
                    new s.ParserError(
                      `Invalid tuple type. Expected tuple type, but received "${e}".`
                    )
                  );
                  const t = [];
                  let r = '',
                    i = 0;
                  for (let n = 1; n < e.length - 1; n++) {
                    const s = e[n];
                    ',' === s && 0 === i
                      ? (t.push(r.trim()), (r = ''))
                      : ((r += s), '(' === s ? (i += 1) : ')' === s && (i -= 1));
                  }
                  return r.trim() && t.push(r.trim()), t;
                }),
                  (r.tuple = {
                    isDynamic: e =>
                      (0, r.getTupleElements)(e).some(e => {
                        const t = (0, i.getParser)(e);
                        return (0, i.isDynamicParser)(t, e);
                      }),
                    isType: e => (e => o.test(e))(e),
                    getByteLength(e) {
                      if ((0, i.isDynamicParser)(this, e)) return 32;
                      return (0, r.getTupleElements)(e).reduce(
                        (e, t) => e + (0, i.getParser)(t).getByteLength(t),
                        0
                      );
                    },
                    encode({ type: e, buffer: t, value: n, packed: s, tight: o }) {
                      const a = (0, r.getTupleElements)(e);
                      return (0, i.pack)({
                        types: a,
                        values: n,
                        byteArray: t,
                        packed: s,
                        tight: o,
                      });
                    },
                    decode({ type: e, value: t, skip: n }) {
                      const s = (0, r.getTupleElements)(e);
                      return n(this.getByteLength(e) - 32), (0, i.unpack)(s, t);
                    },
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/parsers/tuple.js',
      },
    ],
    [
      2236,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/types/abi.js',
      },
    ],
    [
      2237,
      { './abi': 2236 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), s(e('./abi'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/types/index.js',
      },
    ],
    [
      2238,
      { '@metamask/utils': 2250 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.padEnd = r.padStart = r.set = void 0);
                const n = e('@metamask/utils');
                r.set = (e, t, r) =>
                  (0, n.concatBytes)([e.subarray(0, r), t, e.subarray(r + t.length)]);
                r.padStart = (e, t = 32) => {
                  const r = new Uint8Array(Math.max(t - e.length, 0)).fill(0);
                  return (0, n.concatBytes)([r, e]);
                };
                r.padEnd = (e, t = 32) => {
                  const r = new Uint8Array(Math.max(t - e.length, 0)).fill(0);
                  return (0, n.concatBytes)([e, r]);
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/utils/buffer.js',
      },
    ],
    [
      2239,
      { './buffer': 2238 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), s(e('./buffer'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/dist/utils/index.js',
      },
    ],
    [
      2240,
      { './errors.cjs': 2248, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.assertExhaustive = r.assertStruct = r.assert = r.AssertionError = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./errors.cjs');
                function i(e, t) {
                  return (
                    (r = e),
                    Boolean('string' == typeof r?.prototype?.constructor?.name)
                      ? new e({ message: t })
                      : e({ message: t })
                  );
                  var r;
                }
                class o extends Error {
                  constructor(e) {
                    super(e.message), (this.code = 'ERR_ASSERTION');
                  }
                }
                (r.AssertionError = o),
                  (r.assert = function (e, t = 'Assertion failed.', r = o) {
                    if (!e) {
                      if (t instanceof Error) throw t;
                      throw i(r, t);
                    }
                  }),
                  (r.assertStruct = function (e, t, r = 'Assertion failed', a = o) {
                    try {
                      (0, n.assert)(e, t);
                    } catch (e) {
                      throw i(
                        a,
                        `${r}: ${(function (e) {
                          return (0, s.getErrorMessage)(e).replace(/\.$/u, '');
                        })(e)}.`
                      );
                    }
                  }),
                  (r.assertExhaustive = function (e) {
                    throw new Error(
                      'Invalid branch reached. Should be detected during compilation.'
                    );
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/assert.cjs',
      },
    ],
    [
      2241,
      { './assert.cjs': 2240, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.base64 = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs');
                r.base64 = (e, t = {}) => {
                  const r = t.paddingRequired ?? !1,
                    i = t.characterSet ?? 'base64';
                  let o, a;
                  return (
                    'base64' === i
                      ? (o = String.raw`[A-Za-z0-9+\/]`)
                      : ((0, s.assert)('base64url' === i), (o = String.raw`[-_A-Za-z0-9]`)),
                    (a = r
                      ? new RegExp(`^(?:${o}{4})*(?:${o}{3}=|${o}{2}==)?$`, 'u')
                      : new RegExp(`^(?:${o}{4})*(?:${o}{2,3}|${o}{3}=|${o}{2}==)?$`, 'u')),
                    (0, n.pattern)(e, a)
                  );
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/base64.cjs',
      },
    ],
    [
      2242,
      { './assert.cjs': 2240, './hex.cjs': 2249, '@scure/base': 3078, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.createDataView =
                        r.concatBytes =
                        r.valueToBytes =
                        r.base64ToBytes =
                        r.stringToBytes =
                        r.numberToBytes =
                        r.signedBigIntToBytes =
                        r.bigIntToBytes =
                        r.hexToBytes =
                        r.bytesToBase64 =
                        r.bytesToString =
                        r.bytesToNumber =
                        r.bytesToSignedBigInt =
                        r.bytesToBigInt =
                        r.bytesToHex =
                        r.assertIsBytes =
                        r.isBytes =
                          void 0);
                    const n = e('@scure/base'),
                      s = e('./assert.cjs'),
                      i = e('./hex.cjs'),
                      o = 48,
                      a = 58,
                      c = 87;
                    const u = (function () {
                      const e = [];
                      return () => {
                        if (0 === e.length)
                          for (let t = 0; t < 256; t++) e.push(t.toString(16).padStart(2, '0'));
                        return e;
                      };
                    })();
                    function l(e) {
                      return e instanceof Uint8Array;
                    }
                    function d(e) {
                      (0, s.assert)(l(e), 'Value must be a Uint8Array.');
                    }
                    function m(e) {
                      if ((d(e), 0 === e.length)) return '0x';
                      const t = u(),
                        r = new Array(e.length);
                      for (let n = 0; n < e.length; n++) r[n] = t[e[n]];
                      return (0, i.add0x)(r.join(''));
                    }
                    function f(e) {
                      d(e);
                      const t = m(e);
                      return BigInt(t);
                    }
                    function p(e) {
                      if ('0x' === e?.toLowerCase?.()) return new Uint8Array();
                      (0, i.assertIsHexString)(e);
                      const t = (0, i.remove0x)(e).toLowerCase(),
                        r = t.length % 2 == 0 ? t : `0${t}`,
                        n = new Uint8Array(r.length / 2);
                      for (let e = 0; e < n.length; e++) {
                        const t = r.charCodeAt(2 * e),
                          s = r.charCodeAt(2 * e + 1),
                          i = t - (t < a ? o : c),
                          u = s - (s < a ? o : c);
                        n[e] = 16 * i + u;
                      }
                      return n;
                    }
                    function h(e) {
                      (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                        (0, s.assert)(e >= BigInt(0), 'Value must be a non-negative bigint.');
                      return p(e.toString(16));
                    }
                    function g(e) {
                      (0, s.assert)('number' == typeof e, 'Value must be a number.'),
                        (0, s.assert)(e >= 0, 'Value must be a non-negative number.'),
                        (0, s.assert)(
                          Number.isSafeInteger(e),
                          'Value is not a safe integer. Use `bigIntToBytes` instead.'
                        );
                      return p(e.toString(16));
                    }
                    function y(e) {
                      return (
                        (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                        new TextEncoder().encode(e)
                      );
                    }
                    function w(e) {
                      if ('bigint' == typeof e) return h(e);
                      if ('number' == typeof e) return g(e);
                      if ('string' == typeof e) return e.startsWith('0x') ? p(e) : y(e);
                      if (l(e)) return e;
                      throw new TypeError(`Unsupported value type: "${typeof e}".`);
                    }
                    (r.isBytes = l),
                      (r.assertIsBytes = d),
                      (r.bytesToHex = m),
                      (r.bytesToBigInt = f),
                      (r.bytesToSignedBigInt = function (e) {
                        d(e);
                        let t = BigInt(0);
                        for (const r of e) t = (t << BigInt(8)) + BigInt(r);
                        return BigInt.asIntN(8 * e.length, t);
                      }),
                      (r.bytesToNumber = function (e) {
                        d(e);
                        const t = f(e);
                        return (
                          (0, s.assert)(
                            t <= BigInt(Number.MAX_SAFE_INTEGER),
                            'Number is not a safe integer. Use `bytesToBigInt` instead.'
                          ),
                          Number(t)
                        );
                      }),
                      (r.bytesToString = function (e) {
                        return d(e), new TextDecoder().decode(e);
                      }),
                      (r.bytesToBase64 = function (e) {
                        return d(e), n.base64.encode(e);
                      }),
                      (r.hexToBytes = p),
                      (r.bigIntToBytes = h),
                      (r.signedBigIntToBytes = function (e, t) {
                        (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                          (0, s.assert)('number' == typeof t, 'Byte length must be a number.'),
                          (0, s.assert)(t > 0, 'Byte length must be greater than 0.'),
                          (0, s.assert)(
                            (function (e, t) {
                              (0, s.assert)(t > 0);
                              const r = e >> BigInt(31);
                              return !(((~e & r) + (e & ~r)) >> BigInt(8 * t - 1));
                            })(e, t),
                            'Byte length is too small to represent the given value.'
                          );
                        let r = e;
                        const n = new Uint8Array(t);
                        for (let e = 0; e < n.length; e++)
                          (n[e] = Number(BigInt.asUintN(8, r))), (r >>= BigInt(8));
                        return n.reverse();
                      }),
                      (r.numberToBytes = g),
                      (r.stringToBytes = y),
                      (r.base64ToBytes = function (e) {
                        return (
                          (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                          n.base64.decode(e)
                        );
                      }),
                      (r.valueToBytes = w),
                      (r.concatBytes = function (e) {
                        const t = new Array(e.length);
                        let r = 0;
                        for (let n = 0; n < e.length; n++) {
                          const s = w(e[n]);
                          (t[n] = s), (r += s.length);
                        }
                        const n = new Uint8Array(r);
                        for (let e = 0, r = 0; e < t.length; e++)
                          n.set(t[e], r), (r += t[e].length);
                        return n;
                      }),
                      (r.createDataView = function (e) {
                        if (void 0 !== t && e instanceof t) {
                          const t = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                          return new DataView(t);
                        }
                        return new DataView(e.buffer, e.byteOffset, e.byteLength);
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/bytes.cjs',
      },
    ],
    [
      2243,
      { './superstruct.cjs': 2258, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toCaipAssetId =
                    r.toCaipAssetType =
                    r.toCaipAccountId =
                    r.toCaipChainId =
                    r.parseCaipAssetId =
                    r.parseCaipAssetType =
                    r.parseCaipAccountId =
                    r.parseCaipChainId =
                    r.isCaipAssetId =
                    r.isCaipAssetType =
                    r.isCaipTokenId =
                    r.isCaipAssetReference =
                    r.isCaipAssetNamespace =
                    r.isCaipAccountAddress =
                    r.isCaipAccountId =
                    r.isCaipReference =
                    r.isCaipNamespace =
                    r.isCaipChainId =
                    r.KnownCaipNamespace =
                    r.CaipAssetTypeOrIdStruct =
                    r.CaipAssetIdStruct =
                    r.CaipAssetTypeStruct =
                    r.CaipTokenIdStruct =
                    r.CaipAssetReferenceStruct =
                    r.CaipAssetNamespaceStruct =
                    r.CaipAccountAddressStruct =
                    r.CaipAccountIdStruct =
                    r.CaipReferenceStruct =
                    r.CaipNamespaceStruct =
                    r.CaipChainIdStruct =
                    r.CAIP_ASSET_ID_REGEX =
                    r.CAIP_ASSET_TYPE_REGEX =
                    r.CAIP_TOKEN_ID_REGEX =
                    r.CAIP_ASSET_REFERENCE_REGEX =
                    r.CAIP_ASSET_NAMESPACE_REGEX =
                    r.CAIP_ACCOUNT_ADDRESS_REGEX =
                    r.CAIP_ACCOUNT_ID_REGEX =
                    r.CAIP_REFERENCE_REGEX =
                    r.CAIP_NAMESPACE_REGEX =
                    r.CAIP_CHAIN_ID_REGEX =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./superstruct.cjs');
                (r.CAIP_CHAIN_ID_REGEX =
                  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u),
                  (r.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u),
                  (r.CAIP_ACCOUNT_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_ASSET_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_ASSET_REFERENCE_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_TOKEN_ID_REGEX = /^[-.%a-zA-Z0-9]{1,78}$/u),
                  (r.CAIP_ASSET_TYPE_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ASSET_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$/u);
                function i(e) {
                  return (0, n.is)(e, r.CaipNamespaceStruct);
                }
                function o(e) {
                  return (0, n.is)(e, r.CaipReferenceStruct);
                }
                function a(e) {
                  return (0, n.is)(e, r.CaipAccountAddressStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.CaipAssetNamespaceStruct);
                }
                function u(e) {
                  return (0, n.is)(e, r.CaipAssetReferenceStruct);
                }
                function l(e) {
                  return (0, n.is)(e, r.CaipTokenIdStruct);
                }
                (r.CaipChainIdStruct = (0, s.definePattern)('CaipChainId', r.CAIP_CHAIN_ID_REGEX)),
                  (r.CaipNamespaceStruct = (0, s.definePattern)(
                    'CaipNamespace',
                    r.CAIP_NAMESPACE_REGEX
                  )),
                  (r.CaipReferenceStruct = (0, s.definePattern)(
                    'CaipReference',
                    r.CAIP_REFERENCE_REGEX
                  )),
                  (r.CaipAccountIdStruct = (0, s.definePattern)(
                    'CaipAccountId',
                    r.CAIP_ACCOUNT_ID_REGEX
                  )),
                  (r.CaipAccountAddressStruct = (0, s.definePattern)(
                    'CaipAccountAddress',
                    r.CAIP_ACCOUNT_ADDRESS_REGEX
                  )),
                  (r.CaipAssetNamespaceStruct = (0, s.definePattern)(
                    'CaipAssetNamespace',
                    r.CAIP_ASSET_NAMESPACE_REGEX
                  )),
                  (r.CaipAssetReferenceStruct = (0, s.definePattern)(
                    'CaipAssetReference',
                    r.CAIP_ASSET_REFERENCE_REGEX
                  )),
                  (r.CaipTokenIdStruct = (0, s.definePattern)(
                    'CaipTokenId',
                    r.CAIP_TOKEN_ID_REGEX
                  )),
                  (r.CaipAssetTypeStruct = (0, s.definePattern)(
                    'CaipAssetType',
                    r.CAIP_ASSET_TYPE_REGEX
                  )),
                  (r.CaipAssetIdStruct = (0, s.definePattern)(
                    'CaipAssetId',
                    r.CAIP_ASSET_ID_REGEX
                  )),
                  (r.CaipAssetTypeOrIdStruct = (0, s.definePattern)(
                    'CaipAssetTypeOrId',
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})(\/(?<tokenId>[-.%a-zA-Z0-9]{1,78}))?$/u
                  )),
                  (function (e) {
                    (e.Bip122 = 'bip122'),
                      (e.Solana = 'solana'),
                      (e.Eip155 = 'eip155'),
                      (e.Wallet = 'wallet');
                  })(r.KnownCaipNamespace || (r.KnownCaipNamespace = {})),
                  (r.isCaipChainId = function (e) {
                    return (0, n.is)(e, r.CaipChainIdStruct);
                  }),
                  (r.isCaipNamespace = i),
                  (r.isCaipReference = o),
                  (r.isCaipAccountId = function (e) {
                    return (0, n.is)(e, r.CaipAccountIdStruct);
                  }),
                  (r.isCaipAccountAddress = a),
                  (r.isCaipAssetNamespace = c),
                  (r.isCaipAssetReference = u),
                  (r.isCaipTokenId = l),
                  (r.isCaipAssetType = function (e) {
                    return (0, n.is)(e, r.CaipAssetTypeStruct);
                  }),
                  (r.isCaipAssetId = function (e) {
                    return (0, n.is)(e, r.CaipAssetIdStruct);
                  }),
                  (r.parseCaipChainId = function (e) {
                    const t = r.CAIP_CHAIN_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP chain ID.');
                    return { namespace: t.groups.namespace, reference: t.groups.reference };
                  }),
                  (r.parseCaipAccountId = function (e) {
                    const t = r.CAIP_ACCOUNT_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP account ID.');
                    return {
                      address: t.groups.accountAddress,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.parseCaipAssetType = function (e) {
                    const t = r.CAIP_ASSET_TYPE_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP asset type.');
                    return {
                      assetNamespace: t.groups.assetNamespace,
                      assetReference: t.groups.assetReference,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.parseCaipAssetId = function (e) {
                    const t = r.CAIP_ASSET_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP asset ID.');
                    return {
                      assetNamespace: t.groups.assetNamespace,
                      assetReference: t.groups.assetReference,
                      tokenId: t.groups.tokenId,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.toCaipChainId = function (e, t) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}`;
                  }),
                  (r.toCaipAccountId = function (e, t, n) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!a(n))
                      throw new Error(
                        `Invalid "accountAddress", must match: ${r.CAIP_ACCOUNT_ADDRESS_REGEX.toString()}`
                      );
                    return `${e}:${t}:${n}`;
                  }),
                  (r.toCaipAssetType = function (e, t, n, s) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!c(n))
                      throw new Error(
                        `Invalid "assetNamespace", must match: ${r.CAIP_ASSET_NAMESPACE_REGEX.toString()}`
                      );
                    if (!u(s))
                      throw new Error(
                        `Invalid "assetReference", must match: ${r.CAIP_ASSET_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}/${n}:${s}`;
                  }),
                  (r.toCaipAssetId = function (e, t, n, s, a) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!c(n))
                      throw new Error(
                        `Invalid "assetNamespace", must match: ${r.CAIP_ASSET_NAMESPACE_REGEX.toString()}`
                      );
                    if (!u(s))
                      throw new Error(
                        `Invalid "assetReference", must match: ${r.CAIP_ASSET_REFERENCE_REGEX.toString()}`
                      );
                    if (!l(a))
                      throw new Error(
                        `Invalid "tokenId", must match: ${r.CAIP_TOKEN_ID_REGEX.toString()}`
                      );
                    return `${e}:${t}/${n}:${s}/${a}`;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/caip-types.cjs',
      },
    ],
    [
      2244,
      { './base64.cjs': 2241, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.ChecksumStruct = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./base64.cjs');
                r.ChecksumStruct = (0, n.size)(
                  (0, s.base64)((0, n.string)(), { paddingRequired: !0 }),
                  44,
                  44
                );
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/checksum.cjs',
      },
    ],
    [
      2245,
      {
        './assert.cjs': 2240,
        './bytes.cjs': 2242,
        './hex.cjs': 2249,
        '@metamask/superstruct': 2913,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createHex = r.createBytes = r.createBigInt = r.createNumber = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./bytes.cjs'),
                  o = e('./hex.cjs'),
                  a = (0, n.union)([
                    (0, n.number)(),
                    (0, n.bigint)(),
                    (0, n.string)(),
                    o.StrictHexStruct,
                  ]),
                  c = (0, n.coerce)((0, n.number)(), a, Number),
                  u = (0, n.coerce)((0, n.bigint)(), a, BigInt),
                  l =
                    ((0, n.union)([o.StrictHexStruct, (0, n.instance)(Uint8Array)]),
                    (0, n.coerce)(
                      (0, n.instance)(Uint8Array),
                      (0, n.union)([o.StrictHexStruct]),
                      i.hexToBytes
                    )),
                  d = (0, n.coerce)(o.StrictHexStruct, (0, n.instance)(Uint8Array), i.bytesToHex);
                (r.createNumber = function (e) {
                  try {
                    const t = (0, n.create)(e, c);
                    return (
                      (0, s.assert)(
                        Number.isFinite(t),
                        `Expected a number-like value, got "${e}".`
                      ),
                      t
                    );
                  } catch (t) {
                    if (t instanceof n.StructError)
                      throw new Error(`Expected a number-like value, got "${e}".`);
                    throw t;
                  }
                }),
                  (r.createBigInt = function (e) {
                    try {
                      return (0, n.create)(e, u);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a number-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createBytes = function (e) {
                    if ('string' == typeof e && '0x' === e.toLowerCase()) return new Uint8Array();
                    try {
                      return (0, n.create)(e, l);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createHex = function (e) {
                    if (
                      (e instanceof Uint8Array && 0 === e.length) ||
                      ('string' == typeof e && '0x' === e.toLowerCase())
                    )
                      return '0x';
                    try {
                      return (0, n.create)(e, d);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/coercers.cjs',
      },
    ],
    [
      2246,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  o =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.FrozenSet = r.FrozenMap = void 0);
                class a {
                  get size() {
                    return i(this, n, 'f').size;
                  }
                  [((n = new WeakMap()), Symbol.iterator)]() {
                    return i(this, n, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    n.set(this, void 0), o(this, n, new Map(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, n, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, n, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  get(e) {
                    return i(this, n, 'f').get(e);
                  }
                  has(e) {
                    return i(this, n, 'f').has(e);
                  }
                  keys() {
                    return i(this, n, 'f').keys();
                  }
                  values() {
                    return i(this, n, 'f').values();
                  }
                  toString() {
                    return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[...this.entries()].map(([e, t]) => `${String(e)} => ${String(t)}`).join(', ')} ` : ''}}`;
                  }
                }
                r.FrozenMap = a;
                class c {
                  get size() {
                    return i(this, s, 'f').size;
                  }
                  [((s = new WeakMap()), Symbol.iterator)]() {
                    return i(this, s, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    s.set(this, void 0), o(this, s, new Set(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, s, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, s, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  has(e) {
                    return i(this, s, 'f').has(e);
                  }
                  keys() {
                    return i(this, s, 'f').keys();
                  }
                  values() {
                    return i(this, s, 'f').values();
                  }
                  toString() {
                    return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[...this.values()].map(e => String(e)).join(', ')} ` : ''}}`;
                  }
                }
                (r.FrozenSet = c),
                  Object.freeze(a),
                  Object.freeze(a.prototype),
                  Object.freeze(c),
                  Object.freeze(c.prototype);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/collections.cjs',
      },
    ],
    [
      2247,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/encryption-types.cjs',
      },
    ],
    [
      2248,
      { './misc.cjs': 2254, 'pony-cause': 5071 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.wrapError =
                    r.getErrorMessage =
                    r.isErrorWithStack =
                    r.isErrorWithMessage =
                    r.isErrorWithCode =
                      void 0);
                const n = e('pony-cause'),
                  s = e('./misc.cjs');
                function i(e) {
                  return 'object' == typeof e && null !== e && 'code' in e;
                }
                function o(e) {
                  return 'object' == typeof e && null !== e && 'message' in e;
                }
                (r.isErrorWithCode = i),
                  (r.isErrorWithMessage = o),
                  (r.isErrorWithStack = function (e) {
                    return 'object' == typeof e && null !== e && 'stack' in e;
                  }),
                  (r.getErrorMessage = function (e) {
                    return o(e) && 'string' == typeof e.message
                      ? e.message
                      : (0, s.isNullOrUndefined)(e)
                        ? ''
                        : String(e);
                  }),
                  (r.wrapError = function (e, t) {
                    if (
                      (r = e) instanceof Error ||
                      ((0, s.isObject)(r) && 'Error' === r.constructor.name)
                    ) {
                      let r;
                      return (
                        (r =
                          2 === Error.length
                            ? new Error(t, { cause: e })
                            : new n.ErrorWithCause(t, { cause: e })),
                        i(e) && (r.code = e.code),
                        r
                      );
                    }
                    var r;
                    return t.length > 0 ? new Error(`${String(e)}: ${t}`) : new Error(String(e));
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/errors.cjs',
      },
    ],
    [
      2249,
      {
        './assert.cjs': 2240,
        './bytes.cjs': 2242,
        '@metamask/superstruct': 2913,
        '@noble/hashes/sha3': 3055,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.remove0x =
                    r.add0x =
                    r.isValidChecksumAddress =
                    r.getChecksumAddress =
                    r.isValidHexAddress =
                    r.assertIsStrictHexString =
                    r.assertIsHexString =
                    r.isStrictHexString =
                    r.isHexString =
                    r.HexChecksumAddressStruct =
                    r.HexAddressStruct =
                    r.StrictHexStruct =
                    r.HexStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@noble/hashes/sha3'),
                  i = e('./assert.cjs'),
                  o = e('./bytes.cjs');
                function a(e) {
                  return (0, n.is)(e, r.HexStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.StrictHexStruct);
                }
                function u(e) {
                  (0, i.assert)((0, n.is)(e, r.HexChecksumAddressStruct), 'Invalid hex address.');
                  const t = d(e.toLowerCase()),
                    a = d((0, o.bytesToHex)((0, s.keccak_256)(t)));
                  return `0x${t
                    .split('')
                    .map((e, t) => {
                      const r = a[t];
                      return (
                        (0, i.assert)((0, n.is)(r, (0, n.string)()), 'Hash shorter than address.'),
                        parseInt(r, 16) > 7 ? e.toUpperCase() : e
                      );
                    })
                    .join('')}`;
                }
                function l(e) {
                  return !!(0, n.is)(e, r.HexChecksumAddressStruct) && u(e) === e;
                }
                function d(e) {
                  return e.startsWith('0x') || e.startsWith('0X') ? e.substring(2) : e;
                }
                (r.HexStruct = (0, n.pattern)((0, n.string)(), /^(?:0x)?[0-9a-f]+$/iu)),
                  (r.StrictHexStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]+$/iu)),
                  (r.HexAddressStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]{40}$/u)),
                  (r.HexChecksumAddressStruct = (0, n.pattern)(
                    (0, n.string)(),
                    /^0x[0-9a-fA-F]{40}$/u
                  )),
                  (r.isHexString = a),
                  (r.isStrictHexString = c),
                  (r.assertIsHexString = function (e) {
                    (0, i.assert)(a(e), 'Value must be a hexadecimal string.');
                  }),
                  (r.assertIsStrictHexString = function (e) {
                    (0, i.assert)(c(e), 'Value must be a hexadecimal string, starting with "0x".');
                  }),
                  (r.isValidHexAddress = function (e) {
                    return (0, n.is)(e, r.HexAddressStruct) || l(e);
                  }),
                  (r.getChecksumAddress = u),
                  (r.isValidChecksumAddress = l),
                  (r.add0x = function (e) {
                    return e.startsWith('0x')
                      ? e
                      : e.startsWith('0X')
                        ? `0x${e.substring(2)}`
                        : `0x${e}`;
                  }),
                  (r.remove0x = d);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/hex.cjs',
      },
    ],
    [
      2250,
      {
        './assert.cjs': 2240,
        './base64.cjs': 2241,
        './bytes.cjs': 2242,
        './caip-types.cjs': 2243,
        './checksum.cjs': 2244,
        './coercers.cjs': 2245,
        './collections.cjs': 2246,
        './encryption-types.cjs': 2247,
        './errors.cjs': 2248,
        './hex.cjs': 2249,
        './json.cjs': 2251,
        './keyring.cjs': 2252,
        './logging.cjs': 2253,
        './misc.cjs': 2254,
        './number.cjs': 2255,
        './opaque.cjs': 2256,
        './promise.cjs': 2257,
        './superstruct.cjs': 2258,
        './time.cjs': 2259,
        './transaction-types.cjs': 2260,
        './versions.cjs': 2261,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./assert.cjs'), r),
                  s(e('./base64.cjs'), r),
                  s(e('./bytes.cjs'), r),
                  s(e('./caip-types.cjs'), r),
                  s(e('./checksum.cjs'), r),
                  s(e('./coercers.cjs'), r),
                  s(e('./collections.cjs'), r),
                  s(e('./encryption-types.cjs'), r),
                  s(e('./errors.cjs'), r),
                  s(e('./hex.cjs'), r),
                  s(e('./json.cjs'), r),
                  s(e('./keyring.cjs'), r),
                  s(e('./logging.cjs'), r),
                  s(e('./misc.cjs'), r),
                  s(e('./number.cjs'), r),
                  s(e('./opaque.cjs'), r),
                  s(e('./promise.cjs'), r),
                  s(e('./superstruct.cjs'), r),
                  s(e('./time.cjs'), r),
                  s(e('./transaction-types.cjs'), r),
                  s(e('./versions.cjs'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/index.cjs',
      },
    ],
    [
      2251,
      { './assert.cjs': 2240, './misc.cjs': 2254, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getJsonRpcIdValidator =
                    r.assertIsJsonRpcError =
                    r.isJsonRpcError =
                    r.assertIsJsonRpcFailure =
                    r.isJsonRpcFailure =
                    r.assertIsJsonRpcSuccess =
                    r.isJsonRpcSuccess =
                    r.assertIsJsonRpcResponse =
                    r.isJsonRpcResponse =
                    r.assertIsPendingJsonRpcResponse =
                    r.isPendingJsonRpcResponse =
                    r.JsonRpcResponseStruct =
                    r.JsonRpcFailureStruct =
                    r.JsonRpcSuccessStruct =
                    r.PendingJsonRpcResponseStruct =
                    r.assertIsJsonRpcRequest =
                    r.isJsonRpcRequest =
                    r.assertIsJsonRpcNotification =
                    r.isJsonRpcNotification =
                    r.JsonRpcNotificationStruct =
                    r.JsonRpcRequestStruct =
                    r.JsonRpcParamsStruct =
                    r.JsonRpcErrorStruct =
                    r.JsonRpcIdStruct =
                    r.JsonRpcVersionStruct =
                    r.jsonrpc2 =
                    r.getJsonSize =
                    r.getSafeJson =
                    r.isValidJson =
                    r.JsonStruct =
                    r.UnsafeJsonStruct =
                    r.exactOptional =
                    r.object =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./misc.cjs');
                function o({ path: e, branch: t }) {
                  const r = e[e.length - 1];
                  return (0, i.hasProperty)(t[t.length - 2], r);
                }
                function a(e) {
                  return new n.Struct({
                    ...e,
                    type: `optional ${e.type}`,
                    validator: (t, r) => !o(r) || e.validator(t, r),
                    refiner: (t, r) => !o(r) || e.refiner(t, r),
                  });
                }
                function c(e) {
                  if (null === e || 'boolean' == typeof e || 'string' == typeof e) return !0;
                  if ('number' == typeof e && Number.isFinite(e)) return !0;
                  if ('object' == typeof e) {
                    let t = !0;
                    if (Array.isArray(e)) {
                      for (let r = 0; r < e.length; r++)
                        if (!c(e[r])) {
                          t = !1;
                          break;
                        }
                      return t;
                    }
                    const r = Object.entries(e);
                    for (let e = 0; e < r.length; e++)
                      if ('string' != typeof r[e][0] || !c(r[e][1])) {
                        t = !1;
                        break;
                      }
                    return t;
                  }
                  return !1;
                }
                function u(e) {
                  return (0, n.create)(e, r.JsonStruct);
                }
                (r.object = e => (0, n.object)(e)),
                  (r.exactOptional = a),
                  (r.UnsafeJsonStruct = (0, n.define)('JSON', e => c(e))),
                  (r.JsonStruct = (0, n.coerce)(
                    r.UnsafeJsonStruct,
                    (0, n.refine)((0, n.any)(), 'JSON', e => (0, n.is)(e, r.UnsafeJsonStruct)),
                    e =>
                      JSON.parse(
                        JSON.stringify(e, (e, t) =>
                          '__proto__' === e || 'constructor' === e ? undefined : t
                        )
                      )
                  )),
                  (r.isValidJson = function (e) {
                    try {
                      return u(e), !0;
                    } catch {
                      return !1;
                    }
                  }),
                  (r.getSafeJson = u),
                  (r.getJsonSize = function (e) {
                    (0, s.assertStruct)(e, r.JsonStruct, 'Invalid JSON value');
                    const t = JSON.stringify(e);
                    return new TextEncoder().encode(t).byteLength;
                  }),
                  (r.jsonrpc2 = '2.0'),
                  (r.JsonRpcVersionStruct = (0, n.literal)(r.jsonrpc2)),
                  (r.JsonRpcIdStruct = (0, n.nullable)(
                    (0, n.union)([(0, n.number)(), (0, n.string)()])
                  )),
                  (r.JsonRpcErrorStruct = (0, r.object)({
                    code: (0, n.integer)(),
                    message: (0, n.string)(),
                    data: a(r.JsonStruct),
                    stack: a((0, n.string)()),
                  })),
                  (r.JsonRpcParamsStruct = (0, n.union)([
                    (0, n.record)((0, n.string)(), r.JsonStruct),
                    (0, n.array)(r.JsonStruct),
                  ])),
                  (r.JsonRpcRequestStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.JsonRpcNotificationStruct = (0, r.object)({
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.isJsonRpcNotification = function (e) {
                    return (0, n.is)(e, r.JsonRpcNotificationStruct);
                  }),
                  (r.assertIsJsonRpcNotification = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcNotificationStruct,
                      'Invalid JSON-RPC notification',
                      t
                    );
                  }),
                  (r.isJsonRpcRequest = function (e) {
                    return (0, n.is)(e, r.JsonRpcRequestStruct);
                  }),
                  (r.assertIsJsonRpcRequest = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcRequestStruct, 'Invalid JSON-RPC request', t);
                  }),
                  (r.PendingJsonRpcResponseStruct = (0, n.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: (0, n.optional)((0, n.unknown)()),
                    error: (0, n.optional)(r.JsonRpcErrorStruct),
                  })),
                  (r.JsonRpcSuccessStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: r.JsonStruct,
                  })),
                  (r.JsonRpcFailureStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    error: r.JsonRpcErrorStruct,
                  })),
                  (r.JsonRpcResponseStruct = (0, n.union)([
                    r.JsonRpcSuccessStruct,
                    r.JsonRpcFailureStruct,
                  ])),
                  (r.isPendingJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.PendingJsonRpcResponseStruct);
                  }),
                  (r.assertIsPendingJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.PendingJsonRpcResponseStruct,
                      'Invalid pending JSON-RPC response',
                      t
                    );
                  }),
                  (r.isJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.JsonRpcResponseStruct);
                  }),
                  (r.assertIsJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcResponseStruct, 'Invalid JSON-RPC response', t);
                  }),
                  (r.isJsonRpcSuccess = function (e) {
                    return (0, n.is)(e, r.JsonRpcSuccessStruct);
                  }),
                  (r.assertIsJsonRpcSuccess = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcSuccessStruct,
                      'Invalid JSON-RPC success response',
                      t
                    );
                  }),
                  (r.isJsonRpcFailure = function (e) {
                    return (0, n.is)(e, r.JsonRpcFailureStruct);
                  }),
                  (r.assertIsJsonRpcFailure = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcFailureStruct,
                      'Invalid JSON-RPC failure response',
                      t
                    );
                  }),
                  (r.isJsonRpcError = function (e) {
                    return (0, n.is)(e, r.JsonRpcErrorStruct);
                  }),
                  (r.assertIsJsonRpcError = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcErrorStruct, 'Invalid JSON-RPC error', t);
                  }),
                  (r.getJsonRpcIdValidator = function (e) {
                    const {
                      permitEmptyString: t,
                      permitFractions: r,
                      permitNull: n,
                    } = { permitEmptyString: !0, permitFractions: !1, permitNull: !0, ...e };
                    return e =>
                      Boolean(
                        ('number' == typeof e && (r || Number.isInteger(e))) ||
                          ('string' == typeof e && (t || e.length > 0)) ||
                          (n && null === e)
                      );
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/json.cjs',
      },
    ],
    [
      2252,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/keyring.cjs',
      },
    ],
    [
      2253,
      { debug: 4292 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.createProjectLogger = void 0);
                const s = (0, n(e('debug')).default)('metamask');
                (r.createProjectLogger = function (e) {
                  return s.extend(e);
                }),
                  (r.createModuleLogger = function (e, t) {
                    return e.extend(t);
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/logging.cjs',
      },
    ],
    [
      2254,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.calculateNumberSize =
                    r.calculateStringSize =
                    r.isASCII =
                    r.isPlainObject =
                    r.ESCAPE_CHARACTERS_REGEXP =
                    r.JsonSize =
                    r.getKnownPropertyNames =
                    r.hasProperty =
                    r.isObject =
                    r.isNullOrUndefined =
                    r.isNonEmptyArray =
                      void 0),
                  (r.isNonEmptyArray = function (e) {
                    return Array.isArray(e) && e.length > 0;
                  }),
                  (r.isNullOrUndefined = function (e) {
                    return null === e || e === undefined;
                  }),
                  (r.isObject = function (e) {
                    return Boolean(e) && 'object' == typeof e && !Array.isArray(e);
                  });
                function n(e) {
                  return e.charCodeAt(0) <= 127;
                }
                (r.hasProperty = (e, t) => Object.hasOwnProperty.call(e, t)),
                  (r.getKnownPropertyNames = function (e) {
                    return Object.getOwnPropertyNames(e);
                  }),
                  (function (e) {
                    (e[(e.Null = 4)] = 'Null'),
                      (e[(e.Comma = 1)] = 'Comma'),
                      (e[(e.Wrapper = 1)] = 'Wrapper'),
                      (e[(e.True = 4)] = 'True'),
                      (e[(e.False = 5)] = 'False'),
                      (e[(e.Quote = 1)] = 'Quote'),
                      (e[(e.Colon = 1)] = 'Colon'),
                      (e[(e.Date = 24)] = 'Date');
                  })(r.JsonSize || (r.JsonSize = {})),
                  (r.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu),
                  (r.isPlainObject = function (e) {
                    if ('object' != typeof e || null === e) return !1;
                    try {
                      let t = e;
                      for (; null !== Object.getPrototypeOf(t); ) t = Object.getPrototypeOf(t);
                      return Object.getPrototypeOf(e) === t;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (r.isASCII = n),
                  (r.calculateStringSize = function (e) {
                    return (
                      e.split('').reduce((e, t) => (n(t) ? e + 1 : e + 2), 0) +
                      (e.match(r.ESCAPE_CHARACTERS_REGEXP) ?? []).length
                    );
                  }),
                  (r.calculateNumberSize = function (e) {
                    return e.toString().length;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/misc.cjs',
      },
    ],
    [
      2255,
      { './assert.cjs': 2240, './hex.cjs': 2249 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.hexToBigInt = r.hexToNumber = r.bigIntToHex = r.numberToHex = void 0);
                const n = e('./assert.cjs'),
                  s = e('./hex.cjs');
                r.numberToHex = e => (
                  (0, n.assert)('number' == typeof e, 'Value must be a number.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative number.'),
                  (0, n.assert)(
                    Number.isSafeInteger(e),
                    'Value is not a safe integer. Use `bigIntToHex` instead.'
                  ),
                  (0, s.add0x)(e.toString(16))
                );
                r.bigIntToHex = e => (
                  (0, n.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative bigint.'),
                  (0, s.add0x)(e.toString(16))
                );
                r.hexToNumber = e => {
                  (0, s.assertIsHexString)(e);
                  const t = parseInt(e, 16);
                  return (
                    (0, n.assert)(
                      Number.isSafeInteger(t),
                      'Value is not a safe integer. Use `hexToBigInt` instead.'
                    ),
                    t
                  );
                };
                r.hexToBigInt = e => ((0, s.assertIsHexString)(e), BigInt((0, s.add0x)(e)));
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/number.cjs',
      },
    ],
    [
      2256,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/opaque.cjs',
      },
    ],
    [
      2257,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createDeferredPromise = void 0),
                  (r.createDeferredPromise = function ({
                    suppressUnhandledRejection: e = !1,
                  } = {}) {
                    let t, r;
                    const n = new Promise((e, n) => {
                      (t = e), (r = n);
                    });
                    return e && n.catch(e => {}), { promise: n, resolve: t, reject: r };
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/promise.cjs',
      },
    ],
    [
      2258,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.definePattern = void 0);
                const n = e('@metamask/superstruct');
                r.definePattern = function (e, t) {
                  return (0, n.define)(e, e => 'string' == typeof e && t.test(e));
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/superstruct.cjs',
      },
    ],
    [
      2259,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.timeSince = r.inMilliseconds = r.Duration = void 0),
                  (function (e) {
                    (e[(e.Millisecond = 1)] = 'Millisecond'),
                      (e[(e.Second = 1e3)] = 'Second'),
                      (e[(e.Minute = 6e4)] = 'Minute'),
                      (e[(e.Hour = 36e5)] = 'Hour'),
                      (e[(e.Day = 864e5)] = 'Day'),
                      (e[(e.Week = 6048e5)] = 'Week'),
                      (e[(e.Year = 31536e6)] = 'Year');
                  })(r.Duration || (r.Duration = {}));
                const n = (e, t) => {
                  if (!(e => Number.isInteger(e) && e >= 0)(e))
                    throw new Error(`"${t}" must be a non-negative integer. Received: "${e}".`);
                };
                (r.inMilliseconds = function (e, t) {
                  return n(e, 'count'), e * t;
                }),
                  (r.timeSince = function (e) {
                    return n(e, 'timestamp'), Date.now() - e;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/time.cjs',
      },
    ],
    [
      2260,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/transaction-types.cjs',
      },
    ],
    [
      2261,
      { './assert.cjs': 2240, '@metamask/superstruct': 2913, semver: 5617 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.satisfiesVersionRange =
                    r.gtRange =
                    r.gtVersion =
                    r.assertIsSemVerRange =
                    r.assertIsSemVerVersion =
                    r.isValidSemVerRange =
                    r.isValidSemVerVersion =
                    r.VersionRangeStruct =
                    r.VersionStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('semver'),
                  i = e('./assert.cjs');
                (r.VersionStruct = (0, n.refine)(
                  (0, n.string)(),
                  'Version',
                  e => null !== (0, s.valid)(e) || `Expected SemVer version, got "${e}"`
                )),
                  (r.VersionRangeStruct = (0, n.refine)(
                    (0, n.string)(),
                    'Version range',
                    e => null !== (0, s.validRange)(e) || `Expected SemVer range, got "${e}"`
                  )),
                  (r.isValidSemVerVersion = function (e) {
                    return (0, n.is)(e, r.VersionStruct);
                  }),
                  (r.isValidSemVerRange = function (e) {
                    return (0, n.is)(e, r.VersionRangeStruct);
                  }),
                  (r.assertIsSemVerVersion = function (e) {
                    (0, i.assertStruct)(e, r.VersionStruct);
                  }),
                  (r.assertIsSemVerRange = function (e) {
                    (0, i.assertStruct)(e, r.VersionRangeStruct);
                  }),
                  (r.gtVersion = function (e, t) {
                    return (0, s.gt)(e, t);
                  }),
                  (r.gtRange = function (e, t) {
                    return (0, s.gtr)(e, t);
                  }),
                  (r.satisfiesVersionRange = function (e, t) {
                    return (0, s.satisfies)(e, t, { includePrerelease: !0 });
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/abi-utils>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/abi-utils/node_modules/@metamask/utils/dist/versions.cjs',
      },
    ],
    [
      2262,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.BaseControllerV1 = r.isBaseControllerV1 = void 0),
                  (r.isBaseControllerV1 = function (e) {
                    return (
                      'name' in e &&
                      'string' == typeof e.name &&
                      'config' in e &&
                      'object' == typeof e.config &&
                      'defaultConfig' in e &&
                      'object' == typeof e.defaultConfig &&
                      'state' in e &&
                      'object' == typeof e.state &&
                      'defaultState' in e &&
                      'object' == typeof e.defaultState &&
                      'disabled' in e &&
                      'boolean' == typeof e.disabled &&
                      'subscribe' in e &&
                      'function' == typeof e.subscribe
                    );
                  });
                class n {
                  constructor(e = {}, t = {}) {
                    (this.defaultConfig = {}),
                      (this.defaultState = {}),
                      (this.disabled = !1),
                      (this.name = 'BaseController'),
                      (this.internalConfig = this.defaultConfig),
                      (this.internalState = this.defaultState),
                      (this.internalListeners = []),
                      (this.initialState = t),
                      (this.initialConfig = e);
                  }
                  initialize() {
                    return (
                      (this.internalState = this.defaultState),
                      (this.internalConfig = this.defaultConfig),
                      this.configure(this.initialConfig),
                      this.update(this.initialState),
                      this
                    );
                  }
                  get config() {
                    return this.internalConfig;
                  }
                  get state() {
                    return this.internalState;
                  }
                  configure(e, t = !1, r = !0) {
                    if (r) {
                      this.internalConfig = t ? e : Object.assign(this.internalConfig, e);
                      for (const e of Object.keys(this.internalConfig)) {
                        const t = this.internalConfig[e];
                        t !== undefined && (this[e] = t);
                      }
                    } else
                      for (const t of Object.keys(e))
                        if (this.internalConfig[t] !== undefined) {
                          const r = e[t];
                          (this.internalConfig[t] = r), (this[t] = r);
                        }
                  }
                  notify() {
                    this.disabled ||
                      this.internalListeners.forEach(e => {
                        e(this.internalState);
                      });
                  }
                  subscribe(e) {
                    this.internalListeners.push(e);
                  }
                  unsubscribe(e) {
                    const t = this.internalListeners.findIndex(t => e === t);
                    return t > -1 && this.internalListeners.splice(t, 1), t > -1;
                  }
                  update(e, t = !1) {
                    (this.internalState = t
                      ? Object.assign({}, e)
                      : Object.assign({}, this.internalState, e)),
                      this.notify();
                  }
                }
                (r.BaseControllerV1 = n), (r.default = n);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/base-controller',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/base-controller/dist/BaseControllerV1.cjs',
      },
    ],
    [
      2263,
      { immer: 4715 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getPersistentState =
                    r.getAnonymizedState =
                    r.BaseController =
                    r.isBaseController =
                      void 0);
                const o = e('immer');
                (0, o.enablePatches)(),
                  (r.isBaseController = function (e) {
                    return (
                      'name' in e &&
                      'string' == typeof e.name &&
                      'state' in e &&
                      'object' == typeof e.state &&
                      'metadata' in e &&
                      'object' == typeof e.metadata
                    );
                  });
                function a(e, t, r) {
                  return Object.keys(e).reduce((n, s) => {
                    try {
                      const i = t[s];
                      if (!i) throw new Error(`No metadata found for '${String(s)}'`);
                      const o = i[r],
                        a = e[s];
                      return 'function' == typeof o ? (n[s] = o(a)) : o && (n[s] = a), n;
                    } catch (e) {
                      return (
                        setTimeout(() => {
                          throw e;
                        }),
                        n
                      );
                    }
                  }, {});
                }
                (r.BaseController = class {
                  constructor({ messenger: e, metadata: t, name: r, state: i }) {
                    n.set(this, void 0),
                      (this.messagingSystem = e),
                      (this.name = r),
                      s(this, n, (0, o.freeze)(i, !0), 'f'),
                      (this.metadata = t),
                      this.messagingSystem.registerActionHandler(`${r}:getState`, () => this.state),
                      this.messagingSystem.registerInitialEventPayload({
                        eventType: `${r}:stateChange`,
                        getPayload: () => [this.state, []],
                      });
                  }
                  get state() {
                    return i(this, n, 'f');
                  }
                  set state(e) {
                    throw new Error(
                      "Controller state cannot be directly mutated; use 'update' method instead."
                    );
                  }
                  update(e) {
                    const [t, r, a] = o.produceWithPatches(i(this, n, 'f'), e);
                    return (
                      s(this, n, t, 'f'),
                      this.messagingSystem.publish(`${this.name}:stateChange`, t, r),
                      { nextState: t, patches: r, inversePatches: a }
                    );
                  }
                  applyPatches(e) {
                    const t = (0, o.applyPatches)(i(this, n, 'f'), e);
                    s(this, n, t, 'f'),
                      this.messagingSystem.publish(`${this.name}:stateChange`, t, e);
                  }
                  destroy() {
                    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);
                  }
                }),
                  (n = new WeakMap()),
                  (r.getAnonymizedState = function (e, t) {
                    return a(e, t, 'anonymous');
                  }),
                  (r.getPersistentState = function (e, t) {
                    return a(e, t, 'persist');
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/base-controller',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/base-controller/dist/BaseControllerV2.cjs',
      },
    ],
    [
      2264,
      { './RestrictedMessenger.cjs': 2265 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.ControllerMessenger = r.Messenger = void 0);
                const c = e('./RestrictedMessenger.cjs');
                class u {
                  constructor() {
                    n.set(this, new Map()),
                      s.set(this, new Map()),
                      i.set(this, new Map()),
                      o.set(this, new Map());
                  }
                  registerActionHandler(e, t) {
                    if (a(this, n, 'f').has(e))
                      throw new Error(`A handler for ${e} has already been registered`);
                    a(this, n, 'f').set(e, t);
                  }
                  unregisterActionHandler(e) {
                    a(this, n, 'f').delete(e);
                  }
                  clearActions() {
                    a(this, n, 'f').clear();
                  }
                  call(e, ...t) {
                    const r = a(this, n, 'f').get(e);
                    if (!r) throw new Error(`A handler for ${e} has not been registered`);
                    return r(...t);
                  }
                  registerInitialEventPayload({ eventType: e, getPayload: t }) {
                    a(this, i, 'f').set(e, t);
                  }
                  publish(e, ...t) {
                    const r = a(this, s, 'f').get(e);
                    if (r)
                      for (const [e, n] of r.entries())
                        try {
                          if (n) {
                            const r = a(this, o, 'f').get(e),
                              s = n(...t);
                            s !== r && (a(this, o, 'f').set(e, s), e(s, r));
                          } else e(...t);
                        } catch (e) {
                          setTimeout(() => {
                            throw e;
                          });
                        }
                  }
                  subscribe(e, t, r) {
                    let n = a(this, s, 'f').get(e);
                    if ((n || ((n = new Map()), a(this, s, 'f').set(e, n)), n.set(t, r), r)) {
                      const n = a(this, i, 'f').get(e);
                      if (n) {
                        const e = r(...n());
                        a(this, o, 'f').set(t, e);
                      }
                    }
                  }
                  unsubscribe(e, t) {
                    const r = a(this, s, 'f').get(e);
                    if (!r || !r.has(t)) throw new Error(`Subscription not found for event: ${e}`);
                    r.get(t) && a(this, o, 'f').delete(t), r.delete(t);
                  }
                  clearEventSubscriptions(e) {
                    a(this, s, 'f').delete(e);
                  }
                  clearSubscriptions() {
                    a(this, s, 'f').clear();
                  }
                  getRestricted({ name: e, allowedActions: t, allowedEvents: r }) {
                    return new c.RestrictedMessenger({
                      messenger: this,
                      name: e,
                      allowedActions: t,
                      allowedEvents: r,
                    });
                  }
                }
                (r.Messenger = u),
                  (r.ControllerMessenger = u),
                  (n = new WeakMap()),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/base-controller',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/base-controller/dist/Messenger.cjs',
      },
    ],
    [
      2265,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  m =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.RestrictedControllerMessenger = r.RestrictedMessenger = void 0);
                class f {
                  constructor({
                    controllerMessenger: e,
                    messenger: t,
                    name: r,
                    allowedActions: c,
                    allowedEvents: u,
                  }) {
                    if (
                      (n.add(this),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o.set(this, void 0),
                      a.set(this, void 0),
                      t && e)
                    )
                      throw new Error(
                        "Both messenger properties provided. Provide message using only 'messenger' option, 'controllerMessenger' is deprecated"
                      );
                    if (!t && !e) throw new Error('Messenger not provided');
                    d(this, s, t ?? e, 'f'),
                      d(this, i, r, 'f'),
                      d(this, o, c, 'f'),
                      d(this, a, u, 'f');
                  }
                  registerActionHandler(e, t) {
                    if (!m(this, n, 'm', l).call(this, e))
                      throw new Error(
                        `Only allowed registering action handlers prefixed by '${m(this, i, 'f')}:'`
                      );
                    m(this, s, 'f').registerActionHandler(e, t);
                  }
                  unregisterActionHandler(e) {
                    if (!m(this, n, 'm', l).call(this, e))
                      throw new Error(
                        `Only allowed unregistering action handlers prefixed by '${m(this, i, 'f')}:'`
                      );
                    m(this, s, 'f').unregisterActionHandler(e);
                  }
                  call(e, ...t) {
                    if (!m(this, n, 'm', u).call(this, e))
                      throw new Error(`Action missing from allow list: ${e}`);
                    return m(this, s, 'f').call(e, ...t);
                  }
                  registerInitialEventPayload({ eventType: e, getPayload: t }) {
                    if (!m(this, n, 'm', l).call(this, e))
                      throw new Error(
                        `Only allowed publishing events prefixed by '${m(this, i, 'f')}:'`
                      );
                    m(this, s, 'f').registerInitialEventPayload({ eventType: e, getPayload: t });
                  }
                  publish(e, ...t) {
                    if (!m(this, n, 'm', l).call(this, e))
                      throw new Error(
                        `Only allowed publishing events prefixed by '${m(this, i, 'f')}:'`
                      );
                    m(this, s, 'f').publish(e, ...t);
                  }
                  subscribe(e, t, r) {
                    if (!m(this, n, 'm', c).call(this, e))
                      throw new Error(`Event missing from allow list: ${e}`);
                    return r ? m(this, s, 'f').subscribe(e, t, r) : m(this, s, 'f').subscribe(e, t);
                  }
                  unsubscribe(e, t) {
                    if (!m(this, n, 'm', c).call(this, e))
                      throw new Error(`Event missing from allow list: ${e}`);
                    m(this, s, 'f').unsubscribe(e, t);
                  }
                  clearEventSubscriptions(e) {
                    if (!m(this, n, 'm', l).call(this, e))
                      throw new Error(
                        `Only allowed clearing events prefixed by '${m(this, i, 'f')}:'`
                      );
                    m(this, s, 'f').clearEventSubscriptions(e);
                  }
                }
                (r.RestrictedMessenger = f),
                  (r.RestrictedControllerMessenger = f),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (a = new WeakMap()),
                  (n = new WeakSet()),
                  (c = function (e) {
                    const t = m(this, a, 'f');
                    return m(this, n, 'm', l).call(this, e) || (null !== t && t.includes(e));
                  }),
                  (u = function (e) {
                    const t = m(this, o, 'f');
                    return m(this, n, 'm', l).call(this, e) || (null !== t && t.includes(e));
                  }),
                  (l = function (e) {
                    return e.startsWith(`${m(this, i, 'f')}:`);
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/base-controller',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/base-controller/dist/RestrictedMessenger.cjs',
      },
    ],
    [
      2266,
      {
        './BaseControllerV1.cjs': 2262,
        './BaseControllerV2.cjs': 2263,
        './Messenger.cjs': 2264,
        './RestrictedMessenger.cjs': 2265,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.RestrictedMessenger =
                    r.RestrictedControllerMessenger =
                    r.Messenger =
                    r.ControllerMessenger =
                    r.isBaseController =
                    r.getPersistentState =
                    r.getAnonymizedState =
                    r.BaseController =
                    r.isBaseControllerV1 =
                    r.BaseControllerV1 =
                      void 0);
                var n = e('./BaseControllerV1.cjs');
                Object.defineProperty(r, 'BaseControllerV1', {
                  enumerable: !0,
                  get: function () {
                    return n.BaseControllerV1;
                  },
                }),
                  Object.defineProperty(r, 'isBaseControllerV1', {
                    enumerable: !0,
                    get: function () {
                      return n.isBaseControllerV1;
                    },
                  });
                var s = e('./BaseControllerV2.cjs');
                Object.defineProperty(r, 'BaseController', {
                  enumerable: !0,
                  get: function () {
                    return s.BaseController;
                  },
                }),
                  Object.defineProperty(r, 'getAnonymizedState', {
                    enumerable: !0,
                    get: function () {
                      return s.getAnonymizedState;
                    },
                  }),
                  Object.defineProperty(r, 'getPersistentState', {
                    enumerable: !0,
                    get: function () {
                      return s.getPersistentState;
                    },
                  }),
                  Object.defineProperty(r, 'isBaseController', {
                    enumerable: !0,
                    get: function () {
                      return s.isBaseController;
                    },
                  });
                var i = e('./Messenger.cjs');
                Object.defineProperty(r, 'ControllerMessenger', {
                  enumerable: !0,
                  get: function () {
                    return i.ControllerMessenger;
                  },
                }),
                  Object.defineProperty(r, 'Messenger', {
                    enumerable: !0,
                    get: function () {
                      return i.Messenger;
                    },
                  });
                var o = e('./RestrictedMessenger.cjs');
                Object.defineProperty(r, 'RestrictedControllerMessenger', {
                  enumerable: !0,
                  get: function () {
                    return o.RestrictedControllerMessenger;
                  },
                }),
                  Object.defineProperty(r, 'RestrictedMessenger', {
                    enumerable: !0,
                    get: function () {
                      return o.RestrictedMessenger;
                    },
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/base-controller',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/base-controller/dist/index.cjs',
      },
    ],
    [
      2267,
      { './logging-utils': 2274, './utils/cache': 2280, '@metamask/json-rpc-engine': 1964 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createBlockCacheMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('./logging-utils'),
                  i = e('./utils/cache'),
                  o = (0, s.createModuleLogger)(s.projectLogger, 'block-cache'),
                  a = [undefined, null, '<nil>'];
                class c {
                  constructor() {
                    this.cache = {};
                  }
                  getBlockCache(e) {
                    const t = Number.parseInt(e, 16);
                    let r = this.cache[t];
                    if (!r) {
                      const e = {};
                      (this.cache[t] = e), (r = e);
                    }
                    return r;
                  }
                  async get(e, t) {
                    const r = this.getBlockCache(t),
                      n = (0, i.cacheIdentifierForRequest)(e, !0);
                    return n ? r[n] : undefined;
                  }
                  async set(e, t, r) {
                    if (!this.canCacheResult(e, r)) return;
                    const n = (0, i.cacheIdentifierForRequest)(e, !0);
                    if (!n) return;
                    this.getBlockCache(t)[n] = r;
                  }
                  canCacheRequest(e) {
                    if (!(0, i.canCache)(e.method)) return !1;
                    return 'pending' !== (0, i.blockTagForRequest)(e);
                  }
                  canCacheResult(e, t) {
                    return (
                      !a.includes(t) &&
                      !(
                        e.method &&
                        ['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(
                          e.method
                        ) &&
                        (!t ||
                          !t.blockHash ||
                          '0x0000000000000000000000000000000000000000000000000000000000000000' ===
                            t.blockHash)
                      )
                    );
                  }
                  clearBefore(e) {
                    const t = Number.parseInt(e, 16);
                    Object.keys(this.cache)
                      .map(Number)
                      .filter(e => e < t)
                      .forEach(e => delete this.cache[e]);
                  }
                }
                r.createBlockCacheMiddleware = function ({ blockTracker: e } = {}) {
                  if (!e)
                    throw new Error(
                      'createBlockCacheMiddleware - No PollingBlockTracker specified'
                    );
                  const t = new c(),
                    r = {
                      [i.CacheStrategy.Permanent]: t,
                      [i.CacheStrategy.Block]: t,
                      [i.CacheStrategy.Fork]: t,
                      [i.CacheStrategy.Never]: undefined,
                    };
                  return (0, n.createAsyncMiddleware)(async (n, s, a) => {
                    if (n.skipCache) return a();
                    const c = (0, i.cacheTypeForMethod)(n.method),
                      u = r[c];
                    if (!u) return a();
                    if (!u.canCacheRequest(n)) return a();
                    const l = (0, i.blockTagForRequest)(n),
                      d = l && 'string' == typeof l ? l : 'latest';
                    let m;
                    if ((o('blockTag = %o, req = %o', d, n), 'earliest' === d)) m = '0x00';
                    else if ('latest' === d) {
                      o('Fetching latest block number to determine cache key');
                      const r = await e.getLatestBlock();
                      o('Clearing values stored under block numbers before %o', r),
                        t.clearBefore(r),
                        (m = r);
                    } else m = d;
                    const f = await u.get(n, m);
                    return (
                      f === undefined
                        ? (o('No cache stored under block number %o, carrying request forward', m),
                          await a(),
                          o('Populating cache with', s),
                          await u.set(n, m, s.result))
                        : (o('Cache hit, reusing cache result stored under block number %o', m),
                          (s.result = f)),
                      undefined
                    );
                  });
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/block-cache.js',
      },
    ],
    [
      2268,
      { './utils/cache': 2280, '@metamask/json-rpc-engine': 1964 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createBlockRefRewriteMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('./utils/cache');
                r.createBlockRefRewriteMiddleware = function ({ blockTracker: e } = {}) {
                  if (!e)
                    throw Error(
                      'BlockRefRewriteMiddleware - mandatory "blockTracker" option is missing.'
                    );
                  return (0, n.createAsyncMiddleware)(async (t, r, n) => {
                    const i = (0, s.blockTagParamIndex)(t.method);
                    if (i === undefined) return n();
                    if (
                      'latest' !== (Array.isArray(t.params) && t.params[i] ? t.params[i] : 'latest')
                    )
                      return n();
                    const o = await e.getLatestBlock();
                    return Array.isArray(t.params) && (t.params[i] = o), n();
                  });
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/block-ref-rewrite.js',
      },
    ],
    [
      2269,
      {
        './logging-utils': 2274,
        './utils/cache': 2280,
        '@metamask/json-rpc-engine': 1964,
        'klona/full': 4773,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createBlockRefMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('klona/full'),
                  i = e('./logging-utils'),
                  o = e('./utils/cache'),
                  a = (0, i.createModuleLogger)(i.projectLogger, 'block-ref');
                r.createBlockRefMiddleware = function ({ provider: e, blockTracker: t } = {}) {
                  if (!e)
                    throw Error('BlockRefMiddleware - mandatory "provider" option is missing.');
                  if (!t)
                    throw Error('BlockRefMiddleware - mandatory "blockTracker" option is missing.');
                  return (0, n.createAsyncMiddleware)(async (r, n, i) => {
                    var c;
                    const u = (0, o.blockTagParamIndex)(r.method);
                    if (u === undefined) return i();
                    if (
                      'latest' !==
                      (Array.isArray(r.params) && null !== (c = r.params[u]) && void 0 !== c
                        ? c
                        : 'latest')
                    )
                      return a('blockRef is not "latest", carrying request forward'), i();
                    const l = await t.getLatestBlock();
                    a(`blockRef is "latest", setting param ${u} to latest block ${l}`);
                    const d = (0, s.klona)(r);
                    return (
                      Array.isArray(d.params) && (d.params[u] = l),
                      a('Performing another request %o', d),
                      (n.result = await e.request(d)),
                      undefined
                    );
                  });
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/block-ref.js',
      },
    ],
    [
      2270,
      { './logging-utils': 2274, '@metamask/json-rpc-engine': 1964 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createBlockTrackerInspectorMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('./logging-utils'),
                  i = (0, s.createModuleLogger)(s.projectLogger, 'block-tracker-inspector'),
                  o = ['eth_getTransactionByHash', 'eth_getTransactionReceipt'];
                function a(e) {
                  const { result: t } = e;
                  return t &&
                    'object' == typeof t &&
                    ((r = t), (n = 'blockNumber'), Object.hasOwnProperty.call(r, n)) &&
                    'string' == typeof t.blockNumber
                    ? t.blockNumber
                    : undefined;
                  var r, n;
                }
                r.createBlockTrackerInspectorMiddleware = function ({ blockTracker: e }) {
                  return (0, n.createAsyncMiddleware)(async (t, r, n) => {
                    if (!o.includes(t.method)) return n();
                    await n();
                    const s = a(r);
                    if (!s) return undefined;
                    i('res.result.blockNumber exists, proceeding. res = %o', r);
                    return (
                      Number.parseInt(s, 16) > Number.parseInt(e.getCurrentBlock(), 16) &&
                        (i(
                          'blockNumber from response is greater than current block number, refreshing current block number'
                        ),
                        await e.checkForLatestBlock()),
                      undefined
                    );
                  });
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/block-tracker-inspector.js',
      },
    ],
    [
      2271,
      {
        './utils/timeout': 2284,
        '@metamask/json-rpc-engine': 1964,
        '@metamask/rpc-errors': 2585,
        '@metamask/utils': 2297,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createFetchConfigFromReq = r.createFetchMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('@metamask/rpc-errors'),
                  i = e('@metamask/utils'),
                  o = e('./utils/timeout'),
                  a = [
                    'Gateway timeout',
                    'ETIMEDOUT',
                    'failed to parse response body',
                    'Failed to fetch',
                  ];
                function c(e) {
                  switch (e.status) {
                    case 405:
                      throw s.rpcErrors.methodNotFound();
                    case 418:
                      throw s.rpcErrors.internal({ message: 'Request is being rate limited.' });
                    case 503:
                    case 504:
                      throw (function () {
                        let e = 'Gateway timeout. The request took too long to process. ';
                        return (
                          (e += 'This can happen when querying logs over too wide a block range.'),
                          s.rpcErrors.internal({ message: e })
                        );
                      })();
                  }
                }
                function u(e, t) {
                  if (200 !== e.status)
                    throw s.rpcErrors.internal({
                      message: `Non-200 status code: '${e.status}'`,
                      data: t,
                    });
                  if (t.error) throw s.rpcErrors.internal({ data: t.error });
                  return t.result;
                }
                function l({ btoa: e, req: t, rpcUrl: r, originHttpHeaderKey: n }) {
                  const s = new URL(r),
                    i = (function (e) {
                      let t = '';
                      (t += e.protocol), (t += `//${e.hostname}`), e.port && (t += `:${e.port}`);
                      return (t += `${e.pathname}`), (t += `${e.search}`), t;
                    })(s),
                    o = { id: t.id, jsonrpc: t.jsonrpc, method: t.method, params: t.params },
                    a = t.origin,
                    c = {
                      method: 'POST',
                      headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
                      body: JSON.stringify(o),
                    };
                  if (s.username && s.password) {
                    const t = e(`${s.username}:${s.password}`);
                    c.headers.Authorization = `Basic ${t}`;
                  }
                  return n && a && (c.headers[n] = a), { fetchUrl: i, fetchParams: c };
                }
                (r.createFetchMiddleware = function (e) {
                  return 'rpcService' in e
                    ? (function ({ rpcService: e, options: t = {} }) {
                        return (0, n.createAsyncMiddleware)(async (r, n) => {
                          const o =
                              'originHttpHeaderKey' in t &&
                              t.originHttpHeaderKey !== undefined &&
                              r.origin !== undefined
                                ? { [t.originHttpHeaderKey]: r.origin }
                                : {},
                            a = await e.request(
                              { id: r.id, jsonrpc: r.jsonrpc, method: r.method, params: r.params },
                              { headers: o }
                            );
                          if ((0, i.isJsonRpcFailure)(a))
                            throw s.rpcErrors.internal({ data: a.error });
                          n.result = a.result;
                        });
                      })(e)
                    : (function ({ btoa: e, fetch: t, rpcUrl: r, originHttpHeaderKey: s }) {
                        return (0, n.createAsyncMiddleware)(async (n, i, d) => {
                          const { fetchUrl: m, fetchParams: f } = l({
                              btoa: e,
                              req: n,
                              rpcUrl: r,
                              originHttpHeaderKey: s,
                            }),
                            p = 5,
                            h = 1e3;
                          for (let e = 0; e < p; e++) {
                            try {
                              const e = await t(m, f);
                              c(e);
                              const r = await e.text();
                              let n;
                              try {
                                n = JSON.parse(r);
                              } catch (e) {
                                throw new Error(
                                  `FetchMiddleware - failed to parse response body: "${r}"`
                                );
                              }
                              const s = u(e, n);
                              return void (i.result = s);
                            } catch (e) {
                              const t = e.toString();
                              if (!a.some(e => t.includes(e))) throw e;
                            }
                            await (0, o.timeout)(h);
                          }
                        });
                      })(e);
                }),
                  (r.createFetchConfigFromReq = l);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/fetch.js',
      },
    ],
    [
      2272,
      {
        './block-cache': 2267,
        './block-ref': 2269,
        './block-ref-rewrite': 2268,
        './block-tracker-inspector': 2270,
        './fetch': 2271,
        './inflight-cache': 2273,
        './providerAsMiddleware': 2278,
        './retryOnEmpty': 2279,
        './wallet': 2286,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./block-cache'), r),
                  s(e('./block-ref-rewrite'), r),
                  s(e('./block-ref'), r),
                  s(e('./block-tracker-inspector'), r),
                  s(e('./fetch'), r),
                  s(e('./inflight-cache'), r),
                  s(e('./providerAsMiddleware'), r),
                  s(e('./retryOnEmpty'), r),
                  s(e('./wallet'), r);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/index.js',
      },
    ],
    [
      2273,
      {
        './logging-utils': 2274,
        './utils/cache': 2280,
        '@metamask/json-rpc-engine': 1964,
        'klona/full': 4773,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createInflightCacheMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('klona/full'),
                  i = e('./logging-utils'),
                  o = e('./utils/cache'),
                  a = (0, i.createModuleLogger)(i.projectLogger, 'inflight-cache');
                r.createInflightCacheMiddleware = function () {
                  const e = {};
                  return (0, n.createAsyncMiddleware)(async (t, r, n) => {
                    if (t.skipCache) return n();
                    const i = (0, o.cacheIdentifierForRequest)(t);
                    if (!i) return a('Request is not cacheable, proceeding. req = %o', t), n();
                    let c = e[i];
                    return c
                      ? (a('Running %i handler(s) for request %o', c.length, t),
                        await (async function (e, t) {
                          const { resolve: r, promise: n } = (function () {
                            let e;
                            const t = new Promise(t => {
                              e = t;
                            });
                            return { resolve: e, promise: t };
                          })();
                          return (
                            t.push(t => {
                              (e.result = (0, s.klona)(t.result)),
                                (e.error = (0, s.klona)(t.error)),
                                r();
                            }),
                            n
                          );
                        })(r, c),
                        undefined)
                      : ((c = []),
                        (e[i] = c),
                        a('Carrying original request forward %o', t),
                        await n(),
                        delete e[i],
                        a('Running %i collected handler(s) for request %o', c.length, t),
                        (function (e, t) {
                          setTimeout(() => {
                            t.forEach(t => {
                              try {
                                t(e);
                              } catch (e) {
                                console.error(e);
                              }
                            });
                          });
                        })(r, c),
                        undefined);
                  });
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/inflight-cache.js',
      },
    ],
    [
      2274,
      { '@metamask/utils': 2297 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.projectLogger = void 0);
                const n = e('@metamask/utils');
                Object.defineProperty(r, 'createModuleLogger', {
                  enumerable: !0,
                  get: function () {
                    return n.createModuleLogger;
                  },
                }),
                  (r.projectLogger = (0, n.createProjectLogger)('eth-json-rpc-middleware'));
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/logging-utils.js',
      },
    ],
    [
      2275,
      {
        '../utils/validation': 2285,
        '@metamask/rpc-errors': 2585,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2297,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.walletGetCallsStatus = void 0);
                const n = e('@metamask/rpc-errors'),
                  s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = e('../utils/validation'),
                  a = (0, s.tuple)([(0, s.nonempty)((0, s.string)())]),
                  c = (0, s.object)({
                    logs: (0, s.optional)(
                      (0, s.array)(
                        (0, s.object)({
                          address: (0, s.optional)(i.HexChecksumAddressStruct),
                          data: (0, s.optional)(i.StrictHexStruct),
                          topics: (0, s.optional)((0, s.array)(i.StrictHexStruct)),
                        })
                      )
                    ),
                    status: (0, s.optional)(i.StrictHexStruct),
                    chainId: (0, s.optional)(i.StrictHexStruct),
                    blockHash: (0, s.optional)(i.StrictHexStruct),
                    blockNumber: (0, s.optional)(i.StrictHexStruct),
                    gasUsed: (0, s.optional)(i.StrictHexStruct),
                    transactionHash: (0, s.optional)(i.StrictHexStruct),
                  });
                r.walletGetCallsStatus = async function (
                  e,
                  t,
                  { getTransactionReceiptsByBatchId: r }
                ) {
                  if (!r) throw n.rpcErrors.methodNotSupported();
                  (0, o.validateParams)(e.params, a);
                  const i = e.params[0],
                    u = await r(i, e);
                  if (!u.length) return void (t.result = null);
                  const l = u.every(e => Boolean(e)),
                    d = l ? 'CONFIRMED' : 'PENDING',
                    m = l ? u.map(e => (0, s.mask)(e, c)) : null;
                  t.result = { status: d, receipts: m };
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/methods/wallet-get-calls-status.js',
      },
    ],
    [
      2276,
      {
        '../utils/validation': 2285,
        '@metamask/rpc-errors': 2585,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2297,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.walletGetCapabilities = void 0);
                const n = e('@metamask/rpc-errors'),
                  s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = e('../utils/validation'),
                  a = (0, s.tuple)([i.HexChecksumAddressStruct]);
                r.walletGetCapabilities = async function (e, t, { getCapabilities: r }) {
                  if (!r) throw n.rpcErrors.methodNotSupported();
                  (0, o.validateParams)(e.params, a);
                  const s = e.params[0],
                    i = await r(s, e);
                  t.result = i;
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/methods/wallet-get-capabilities.js',
      },
    ],
    [
      2277,
      {
        '../utils/validation': 2285,
        '@metamask/rpc-errors': 2585,
        '@metamask/superstruct': 2913,
        '@metamask/utils': 2297,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.walletSendCalls = void 0);
                const n = e('@metamask/rpc-errors'),
                  s = e('@metamask/superstruct'),
                  i = e('@metamask/utils'),
                  o = e('../utils/validation'),
                  a = (0, s.tuple)([
                    (0, s.object)({
                      version: (0, s.nonempty)((0, s.string)()),
                      from: i.HexChecksumAddressStruct,
                      chainId: (0, s.optional)(i.StrictHexStruct),
                      calls: (0, s.array)(
                        (0, s.object)({
                          to: (0, s.optional)(i.HexChecksumAddressStruct),
                          data: (0, s.optional)(i.StrictHexStruct),
                          value: (0, s.optional)(i.StrictHexStruct),
                        })
                      ),
                      capabilities: (0, s.optional)((0, s.type)({})),
                    }),
                  ]);
                r.walletSendCalls = async function (e, t, { getAccounts: r, processSendCalls: s }) {
                  if (!s) throw n.rpcErrors.methodNotSupported();
                  (0, o.validateParams)(e.params, a);
                  const i = e.params[0],
                    c = await (0, o.validateAndNormalizeKeyholder)(i.from, e, { getAccounts: r }),
                    u = Object.assign(Object.assign({}, i), { from: c });
                  t.result = await s(u, e);
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/methods/wallet-send-calls.js',
      },
    ],
    [
      2278,
      { '@metamask/json-rpc-engine': 1964 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.ethersProviderAsMiddleware = r.providerAsMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine');
                (r.providerAsMiddleware = function (e) {
                  return (0, n.createAsyncMiddleware)(async (t, r) => {
                    r.result = await e.request(t);
                  });
                }),
                  (r.ethersProviderAsMiddleware = function (e) {
                    return (t, r, n, s) => {
                      e.send(t, (e, t) => (e ? s(e) : (Object.assign(r, t), s())));
                    };
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/providerAsMiddleware.js',
      },
    ],
    [
      2279,
      {
        './logging-utils': 2274,
        './utils/cache': 2280,
        './utils/error': 2282,
        './utils/timeout': 2284,
        '@metamask/json-rpc-engine': 1964,
        'klona/full': 4773,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createRetryOnEmptyMiddleware = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('klona/full'),
                  i = e('./logging-utils'),
                  o = e('./utils/cache'),
                  a = e('./utils/error'),
                  c = e('./utils/timeout'),
                  u = (0, i.createModuleLogger)(i.projectLogger, 'retry-on-empty'),
                  l = [undefined, null, '<nil>'];
                r.createRetryOnEmptyMiddleware = function ({ provider: e, blockTracker: t } = {}) {
                  if (!e)
                    throw Error('RetryOnEmptyMiddleware - mandatory "provider" option is missing.');
                  if (!t)
                    throw Error(
                      'RetryOnEmptyMiddleware - mandatory "blockTracker" option is missing.'
                    );
                  return (0, n.createAsyncMiddleware)(async (r, n, i) => {
                    const d = (0, o.blockTagParamIndex)(r.method);
                    if (d === undefined) return i();
                    let m = Array.isArray(r.params) && r.params[d] ? r.params[d] : undefined;
                    if ((m === undefined && (m = 'latest'), ['latest', 'pending'].includes(m)))
                      return i();
                    const f = Number.parseInt(m.slice(2), 16);
                    if (Number.isNaN(f)) return i();
                    const p = await t.getLatestBlock(),
                      h = Number.parseInt(p.slice(2), 16);
                    if (f > h)
                      return (
                        u(
                          'Requested block number %o is higher than latest block number %o, falling through to original request',
                          f,
                          h
                        ),
                        i()
                      );
                    u(
                      'Requested block number %o is not higher than latest block number %o, trying request until non-empty response is received',
                      f,
                      h
                    );
                    const g = (0, s.klona)(r),
                      y = await (async function (e, t) {
                        for (let r = 0; r < e; r++)
                          try {
                            return await t();
                          } catch (e) {
                            if ((0, a.isExecutionRevertedError)(e)) throw e;
                            u('(call %i) Request failed, waiting 1s to retry again...', r + 1),
                              await (0, c.timeout)(1e3);
                          }
                        throw (
                          (u('Retries exhausted'),
                          new Error('RetryOnEmptyMiddleware - retries exhausted'))
                        );
                      })(10, async () => {
                        u('Performing request %o', g);
                        const t = await e.request(g);
                        u('Result is %o', t);
                        if (l.includes(t))
                          throw new Error(
                            `RetryOnEmptyMiddleware - empty result "${JSON.stringify(t)}" for request "${JSON.stringify(g)}"`
                          );
                        return t;
                      });
                    return u('Copying result %o', y), (n.result = y), undefined;
                  });
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/retryOnEmpty.js',
      },
    ],
    [
      2280,
      { 'safe-stable-stringify': 5585 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.cacheTypeForMethod =
                    r.blockTagParamIndex =
                    r.blockTagForRequest =
                    r.canCache =
                    r.cacheIdentifierForRequest =
                    r.CacheStrategy =
                      void 0);
                const n = (0, e('safe-stable-stringify').configure)({
                  bigint: !1,
                  circularValue: Error,
                });
                var s;
                function i(e) {
                  return a(e) !== s.Never;
                }
                function o(e) {
                  switch (e) {
                    case 'eth_getStorageAt':
                      return 2;
                    case 'eth_getBalance':
                    case 'eth_getCode':
                    case 'eth_getTransactionCount':
                    case 'eth_call':
                      return 1;
                    case 'eth_getBlockByNumber':
                      return 0;
                    default:
                      return undefined;
                  }
                }
                function a(e) {
                  switch (e) {
                    case 'web3_clientVersion':
                    case 'web3_sha3':
                    case 'eth_protocolVersion':
                    case 'eth_getBlockTransactionCountByHash':
                    case 'eth_getUncleCountByBlockHash':
                    case 'eth_getCode':
                    case 'eth_getBlockByHash':
                    case 'eth_getTransactionByHash':
                    case 'eth_getTransactionByBlockHashAndIndex':
                    case 'eth_getTransactionReceipt':
                    case 'eth_getUncleByBlockHashAndIndex':
                    case 'eth_getCompilers':
                    case 'eth_compileLLL':
                    case 'eth_compileSolidity':
                    case 'eth_compileSerpent':
                    case 'shh_version':
                    case 'test_permaCache':
                      return s.Permanent;
                    case 'eth_getBlockByNumber':
                    case 'eth_getBlockTransactionCountByNumber':
                    case 'eth_getUncleCountByBlockNumber':
                    case 'eth_getTransactionByBlockNumberAndIndex':
                    case 'eth_getUncleByBlockNumberAndIndex':
                    case 'test_forkCache':
                      return s.Fork;
                    case 'eth_gasPrice':
                    case 'eth_blockNumber':
                    case 'eth_getBalance':
                    case 'eth_getStorageAt':
                    case 'eth_getTransactionCount':
                    case 'eth_call':
                    case 'eth_estimateGas':
                    case 'eth_getFilterLogs':
                    case 'eth_getLogs':
                    case 'test_blockCache':
                      return s.Block;
                    default:
                      return s.Never;
                  }
                }
                !(function (e) {
                  (e.Block = 'block'),
                    (e.Fork = 'fork'),
                    (e.Never = 'never'),
                    (e.Permanent = 'perma');
                })((s = r.CacheStrategy || (r.CacheStrategy = {}))),
                  (r.cacheIdentifierForRequest = function (e, t) {
                    var r;
                    const s = t
                      ? (function (e) {
                          if (!e.params) return [];
                          const t = o(e.method);
                          if (t === undefined || !Array.isArray(e.params) || t >= e.params.length)
                            return e.params;
                          if ('eth_getBlockByNumber' === e.method) return e.params.slice(1);
                          return e.params.slice(0, t);
                        })(e)
                      : null !== (r = e.params) && void 0 !== r
                        ? r
                        : [];
                    return i(e.method) ? `${e.method}:${n(s)}` : null;
                  }),
                  (r.canCache = i),
                  (r.blockTagForRequest = function (e) {
                    if (!e.params) return undefined;
                    const t = o(e.method);
                    return t === undefined || !Array.isArray(e.params) || t >= e.params.length
                      ? undefined
                      : e.params[t];
                  }),
                  (r.blockTagParamIndex = o),
                  (r.cacheTypeForMethod = a);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/utils/cache.js',
      },
    ],
    [
      2281,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.stripArrayTypeIfPresent = void 0);
                r.stripArrayTypeIfPresent = e =>
                  (null == e ? void 0 : e.match(/\S\[\d*\]$/u))
                    ? e.replace(/\[\d*\]$/gu, '').trim()
                    : e;
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/utils/common.js',
      },
    ],
    [
      2282,
      { '@metamask/rpc-errors': 2585, '@metamask/utils': 2297 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isExecutionRevertedError = void 0);
                const n = e('@metamask/rpc-errors'),
                  s = e('@metamask/utils');
                r.isExecutionRevertedError = function (e) {
                  return (
                    (0, s.isJsonRpcError)(e) &&
                    e.code === n.errorCodes.rpc.invalidInput &&
                    'execution reverted' === e.message
                  );
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/utils/error.js',
      },
    ],
    [
      2283,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                function n(e) {
                  return 'string' != typeof e ? e : JSON.parse(e);
                }
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.parseTypedMessage = r.normalizeTypedMessage = void 0),
                  (r.normalizeTypedMessage = function (e) {
                    var t;
                    let r;
                    try {
                      r = n(e);
                    } catch (t) {
                      return e;
                    }
                    const { verifyingContract: s } =
                      null !== (t = r.domain) && void 0 !== t ? t : {};
                    return s
                      ? ((r.domain.verifyingContract = (function (e) {
                          if (e.startsWith('0X')) return `0x${e.slice(2)}`;
                          return e;
                        })(s)),
                        JSON.stringify(r))
                      : e;
                  }),
                  (r.parseTypedMessage = n);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/utils/normalize.js',
      },
    ],
    [
      2284,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.timeout = void 0),
                  (r.timeout = async function (e) {
                    return new Promise(t => setTimeout(t, e));
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/utils/timeout.js',
      },
    ],
    [
      2285,
      { '@metamask/rpc-errors': 2585, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.resemblesAddress =
                    r.validateParams =
                    r.validateAndNormalizeKeyholder =
                      void 0);
                const n = e('@metamask/rpc-errors'),
                  s = e('@metamask/superstruct');
                function i(e) {
                  return 42 === e.length;
                }
                (r.validateAndNormalizeKeyholder = async function (e, t, { getAccounts: r }) {
                  if ('string' == typeof e && e.length > 0 && i(e)) {
                    const s = (await r(t)).map(e => e.toLowerCase()),
                      i = e.toLowerCase();
                    if (s.includes(i)) return i;
                    throw n.providerErrors.unauthorized();
                  }
                  throw n.rpcErrors.invalidParams({
                    message: 'Invalid parameters: must provide an Ethereum address.',
                  });
                }),
                  (r.validateParams = function (e, t) {
                    const [r] = (0, s.validate)(e, t);
                    if (r)
                      throw n.rpcErrors.invalidInput(
                        (function (e, t) {
                          return `${t}\n\n${e
                            .failures()
                            .map(
                              e => `${e.path.join(' > ')}${e.path.length ? ' - ' : ''}${e.message}`
                            )
                            .join('\n')}`;
                        })(r, 'Invalid params')
                      );
                  }),
                  (r.resemblesAddress = i);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/utils/validation.js',
      },
    ],
    [
      2286,
      {
        './methods/wallet-get-calls-status': 2275,
        './methods/wallet-get-capabilities': 2276,
        './methods/wallet-send-calls': 2277,
        './utils/common': 2281,
        './utils/normalize': 2283,
        './utils/validation': 2285,
        '@metamask/eth-sig-util': 2310,
        '@metamask/json-rpc-engine': 1964,
        '@metamask/rpc-errors': 2585,
        '@metamask/utils': 2297,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createWalletMiddleware = void 0);
                const o = i(e('@metamask/eth-sig-util')),
                  a = e('@metamask/json-rpc-engine'),
                  c = e('@metamask/rpc-errors'),
                  u = e('@metamask/utils'),
                  l = e('./methods/wallet-get-calls-status'),
                  d = e('./methods/wallet-get-capabilities'),
                  m = e('./methods/wallet-send-calls'),
                  f = e('./utils/common'),
                  p = e('./utils/normalize'),
                  h = e('./utils/validation');
                function g(e) {
                  const { primaryType: t, types: r } = (0, p.parseTypedMessage)(e);
                  if (!r) throw c.rpcErrors.invalidInput();
                  if (!r[(0, f.stripArrayTypeIfPresent)(t)]) throw c.rpcErrors.invalidInput();
                }
                function y(e) {
                  const { domain: { verifyingContract: t } = {} } = (0, p.parseTypedMessage)(e);
                  if (t && 'cosmos' !== t && !(0, u.isValidHexAddress)(t))
                    throw c.rpcErrors.invalidInput();
                }
                r.createWalletMiddleware = function ({
                  getAccounts: e,
                  getCapabilities: t,
                  getTransactionReceiptsByBatchId: r,
                  processDecryptMessage: n,
                  processEncryptionPublicKey: s,
                  processPersonalMessage: i,
                  processTransaction: u,
                  processSignTransaction: f,
                  processTypedMessage: w,
                  processTypedMessageV3: k,
                  processTypedMessageV4: b,
                  processSendCalls: _,
                }) {
                  if (!e) throw new Error('opts.getAccounts is required');
                  return (0, a.createScaffoldMiddleware)({
                    eth_accounts: (0, a.createAsyncMiddleware)(async function (t, r) {
                      r.result = await e(t);
                    }),
                    eth_coinbase: (0, a.createAsyncMiddleware)(async function (t, r) {
                      const n = await e(t);
                      r.result = n[0] || null;
                    }),
                    eth_sendTransaction: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!u) throw c.rpcErrors.methodNotSupported();
                      if (!(e.params && Array.isArray(e.params) && e.params.length >= 1))
                        throw c.rpcErrors.invalidInput();
                      const r = e.params[0],
                        n = Object.assign(Object.assign({}, r), {
                          from: await S((null == r ? void 0 : r.from) || '', e),
                        });
                      t.result = await u(n, e);
                    }),
                    eth_signTransaction: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!f) throw c.rpcErrors.methodNotSupported();
                      if (!(e.params && Array.isArray(e.params) && e.params.length >= 1))
                        throw c.rpcErrors.invalidInput();
                      const r = e.params[0],
                        n = Object.assign(Object.assign({}, r), {
                          from: await S((null == r ? void 0 : r.from) || '', e),
                        });
                      t.result = await f(n, e);
                    }),
                    eth_signTypedData: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!w) throw c.rpcErrors.methodNotSupported();
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 2
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        n = r[0],
                        s = await S(r[1], e),
                        i = r[2] || {},
                        o = Object.assign(Object.assign({}, i), {
                          from: s,
                          data: n,
                          signatureMethod: 'eth_signTypedData',
                          version: 'V1',
                        });
                      t.result = await w(o, e, 'V1');
                    }),
                    eth_signTypedData_v3: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!k) throw c.rpcErrors.methodNotSupported();
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 2
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        n = await S(r[0], e),
                        s = (0, p.normalizeTypedMessage)(r[1]);
                      g(s), y(s);
                      const i = {
                        data: s,
                        from: n,
                        version: 'V3',
                        signatureMethod: 'eth_signTypedData_v3',
                      };
                      t.result = await k(i, e, 'V3');
                    }),
                    eth_signTypedData_v4: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!b) throw c.rpcErrors.methodNotSupported();
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 2
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        n = await S(r[0], e),
                        s = (0, p.normalizeTypedMessage)(r[1]);
                      g(s), y(s);
                      const i = {
                        data: s,
                        from: n,
                        version: 'V4',
                        signatureMethod: 'eth_signTypedData_v4',
                      };
                      t.result = await b(i, e, 'V4');
                    }),
                    personal_sign: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!i) throw c.rpcErrors.methodNotSupported();
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 2
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        n = r[0],
                        s = r[1],
                        o = r[2] || {};
                      let a, u;
                      if ((0, h.resemblesAddress)(n) && !(0, h.resemblesAddress)(s)) {
                        let e = 'The eth_personalSign method requires params ordered ';
                        (e += '[message, address]. This was previously handled incorrectly, '),
                          (e += 'and has been corrected automatically. '),
                          (e +=
                            'Please switch this param order for smooth behavior in the future.'),
                          (t.warning = e),
                          (a = n),
                          (u = s);
                      } else (u = n), (a = s);
                      a = await S(a, e);
                      const l = Object.assign(Object.assign({}, o), {
                        from: a,
                        data: u,
                        signatureMethod: 'personal_sign',
                      });
                      t.result = await i(l, e);
                    }),
                    eth_getEncryptionPublicKey: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!s) throw c.rpcErrors.methodNotSupported();
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 1
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        n = await S(r[0], e);
                      t.result = await s(n, e);
                    }),
                    eth_decrypt: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (!n) throw c.rpcErrors.methodNotSupported();
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 1
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        s = r[0],
                        i = await S(r[1], e),
                        o = r[2] || {},
                        a = Object.assign(Object.assign({}, o), { from: i, data: s });
                      t.result = await n(a, e);
                    }),
                    personal_ecRecover: (0, a.createAsyncMiddleware)(async function (e, t) {
                      if (
                        !(
                          (null == e ? void 0 : e.params) &&
                          Array.isArray(e.params) &&
                          e.params.length >= 2
                        )
                      )
                        throw c.rpcErrors.invalidInput();
                      const r = e.params,
                        n = r[0],
                        s = r[1],
                        i = o.recoverPersonalSignature({ data: n, signature: s });
                      t.result = i;
                    }),
                    wallet_getCapabilities: (0, a.createAsyncMiddleware)(async (e, r) =>
                      (0, d.walletGetCapabilities)(e, r, { getCapabilities: t })
                    ),
                    wallet_sendCalls: (0, a.createAsyncMiddleware)(async (t, r) =>
                      (0, m.walletSendCalls)(t, r, { getAccounts: e, processSendCalls: _ })
                    ),
                    wallet_getCallsStatus: (0, a.createAsyncMiddleware)(async (e, t) =>
                      (0, l.walletGetCallsStatus)(e, t, { getTransactionReceiptsByBatchId: r })
                    ),
                  });
                  async function S(t, r) {
                    return (0, h.validateAndNormalizeKeyholder)(t, r, { getAccounts: e });
                  }
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/dist/wallet.js',
      },
    ],
    [
      2287,
      { './errors.cjs': 2295, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.assertExhaustive = r.assertStruct = r.assert = r.AssertionError = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./errors.cjs');
                function i(e, t) {
                  return (
                    (r = e),
                    Boolean('string' == typeof r?.prototype?.constructor?.name)
                      ? new e({ message: t })
                      : e({ message: t })
                  );
                  var r;
                }
                class o extends Error {
                  constructor(e) {
                    super(e.message), (this.code = 'ERR_ASSERTION');
                  }
                }
                (r.AssertionError = o),
                  (r.assert = function (e, t = 'Assertion failed.', r = o) {
                    if (!e) {
                      if (t instanceof Error) throw t;
                      throw i(r, t);
                    }
                  }),
                  (r.assertStruct = function (e, t, r = 'Assertion failed', a = o) {
                    try {
                      (0, n.assert)(e, t);
                    } catch (e) {
                      throw i(
                        a,
                        `${r}: ${(function (e) {
                          return (0, s.getErrorMessage)(e).replace(/\.$/u, '');
                        })(e)}.`
                      );
                    }
                  }),
                  (r.assertExhaustive = function (e) {
                    throw new Error(
                      'Invalid branch reached. Should be detected during compilation.'
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/assert.cjs',
      },
    ],
    [
      2288,
      { './assert.cjs': 2287, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.base64 = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs');
                r.base64 = (e, t = {}) => {
                  const r = t.paddingRequired ?? !1,
                    i = t.characterSet ?? 'base64';
                  let o, a;
                  return (
                    'base64' === i
                      ? (o = String.raw`[A-Za-z0-9+\/]`)
                      : ((0, s.assert)('base64url' === i), (o = String.raw`[-_A-Za-z0-9]`)),
                    (a = r
                      ? new RegExp(`^(?:${o}{4})*(?:${o}{3}=|${o}{2}==)?$`, 'u')
                      : new RegExp(`^(?:${o}{4})*(?:${o}{2,3}|${o}{3}=|${o}{2}==)?$`, 'u')),
                    (0, n.pattern)(e, a)
                  );
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/base64.cjs',
      },
    ],
    [
      2289,
      { './assert.cjs': 2287, './hex.cjs': 2296, '@scure/base': 3078, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.createDataView =
                        r.concatBytes =
                        r.valueToBytes =
                        r.base64ToBytes =
                        r.stringToBytes =
                        r.numberToBytes =
                        r.signedBigIntToBytes =
                        r.bigIntToBytes =
                        r.hexToBytes =
                        r.bytesToBase64 =
                        r.bytesToString =
                        r.bytesToNumber =
                        r.bytesToSignedBigInt =
                        r.bytesToBigInt =
                        r.bytesToHex =
                        r.assertIsBytes =
                        r.isBytes =
                          void 0);
                    const n = e('@scure/base'),
                      s = e('./assert.cjs'),
                      i = e('./hex.cjs'),
                      o = 48,
                      a = 58,
                      c = 87;
                    const u = (function () {
                      const e = [];
                      return () => {
                        if (0 === e.length)
                          for (let t = 0; t < 256; t++) e.push(t.toString(16).padStart(2, '0'));
                        return e;
                      };
                    })();
                    function l(e) {
                      return e instanceof Uint8Array;
                    }
                    function d(e) {
                      (0, s.assert)(l(e), 'Value must be a Uint8Array.');
                    }
                    function m(e) {
                      if ((d(e), 0 === e.length)) return '0x';
                      const t = u(),
                        r = new Array(e.length);
                      for (let n = 0; n < e.length; n++) r[n] = t[e[n]];
                      return (0, i.add0x)(r.join(''));
                    }
                    function f(e) {
                      d(e);
                      const t = m(e);
                      return BigInt(t);
                    }
                    function p(e) {
                      if ('0x' === e?.toLowerCase?.()) return new Uint8Array();
                      (0, i.assertIsHexString)(e);
                      const t = (0, i.remove0x)(e).toLowerCase(),
                        r = t.length % 2 == 0 ? t : `0${t}`,
                        n = new Uint8Array(r.length / 2);
                      for (let e = 0; e < n.length; e++) {
                        const t = r.charCodeAt(2 * e),
                          s = r.charCodeAt(2 * e + 1),
                          i = t - (t < a ? o : c),
                          u = s - (s < a ? o : c);
                        n[e] = 16 * i + u;
                      }
                      return n;
                    }
                    function h(e) {
                      (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                        (0, s.assert)(e >= BigInt(0), 'Value must be a non-negative bigint.');
                      return p(e.toString(16));
                    }
                    function g(e) {
                      (0, s.assert)('number' == typeof e, 'Value must be a number.'),
                        (0, s.assert)(e >= 0, 'Value must be a non-negative number.'),
                        (0, s.assert)(
                          Number.isSafeInteger(e),
                          'Value is not a safe integer. Use `bigIntToBytes` instead.'
                        );
                      return p(e.toString(16));
                    }
                    function y(e) {
                      return (
                        (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                        new TextEncoder().encode(e)
                      );
                    }
                    function w(e) {
                      if ('bigint' == typeof e) return h(e);
                      if ('number' == typeof e) return g(e);
                      if ('string' == typeof e) return e.startsWith('0x') ? p(e) : y(e);
                      if (l(e)) return e;
                      throw new TypeError(`Unsupported value type: "${typeof e}".`);
                    }
                    (r.isBytes = l),
                      (r.assertIsBytes = d),
                      (r.bytesToHex = m),
                      (r.bytesToBigInt = f),
                      (r.bytesToSignedBigInt = function (e) {
                        d(e);
                        let t = BigInt(0);
                        for (const r of e) t = (t << BigInt(8)) + BigInt(r);
                        return BigInt.asIntN(8 * e.length, t);
                      }),
                      (r.bytesToNumber = function (e) {
                        d(e);
                        const t = f(e);
                        return (
                          (0, s.assert)(
                            t <= BigInt(Number.MAX_SAFE_INTEGER),
                            'Number is not a safe integer. Use `bytesToBigInt` instead.'
                          ),
                          Number(t)
                        );
                      }),
                      (r.bytesToString = function (e) {
                        return d(e), new TextDecoder().decode(e);
                      }),
                      (r.bytesToBase64 = function (e) {
                        return d(e), n.base64.encode(e);
                      }),
                      (r.hexToBytes = p),
                      (r.bigIntToBytes = h),
                      (r.signedBigIntToBytes = function (e, t) {
                        (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                          (0, s.assert)('number' == typeof t, 'Byte length must be a number.'),
                          (0, s.assert)(t > 0, 'Byte length must be greater than 0.'),
                          (0, s.assert)(
                            (function (e, t) {
                              (0, s.assert)(t > 0);
                              const r = e >> BigInt(31);
                              return !(((~e & r) + (e & ~r)) >> BigInt(8 * t - 1));
                            })(e, t),
                            'Byte length is too small to represent the given value.'
                          );
                        let r = e;
                        const n = new Uint8Array(t);
                        for (let e = 0; e < n.length; e++)
                          (n[e] = Number(BigInt.asUintN(8, r))), (r >>= BigInt(8));
                        return n.reverse();
                      }),
                      (r.numberToBytes = g),
                      (r.stringToBytes = y),
                      (r.base64ToBytes = function (e) {
                        return (
                          (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                          n.base64.decode(e)
                        );
                      }),
                      (r.valueToBytes = w),
                      (r.concatBytes = function (e) {
                        const t = new Array(e.length);
                        let r = 0;
                        for (let n = 0; n < e.length; n++) {
                          const s = w(e[n]);
                          (t[n] = s), (r += s.length);
                        }
                        const n = new Uint8Array(r);
                        for (let e = 0, r = 0; e < t.length; e++)
                          n.set(t[e], r), (r += t[e].length);
                        return n;
                      }),
                      (r.createDataView = function (e) {
                        if (void 0 !== t && e instanceof t) {
                          const t = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                          return new DataView(t);
                        }
                        return new DataView(e.buffer, e.byteOffset, e.byteLength);
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/bytes.cjs',
      },
    ],
    [
      2290,
      { './superstruct.cjs': 2305, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toCaipAssetId =
                    r.toCaipAssetType =
                    r.toCaipAccountId =
                    r.toCaipChainId =
                    r.parseCaipAssetId =
                    r.parseCaipAssetType =
                    r.parseCaipAccountId =
                    r.parseCaipChainId =
                    r.isCaipAssetId =
                    r.isCaipAssetType =
                    r.isCaipTokenId =
                    r.isCaipAssetReference =
                    r.isCaipAssetNamespace =
                    r.isCaipAccountAddress =
                    r.isCaipAccountId =
                    r.isCaipReference =
                    r.isCaipNamespace =
                    r.isCaipChainId =
                    r.KnownCaipNamespace =
                    r.CaipAssetTypeOrIdStruct =
                    r.CaipAssetIdStruct =
                    r.CaipAssetTypeStruct =
                    r.CaipTokenIdStruct =
                    r.CaipAssetReferenceStruct =
                    r.CaipAssetNamespaceStruct =
                    r.CaipAccountAddressStruct =
                    r.CaipAccountIdStruct =
                    r.CaipReferenceStruct =
                    r.CaipNamespaceStruct =
                    r.CaipChainIdStruct =
                    r.CAIP_ASSET_ID_REGEX =
                    r.CAIP_ASSET_TYPE_REGEX =
                    r.CAIP_TOKEN_ID_REGEX =
                    r.CAIP_ASSET_REFERENCE_REGEX =
                    r.CAIP_ASSET_NAMESPACE_REGEX =
                    r.CAIP_ACCOUNT_ADDRESS_REGEX =
                    r.CAIP_ACCOUNT_ID_REGEX =
                    r.CAIP_REFERENCE_REGEX =
                    r.CAIP_NAMESPACE_REGEX =
                    r.CAIP_CHAIN_ID_REGEX =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./superstruct.cjs');
                (r.CAIP_CHAIN_ID_REGEX =
                  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u),
                  (r.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u),
                  (r.CAIP_ACCOUNT_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_ASSET_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_ASSET_REFERENCE_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_TOKEN_ID_REGEX = /^[-.%a-zA-Z0-9]{1,78}$/u),
                  (r.CAIP_ASSET_TYPE_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ASSET_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$/u);
                function i(e) {
                  return (0, n.is)(e, r.CaipNamespaceStruct);
                }
                function o(e) {
                  return (0, n.is)(e, r.CaipReferenceStruct);
                }
                function a(e) {
                  return (0, n.is)(e, r.CaipAccountAddressStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.CaipAssetNamespaceStruct);
                }
                function u(e) {
                  return (0, n.is)(e, r.CaipAssetReferenceStruct);
                }
                function l(e) {
                  return (0, n.is)(e, r.CaipTokenIdStruct);
                }
                (r.CaipChainIdStruct = (0, s.definePattern)('CaipChainId', r.CAIP_CHAIN_ID_REGEX)),
                  (r.CaipNamespaceStruct = (0, s.definePattern)(
                    'CaipNamespace',
                    r.CAIP_NAMESPACE_REGEX
                  )),
                  (r.CaipReferenceStruct = (0, s.definePattern)(
                    'CaipReference',
                    r.CAIP_REFERENCE_REGEX
                  )),
                  (r.CaipAccountIdStruct = (0, s.definePattern)(
                    'CaipAccountId',
                    r.CAIP_ACCOUNT_ID_REGEX
                  )),
                  (r.CaipAccountAddressStruct = (0, s.definePattern)(
                    'CaipAccountAddress',
                    r.CAIP_ACCOUNT_ADDRESS_REGEX
                  )),
                  (r.CaipAssetNamespaceStruct = (0, s.definePattern)(
                    'CaipAssetNamespace',
                    r.CAIP_ASSET_NAMESPACE_REGEX
                  )),
                  (r.CaipAssetReferenceStruct = (0, s.definePattern)(
                    'CaipAssetReference',
                    r.CAIP_ASSET_REFERENCE_REGEX
                  )),
                  (r.CaipTokenIdStruct = (0, s.definePattern)(
                    'CaipTokenId',
                    r.CAIP_TOKEN_ID_REGEX
                  )),
                  (r.CaipAssetTypeStruct = (0, s.definePattern)(
                    'CaipAssetType',
                    r.CAIP_ASSET_TYPE_REGEX
                  )),
                  (r.CaipAssetIdStruct = (0, s.definePattern)(
                    'CaipAssetId',
                    r.CAIP_ASSET_ID_REGEX
                  )),
                  (r.CaipAssetTypeOrIdStruct = (0, s.definePattern)(
                    'CaipAssetTypeOrId',
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})(\/(?<tokenId>[-.%a-zA-Z0-9]{1,78}))?$/u
                  )),
                  (function (e) {
                    (e.Bip122 = 'bip122'),
                      (e.Solana = 'solana'),
                      (e.Eip155 = 'eip155'),
                      (e.Wallet = 'wallet');
                  })(r.KnownCaipNamespace || (r.KnownCaipNamespace = {})),
                  (r.isCaipChainId = function (e) {
                    return (0, n.is)(e, r.CaipChainIdStruct);
                  }),
                  (r.isCaipNamespace = i),
                  (r.isCaipReference = o),
                  (r.isCaipAccountId = function (e) {
                    return (0, n.is)(e, r.CaipAccountIdStruct);
                  }),
                  (r.isCaipAccountAddress = a),
                  (r.isCaipAssetNamespace = c),
                  (r.isCaipAssetReference = u),
                  (r.isCaipTokenId = l),
                  (r.isCaipAssetType = function (e) {
                    return (0, n.is)(e, r.CaipAssetTypeStruct);
                  }),
                  (r.isCaipAssetId = function (e) {
                    return (0, n.is)(e, r.CaipAssetIdStruct);
                  }),
                  (r.parseCaipChainId = function (e) {
                    const t = r.CAIP_CHAIN_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP chain ID.');
                    return { namespace: t.groups.namespace, reference: t.groups.reference };
                  }),
                  (r.parseCaipAccountId = function (e) {
                    const t = r.CAIP_ACCOUNT_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP account ID.');
                    return {
                      address: t.groups.accountAddress,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.parseCaipAssetType = function (e) {
                    const t = r.CAIP_ASSET_TYPE_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP asset type.');
                    return {
                      assetNamespace: t.groups.assetNamespace,
                      assetReference: t.groups.assetReference,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.parseCaipAssetId = function (e) {
                    const t = r.CAIP_ASSET_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP asset ID.');
                    return {
                      assetNamespace: t.groups.assetNamespace,
                      assetReference: t.groups.assetReference,
                      tokenId: t.groups.tokenId,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.toCaipChainId = function (e, t) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}`;
                  }),
                  (r.toCaipAccountId = function (e, t, n) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!a(n))
                      throw new Error(
                        `Invalid "accountAddress", must match: ${r.CAIP_ACCOUNT_ADDRESS_REGEX.toString()}`
                      );
                    return `${e}:${t}:${n}`;
                  }),
                  (r.toCaipAssetType = function (e, t, n, s) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!c(n))
                      throw new Error(
                        `Invalid "assetNamespace", must match: ${r.CAIP_ASSET_NAMESPACE_REGEX.toString()}`
                      );
                    if (!u(s))
                      throw new Error(
                        `Invalid "assetReference", must match: ${r.CAIP_ASSET_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}/${n}:${s}`;
                  }),
                  (r.toCaipAssetId = function (e, t, n, s, a) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!c(n))
                      throw new Error(
                        `Invalid "assetNamespace", must match: ${r.CAIP_ASSET_NAMESPACE_REGEX.toString()}`
                      );
                    if (!u(s))
                      throw new Error(
                        `Invalid "assetReference", must match: ${r.CAIP_ASSET_REFERENCE_REGEX.toString()}`
                      );
                    if (!l(a))
                      throw new Error(
                        `Invalid "tokenId", must match: ${r.CAIP_TOKEN_ID_REGEX.toString()}`
                      );
                    return `${e}:${t}/${n}:${s}/${a}`;
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/caip-types.cjs',
      },
    ],
    [
      2291,
      { './base64.cjs': 2288, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.ChecksumStruct = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./base64.cjs');
                r.ChecksumStruct = (0, n.size)(
                  (0, s.base64)((0, n.string)(), { paddingRequired: !0 }),
                  44,
                  44
                );
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/checksum.cjs',
      },
    ],
    [
      2292,
      {
        './assert.cjs': 2287,
        './bytes.cjs': 2289,
        './hex.cjs': 2296,
        '@metamask/superstruct': 2913,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createHex = r.createBytes = r.createBigInt = r.createNumber = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./bytes.cjs'),
                  o = e('./hex.cjs'),
                  a = (0, n.union)([
                    (0, n.number)(),
                    (0, n.bigint)(),
                    (0, n.string)(),
                    o.StrictHexStruct,
                  ]),
                  c = (0, n.coerce)((0, n.number)(), a, Number),
                  u = (0, n.coerce)((0, n.bigint)(), a, BigInt),
                  l =
                    ((0, n.union)([o.StrictHexStruct, (0, n.instance)(Uint8Array)]),
                    (0, n.coerce)(
                      (0, n.instance)(Uint8Array),
                      (0, n.union)([o.StrictHexStruct]),
                      i.hexToBytes
                    )),
                  d = (0, n.coerce)(o.StrictHexStruct, (0, n.instance)(Uint8Array), i.bytesToHex);
                (r.createNumber = function (e) {
                  try {
                    const t = (0, n.create)(e, c);
                    return (
                      (0, s.assert)(
                        Number.isFinite(t),
                        `Expected a number-like value, got "${e}".`
                      ),
                      t
                    );
                  } catch (t) {
                    if (t instanceof n.StructError)
                      throw new Error(`Expected a number-like value, got "${e}".`);
                    throw t;
                  }
                }),
                  (r.createBigInt = function (e) {
                    try {
                      return (0, n.create)(e, u);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a number-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createBytes = function (e) {
                    if ('string' == typeof e && '0x' === e.toLowerCase()) return new Uint8Array();
                    try {
                      return (0, n.create)(e, l);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createHex = function (e) {
                    if (
                      (e instanceof Uint8Array && 0 === e.length) ||
                      ('string' == typeof e && '0x' === e.toLowerCase())
                    )
                      return '0x';
                    try {
                      return (0, n.create)(e, d);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/coercers.cjs',
      },
    ],
    [
      2293,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  o =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.FrozenSet = r.FrozenMap = void 0);
                class a {
                  get size() {
                    return i(this, n, 'f').size;
                  }
                  [((n = new WeakMap()), Symbol.iterator)]() {
                    return i(this, n, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    n.set(this, void 0), o(this, n, new Map(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, n, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, n, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  get(e) {
                    return i(this, n, 'f').get(e);
                  }
                  has(e) {
                    return i(this, n, 'f').has(e);
                  }
                  keys() {
                    return i(this, n, 'f').keys();
                  }
                  values() {
                    return i(this, n, 'f').values();
                  }
                  toString() {
                    return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[...this.entries()].map(([e, t]) => `${String(e)} => ${String(t)}`).join(', ')} ` : ''}}`;
                  }
                }
                r.FrozenMap = a;
                class c {
                  get size() {
                    return i(this, s, 'f').size;
                  }
                  [((s = new WeakMap()), Symbol.iterator)]() {
                    return i(this, s, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    s.set(this, void 0), o(this, s, new Set(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, s, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, s, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  has(e) {
                    return i(this, s, 'f').has(e);
                  }
                  keys() {
                    return i(this, s, 'f').keys();
                  }
                  values() {
                    return i(this, s, 'f').values();
                  }
                  toString() {
                    return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[...this.values()].map(e => String(e)).join(', ')} ` : ''}}`;
                  }
                }
                (r.FrozenSet = c),
                  Object.freeze(a),
                  Object.freeze(a.prototype),
                  Object.freeze(c),
                  Object.freeze(c.prototype);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/collections.cjs',
      },
    ],
    [
      2294,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/encryption-types.cjs',
      },
    ],
    [
      2295,
      { './misc.cjs': 2301, 'pony-cause': 5071 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.wrapError =
                    r.getErrorMessage =
                    r.isErrorWithStack =
                    r.isErrorWithMessage =
                    r.isErrorWithCode =
                      void 0);
                const n = e('pony-cause'),
                  s = e('./misc.cjs');
                function i(e) {
                  return 'object' == typeof e && null !== e && 'code' in e;
                }
                function o(e) {
                  return 'object' == typeof e && null !== e && 'message' in e;
                }
                (r.isErrorWithCode = i),
                  (r.isErrorWithMessage = o),
                  (r.isErrorWithStack = function (e) {
                    return 'object' == typeof e && null !== e && 'stack' in e;
                  }),
                  (r.getErrorMessage = function (e) {
                    return o(e) && 'string' == typeof e.message
                      ? e.message
                      : (0, s.isNullOrUndefined)(e)
                        ? ''
                        : String(e);
                  }),
                  (r.wrapError = function (e, t) {
                    if (
                      (r = e) instanceof Error ||
                      ((0, s.isObject)(r) && 'Error' === r.constructor.name)
                    ) {
                      let r;
                      return (
                        (r =
                          2 === Error.length
                            ? new Error(t, { cause: e })
                            : new n.ErrorWithCause(t, { cause: e })),
                        i(e) && (r.code = e.code),
                        r
                      );
                    }
                    var r;
                    return t.length > 0 ? new Error(`${String(e)}: ${t}`) : new Error(String(e));
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/errors.cjs',
      },
    ],
    [
      2296,
      {
        './assert.cjs': 2287,
        './bytes.cjs': 2289,
        '@metamask/superstruct': 2913,
        '@noble/hashes/sha3': 3055,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.remove0x =
                    r.add0x =
                    r.isValidChecksumAddress =
                    r.getChecksumAddress =
                    r.isValidHexAddress =
                    r.assertIsStrictHexString =
                    r.assertIsHexString =
                    r.isStrictHexString =
                    r.isHexString =
                    r.HexChecksumAddressStruct =
                    r.HexAddressStruct =
                    r.StrictHexStruct =
                    r.HexStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@noble/hashes/sha3'),
                  i = e('./assert.cjs'),
                  o = e('./bytes.cjs');
                function a(e) {
                  return (0, n.is)(e, r.HexStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.StrictHexStruct);
                }
                function u(e) {
                  (0, i.assert)((0, n.is)(e, r.HexChecksumAddressStruct), 'Invalid hex address.');
                  const t = d(e.toLowerCase()),
                    a = d((0, o.bytesToHex)((0, s.keccak_256)(t)));
                  return `0x${t
                    .split('')
                    .map((e, t) => {
                      const r = a[t];
                      return (
                        (0, i.assert)((0, n.is)(r, (0, n.string)()), 'Hash shorter than address.'),
                        parseInt(r, 16) > 7 ? e.toUpperCase() : e
                      );
                    })
                    .join('')}`;
                }
                function l(e) {
                  return !!(0, n.is)(e, r.HexChecksumAddressStruct) && u(e) === e;
                }
                function d(e) {
                  return e.startsWith('0x') || e.startsWith('0X') ? e.substring(2) : e;
                }
                (r.HexStruct = (0, n.pattern)((0, n.string)(), /^(?:0x)?[0-9a-f]+$/iu)),
                  (r.StrictHexStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]+$/iu)),
                  (r.HexAddressStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]{40}$/u)),
                  (r.HexChecksumAddressStruct = (0, n.pattern)(
                    (0, n.string)(),
                    /^0x[0-9a-fA-F]{40}$/u
                  )),
                  (r.isHexString = a),
                  (r.isStrictHexString = c),
                  (r.assertIsHexString = function (e) {
                    (0, i.assert)(a(e), 'Value must be a hexadecimal string.');
                  }),
                  (r.assertIsStrictHexString = function (e) {
                    (0, i.assert)(c(e), 'Value must be a hexadecimal string, starting with "0x".');
                  }),
                  (r.isValidHexAddress = function (e) {
                    return (0, n.is)(e, r.HexAddressStruct) || l(e);
                  }),
                  (r.getChecksumAddress = u),
                  (r.isValidChecksumAddress = l),
                  (r.add0x = function (e) {
                    return e.startsWith('0x')
                      ? e
                      : e.startsWith('0X')
                        ? `0x${e.substring(2)}`
                        : `0x${e}`;
                  }),
                  (r.remove0x = d);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/hex.cjs',
      },
    ],
    [
      2297,
      {
        './assert.cjs': 2287,
        './base64.cjs': 2288,
        './bytes.cjs': 2289,
        './caip-types.cjs': 2290,
        './checksum.cjs': 2291,
        './coercers.cjs': 2292,
        './collections.cjs': 2293,
        './encryption-types.cjs': 2294,
        './errors.cjs': 2295,
        './hex.cjs': 2296,
        './json.cjs': 2298,
        './keyring.cjs': 2299,
        './logging.cjs': 2300,
        './misc.cjs': 2301,
        './number.cjs': 2302,
        './opaque.cjs': 2303,
        './promise.cjs': 2304,
        './superstruct.cjs': 2305,
        './time.cjs': 2306,
        './transaction-types.cjs': 2307,
        './versions.cjs': 2308,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./assert.cjs'), r),
                  s(e('./base64.cjs'), r),
                  s(e('./bytes.cjs'), r),
                  s(e('./caip-types.cjs'), r),
                  s(e('./checksum.cjs'), r),
                  s(e('./coercers.cjs'), r),
                  s(e('./collections.cjs'), r),
                  s(e('./encryption-types.cjs'), r),
                  s(e('./errors.cjs'), r),
                  s(e('./hex.cjs'), r),
                  s(e('./json.cjs'), r),
                  s(e('./keyring.cjs'), r),
                  s(e('./logging.cjs'), r),
                  s(e('./misc.cjs'), r),
                  s(e('./number.cjs'), r),
                  s(e('./opaque.cjs'), r),
                  s(e('./promise.cjs'), r),
                  s(e('./superstruct.cjs'), r),
                  s(e('./time.cjs'), r),
                  s(e('./transaction-types.cjs'), r),
                  s(e('./versions.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/index.cjs',
      },
    ],
    [
      2298,
      { './assert.cjs': 2287, './misc.cjs': 2301, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getJsonRpcIdValidator =
                    r.assertIsJsonRpcError =
                    r.isJsonRpcError =
                    r.assertIsJsonRpcFailure =
                    r.isJsonRpcFailure =
                    r.assertIsJsonRpcSuccess =
                    r.isJsonRpcSuccess =
                    r.assertIsJsonRpcResponse =
                    r.isJsonRpcResponse =
                    r.assertIsPendingJsonRpcResponse =
                    r.isPendingJsonRpcResponse =
                    r.JsonRpcResponseStruct =
                    r.JsonRpcFailureStruct =
                    r.JsonRpcSuccessStruct =
                    r.PendingJsonRpcResponseStruct =
                    r.assertIsJsonRpcRequest =
                    r.isJsonRpcRequest =
                    r.assertIsJsonRpcNotification =
                    r.isJsonRpcNotification =
                    r.JsonRpcNotificationStruct =
                    r.JsonRpcRequestStruct =
                    r.JsonRpcParamsStruct =
                    r.JsonRpcErrorStruct =
                    r.JsonRpcIdStruct =
                    r.JsonRpcVersionStruct =
                    r.jsonrpc2 =
                    r.getJsonSize =
                    r.getSafeJson =
                    r.isValidJson =
                    r.JsonStruct =
                    r.UnsafeJsonStruct =
                    r.exactOptional =
                    r.object =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./misc.cjs');
                function o({ path: e, branch: t }) {
                  const r = e[e.length - 1];
                  return (0, i.hasProperty)(t[t.length - 2], r);
                }
                function a(e) {
                  return new n.Struct({
                    ...e,
                    type: `optional ${e.type}`,
                    validator: (t, r) => !o(r) || e.validator(t, r),
                    refiner: (t, r) => !o(r) || e.refiner(t, r),
                  });
                }
                function c(e) {
                  if (null === e || 'boolean' == typeof e || 'string' == typeof e) return !0;
                  if ('number' == typeof e && Number.isFinite(e)) return !0;
                  if ('object' == typeof e) {
                    let t = !0;
                    if (Array.isArray(e)) {
                      for (let r = 0; r < e.length; r++)
                        if (!c(e[r])) {
                          t = !1;
                          break;
                        }
                      return t;
                    }
                    const r = Object.entries(e);
                    for (let e = 0; e < r.length; e++)
                      if ('string' != typeof r[e][0] || !c(r[e][1])) {
                        t = !1;
                        break;
                      }
                    return t;
                  }
                  return !1;
                }
                function u(e) {
                  return (0, n.create)(e, r.JsonStruct);
                }
                (r.object = e => (0, n.object)(e)),
                  (r.exactOptional = a),
                  (r.UnsafeJsonStruct = (0, n.define)('JSON', e => c(e))),
                  (r.JsonStruct = (0, n.coerce)(
                    r.UnsafeJsonStruct,
                    (0, n.refine)((0, n.any)(), 'JSON', e => (0, n.is)(e, r.UnsafeJsonStruct)),
                    e =>
                      JSON.parse(
                        JSON.stringify(e, (e, t) =>
                          '__proto__' === e || 'constructor' === e ? undefined : t
                        )
                      )
                  )),
                  (r.isValidJson = function (e) {
                    try {
                      return u(e), !0;
                    } catch {
                      return !1;
                    }
                  }),
                  (r.getSafeJson = u),
                  (r.getJsonSize = function (e) {
                    (0, s.assertStruct)(e, r.JsonStruct, 'Invalid JSON value');
                    const t = JSON.stringify(e);
                    return new TextEncoder().encode(t).byteLength;
                  }),
                  (r.jsonrpc2 = '2.0'),
                  (r.JsonRpcVersionStruct = (0, n.literal)(r.jsonrpc2)),
                  (r.JsonRpcIdStruct = (0, n.nullable)(
                    (0, n.union)([(0, n.number)(), (0, n.string)()])
                  )),
                  (r.JsonRpcErrorStruct = (0, r.object)({
                    code: (0, n.integer)(),
                    message: (0, n.string)(),
                    data: a(r.JsonStruct),
                    stack: a((0, n.string)()),
                  })),
                  (r.JsonRpcParamsStruct = (0, n.union)([
                    (0, n.record)((0, n.string)(), r.JsonStruct),
                    (0, n.array)(r.JsonStruct),
                  ])),
                  (r.JsonRpcRequestStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.JsonRpcNotificationStruct = (0, r.object)({
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.isJsonRpcNotification = function (e) {
                    return (0, n.is)(e, r.JsonRpcNotificationStruct);
                  }),
                  (r.assertIsJsonRpcNotification = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcNotificationStruct,
                      'Invalid JSON-RPC notification',
                      t
                    );
                  }),
                  (r.isJsonRpcRequest = function (e) {
                    return (0, n.is)(e, r.JsonRpcRequestStruct);
                  }),
                  (r.assertIsJsonRpcRequest = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcRequestStruct, 'Invalid JSON-RPC request', t);
                  }),
                  (r.PendingJsonRpcResponseStruct = (0, n.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: (0, n.optional)((0, n.unknown)()),
                    error: (0, n.optional)(r.JsonRpcErrorStruct),
                  })),
                  (r.JsonRpcSuccessStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: r.JsonStruct,
                  })),
                  (r.JsonRpcFailureStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    error: r.JsonRpcErrorStruct,
                  })),
                  (r.JsonRpcResponseStruct = (0, n.union)([
                    r.JsonRpcSuccessStruct,
                    r.JsonRpcFailureStruct,
                  ])),
                  (r.isPendingJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.PendingJsonRpcResponseStruct);
                  }),
                  (r.assertIsPendingJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.PendingJsonRpcResponseStruct,
                      'Invalid pending JSON-RPC response',
                      t
                    );
                  }),
                  (r.isJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.JsonRpcResponseStruct);
                  }),
                  (r.assertIsJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcResponseStruct, 'Invalid JSON-RPC response', t);
                  }),
                  (r.isJsonRpcSuccess = function (e) {
                    return (0, n.is)(e, r.JsonRpcSuccessStruct);
                  }),
                  (r.assertIsJsonRpcSuccess = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcSuccessStruct,
                      'Invalid JSON-RPC success response',
                      t
                    );
                  }),
                  (r.isJsonRpcFailure = function (e) {
                    return (0, n.is)(e, r.JsonRpcFailureStruct);
                  }),
                  (r.assertIsJsonRpcFailure = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcFailureStruct,
                      'Invalid JSON-RPC failure response',
                      t
                    );
                  }),
                  (r.isJsonRpcError = function (e) {
                    return (0, n.is)(e, r.JsonRpcErrorStruct);
                  }),
                  (r.assertIsJsonRpcError = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcErrorStruct, 'Invalid JSON-RPC error', t);
                  }),
                  (r.getJsonRpcIdValidator = function (e) {
                    const {
                      permitEmptyString: t,
                      permitFractions: r,
                      permitNull: n,
                    } = { permitEmptyString: !0, permitFractions: !1, permitNull: !0, ...e };
                    return e =>
                      Boolean(
                        ('number' == typeof e && (r || Number.isInteger(e))) ||
                          ('string' == typeof e && (t || e.length > 0)) ||
                          (n && null === e)
                      );
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/json.cjs',
      },
    ],
    [
      2299,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/keyring.cjs',
      },
    ],
    [
      2300,
      { debug: 4292 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.createProjectLogger = void 0);
                const s = (0, n(e('debug')).default)('metamask');
                (r.createProjectLogger = function (e) {
                  return s.extend(e);
                }),
                  (r.createModuleLogger = function (e, t) {
                    return e.extend(t);
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/logging.cjs',
      },
    ],
    [
      2301,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.calculateNumberSize =
                    r.calculateStringSize =
                    r.isASCII =
                    r.isPlainObject =
                    r.ESCAPE_CHARACTERS_REGEXP =
                    r.JsonSize =
                    r.getKnownPropertyNames =
                    r.hasProperty =
                    r.isObject =
                    r.isNullOrUndefined =
                    r.isNonEmptyArray =
                      void 0),
                  (r.isNonEmptyArray = function (e) {
                    return Array.isArray(e) && e.length > 0;
                  }),
                  (r.isNullOrUndefined = function (e) {
                    return null === e || e === undefined;
                  }),
                  (r.isObject = function (e) {
                    return Boolean(e) && 'object' == typeof e && !Array.isArray(e);
                  });
                function n(e) {
                  return e.charCodeAt(0) <= 127;
                }
                (r.hasProperty = (e, t) => Object.hasOwnProperty.call(e, t)),
                  (r.getKnownPropertyNames = function (e) {
                    return Object.getOwnPropertyNames(e);
                  }),
                  (function (e) {
                    (e[(e.Null = 4)] = 'Null'),
                      (e[(e.Comma = 1)] = 'Comma'),
                      (e[(e.Wrapper = 1)] = 'Wrapper'),
                      (e[(e.True = 4)] = 'True'),
                      (e[(e.False = 5)] = 'False'),
                      (e[(e.Quote = 1)] = 'Quote'),
                      (e[(e.Colon = 1)] = 'Colon'),
                      (e[(e.Date = 24)] = 'Date');
                  })(r.JsonSize || (r.JsonSize = {})),
                  (r.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu),
                  (r.isPlainObject = function (e) {
                    if ('object' != typeof e || null === e) return !1;
                    try {
                      let t = e;
                      for (; null !== Object.getPrototypeOf(t); ) t = Object.getPrototypeOf(t);
                      return Object.getPrototypeOf(e) === t;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (r.isASCII = n),
                  (r.calculateStringSize = function (e) {
                    return (
                      e.split('').reduce((e, t) => (n(t) ? e + 1 : e + 2), 0) +
                      (e.match(r.ESCAPE_CHARACTERS_REGEXP) ?? []).length
                    );
                  }),
                  (r.calculateNumberSize = function (e) {
                    return e.toString().length;
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/misc.cjs',
      },
    ],
    [
      2302,
      { './assert.cjs': 2287, './hex.cjs': 2296 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.hexToBigInt = r.hexToNumber = r.bigIntToHex = r.numberToHex = void 0);
                const n = e('./assert.cjs'),
                  s = e('./hex.cjs');
                r.numberToHex = e => (
                  (0, n.assert)('number' == typeof e, 'Value must be a number.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative number.'),
                  (0, n.assert)(
                    Number.isSafeInteger(e),
                    'Value is not a safe integer. Use `bigIntToHex` instead.'
                  ),
                  (0, s.add0x)(e.toString(16))
                );
                r.bigIntToHex = e => (
                  (0, n.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative bigint.'),
                  (0, s.add0x)(e.toString(16))
                );
                r.hexToNumber = e => {
                  (0, s.assertIsHexString)(e);
                  const t = parseInt(e, 16);
                  return (
                    (0, n.assert)(
                      Number.isSafeInteger(t),
                      'Value is not a safe integer. Use `hexToBigInt` instead.'
                    ),
                    t
                  );
                };
                r.hexToBigInt = e => ((0, s.assertIsHexString)(e), BigInt((0, s.add0x)(e)));
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/number.cjs',
      },
    ],
    [
      2303,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/opaque.cjs',
      },
    ],
    [
      2304,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createDeferredPromise = void 0),
                  (r.createDeferredPromise = function ({
                    suppressUnhandledRejection: e = !1,
                  } = {}) {
                    let t, r;
                    const n = new Promise((e, n) => {
                      (t = e), (r = n);
                    });
                    return e && n.catch(e => {}), { promise: n, resolve: t, reject: r };
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/promise.cjs',
      },
    ],
    [
      2305,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.definePattern = void 0);
                const n = e('@metamask/superstruct');
                r.definePattern = function (e, t) {
                  return (0, n.define)(e, e => 'string' == typeof e && t.test(e));
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/superstruct.cjs',
      },
    ],
    [
      2306,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.timeSince = r.inMilliseconds = r.Duration = void 0),
                  (function (e) {
                    (e[(e.Millisecond = 1)] = 'Millisecond'),
                      (e[(e.Second = 1e3)] = 'Second'),
                      (e[(e.Minute = 6e4)] = 'Minute'),
                      (e[(e.Hour = 36e5)] = 'Hour'),
                      (e[(e.Day = 864e5)] = 'Day'),
                      (e[(e.Week = 6048e5)] = 'Week'),
                      (e[(e.Year = 31536e6)] = 'Year');
                  })(r.Duration || (r.Duration = {}));
                const n = (e, t) => {
                  if (!(e => Number.isInteger(e) && e >= 0)(e))
                    throw new Error(`"${t}" must be a non-negative integer. Received: "${e}".`);
                };
                (r.inMilliseconds = function (e, t) {
                  return n(e, 'count'), e * t;
                }),
                  (r.timeSince = function (e) {
                    return n(e, 'timestamp'), Date.now() - e;
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/time.cjs',
      },
    ],
    [
      2307,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/transaction-types.cjs',
      },
    ],
    [
      2308,
      { './assert.cjs': 2287, '@metamask/superstruct': 2913, semver: 5617 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.satisfiesVersionRange =
                    r.gtRange =
                    r.gtVersion =
                    r.assertIsSemVerRange =
                    r.assertIsSemVerVersion =
                    r.isValidSemVerRange =
                    r.isValidSemVerVersion =
                    r.VersionRangeStruct =
                    r.VersionStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('semver'),
                  i = e('./assert.cjs');
                (r.VersionStruct = (0, n.refine)(
                  (0, n.string)(),
                  'Version',
                  e => null !== (0, s.valid)(e) || `Expected SemVer version, got "${e}"`
                )),
                  (r.VersionRangeStruct = (0, n.refine)(
                    (0, n.string)(),
                    'Version range',
                    e => null !== (0, s.validRange)(e) || `Expected SemVer range, got "${e}"`
                  )),
                  (r.isValidSemVerVersion = function (e) {
                    return (0, n.is)(e, r.VersionStruct);
                  }),
                  (r.isValidSemVerRange = function (e) {
                    return (0, n.is)(e, r.VersionRangeStruct);
                  }),
                  (r.assertIsSemVerVersion = function (e) {
                    (0, i.assertStruct)(e, r.VersionStruct);
                  }),
                  (r.assertIsSemVerRange = function (e) {
                    (0, i.assertStruct)(e, r.VersionRangeStruct);
                  }),
                  (r.gtVersion = function (e, t) {
                    return (0, s.gt)(e, t);
                  }),
                  (r.gtRange = function (e, t) {
                    return (0, s.gtr)(e, t);
                  }),
                  (r.satisfiesVersionRange = function (e, t) {
                    return (0, s.satisfies)(e, t, { includePrerelease: !0 });
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-json-rpc-middleware/node_modules/@metamask/utils/dist/versions.cjs',
      },
    ],
    [
      2309,
      { './utils': 2314, '@scure/base': 2338, buffer: 4139, tweetnacl: 5686 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    var n =
                        (this && this.__createBinding) ||
                        (Object.create
                          ? function (e, t, r, n) {
                              n === undefined && (n = r);
                              var s = Object.getOwnPropertyDescriptor(t, r);
                              (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                                (s = {
                                  enumerable: !0,
                                  get: function () {
                                    return t[r];
                                  },
                                }),
                                Object.defineProperty(e, n, s);
                            }
                          : function (e, t, r, n) {
                              n === undefined && (n = r), (e[n] = t[r]);
                            }),
                      s =
                        (this && this.__setModuleDefault) ||
                        (Object.create
                          ? function (e, t) {
                              Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                            }
                          : function (e, t) {
                              e.default = t;
                            }),
                      i =
                        (this && this.__importStar) ||
                        function (e) {
                          if (e && e.__esModule) return e;
                          var t = {};
                          if (null != e)
                            for (var r in e)
                              'default' !== r &&
                                Object.prototype.hasOwnProperty.call(e, r) &&
                                n(t, e, r);
                          return s(t, e), t;
                        };
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.getEncryptionPublicKey =
                        r.decryptSafely =
                        r.decrypt =
                        r.encryptSafely =
                        r.encrypt =
                          void 0);
                    const o = e('@scure/base'),
                      a = i(e('tweetnacl')),
                      c = e('./utils');
                    function u({ publicKey: e, data: t, version: r }) {
                      if ((0, c.isNullish)(e)) throw new Error('Missing publicKey parameter');
                      if ((0, c.isNullish)(t)) throw new Error('Missing data parameter');
                      if ((0, c.isNullish)(r)) throw new Error('Missing version parameter');
                      if ('x25519-xsalsa20-poly1305' === r) {
                        if ('string' != typeof t)
                          throw new Error('Message data must be given as a string');
                        const r = a.box.keyPair();
                        let n;
                        try {
                          n = o.base64.decode(e);
                        } catch (e) {
                          throw new Error('Bad public key');
                        }
                        const s = o.utf8.decode(t),
                          i = a.randomBytes(a.box.nonceLength),
                          c = a.box(s, i, n, r.secretKey);
                        return {
                          version: 'x25519-xsalsa20-poly1305',
                          nonce: o.base64.encode(i),
                          ephemPublicKey: o.base64.encode(r.publicKey),
                          ciphertext: o.base64.encode(c),
                        };
                      }
                      throw new Error('Encryption type/version not supported');
                    }
                    function l({ encryptedData: e, privateKey: r }) {
                      if ((0, c.isNullish)(e)) throw new Error('Missing encryptedData parameter');
                      if ((0, c.isNullish)(r)) throw new Error('Missing privateKey parameter');
                      if ('x25519-xsalsa20-poly1305' === e.version) {
                        const n = t.from(r, 'hex'),
                          s = a.box.keyPair.fromSecretKey(n).secretKey,
                          i = o.base64.decode(e.nonce),
                          c = o.base64.decode(e.ciphertext),
                          u = o.base64.decode(e.ephemPublicKey),
                          l = a.box.open(c, i, u, s);
                        try {
                          if (!l) throw new Error();
                          const e = o.utf8.encode(l);
                          if (!e) throw new Error();
                          return e;
                        } catch (e) {
                          if (e && 'string' == typeof e.message && e.message.length)
                            throw new Error(`Decryption failed: ${e.message}`);
                          throw new Error('Decryption failed.');
                        }
                      }
                      throw new Error('Encryption type/version not supported.');
                    }
                    (r.encrypt = u),
                      (r.encryptSafely = function ({ publicKey: e, data: r, version: n }) {
                        if ((0, c.isNullish)(e)) throw new Error('Missing publicKey parameter');
                        if ((0, c.isNullish)(r)) throw new Error('Missing data parameter');
                        if ((0, c.isNullish)(n)) throw new Error('Missing version parameter');
                        if ('object' == typeof r && r && 'toJSON' in r)
                          throw new Error(
                            'Cannot encrypt with toJSON property.  Please remove toJSON property'
                          );
                        const s = { data: r, padding: '' },
                          i = t.byteLength(JSON.stringify(s), 'utf-8') % 2048;
                        let o = 0;
                        return (
                          i > 0 && (o = 2048 - i - 16),
                          (s.padding = '0'.repeat(o)),
                          u({ publicKey: e, data: JSON.stringify(s), version: n })
                        );
                      }),
                      (r.decrypt = l),
                      (r.decryptSafely = function ({ encryptedData: e, privateKey: t }) {
                        if ((0, c.isNullish)(e)) throw new Error('Missing encryptedData parameter');
                        if ((0, c.isNullish)(t)) throw new Error('Missing privateKey parameter');
                        return JSON.parse(l({ encryptedData: e, privateKey: t })).data;
                      }),
                      (r.getEncryptionPublicKey = function (e) {
                        const r = t.from(e, 'hex'),
                          n = a.box.keyPair.fromSecretKey(r).publicKey;
                        return o.base64.encode(n);
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/dist/encryption.js',
      },
    ],
    [
      2310,
      {
        './encryption': 2309,
        './personal-sign': 2311,
        './sign-eip7702-authorization': 2312,
        './sign-typed-data': 2313,
        './utils': 2314,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.normalize = r.concatSig = void 0),
                  s(e('./personal-sign'), r),
                  s(e('./sign-typed-data'), r),
                  s(e('./encryption'), r),
                  s(e('./sign-eip7702-authorization'), r);
                var i = e('./utils');
                Object.defineProperty(r, 'concatSig', {
                  enumerable: !0,
                  get: function () {
                    return i.concatSig;
                  },
                }),
                  Object.defineProperty(r, 'normalize', {
                    enumerable: !0,
                    get: function () {
                      return i.normalize;
                    },
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/dist/index.js',
      },
    ],
    [
      2311,
      { './utils': 2314, '@ethereumjs/util': 2212 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.extractPublicKey = r.recoverPersonalSignature = r.personalSign = void 0);
                const n = e('@ethereumjs/util'),
                  s = e('./utils');
                function i(e, t) {
                  const r = (0, n.hashPersonalMessage)((0, s.legacyToBuffer)(e));
                  return (0, s.recoverPublicKey)(r, t);
                }
                (r.personalSign = function ({ privateKey: e, data: t }) {
                  if ((0, s.isNullish)(t)) throw new Error('Missing data parameter');
                  if ((0, s.isNullish)(e)) throw new Error('Missing privateKey parameter');
                  const r = (0, s.legacyToBuffer)(t),
                    i = (0, n.hashPersonalMessage)(r),
                    o = (0, n.ecsign)(i, e);
                  return (0, s.concatSig)((0, n.toBuffer)(o.v), o.r, o.s);
                }),
                  (r.recoverPersonalSignature = function ({ data: e, signature: t }) {
                    if ((0, s.isNullish)(e)) throw new Error('Missing data parameter');
                    if ((0, s.isNullish)(t)) throw new Error('Missing signature parameter');
                    const r = i(e, t),
                      o = (0, n.publicToAddress)(r);
                    return (0, n.bufferToHex)(o);
                  }),
                  (r.extractPublicKey = function ({ data: e, signature: t }) {
                    if ((0, s.isNullish)(e)) throw new Error('Missing data parameter');
                    if ((0, s.isNullish)(t)) throw new Error('Missing signature parameter');
                    return `0x${i(e, t).toString('hex')}`;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/dist/personal-sign.js',
      },
    ],
    [
      2312,
      {
        './utils': 2314,
        '@ethereumjs/rlp': 449,
        '@ethereumjs/util': 2212,
        '@metamask/utils': 2325,
        buffer: 4139,
        'ethereum-cryptography/keccak': 4366,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.hashEIP7702Authorization =
                        r.recoverEIP7702Authorization =
                        r.signEIP7702Authorization =
                          void 0);
                    const n = e('@ethereumjs/rlp'),
                      s = e('@ethereumjs/util'),
                      i = e('@metamask/utils'),
                      o = e('ethereum-cryptography/keccak'),
                      a = e('./utils');
                    function c(e) {
                      u(e);
                      const r = (0, n.encode)(e),
                        s = t.concat([t.from('05', 'hex'), r]);
                      return t.from((0, o.keccak256)(s));
                    }
                    function u(e) {
                      if ((0, a.isNullish)(e)) throw new Error('Missing authorization parameter');
                      const [t, r, n] = e;
                      if ((0, a.isNullish)(t)) throw new Error('Missing chainId parameter');
                      if ((0, a.isNullish)(r)) throw new Error('Missing contractAddress parameter');
                      if ((0, a.isNullish)(n)) throw new Error('Missing nonce parameter');
                    }
                    (r.signEIP7702Authorization = function ({ privateKey: e, authorization: t }) {
                      if ((u(t), (0, a.isNullish)(e)))
                        throw new Error('Missing privateKey parameter');
                      const r = c(t),
                        { r: n, s: i, v: o } = (0, s.ecsign)(r, e),
                        l = (0, s.toBuffer)(o);
                      return (0, a.concatSig)(l, n, i);
                    }),
                      (r.recoverEIP7702Authorization = function ({
                        signature: e,
                        authorization: t,
                      }) {
                        if ((u(t), (0, a.isNullish)(e)))
                          throw new Error('Missing signature parameter');
                        const r = c(t),
                          n = (0, a.recoverPublicKey)(r, e),
                          o = (0, s.publicToAddress)(n);
                        return (0, i.bytesToHex)(o);
                      }),
                      (r.hashEIP7702Authorization = c);
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/dist/sign-eip7702-authorization.js',
      },
    ],
    [
      2313,
      {
        './utils': 2314,
        '@ethereumjs/util': 2212,
        '@metamask/abi-utils': 2222,
        '@metamask/abi-utils/dist/parsers': 2231,
        '@metamask/abi-utils/dist/utils': 2239,
        '@metamask/utils': 2325,
        'ethereum-cryptography/keccak': 4366,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.recoverTypedSignature =
                    r.signTypedData =
                    r.typedSignatureHash =
                    r.TypedDataUtils =
                    r.TYPED_MESSAGE_SCHEMA =
                    r.SignTypedDataVersion =
                      void 0);
                const n = e('@ethereumjs/util'),
                  s = e('@metamask/abi-utils'),
                  i = e('@metamask/abi-utils/dist/parsers'),
                  o = e('@metamask/abi-utils/dist/utils'),
                  a = e('@metamask/utils'),
                  c = e('ethereum-cryptography/keccak'),
                  u = e('./utils');
                var l;
                function d(e, t) {
                  if (!Object.keys(l).includes(e)) throw new Error(`Invalid version: '${e}'`);
                  if (t && !t.includes(e))
                    throw new Error(
                      `SignTypedDataVersion not allowed: '${e}'. Allowed versions are: ${t.join(', ')}`
                    );
                }
                function m(e, t) {
                  (0, a.assert)(
                    null !== t,
                    `Unable to encode value: Invalid number. Expected a valid number value, but received "${t}".`
                  );
                  const r = BigInt(t),
                    n = (0, i.getLength)(e),
                    s = BigInt(2) ** BigInt(n) - BigInt(1);
                  return (
                    (0, a.assert)(
                      r >= -s && r <= s,
                      `Unable to encode value: Number "${t}" is out of range for type "${e}".`
                    ),
                    r
                  );
                }
                function f(e) {
                  let t = BigInt(0);
                  for (let r = 0; r < e.length; r++) {
                    const n = BigInt(e.charCodeAt(r) - 48);
                    (t *= BigInt(10)),
                      (t +=
                        n >= 49
                          ? n - BigInt(49) + BigInt(10)
                          : n >= 17
                            ? n - BigInt(17) + BigInt(10)
                            : n);
                  }
                  return (0, o.padStart)((0, a.bigIntToBytes)(t), 20);
                }
                function p(e, t, r, i, u) {
                  if ((d(u, [l.V3, l.V4]), e[r] !== undefined))
                    return [
                      'bytes32',
                      u === l.V4 && null == i
                        ? '0x0000000000000000000000000000000000000000000000000000000000000000'
                        : (0, n.arrToBufArr)((0, c.keccak256)(h(r, i, e, u))),
                    ];
                  if ('function' === r) throw new Error('Unsupported or invalid type: "function"');
                  if (i === undefined) throw new Error(`missing value for field ${t} of type ${r}`);
                  if ('address' === r) {
                    if ('number' == typeof i)
                      return ['address', (0, o.padStart)((0, a.numberToBytes)(i), 20)];
                    if ((0, a.isStrictHexString)(i)) return ['address', (0, a.add0x)(i)];
                    if ('string' == typeof i) return ['address', f(i).subarray(0, 20)];
                  }
                  if ('bool' === r) return ['bool', Boolean(i)];
                  if ('bytes' === r)
                    return (
                      'number' == typeof i
                        ? (i = (0, a.numberToBytes)(i))
                        : (0, a.isStrictHexString)(i) || '0x' === i
                          ? (i = (0, a.hexToBytes)(i))
                          : 'string' == typeof i && (i = (0, a.stringToBytes)(i)),
                      ['bytes32', (0, n.arrToBufArr)((0, c.keccak256)(i))]
                    );
                  if (r.startsWith('bytes') && 'bytes' !== r && !r.includes('['))
                    return 'number' == typeof i
                      ? i < 0
                        ? ['bytes32', new Uint8Array(32)]
                        : ['bytes32', (0, a.bigIntToBytes)(BigInt(i))]
                      : (0, a.isStrictHexString)(i)
                        ? ['bytes32', (0, a.hexToBytes)(i)]
                        : ['bytes32', i];
                  if (r.startsWith('int') && !r.includes('[')) {
                    const e = m(r, i);
                    return e >= BigInt(0) ? ['uint256', e] : ['int256', e];
                  }
                  if ('string' === r)
                    return (
                      (i =
                        'number' == typeof i
                          ? (0, a.numberToBytes)(i)
                          : (0, a.stringToBytes)(null != i ? i : '')),
                      ['bytes32', (0, n.arrToBufArr)((0, c.keccak256)(i))]
                    );
                  if (r.endsWith(']')) {
                    if (u === l.V3)
                      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');
                    const o = r.slice(0, r.lastIndexOf('[')),
                      a = i.map(r => p(e, t, o, r, u));
                    return [
                      'bytes32',
                      (0, n.arrToBufArr)(
                        (0, c.keccak256)(
                          (0, s.encode)(
                            a.map(([e]) => e),
                            a.map(([, e]) => e)
                          )
                        )
                      ),
                    ];
                  }
                  return [r, i];
                }
                function h(e, t, r, i) {
                  d(i, [l.V3, l.V4]);
                  const o = ['bytes32'],
                    a = [k(e, r)];
                  for (const n of r[e]) {
                    if (i === l.V3 && t[n.name] === undefined) continue;
                    const [e, s] = p(r, n.name, n.type, t[n.name], i);
                    o.push(e), a.push(s);
                  }
                  return (0, n.arrToBufArr)((0, s.encode)(o, a));
                }
                function g(e, t) {
                  let r = '';
                  const n = y(e, t);
                  n.delete(e);
                  const s = [e, ...Array.from(n).sort()];
                  for (const e of s) {
                    if (!t[e]) throw new Error(`No type definition specified: ${e}`);
                    r += `${e}(${t[e].map(({ name: e, type: t }) => `${t} ${e}`).join(',')})`;
                  }
                  return r;
                }
                function y(e, t, r = new Set()) {
                  if ('string' != typeof e)
                    throw new Error(`Invalid findTypeDependencies input ${JSON.stringify(e)}`);
                  const n = e.match(/^\w*/u);
                  if ((([e] = n), r.has(e) || t[e] === undefined)) return r;
                  r.add(e);
                  for (const n of t[e]) y(n.type, t, r);
                  return r;
                }
                function w(e, t, r, s) {
                  d(s, [l.V3, l.V4]);
                  const i = h(e, t, r, s),
                    o = (0, c.keccak256)(i);
                  return (0, n.arrToBufArr)(o);
                }
                function k(e, t) {
                  const r = (0, a.stringToBytes)(g(e, t));
                  return (0, n.arrToBufArr)((0, c.keccak256)(r));
                }
                function b(e) {
                  const t = {};
                  for (const n in r.TYPED_MESSAGE_SCHEMA.properties) e[n] && (t[n] = e[n]);
                  return (
                    'types' in t && (t.types = Object.assign({ EIP712Domain: [] }, t.types)), t
                  );
                }
                function _(e, t) {
                  d(t, [l.V3, l.V4]);
                  const r = b(e),
                    { domain: n } = r;
                  return w('EIP712Domain', n, { EIP712Domain: r.types.EIP712Domain }, t);
                }
                function S(e, t) {
                  if ((0, i.isArrayType)(e) && Array.isArray(t)) {
                    const [r] = (0, i.getArrayType)(e);
                    return t.map(e => S(r, e));
                  }
                  if ('address' === e) {
                    if ((0, a.isStrictHexString)(t))
                      return (0, o.padStart)((0, a.hexToBytes)(t).subarray(0, 20), 20);
                    if (t instanceof Uint8Array) return (0, o.padStart)(t.subarray(0, 20), 20);
                  }
                  if ('bool' === e) return Boolean(t);
                  if (e.startsWith('bytes') && 'bytes' !== e) {
                    const r = (0, i.getByteLength)(e);
                    if ('number' == typeof t)
                      return t < 0 ? new Uint8Array() : (0, a.numberToBytes)(t).subarray(0, r);
                    if ((0, a.isStrictHexString)(t)) return (0, a.hexToBytes)(t).subarray(0, r);
                    if (t instanceof Uint8Array) return t.subarray(0, r);
                  }
                  if (e.startsWith('uint') && 'number' == typeof t) return Math.abs(t);
                  if (e.startsWith('int') && 'number' == typeof t) {
                    const r = (0, i.getLength)(e);
                    return BigInt.asIntN(r, BigInt(t));
                  }
                  return t;
                }
                function E(e, t) {
                  return t.map(t => {
                    if ('string' == typeof t || 'number' == typeof t || 'bigint' == typeof t) {
                      const r = m(e, t);
                      if (r >= BigInt(0)) return (0, o.padStart)((0, a.bigIntToBytes)(r), 32);
                      const n = (0, i.getLength)(e),
                        s = BigInt.asIntN(n, r);
                      return (0, a.signedBigIntToBytes)(s, 32);
                    }
                    return t;
                  });
                }
                function T(e) {
                  const t = new Error('Expect argument to be non-empty array');
                  if ('object' != typeof e || !('length' in e) || !e.length) throw t;
                  const r = e.map(({ name: e, type: t, value: r }) => {
                      if ('address[]' === t)
                        return {
                          name: e,
                          type: 'bytes32[]',
                          value:
                            ((n = r),
                            n.map(e =>
                              'number' == typeof e
                                ? (0, o.padStart)((0, a.numberToBytes)(e), 32)
                                : (0, a.isStrictHexString)(e)
                                  ? (0, o.padStart)((0, a.hexToBytes)(e).subarray(0, 32), 32)
                                  : e instanceof Uint8Array
                                    ? (0, o.padStart)(e.subarray(0, 32), 32)
                                    : e
                            )),
                        };
                      var n;
                      if (t.startsWith('int') && (0, i.isArrayType)(t)) {
                        const [n, s] = (0, i.getArrayType)(t);
                        return { name: e, type: `bytes32[${null != s ? s : ''}]`, value: E(n, r) };
                      }
                      return { name: e, type: t, value: S(t, r) };
                    }),
                    l = r.map(e => ('bytes' !== e.type ? e.value : (0, u.legacyToBuffer)(e.value))),
                    d = r.map(e => {
                      if ('function' === e.type)
                        throw new Error('Unsupported or invalid type: "function"');
                      return e.type;
                    }),
                    m = e.map(e => {
                      if (!e.name) throw t;
                      return `${e.type} ${e.name}`;
                    });
                  return (0, n.arrToBufArr)(
                    (0, c.keccak256)(
                      (0, s.encodePacked)(
                        ['bytes32', 'bytes32'],
                        [
                          (0, c.keccak256)((0, s.encodePacked)(['string[]'], [m], !0)),
                          (0, c.keccak256)((0, s.encodePacked)(d, l, !0)),
                        ]
                      )
                    )
                  );
                }
                !(function (e) {
                  (e.V1 = 'V1'), (e.V3 = 'V3'), (e.V4 = 'V4');
                })((l = r.SignTypedDataVersion || (r.SignTypedDataVersion = {}))),
                  (r.TYPED_MESSAGE_SCHEMA = {
                    type: 'object',
                    properties: {
                      types: {
                        type: 'object',
                        additionalProperties: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: { name: { type: 'string' }, type: { type: 'string' } },
                            required: ['name', 'type'],
                          },
                        },
                      },
                      primaryType: { type: 'string' },
                      domain: { type: 'object' },
                      message: { type: 'object' },
                    },
                    required: ['types', 'primaryType', 'domain', 'message'],
                  }),
                  (r.TypedDataUtils = {
                    encodeData: h,
                    encodeType: g,
                    findTypeDependencies: y,
                    hashStruct: w,
                    hashType: k,
                    sanitizeData: b,
                    eip712Hash: function (e, t) {
                      d(t, [l.V3, l.V4]);
                      const r = b(e),
                        s = [(0, a.hexToBytes)('1901')];
                      return (
                        s.push(_(e, t)),
                        'EIP712Domain' !== r.primaryType &&
                          s.push(w(r.primaryType, r.message, r.types, t)),
                        (0, n.arrToBufArr)((0, c.keccak256)((0, a.concatBytes)(s)))
                      );
                    },
                    eip712DomainHash: _,
                  }),
                  (r.typedSignatureHash = function (e) {
                    const t = T(e);
                    return (0, a.bytesToHex)(t);
                  }),
                  (r.signTypedData = function ({ privateKey: e, data: t, version: s }) {
                    if ((d(s), (0, u.isNullish)(t))) throw new Error('Missing data parameter');
                    if ((0, u.isNullish)(e)) throw new Error('Missing private key parameter');
                    const i = s === l.V1 ? T(t) : r.TypedDataUtils.eip712Hash(t, s),
                      o = (0, n.ecsign)(i, e);
                    return (0, u.concatSig)(
                      (0, n.arrToBufArr)((0, a.bigIntToBytes)(o.v)),
                      o.r,
                      o.s
                    );
                  }),
                  (r.recoverTypedSignature = function ({ data: e, signature: t, version: s }) {
                    if ((d(s), (0, u.isNullish)(e))) throw new Error('Missing data parameter');
                    if ((0, u.isNullish)(t)) throw new Error('Missing signature parameter');
                    const i = s === l.V1 ? T(e) : r.TypedDataUtils.eip712Hash(e, s),
                      o = (0, u.recoverPublicKey)(i, t),
                      c = (0, n.publicToAddress)(o);
                    return (0, a.bytesToHex)(c);
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js',
      },
    ],
    [
      2314,
      { '@ethereumjs/util': 2212, '@metamask/utils': 2325, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.normalize =
                        r.recoverPublicKey =
                        r.concatSig =
                        r.legacyToBuffer =
                        r.isNullish =
                        r.padWithZeroes =
                          void 0);
                    const n = e('@ethereumjs/util'),
                      s = e('@metamask/utils');
                    function i(e, t) {
                      if ('' !== e && !/^[a-f0-9]+$/iu.test(e))
                        throw new Error(`Expected an unprefixed hex string. Received: ${e}`);
                      if (t < 0)
                        throw new Error(
                          `Expected a non-negative integer target length. Received: ${t}`
                        );
                      return String.prototype.padStart.call(e, t, '0');
                    }
                    function o(e) {
                      return null === e || e === undefined;
                    }
                    (r.padWithZeroes = i),
                      (r.isNullish = o),
                      (r.legacyToBuffer = function (e) {
                        return 'string' != typeof e || (0, n.isHexString)(e)
                          ? (0, n.toBuffer)(e)
                          : t.from(e);
                      }),
                      (r.concatSig = function (e, t, r) {
                        const o = (0, n.fromSigned)(t),
                          a = (0, n.fromSigned)(r),
                          c = (0, n.bufferToInt)(e),
                          u = i((0, n.toUnsigned)(o).toString('hex'), 64),
                          l = i((0, n.toUnsigned)(a).toString('hex'), 64),
                          d = (0, s.remove0x)((0, s.numberToHex)(c));
                        return (0, s.add0x)(u.concat(l, d));
                      }),
                      (r.recoverPublicKey = function (e, t) {
                        const r = (0, n.fromRpcSig)(t);
                        return (0, n.ecrecover)(e, r.v, r.r, r.s);
                      }),
                      (r.normalize = function (e) {
                        if (o(e)) return undefined;
                        if ('number' == typeof e) {
                          if (e < 0) return '0x';
                          const t = (0, s.numberToBytes)(e);
                          e = (0, s.bytesToHex)(t);
                        }
                        if ('string' != typeof e) {
                          let t = 'eth-sig-util.normalize() requires hex string or integer input.';
                          throw ((t += ` received ${typeof e}: ${e}`), new Error(t));
                        }
                        return (0, s.add0x)(e.toLowerCase());
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/dist/utils.js',
      },
    ],
    [
      2315,
      { './errors.cjs': 2323, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.assertExhaustive = r.assertStruct = r.assert = r.AssertionError = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./errors.cjs');
                function i(e, t) {
                  return (
                    (r = e),
                    Boolean('string' == typeof r?.prototype?.constructor?.name)
                      ? new e({ message: t })
                      : e({ message: t })
                  );
                  var r;
                }
                class o extends Error {
                  constructor(e) {
                    super(e.message), (this.code = 'ERR_ASSERTION');
                  }
                }
                (r.AssertionError = o),
                  (r.assert = function (e, t = 'Assertion failed.', r = o) {
                    if (!e) {
                      if (t instanceof Error) throw t;
                      throw i(r, t);
                    }
                  }),
                  (r.assertStruct = function (e, t, r = 'Assertion failed', a = o) {
                    try {
                      (0, n.assert)(e, t);
                    } catch (e) {
                      throw i(
                        a,
                        `${r}: ${(function (e) {
                          return (0, s.getErrorMessage)(e).replace(/\.$/u, '');
                        })(e)}.`
                      );
                    }
                  }),
                  (r.assertExhaustive = function (e) {
                    throw new Error(
                      'Invalid branch reached. Should be detected during compilation.'
                    );
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/assert.cjs',
      },
    ],
    [
      2316,
      { './assert.cjs': 2315, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.base64 = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs');
                r.base64 = (e, t = {}) => {
                  const r = t.paddingRequired ?? !1,
                    i = t.characterSet ?? 'base64';
                  let o, a;
                  return (
                    'base64' === i
                      ? (o = String.raw`[A-Za-z0-9+\/]`)
                      : ((0, s.assert)('base64url' === i), (o = String.raw`[-_A-Za-z0-9]`)),
                    (a = r
                      ? new RegExp(`^(?:${o}{4})*(?:${o}{3}=|${o}{2}==)?$`, 'u')
                      : new RegExp(`^(?:${o}{4})*(?:${o}{2,3}|${o}{3}=|${o}{2}==)?$`, 'u')),
                    (0, n.pattern)(e, a)
                  );
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/base64.cjs',
      },
    ],
    [
      2317,
      { './assert.cjs': 2315, './hex.cjs': 2324, '@scure/base': 2337, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.createDataView =
                        r.concatBytes =
                        r.valueToBytes =
                        r.base64ToBytes =
                        r.stringToBytes =
                        r.numberToBytes =
                        r.signedBigIntToBytes =
                        r.bigIntToBytes =
                        r.hexToBytes =
                        r.bytesToBase64 =
                        r.bytesToString =
                        r.bytesToNumber =
                        r.bytesToSignedBigInt =
                        r.bytesToBigInt =
                        r.bytesToHex =
                        r.assertIsBytes =
                        r.isBytes =
                          void 0);
                    const n = e('@scure/base'),
                      s = e('./assert.cjs'),
                      i = e('./hex.cjs'),
                      o = 48,
                      a = 58,
                      c = 87;
                    const u = (function () {
                      const e = [];
                      return () => {
                        if (0 === e.length)
                          for (let t = 0; t < 256; t++) e.push(t.toString(16).padStart(2, '0'));
                        return e;
                      };
                    })();
                    function l(e) {
                      return e instanceof Uint8Array;
                    }
                    function d(e) {
                      (0, s.assert)(l(e), 'Value must be a Uint8Array.');
                    }
                    function m(e) {
                      if ((d(e), 0 === e.length)) return '0x';
                      const t = u(),
                        r = new Array(e.length);
                      for (let n = 0; n < e.length; n++) r[n] = t[e[n]];
                      return (0, i.add0x)(r.join(''));
                    }
                    function f(e) {
                      d(e);
                      const t = m(e);
                      return BigInt(t);
                    }
                    function p(e) {
                      if ('0x' === e?.toLowerCase?.()) return new Uint8Array();
                      (0, i.assertIsHexString)(e);
                      const t = (0, i.remove0x)(e).toLowerCase(),
                        r = t.length % 2 == 0 ? t : `0${t}`,
                        n = new Uint8Array(r.length / 2);
                      for (let e = 0; e < n.length; e++) {
                        const t = r.charCodeAt(2 * e),
                          s = r.charCodeAt(2 * e + 1),
                          i = t - (t < a ? o : c),
                          u = s - (s < a ? o : c);
                        n[e] = 16 * i + u;
                      }
                      return n;
                    }
                    function h(e) {
                      (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                        (0, s.assert)(e >= BigInt(0), 'Value must be a non-negative bigint.');
                      return p(e.toString(16));
                    }
                    function g(e) {
                      (0, s.assert)('number' == typeof e, 'Value must be a number.'),
                        (0, s.assert)(e >= 0, 'Value must be a non-negative number.'),
                        (0, s.assert)(
                          Number.isSafeInteger(e),
                          'Value is not a safe integer. Use `bigIntToBytes` instead.'
                        );
                      return p(e.toString(16));
                    }
                    function y(e) {
                      return (
                        (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                        new TextEncoder().encode(e)
                      );
                    }
                    function w(e) {
                      if ('bigint' == typeof e) return h(e);
                      if ('number' == typeof e) return g(e);
                      if ('string' == typeof e) return e.startsWith('0x') ? p(e) : y(e);
                      if (l(e)) return e;
                      throw new TypeError(`Unsupported value type: "${typeof e}".`);
                    }
                    (r.isBytes = l),
                      (r.assertIsBytes = d),
                      (r.bytesToHex = m),
                      (r.bytesToBigInt = f),
                      (r.bytesToSignedBigInt = function (e) {
                        d(e);
                        let t = BigInt(0);
                        for (const r of e) t = (t << BigInt(8)) + BigInt(r);
                        return BigInt.asIntN(8 * e.length, t);
                      }),
                      (r.bytesToNumber = function (e) {
                        d(e);
                        const t = f(e);
                        return (
                          (0, s.assert)(
                            t <= BigInt(Number.MAX_SAFE_INTEGER),
                            'Number is not a safe integer. Use `bytesToBigInt` instead.'
                          ),
                          Number(t)
                        );
                      }),
                      (r.bytesToString = function (e) {
                        return d(e), new TextDecoder().decode(e);
                      }),
                      (r.bytesToBase64 = function (e) {
                        return d(e), n.base64.encode(e);
                      }),
                      (r.hexToBytes = p),
                      (r.bigIntToBytes = h),
                      (r.signedBigIntToBytes = function (e, t) {
                        (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                          (0, s.assert)('number' == typeof t, 'Byte length must be a number.'),
                          (0, s.assert)(t > 0, 'Byte length must be greater than 0.'),
                          (0, s.assert)(
                            (function (e, t) {
                              (0, s.assert)(t > 0);
                              const r = e >> BigInt(31);
                              return !(((~e & r) + (e & ~r)) >> BigInt(8 * t - 1));
                            })(e, t),
                            'Byte length is too small to represent the given value.'
                          );
                        let r = e;
                        const n = new Uint8Array(t);
                        for (let e = 0; e < n.length; e++)
                          (n[e] = Number(BigInt.asUintN(8, r))), (r >>= BigInt(8));
                        return n.reverse();
                      }),
                      (r.numberToBytes = g),
                      (r.stringToBytes = y),
                      (r.base64ToBytes = function (e) {
                        return (
                          (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                          n.base64.decode(e)
                        );
                      }),
                      (r.valueToBytes = w),
                      (r.concatBytes = function (e) {
                        const t = new Array(e.length);
                        let r = 0;
                        for (let n = 0; n < e.length; n++) {
                          const s = w(e[n]);
                          (t[n] = s), (r += s.length);
                        }
                        const n = new Uint8Array(r);
                        for (let e = 0, r = 0; e < t.length; e++)
                          n.set(t[e], r), (r += t[e].length);
                        return n;
                      }),
                      (r.createDataView = function (e) {
                        if (void 0 !== t && e instanceof t) {
                          const t = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                          return new DataView(t);
                        }
                        return new DataView(e.buffer, e.byteOffset, e.byteLength);
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/bytes.cjs',
      },
    ],
    [
      2318,
      { './superstruct.cjs': 2333, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toCaipAssetId =
                    r.toCaipAssetType =
                    r.toCaipAccountId =
                    r.toCaipChainId =
                    r.parseCaipAssetId =
                    r.parseCaipAssetType =
                    r.parseCaipAccountId =
                    r.parseCaipChainId =
                    r.isCaipAssetId =
                    r.isCaipAssetType =
                    r.isCaipTokenId =
                    r.isCaipAssetReference =
                    r.isCaipAssetNamespace =
                    r.isCaipAccountAddress =
                    r.isCaipAccountId =
                    r.isCaipReference =
                    r.isCaipNamespace =
                    r.isCaipChainId =
                    r.KnownCaipNamespace =
                    r.CaipAssetTypeOrIdStruct =
                    r.CaipAssetIdStruct =
                    r.CaipAssetTypeStruct =
                    r.CaipTokenIdStruct =
                    r.CaipAssetReferenceStruct =
                    r.CaipAssetNamespaceStruct =
                    r.CaipAccountAddressStruct =
                    r.CaipAccountIdStruct =
                    r.CaipReferenceStruct =
                    r.CaipNamespaceStruct =
                    r.CaipChainIdStruct =
                    r.CAIP_ASSET_ID_REGEX =
                    r.CAIP_ASSET_TYPE_REGEX =
                    r.CAIP_TOKEN_ID_REGEX =
                    r.CAIP_ASSET_REFERENCE_REGEX =
                    r.CAIP_ASSET_NAMESPACE_REGEX =
                    r.CAIP_ACCOUNT_ADDRESS_REGEX =
                    r.CAIP_ACCOUNT_ID_REGEX =
                    r.CAIP_REFERENCE_REGEX =
                    r.CAIP_NAMESPACE_REGEX =
                    r.CAIP_CHAIN_ID_REGEX =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./superstruct.cjs');
                (r.CAIP_CHAIN_ID_REGEX =
                  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u),
                  (r.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u),
                  (r.CAIP_ACCOUNT_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_ASSET_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_ASSET_REFERENCE_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_TOKEN_ID_REGEX = /^[-.%a-zA-Z0-9]{1,78}$/u),
                  (r.CAIP_ASSET_TYPE_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ASSET_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$/u);
                function i(e) {
                  return (0, n.is)(e, r.CaipNamespaceStruct);
                }
                function o(e) {
                  return (0, n.is)(e, r.CaipReferenceStruct);
                }
                function a(e) {
                  return (0, n.is)(e, r.CaipAccountAddressStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.CaipAssetNamespaceStruct);
                }
                function u(e) {
                  return (0, n.is)(e, r.CaipAssetReferenceStruct);
                }
                function l(e) {
                  return (0, n.is)(e, r.CaipTokenIdStruct);
                }
                (r.CaipChainIdStruct = (0, s.definePattern)('CaipChainId', r.CAIP_CHAIN_ID_REGEX)),
                  (r.CaipNamespaceStruct = (0, s.definePattern)(
                    'CaipNamespace',
                    r.CAIP_NAMESPACE_REGEX
                  )),
                  (r.CaipReferenceStruct = (0, s.definePattern)(
                    'CaipReference',
                    r.CAIP_REFERENCE_REGEX
                  )),
                  (r.CaipAccountIdStruct = (0, s.definePattern)(
                    'CaipAccountId',
                    r.CAIP_ACCOUNT_ID_REGEX
                  )),
                  (r.CaipAccountAddressStruct = (0, s.definePattern)(
                    'CaipAccountAddress',
                    r.CAIP_ACCOUNT_ADDRESS_REGEX
                  )),
                  (r.CaipAssetNamespaceStruct = (0, s.definePattern)(
                    'CaipAssetNamespace',
                    r.CAIP_ASSET_NAMESPACE_REGEX
                  )),
                  (r.CaipAssetReferenceStruct = (0, s.definePattern)(
                    'CaipAssetReference',
                    r.CAIP_ASSET_REFERENCE_REGEX
                  )),
                  (r.CaipTokenIdStruct = (0, s.definePattern)(
                    'CaipTokenId',
                    r.CAIP_TOKEN_ID_REGEX
                  )),
                  (r.CaipAssetTypeStruct = (0, s.definePattern)(
                    'CaipAssetType',
                    r.CAIP_ASSET_TYPE_REGEX
                  )),
                  (r.CaipAssetIdStruct = (0, s.definePattern)(
                    'CaipAssetId',
                    r.CAIP_ASSET_ID_REGEX
                  )),
                  (r.CaipAssetTypeOrIdStruct = (0, s.definePattern)(
                    'CaipAssetTypeOrId',
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})(\/(?<tokenId>[-.%a-zA-Z0-9]{1,78}))?$/u
                  )),
                  (function (e) {
                    (e.Bip122 = 'bip122'),
                      (e.Solana = 'solana'),
                      (e.Eip155 = 'eip155'),
                      (e.Wallet = 'wallet');
                  })(r.KnownCaipNamespace || (r.KnownCaipNamespace = {})),
                  (r.isCaipChainId = function (e) {
                    return (0, n.is)(e, r.CaipChainIdStruct);
                  }),
                  (r.isCaipNamespace = i),
                  (r.isCaipReference = o),
                  (r.isCaipAccountId = function (e) {
                    return (0, n.is)(e, r.CaipAccountIdStruct);
                  }),
                  (r.isCaipAccountAddress = a),
                  (r.isCaipAssetNamespace = c),
                  (r.isCaipAssetReference = u),
                  (r.isCaipTokenId = l),
                  (r.isCaipAssetType = function (e) {
                    return (0, n.is)(e, r.CaipAssetTypeStruct);
                  }),
                  (r.isCaipAssetId = function (e) {
                    return (0, n.is)(e, r.CaipAssetIdStruct);
                  }),
                  (r.parseCaipChainId = function (e) {
                    const t = r.CAIP_CHAIN_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP chain ID.');
                    return { namespace: t.groups.namespace, reference: t.groups.reference };
                  }),
                  (r.parseCaipAccountId = function (e) {
                    const t = r.CAIP_ACCOUNT_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP account ID.');
                    return {
                      address: t.groups.accountAddress,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.parseCaipAssetType = function (e) {
                    const t = r.CAIP_ASSET_TYPE_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP asset type.');
                    return {
                      assetNamespace: t.groups.assetNamespace,
                      assetReference: t.groups.assetReference,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.parseCaipAssetId = function (e) {
                    const t = r.CAIP_ASSET_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP asset ID.');
                    return {
                      assetNamespace: t.groups.assetNamespace,
                      assetReference: t.groups.assetReference,
                      tokenId: t.groups.tokenId,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.toCaipChainId = function (e, t) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}`;
                  }),
                  (r.toCaipAccountId = function (e, t, n) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!a(n))
                      throw new Error(
                        `Invalid "accountAddress", must match: ${r.CAIP_ACCOUNT_ADDRESS_REGEX.toString()}`
                      );
                    return `${e}:${t}:${n}`;
                  }),
                  (r.toCaipAssetType = function (e, t, n, s) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!c(n))
                      throw new Error(
                        `Invalid "assetNamespace", must match: ${r.CAIP_ASSET_NAMESPACE_REGEX.toString()}`
                      );
                    if (!u(s))
                      throw new Error(
                        `Invalid "assetReference", must match: ${r.CAIP_ASSET_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}/${n}:${s}`;
                  }),
                  (r.toCaipAssetId = function (e, t, n, s, a) {
                    if (!i(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!o(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    if (!c(n))
                      throw new Error(
                        `Invalid "assetNamespace", must match: ${r.CAIP_ASSET_NAMESPACE_REGEX.toString()}`
                      );
                    if (!u(s))
                      throw new Error(
                        `Invalid "assetReference", must match: ${r.CAIP_ASSET_REFERENCE_REGEX.toString()}`
                      );
                    if (!l(a))
                      throw new Error(
                        `Invalid "tokenId", must match: ${r.CAIP_TOKEN_ID_REGEX.toString()}`
                      );
                    return `${e}:${t}/${n}:${s}/${a}`;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/caip-types.cjs',
      },
    ],
    [
      2319,
      { './base64.cjs': 2316, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.ChecksumStruct = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./base64.cjs');
                r.ChecksumStruct = (0, n.size)(
                  (0, s.base64)((0, n.string)(), { paddingRequired: !0 }),
                  44,
                  44
                );
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/checksum.cjs',
      },
    ],
    [
      2320,
      {
        './assert.cjs': 2315,
        './bytes.cjs': 2317,
        './hex.cjs': 2324,
        '@metamask/superstruct': 2913,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createHex = r.createBytes = r.createBigInt = r.createNumber = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./bytes.cjs'),
                  o = e('./hex.cjs'),
                  a = (0, n.union)([
                    (0, n.number)(),
                    (0, n.bigint)(),
                    (0, n.string)(),
                    o.StrictHexStruct,
                  ]),
                  c = (0, n.coerce)((0, n.number)(), a, Number),
                  u = (0, n.coerce)((0, n.bigint)(), a, BigInt),
                  l =
                    ((0, n.union)([o.StrictHexStruct, (0, n.instance)(Uint8Array)]),
                    (0, n.coerce)(
                      (0, n.instance)(Uint8Array),
                      (0, n.union)([o.StrictHexStruct]),
                      i.hexToBytes
                    )),
                  d = (0, n.coerce)(o.StrictHexStruct, (0, n.instance)(Uint8Array), i.bytesToHex);
                (r.createNumber = function (e) {
                  try {
                    const t = (0, n.create)(e, c);
                    return (
                      (0, s.assert)(
                        Number.isFinite(t),
                        `Expected a number-like value, got "${e}".`
                      ),
                      t
                    );
                  } catch (t) {
                    if (t instanceof n.StructError)
                      throw new Error(`Expected a number-like value, got "${e}".`);
                    throw t;
                  }
                }),
                  (r.createBigInt = function (e) {
                    try {
                      return (0, n.create)(e, u);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a number-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createBytes = function (e) {
                    if ('string' == typeof e && '0x' === e.toLowerCase()) return new Uint8Array();
                    try {
                      return (0, n.create)(e, l);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createHex = function (e) {
                    if (
                      (e instanceof Uint8Array && 0 === e.length) ||
                      ('string' == typeof e && '0x' === e.toLowerCase())
                    )
                      return '0x';
                    try {
                      return (0, n.create)(e, d);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/coercers.cjs',
      },
    ],
    [
      2321,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  o =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.FrozenSet = r.FrozenMap = void 0);
                class a {
                  get size() {
                    return i(this, n, 'f').size;
                  }
                  [((n = new WeakMap()), Symbol.iterator)]() {
                    return i(this, n, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    n.set(this, void 0), o(this, n, new Map(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, n, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, n, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  get(e) {
                    return i(this, n, 'f').get(e);
                  }
                  has(e) {
                    return i(this, n, 'f').has(e);
                  }
                  keys() {
                    return i(this, n, 'f').keys();
                  }
                  values() {
                    return i(this, n, 'f').values();
                  }
                  toString() {
                    return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[...this.entries()].map(([e, t]) => `${String(e)} => ${String(t)}`).join(', ')} ` : ''}}`;
                  }
                }
                r.FrozenMap = a;
                class c {
                  get size() {
                    return i(this, s, 'f').size;
                  }
                  [((s = new WeakMap()), Symbol.iterator)]() {
                    return i(this, s, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    s.set(this, void 0), o(this, s, new Set(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, s, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, s, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  has(e) {
                    return i(this, s, 'f').has(e);
                  }
                  keys() {
                    return i(this, s, 'f').keys();
                  }
                  values() {
                    return i(this, s, 'f').values();
                  }
                  toString() {
                    return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[...this.values()].map(e => String(e)).join(', ')} ` : ''}}`;
                  }
                }
                (r.FrozenSet = c),
                  Object.freeze(a),
                  Object.freeze(a.prototype),
                  Object.freeze(c),
                  Object.freeze(c.prototype);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/collections.cjs',
      },
    ],
    [
      2322,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/encryption-types.cjs',
      },
    ],
    [
      2323,
      { './misc.cjs': 2329, 'pony-cause': 5071 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.wrapError =
                    r.getErrorMessage =
                    r.isErrorWithStack =
                    r.isErrorWithMessage =
                    r.isErrorWithCode =
                      void 0);
                const n = e('pony-cause'),
                  s = e('./misc.cjs');
                function i(e) {
                  return 'object' == typeof e && null !== e && 'code' in e;
                }
                function o(e) {
                  return 'object' == typeof e && null !== e && 'message' in e;
                }
                (r.isErrorWithCode = i),
                  (r.isErrorWithMessage = o),
                  (r.isErrorWithStack = function (e) {
                    return 'object' == typeof e && null !== e && 'stack' in e;
                  }),
                  (r.getErrorMessage = function (e) {
                    return o(e) && 'string' == typeof e.message
                      ? e.message
                      : (0, s.isNullOrUndefined)(e)
                        ? ''
                        : String(e);
                  }),
                  (r.wrapError = function (e, t) {
                    if (
                      (r = e) instanceof Error ||
                      ((0, s.isObject)(r) && 'Error' === r.constructor.name)
                    ) {
                      let r;
                      return (
                        (r =
                          2 === Error.length
                            ? new Error(t, { cause: e })
                            : new n.ErrorWithCause(t, { cause: e })),
                        i(e) && (r.code = e.code),
                        r
                      );
                    }
                    var r;
                    return t.length > 0 ? new Error(`${String(e)}: ${t}`) : new Error(String(e));
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/errors.cjs',
      },
    ],
    [
      2324,
      {
        './assert.cjs': 2315,
        './bytes.cjs': 2317,
        '@metamask/superstruct': 2913,
        '@noble/hashes/sha3': 3055,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.remove0x =
                    r.add0x =
                    r.isValidChecksumAddress =
                    r.getChecksumAddress =
                    r.isValidHexAddress =
                    r.assertIsStrictHexString =
                    r.assertIsHexString =
                    r.isStrictHexString =
                    r.isHexString =
                    r.HexChecksumAddressStruct =
                    r.HexAddressStruct =
                    r.StrictHexStruct =
                    r.HexStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@noble/hashes/sha3'),
                  i = e('./assert.cjs'),
                  o = e('./bytes.cjs');
                function a(e) {
                  return (0, n.is)(e, r.HexStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.StrictHexStruct);
                }
                function u(e) {
                  (0, i.assert)((0, n.is)(e, r.HexChecksumAddressStruct), 'Invalid hex address.');
                  const t = d(e.toLowerCase()),
                    a = d((0, o.bytesToHex)((0, s.keccak_256)(t)));
                  return `0x${t
                    .split('')
                    .map((e, t) => {
                      const r = a[t];
                      return (
                        (0, i.assert)((0, n.is)(r, (0, n.string)()), 'Hash shorter than address.'),
                        parseInt(r, 16) > 7 ? e.toUpperCase() : e
                      );
                    })
                    .join('')}`;
                }
                function l(e) {
                  return !!(0, n.is)(e, r.HexChecksumAddressStruct) && u(e) === e;
                }
                function d(e) {
                  return e.startsWith('0x') || e.startsWith('0X') ? e.substring(2) : e;
                }
                (r.HexStruct = (0, n.pattern)((0, n.string)(), /^(?:0x)?[0-9a-f]+$/iu)),
                  (r.StrictHexStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]+$/iu)),
                  (r.HexAddressStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]{40}$/u)),
                  (r.HexChecksumAddressStruct = (0, n.pattern)(
                    (0, n.string)(),
                    /^0x[0-9a-fA-F]{40}$/u
                  )),
                  (r.isHexString = a),
                  (r.isStrictHexString = c),
                  (r.assertIsHexString = function (e) {
                    (0, i.assert)(a(e), 'Value must be a hexadecimal string.');
                  }),
                  (r.assertIsStrictHexString = function (e) {
                    (0, i.assert)(c(e), 'Value must be a hexadecimal string, starting with "0x".');
                  }),
                  (r.isValidHexAddress = function (e) {
                    return (0, n.is)(e, r.HexAddressStruct) || l(e);
                  }),
                  (r.getChecksumAddress = u),
                  (r.isValidChecksumAddress = l),
                  (r.add0x = function (e) {
                    return e.startsWith('0x')
                      ? e
                      : e.startsWith('0X')
                        ? `0x${e.substring(2)}`
                        : `0x${e}`;
                  }),
                  (r.remove0x = d);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/hex.cjs',
      },
    ],
    [
      2325,
      {
        './assert.cjs': 2315,
        './base64.cjs': 2316,
        './bytes.cjs': 2317,
        './caip-types.cjs': 2318,
        './checksum.cjs': 2319,
        './coercers.cjs': 2320,
        './collections.cjs': 2321,
        './encryption-types.cjs': 2322,
        './errors.cjs': 2323,
        './hex.cjs': 2324,
        './json.cjs': 2326,
        './keyring.cjs': 2327,
        './logging.cjs': 2328,
        './misc.cjs': 2329,
        './number.cjs': 2330,
        './opaque.cjs': 2331,
        './promise.cjs': 2332,
        './superstruct.cjs': 2333,
        './time.cjs': 2334,
        './transaction-types.cjs': 2335,
        './versions.cjs': 2336,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./assert.cjs'), r),
                  s(e('./base64.cjs'), r),
                  s(e('./bytes.cjs'), r),
                  s(e('./caip-types.cjs'), r),
                  s(e('./checksum.cjs'), r),
                  s(e('./coercers.cjs'), r),
                  s(e('./collections.cjs'), r),
                  s(e('./encryption-types.cjs'), r),
                  s(e('./errors.cjs'), r),
                  s(e('./hex.cjs'), r),
                  s(e('./json.cjs'), r),
                  s(e('./keyring.cjs'), r),
                  s(e('./logging.cjs'), r),
                  s(e('./misc.cjs'), r),
                  s(e('./number.cjs'), r),
                  s(e('./opaque.cjs'), r),
                  s(e('./promise.cjs'), r),
                  s(e('./superstruct.cjs'), r),
                  s(e('./time.cjs'), r),
                  s(e('./transaction-types.cjs'), r),
                  s(e('./versions.cjs'), r);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/index.cjs',
      },
    ],
    [
      2326,
      { './assert.cjs': 2315, './misc.cjs': 2329, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getJsonRpcIdValidator =
                    r.assertIsJsonRpcError =
                    r.isJsonRpcError =
                    r.assertIsJsonRpcFailure =
                    r.isJsonRpcFailure =
                    r.assertIsJsonRpcSuccess =
                    r.isJsonRpcSuccess =
                    r.assertIsJsonRpcResponse =
                    r.isJsonRpcResponse =
                    r.assertIsPendingJsonRpcResponse =
                    r.isPendingJsonRpcResponse =
                    r.JsonRpcResponseStruct =
                    r.JsonRpcFailureStruct =
                    r.JsonRpcSuccessStruct =
                    r.PendingJsonRpcResponseStruct =
                    r.assertIsJsonRpcRequest =
                    r.isJsonRpcRequest =
                    r.assertIsJsonRpcNotification =
                    r.isJsonRpcNotification =
                    r.JsonRpcNotificationStruct =
                    r.JsonRpcRequestStruct =
                    r.JsonRpcParamsStruct =
                    r.JsonRpcErrorStruct =
                    r.JsonRpcIdStruct =
                    r.JsonRpcVersionStruct =
                    r.jsonrpc2 =
                    r.getJsonSize =
                    r.getSafeJson =
                    r.isValidJson =
                    r.JsonStruct =
                    r.UnsafeJsonStruct =
                    r.exactOptional =
                    r.object =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./misc.cjs');
                function o({ path: e, branch: t }) {
                  const r = e[e.length - 1];
                  return (0, i.hasProperty)(t[t.length - 2], r);
                }
                function a(e) {
                  return new n.Struct({
                    ...e,
                    type: `optional ${e.type}`,
                    validator: (t, r) => !o(r) || e.validator(t, r),
                    refiner: (t, r) => !o(r) || e.refiner(t, r),
                  });
                }
                function c(e) {
                  if (null === e || 'boolean' == typeof e || 'string' == typeof e) return !0;
                  if ('number' == typeof e && Number.isFinite(e)) return !0;
                  if ('object' == typeof e) {
                    let t = !0;
                    if (Array.isArray(e)) {
                      for (let r = 0; r < e.length; r++)
                        if (!c(e[r])) {
                          t = !1;
                          break;
                        }
                      return t;
                    }
                    const r = Object.entries(e);
                    for (let e = 0; e < r.length; e++)
                      if ('string' != typeof r[e][0] || !c(r[e][1])) {
                        t = !1;
                        break;
                      }
                    return t;
                  }
                  return !1;
                }
                function u(e) {
                  return (0, n.create)(e, r.JsonStruct);
                }
                (r.object = e => (0, n.object)(e)),
                  (r.exactOptional = a),
                  (r.UnsafeJsonStruct = (0, n.define)('JSON', e => c(e))),
                  (r.JsonStruct = (0, n.coerce)(
                    r.UnsafeJsonStruct,
                    (0, n.refine)((0, n.any)(), 'JSON', e => (0, n.is)(e, r.UnsafeJsonStruct)),
                    e =>
                      JSON.parse(
                        JSON.stringify(e, (e, t) =>
                          '__proto__' === e || 'constructor' === e ? undefined : t
                        )
                      )
                  )),
                  (r.isValidJson = function (e) {
                    try {
                      return u(e), !0;
                    } catch {
                      return !1;
                    }
                  }),
                  (r.getSafeJson = u),
                  (r.getJsonSize = function (e) {
                    (0, s.assertStruct)(e, r.JsonStruct, 'Invalid JSON value');
                    const t = JSON.stringify(e);
                    return new TextEncoder().encode(t).byteLength;
                  }),
                  (r.jsonrpc2 = '2.0'),
                  (r.JsonRpcVersionStruct = (0, n.literal)(r.jsonrpc2)),
                  (r.JsonRpcIdStruct = (0, n.nullable)(
                    (0, n.union)([(0, n.number)(), (0, n.string)()])
                  )),
                  (r.JsonRpcErrorStruct = (0, r.object)({
                    code: (0, n.integer)(),
                    message: (0, n.string)(),
                    data: a(r.JsonStruct),
                    stack: a((0, n.string)()),
                  })),
                  (r.JsonRpcParamsStruct = (0, n.union)([
                    (0, n.record)((0, n.string)(), r.JsonStruct),
                    (0, n.array)(r.JsonStruct),
                  ])),
                  (r.JsonRpcRequestStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.JsonRpcNotificationStruct = (0, r.object)({
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.isJsonRpcNotification = function (e) {
                    return (0, n.is)(e, r.JsonRpcNotificationStruct);
                  }),
                  (r.assertIsJsonRpcNotification = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcNotificationStruct,
                      'Invalid JSON-RPC notification',
                      t
                    );
                  }),
                  (r.isJsonRpcRequest = function (e) {
                    return (0, n.is)(e, r.JsonRpcRequestStruct);
                  }),
                  (r.assertIsJsonRpcRequest = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcRequestStruct, 'Invalid JSON-RPC request', t);
                  }),
                  (r.PendingJsonRpcResponseStruct = (0, n.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: (0, n.optional)((0, n.unknown)()),
                    error: (0, n.optional)(r.JsonRpcErrorStruct),
                  })),
                  (r.JsonRpcSuccessStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: r.JsonStruct,
                  })),
                  (r.JsonRpcFailureStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    error: r.JsonRpcErrorStruct,
                  })),
                  (r.JsonRpcResponseStruct = (0, n.union)([
                    r.JsonRpcSuccessStruct,
                    r.JsonRpcFailureStruct,
                  ])),
                  (r.isPendingJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.PendingJsonRpcResponseStruct);
                  }),
                  (r.assertIsPendingJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.PendingJsonRpcResponseStruct,
                      'Invalid pending JSON-RPC response',
                      t
                    );
                  }),
                  (r.isJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.JsonRpcResponseStruct);
                  }),
                  (r.assertIsJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcResponseStruct, 'Invalid JSON-RPC response', t);
                  }),
                  (r.isJsonRpcSuccess = function (e) {
                    return (0, n.is)(e, r.JsonRpcSuccessStruct);
                  }),
                  (r.assertIsJsonRpcSuccess = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcSuccessStruct,
                      'Invalid JSON-RPC success response',
                      t
                    );
                  }),
                  (r.isJsonRpcFailure = function (e) {
                    return (0, n.is)(e, r.JsonRpcFailureStruct);
                  }),
                  (r.assertIsJsonRpcFailure = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcFailureStruct,
                      'Invalid JSON-RPC failure response',
                      t
                    );
                  }),
                  (r.isJsonRpcError = function (e) {
                    return (0, n.is)(e, r.JsonRpcErrorStruct);
                  }),
                  (r.assertIsJsonRpcError = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcErrorStruct, 'Invalid JSON-RPC error', t);
                  }),
                  (r.getJsonRpcIdValidator = function (e) {
                    const {
                      permitEmptyString: t,
                      permitFractions: r,
                      permitNull: n,
                    } = { permitEmptyString: !0, permitFractions: !1, permitNull: !0, ...e };
                    return e =>
                      Boolean(
                        ('number' == typeof e && (r || Number.isInteger(e))) ||
                          ('string' == typeof e && (t || e.length > 0)) ||
                          (n && null === e)
                      );
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/json.cjs',
      },
    ],
    [
      2327,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/keyring.cjs',
      },
    ],
    [
      2328,
      { debug: 4292 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.createProjectLogger = void 0);
                const s = (0, n(e('debug')).default)('metamask');
                (r.createProjectLogger = function (e) {
                  return s.extend(e);
                }),
                  (r.createModuleLogger = function (e, t) {
                    return e.extend(t);
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/logging.cjs',
      },
    ],
    [
      2329,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.calculateNumberSize =
                    r.calculateStringSize =
                    r.isASCII =
                    r.isPlainObject =
                    r.ESCAPE_CHARACTERS_REGEXP =
                    r.JsonSize =
                    r.getKnownPropertyNames =
                    r.hasProperty =
                    r.isObject =
                    r.isNullOrUndefined =
                    r.isNonEmptyArray =
                      void 0),
                  (r.isNonEmptyArray = function (e) {
                    return Array.isArray(e) && e.length > 0;
                  }),
                  (r.isNullOrUndefined = function (e) {
                    return null === e || e === undefined;
                  }),
                  (r.isObject = function (e) {
                    return Boolean(e) && 'object' == typeof e && !Array.isArray(e);
                  });
                function n(e) {
                  return e.charCodeAt(0) <= 127;
                }
                (r.hasProperty = (e, t) => Object.hasOwnProperty.call(e, t)),
                  (r.getKnownPropertyNames = function (e) {
                    return Object.getOwnPropertyNames(e);
                  }),
                  (function (e) {
                    (e[(e.Null = 4)] = 'Null'),
                      (e[(e.Comma = 1)] = 'Comma'),
                      (e[(e.Wrapper = 1)] = 'Wrapper'),
                      (e[(e.True = 4)] = 'True'),
                      (e[(e.False = 5)] = 'False'),
                      (e[(e.Quote = 1)] = 'Quote'),
                      (e[(e.Colon = 1)] = 'Colon'),
                      (e[(e.Date = 24)] = 'Date');
                  })(r.JsonSize || (r.JsonSize = {})),
                  (r.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu),
                  (r.isPlainObject = function (e) {
                    if ('object' != typeof e || null === e) return !1;
                    try {
                      let t = e;
                      for (; null !== Object.getPrototypeOf(t); ) t = Object.getPrototypeOf(t);
                      return Object.getPrototypeOf(e) === t;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (r.isASCII = n),
                  (r.calculateStringSize = function (e) {
                    return (
                      e.split('').reduce((e, t) => (n(t) ? e + 1 : e + 2), 0) +
                      (e.match(r.ESCAPE_CHARACTERS_REGEXP) ?? []).length
                    );
                  }),
                  (r.calculateNumberSize = function (e) {
                    return e.toString().length;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/misc.cjs',
      },
    ],
    [
      2330,
      { './assert.cjs': 2315, './hex.cjs': 2324 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.hexToBigInt = r.hexToNumber = r.bigIntToHex = r.numberToHex = void 0);
                const n = e('./assert.cjs'),
                  s = e('./hex.cjs');
                r.numberToHex = e => (
                  (0, n.assert)('number' == typeof e, 'Value must be a number.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative number.'),
                  (0, n.assert)(
                    Number.isSafeInteger(e),
                    'Value is not a safe integer. Use `bigIntToHex` instead.'
                  ),
                  (0, s.add0x)(e.toString(16))
                );
                r.bigIntToHex = e => (
                  (0, n.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative bigint.'),
                  (0, s.add0x)(e.toString(16))
                );
                r.hexToNumber = e => {
                  (0, s.assertIsHexString)(e);
                  const t = parseInt(e, 16);
                  return (
                    (0, n.assert)(
                      Number.isSafeInteger(t),
                      'Value is not a safe integer. Use `hexToBigInt` instead.'
                    ),
                    t
                  );
                };
                r.hexToBigInt = e => ((0, s.assertIsHexString)(e), BigInt((0, s.add0x)(e)));
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/number.cjs',
      },
    ],
    [
      2331,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/opaque.cjs',
      },
    ],
    [
      2332,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createDeferredPromise = void 0),
                  (r.createDeferredPromise = function ({
                    suppressUnhandledRejection: e = !1,
                  } = {}) {
                    let t, r;
                    const n = new Promise((e, n) => {
                      (t = e), (r = n);
                    });
                    return e && n.catch(e => {}), { promise: n, resolve: t, reject: r };
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/promise.cjs',
      },
    ],
    [
      2333,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.definePattern = void 0);
                const n = e('@metamask/superstruct');
                r.definePattern = function (e, t) {
                  return (0, n.define)(e, e => 'string' == typeof e && t.test(e));
                };
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/superstruct.cjs',
      },
    ],
    [
      2334,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.timeSince = r.inMilliseconds = r.Duration = void 0),
                  (function (e) {
                    (e[(e.Millisecond = 1)] = 'Millisecond'),
                      (e[(e.Second = 1e3)] = 'Second'),
                      (e[(e.Minute = 6e4)] = 'Minute'),
                      (e[(e.Hour = 36e5)] = 'Hour'),
                      (e[(e.Day = 864e5)] = 'Day'),
                      (e[(e.Week = 6048e5)] = 'Week'),
                      (e[(e.Year = 31536e6)] = 'Year');
                  })(r.Duration || (r.Duration = {}));
                const n = (e, t) => {
                  if (!(e => Number.isInteger(e) && e >= 0)(e))
                    throw new Error(`"${t}" must be a non-negative integer. Received: "${e}".`);
                };
                (r.inMilliseconds = function (e, t) {
                  return n(e, 'count'), e * t;
                }),
                  (r.timeSince = function (e) {
                    return n(e, 'timestamp'), Date.now() - e;
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/time.cjs',
      },
    ],
    [
      2335,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/transaction-types.cjs',
      },
    ],
    [
      2336,
      { './assert.cjs': 2315, '@metamask/superstruct': 2913, semver: 5617 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.satisfiesVersionRange =
                    r.gtRange =
                    r.gtVersion =
                    r.assertIsSemVerRange =
                    r.assertIsSemVerVersion =
                    r.isValidSemVerRange =
                    r.isValidSemVerVersion =
                    r.VersionRangeStruct =
                    r.VersionStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('semver'),
                  i = e('./assert.cjs');
                (r.VersionStruct = (0, n.refine)(
                  (0, n.string)(),
                  'Version',
                  e => null !== (0, s.valid)(e) || `Expected SemVer version, got "${e}"`
                )),
                  (r.VersionRangeStruct = (0, n.refine)(
                    (0, n.string)(),
                    'Version range',
                    e => null !== (0, s.validRange)(e) || `Expected SemVer range, got "${e}"`
                  )),
                  (r.isValidSemVerVersion = function (e) {
                    return (0, n.is)(e, r.VersionStruct);
                  }),
                  (r.isValidSemVerRange = function (e) {
                    return (0, n.is)(e, r.VersionRangeStruct);
                  }),
                  (r.assertIsSemVerVersion = function (e) {
                    (0, i.assertStruct)(e, r.VersionStruct);
                  }),
                  (r.assertIsSemVerRange = function (e) {
                    (0, i.assertStruct)(e, r.VersionRangeStruct);
                  }),
                  (r.gtVersion = function (e, t) {
                    return (0, s.gt)(e, t);
                  }),
                  (r.gtRange = function (e, t) {
                    return (0, s.gtr)(e, t);
                  }),
                  (r.satisfiesVersionRange = function (e, t) {
                    return (0, s.satisfies)(e, t, { includePrerelease: !0 });
                  });
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/dist/versions.cjs',
      },
    ],
    [
      2337,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                function n(e) {
                  return (
                    e instanceof Uint8Array ||
                    (ArrayBuffer.isView(e) && 'Uint8Array' === e.constructor.name)
                  );
                }
                function s(e, ...t) {
                  if (!n(e)) throw new Error('Uint8Array expected');
                  if (t.length > 0 && !t.includes(e.length))
                    throw new Error(
                      'Uint8Array expected of length ' + t + ', got length=' + e.length
                    );
                }
                function i(e, t) {
                  return (
                    !!Array.isArray(t) &&
                    (0 === t.length ||
                      (e
                        ? t.every(e => 'string' == typeof e)
                        : t.every(e => Number.isSafeInteger(e))))
                  );
                }
                function o(e) {
                  if ('function' != typeof e) throw new Error('function expected');
                  return !0;
                }
                function a(e, t) {
                  if ('string' != typeof t) throw new Error(`${e}: string expected`);
                  return !0;
                }
                function c(e) {
                  if (!Number.isSafeInteger(e)) throw new Error(`invalid integer: ${e}`);
                }
                function u(e) {
                  if (!Array.isArray(e)) throw new Error('array expected');
                }
                function l(e, t) {
                  if (!i(!0, t)) throw new Error(`${e}: array of strings expected`);
                }
                function d(e, t) {
                  if (!i(!1, t)) throw new Error(`${e}: array of numbers expected`);
                }
                function m(...e) {
                  const t = e => e,
                    r = (e, t) => r => e(t(r));
                  return {
                    encode: e.map(e => e.encode).reduceRight(r, t),
                    decode: e.map(e => e.decode).reduce(r, t),
                  };
                }
                function f(e) {
                  const t = 'string' == typeof e ? e.split('') : e,
                    r = t.length;
                  l('alphabet', t);
                  const n = new Map(t.map((e, t) => [e, t]));
                  return {
                    encode: n => (
                      u(n),
                      n.map(n => {
                        if (!Number.isSafeInteger(n) || n < 0 || n >= r)
                          throw new Error(
                            `alphabet.encode: digit index outside alphabet "${n}". Allowed: ${e}`
                          );
                        return t[n];
                      })
                    ),
                    decode: t => (
                      u(t),
                      t.map(t => {
                        a('alphabet.decode', t);
                        const r = n.get(t);
                        if (r === undefined)
                          throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);
                        return r;
                      })
                    ),
                  };
                }
                function p(e = '') {
                  return (
                    a('join', e),
                    {
                      encode: t => (l('join.decode', t), t.join(e)),
                      decode: t => (a('join.decode', t), t.split(e)),
                    }
                  );
                }
                function h(e, t = '=') {
                  return (
                    c(e),
                    a('padding', t),
                    {
                      encode(r) {
                        for (l('padding.encode', r); (r.length * e) % 8; ) r.push(t);
                        return r;
                      },
                      decode(r) {
                        l('padding.decode', r);
                        let n = r.length;
                        if ((n * e) % 8)
                          throw new Error(
                            'padding: invalid, string should have whole number of bytes'
                          );
                        for (; n > 0 && r[n - 1] === t; n--) {
                          if (((n - 1) * e) % 8 == 0)
                            throw new Error('padding: invalid, string has too much padding');
                        }
                        return r.slice(0, n);
                      },
                    }
                  );
                }
                function g(e) {
                  return o(e), { encode: e => e, decode: t => e(t) };
                }
                function y(e, t, r) {
                  if (t < 2)
                    throw new Error(`convertRadix: invalid from=${t}, base cannot be less than 2`);
                  if (r < 2)
                    throw new Error(`convertRadix: invalid to=${r}, base cannot be less than 2`);
                  if ((u(e), !e.length)) return [];
                  let n = 0;
                  const s = [],
                    i = Array.from(e, e => {
                      if ((c(e), e < 0 || e >= t)) throw new Error(`invalid integer: ${e}`);
                      return e;
                    }),
                    o = i.length;
                  for (;;) {
                    let e = 0,
                      a = !0;
                    for (let s = n; s < o; s++) {
                      const o = i[s],
                        c = t * e,
                        u = c + o;
                      if (!Number.isSafeInteger(u) || c / t !== e || u - o !== c)
                        throw new Error('convertRadix: carry overflow');
                      const l = u / r;
                      e = u % r;
                      const d = Math.floor(l);
                      if (((i[s] = d), !Number.isSafeInteger(d) || d * r + e !== u))
                        throw new Error('convertRadix: carry overflow');
                      a && (d ? (a = !1) : (n = s));
                    }
                    if ((s.push(e), a)) break;
                  }
                  for (let t = 0; t < e.length - 1 && 0 === e[t]; t++) s.push(0);
                  return s.reverse();
                }
                /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.bytes =
                    r.stringToBytes =
                    r.str =
                    r.bytesToString =
                    r.hex =
                    r.utf8 =
                    r.bech32m =
                    r.bech32 =
                    r.base58check =
                    r.createBase58check =
                    r.base58xmr =
                    r.base58xrp =
                    r.base58flickr =
                    r.base58 =
                    r.base64urlnopad =
                    r.base64url =
                    r.base64nopad =
                    r.base64 =
                    r.base32crockford =
                    r.base32hexnopad =
                    r.base32hex =
                    r.base32nopad =
                    r.base32 =
                    r.base16 =
                    r.utils =
                      void 0);
                const w = (e, t) => (0 === t ? e : w(t, e % t)),
                  k = (e, t) => e + (t - w(e, t)),
                  b = (() => {
                    let e = [];
                    for (let t = 0; t < 40; t++) e.push(2 ** t);
                    return e;
                  })();
                function _(e, t, r, n) {
                  if ((u(e), t <= 0 || t > 32)) throw new Error(`convertRadix2: wrong from=${t}`);
                  if (r <= 0 || r > 32) throw new Error(`convertRadix2: wrong to=${r}`);
                  if (k(t, r) > 32)
                    throw new Error(
                      `convertRadix2: carry overflow from=${t} to=${r} carryBits=${k(t, r)}`
                    );
                  let s = 0,
                    i = 0;
                  const o = b[t],
                    a = b[r] - 1,
                    l = [];
                  for (const n of e) {
                    if ((c(n), n >= o))
                      throw new Error(`convertRadix2: invalid data word=${n} from=${t}`);
                    if (((s = (s << t) | n), i + t > 32))
                      throw new Error(`convertRadix2: carry overflow pos=${i} from=${t}`);
                    for (i += t; i >= r; i -= r) l.push(((s >> (i - r)) & a) >>> 0);
                    const e = b[i];
                    if (e === undefined) throw new Error('invalid carry');
                    s &= e - 1;
                  }
                  if (((s = (s << (r - i)) & a), !n && i >= t)) throw new Error('Excess padding');
                  if (!n && s > 0) throw new Error(`Non-zero padding: ${s}`);
                  return n && i > 0 && l.push(s >>> 0), l;
                }
                function S(e) {
                  c(e);
                  return {
                    encode: t => {
                      if (!n(t)) throw new Error('radix.encode input should be Uint8Array');
                      return y(Array.from(t), 256, e);
                    },
                    decode: t => (d('radix.decode', t), Uint8Array.from(y(t, e, 256))),
                  };
                }
                function E(e, t = !1) {
                  if ((c(e), e <= 0 || e > 32))
                    throw new Error('radix2: bits should be in (0..32]');
                  if (k(8, e) > 32 || k(e, 8) > 32) throw new Error('radix2: carry overflow');
                  return {
                    encode: r => {
                      if (!n(r)) throw new Error('radix2.encode input should be Uint8Array');
                      return _(Array.from(r), 8, e, !t);
                    },
                    decode: r => (d('radix2.decode', r), Uint8Array.from(_(r, e, 8, t))),
                  };
                }
                function T(e) {
                  return (
                    o(e),
                    function (...t) {
                      try {
                        return e.apply(null, t);
                      } catch (e) {}
                    }
                  );
                }
                function v(e, t) {
                  return (
                    c(e),
                    o(t),
                    {
                      encode(r) {
                        if (!n(r)) throw new Error('checksum.encode: input should be Uint8Array');
                        const s = t(r).slice(0, e),
                          i = new Uint8Array(r.length + e);
                        return i.set(r), i.set(s, r.length), i;
                      },
                      decode(r) {
                        if (!n(r)) throw new Error('checksum.decode: input should be Uint8Array');
                        const s = r.slice(0, -e),
                          i = r.slice(-e),
                          o = t(s).slice(0, e);
                        for (let t = 0; t < e; t++)
                          if (o[t] !== i[t]) throw new Error('Invalid checksum');
                        return s;
                      },
                    }
                  );
                }
                (r.utils = {
                  alphabet: f,
                  chain: m,
                  checksum: v,
                  convertRadix: y,
                  convertRadix2: _,
                  radix: S,
                  radix2: E,
                  join: p,
                  padding: h,
                }),
                  (r.base16 = m(E(4), f('0123456789ABCDEF'), p(''))),
                  (r.base32 = m(E(5), f('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), h(5), p(''))),
                  (r.base32nopad = m(E(5), f('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), p(''))),
                  (r.base32hex = m(E(5), f('0123456789ABCDEFGHIJKLMNOPQRSTUV'), h(5), p(''))),
                  (r.base32hexnopad = m(E(5), f('0123456789ABCDEFGHIJKLMNOPQRSTUV'), p(''))),
                  (r.base32crockford = m(
                    E(5),
                    f('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),
                    p(''),
                    g(e => e.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))
                  ));
                const A = (() =>
                  'function' == typeof Uint8Array.from([]).toBase64 &&
                  'function' == typeof Uint8Array.fromBase64)();
                (r.base64 = A
                  ? {
                      encode: e => (s(e), e.toBase64()),
                      decode: e => (
                        a('base64', e), Uint8Array.fromBase64(e, { lastChunkHandling: 'strict' })
                      ),
                    }
                  : m(
                      E(6),
                      f('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
                      h(6),
                      p('')
                    )),
                  (r.base64nopad = m(
                    E(6),
                    f('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
                    p('')
                  )),
                  (r.base64url = A
                    ? {
                        encode: e => (s(e), e.toBase64({ alphabet: 'base64url' })),
                        decode: e => (
                          a('base64', e), Uint8Array.fromBase64(e, { alphabet: 'base64url' })
                        ),
                      }
                    : m(
                        E(6),
                        f('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
                        h(6),
                        p('')
                      )),
                  (r.base64urlnopad = m(
                    E(6),
                    f('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
                    p('')
                  ));
                const I = e => m(S(58), f(e), p(''));
                (r.base58 = I('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz')),
                  (r.base58flickr = I(
                    '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
                  )),
                  (r.base58xrp = I('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'));
                const C = [0, 2, 3, 5, 6, 7, 9, 10, 11];
                r.base58xmr = {
                  encode(e) {
                    let t = '';
                    for (let n = 0; n < e.length; n += 8) {
                      const s = e.subarray(n, n + 8);
                      t += r.base58.encode(s).padStart(C[s.length], '1');
                    }
                    return t;
                  },
                  decode(e) {
                    let t = [];
                    for (let n = 0; n < e.length; n += 11) {
                      const s = e.slice(n, n + 11),
                        i = C.indexOf(s.length),
                        o = r.base58.decode(s);
                      for (let e = 0; e < o.length - i; e++)
                        if (0 !== o[e]) throw new Error('base58xmr: wrong padding');
                      t = t.concat(Array.from(o.slice(o.length - i)));
                    }
                    return Uint8Array.from(t);
                  },
                };
                (r.createBase58check = e =>
                  m(
                    v(4, t => e(e(t))),
                    r.base58
                  )),
                  (r.base58check = r.createBase58check);
                const j = m(f('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), p('')),
                  N = [996825010, 642813549, 513874426, 1027748829, 705979059];
                function P(e) {
                  const t = e >> 25;
                  let r = (33554431 & e) << 5;
                  for (let e = 0; e < N.length; e++) 1 == ((t >> e) & 1) && (r ^= N[e]);
                  return r;
                }
                function R(e, t, r = 1) {
                  const n = e.length;
                  let s = 1;
                  for (let t = 0; t < n; t++) {
                    const r = e.charCodeAt(t);
                    if (r < 33 || r > 126) throw new Error(`Invalid prefix (${e})`);
                    s = P(s) ^ (r >> 5);
                  }
                  s = P(s);
                  for (let t = 0; t < n; t++) s = P(s) ^ (31 & e.charCodeAt(t));
                  for (let e of t) s = P(s) ^ e;
                  for (let e = 0; e < 6; e++) s = P(s);
                  return (s ^= r), j.encode(_([s % b[30]], 30, 5, !1));
                }
                function O(e) {
                  const t = 'bech32' === e ? 1 : 734539939,
                    r = E(5),
                    s = r.decode,
                    i = r.encode,
                    o = T(s);
                  function c(e, r, s = 90) {
                    a('bech32.encode prefix', e),
                      n(r) && (r = Array.from(r)),
                      d('bech32.encode', r);
                    const i = e.length;
                    if (0 === i) throw new TypeError(`Invalid prefix length ${i}`);
                    const o = i + 7 + r.length;
                    if (!1 !== s && o > s) throw new TypeError(`Length ${o} exceeds limit ${s}`);
                    const c = e.toLowerCase(),
                      u = R(c, r, t);
                    return `${c}1${j.encode(r)}${u}`;
                  }
                  function u(e, r = 90) {
                    a('bech32.decode input', e);
                    const n = e.length;
                    if (n < 8 || (!1 !== r && n > r))
                      throw new TypeError(`invalid string length: ${n} (${e}). Expected (8..${r})`);
                    const s = e.toLowerCase();
                    if (e !== s && e !== e.toUpperCase())
                      throw new Error('String must be lowercase or uppercase');
                    const i = s.lastIndexOf('1');
                    if (0 === i || -1 === i)
                      throw new Error('Letter "1" must be present between prefix and data only');
                    const o = s.slice(0, i),
                      c = s.slice(i + 1);
                    if (c.length < 6) throw new Error('Data must be at least 6 characters long');
                    const u = j.decode(c).slice(0, -6),
                      l = R(o, u, t);
                    if (!c.endsWith(l))
                      throw new Error(`Invalid checksum in ${e}: expected "${l}"`);
                    return { prefix: o, words: u };
                  }
                  return {
                    encode: c,
                    decode: u,
                    encodeFromBytes: function (e, t) {
                      return c(e, i(t));
                    },
                    decodeToBytes: function (e) {
                      const { prefix: t, words: r } = u(e, !1);
                      return { prefix: t, words: r, bytes: s(r) };
                    },
                    decodeUnsafe: T(u),
                    fromWords: s,
                    fromWordsUnsafe: o,
                    toWords: i,
                  };
                }
                (r.bech32 = O('bech32')),
                  (r.bech32m = O('bech32m')),
                  (r.utf8 = {
                    encode: e => new TextDecoder().decode(e),
                    decode: e => new TextEncoder().encode(e),
                  });
                const M = (() =>
                    'function' == typeof Uint8Array.from([]).toHex &&
                    'function' == typeof Uint8Array.fromHex)(),
                  x = {
                    encode: e => (s(e), e.toHex()),
                    decode: e => (a('hex', e), Uint8Array.fromHex(e)),
                  };
                r.hex = M
                  ? x
                  : m(
                      E(4),
                      f('0123456789abcdef'),
                      p(''),
                      g(e => {
                        if ('string' != typeof e || e.length % 2 != 0)
                          throw new TypeError(
                            `hex.decode: expected string, got ${typeof e} with length ${e.length}`
                          );
                        return e.toLowerCase();
                      })
                    );
                const B = {
                    utf8: r.utf8,
                    hex: r.hex,
                    base16: r.base16,
                    base32: r.base32,
                    base64: r.base64,
                    base64url: r.base64url,
                    base58: r.base58,
                    base58xmr: r.base58xmr,
                  },
                  D =
                    'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';
                (r.bytesToString = (e, t) => {
                  if ('string' != typeof e || !B.hasOwnProperty(e)) throw new TypeError(D);
                  if (!n(t)) throw new TypeError('bytesToString() expects Uint8Array');
                  return B[e].encode(t);
                }),
                  (r.str = r.bytesToString);
                (r.stringToBytes = (e, t) => {
                  if (!B.hasOwnProperty(e)) throw new TypeError(D);
                  if ('string' != typeof t) throw new TypeError('stringToBytes() expects string');
                  return B[e].decode(t);
                }),
                  (r.bytes = r.stringToBytes);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@metamask/utils>@scure/base',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@metamask/utils/node_modules/@scure/base/lib/index.js',
      },
    ],
    [
      2338,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                function n(e) {
                  if (!Number.isSafeInteger(e)) throw new Error(`Wrong integer: ${e}`);
                }
                function s(e) {
                  return (
                    e instanceof Uint8Array ||
                    (null != e && 'object' == typeof e && 'Uint8Array' === e.constructor.name)
                  );
                }
                function i(...e) {
                  const t = e => e,
                    r = (e, t) => r => e(t(r));
                  return {
                    encode: e.map(e => e.encode).reduceRight(r, t),
                    decode: e.map(e => e.decode).reduce(r, t),
                  };
                }
                function o(e) {
                  return {
                    encode: t => {
                      if (!Array.isArray(t) || (t.length && 'number' != typeof t[0]))
                        throw new Error('alphabet.encode input should be an array of numbers');
                      return t.map(t => {
                        if ((n(t), t < 0 || t >= e.length))
                          throw new Error(
                            `Digit index outside alphabet: ${t} (alphabet: ${e.length})`
                          );
                        return e[t];
                      });
                    },
                    decode: t => {
                      if (!Array.isArray(t) || (t.length && 'string' != typeof t[0]))
                        throw new Error('alphabet.decode input should be array of strings');
                      return t.map(t => {
                        if ('string' != typeof t)
                          throw new Error(`alphabet.decode: not string element=${t}`);
                        const r = e.indexOf(t);
                        if (-1 === r) throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);
                        return r;
                      });
                    },
                  };
                }
                function a(e = '') {
                  if ('string' != typeof e) throw new Error('join separator should be string');
                  return {
                    encode: t => {
                      if (!Array.isArray(t) || (t.length && 'string' != typeof t[0]))
                        throw new Error('join.encode input should be array of strings');
                      for (let e of t)
                        if ('string' != typeof e)
                          throw new Error(`join.encode: non-string input=${e}`);
                      return t.join(e);
                    },
                    decode: t => {
                      if ('string' != typeof t)
                        throw new Error('join.decode input should be string');
                      return t.split(e);
                    },
                  };
                }
                function c(e, t = '=') {
                  if ((n(e), 'string' != typeof t)) throw new Error('padding chr should be string');
                  return {
                    encode(r) {
                      if (!Array.isArray(r) || (r.length && 'string' != typeof r[0]))
                        throw new Error('padding.encode input should be array of strings');
                      for (let e of r)
                        if ('string' != typeof e)
                          throw new Error(`padding.encode: non-string input=${e}`);
                      for (; (r.length * e) % 8; ) r.push(t);
                      return r;
                    },
                    decode(r) {
                      if (!Array.isArray(r) || (r.length && 'string' != typeof r[0]))
                        throw new Error('padding.encode input should be array of strings');
                      for (let e of r)
                        if ('string' != typeof e)
                          throw new Error(`padding.decode: non-string input=${e}`);
                      let n = r.length;
                      if ((n * e) % 8)
                        throw new Error(
                          'Invalid padding: string should have whole number of bytes'
                        );
                      for (; n > 0 && r[n - 1] === t; n--)
                        if (!(((n - 1) * e) % 8))
                          throw new Error('Invalid padding: string has too much padding');
                      return r.slice(0, n);
                    },
                  };
                }
                function u(e) {
                  if ('function' != typeof e) throw new Error('normalize fn should be function');
                  return { encode: e => e, decode: t => e(t) };
                }
                function l(e, t, r) {
                  if (t < 2)
                    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
                  if (r < 2)
                    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
                  if (!Array.isArray(e)) throw new Error('convertRadix: data should be array');
                  if (!e.length) return [];
                  let s = 0;
                  const i = [],
                    o = Array.from(e);
                  for (
                    o.forEach(e => {
                      if ((n(e), e < 0 || e >= t)) throw new Error(`Wrong integer: ${e}`);
                    });
                    ;

                  ) {
                    let e = 0,
                      n = !0;
                    for (let i = s; i < o.length; i++) {
                      const a = o[i],
                        c = t * e + a;
                      if (!Number.isSafeInteger(c) || (t * e) / t !== e || c - a != t * e)
                        throw new Error('convertRadix: carry overflow');
                      e = c % r;
                      const u = Math.floor(c / r);
                      if (((o[i] = u), !Number.isSafeInteger(u) || u * r + e !== c))
                        throw new Error('convertRadix: carry overflow');
                      n && (u ? (n = !1) : (s = i));
                    }
                    if ((i.push(e), n)) break;
                  }
                  for (let t = 0; t < e.length - 1 && 0 === e[t]; t++) i.push(0);
                  return i.reverse();
                }
                /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.bytes =
                    r.stringToBytes =
                    r.str =
                    r.bytesToString =
                    r.hex =
                    r.utf8 =
                    r.bech32m =
                    r.bech32 =
                    r.base58check =
                    r.createBase58check =
                    r.base58xmr =
                    r.base58xrp =
                    r.base58flickr =
                    r.base58 =
                    r.base64urlnopad =
                    r.base64url =
                    r.base64nopad =
                    r.base64 =
                    r.base32crockford =
                    r.base32hexnopad =
                    r.base32hex =
                    r.base32nopad =
                    r.base32 =
                    r.base16 =
                    r.utils =
                      void 0),
                  (r.assertNumber = n);
                const d = (e, t) => (t ? d(t, e % t) : e),
                  m = (e, t) => e + (t - d(e, t));
                function f(e, t, r, s) {
                  if (!Array.isArray(e)) throw new Error('convertRadix2: data should be array');
                  if (t <= 0 || t > 32) throw new Error(`convertRadix2: wrong from=${t}`);
                  if (r <= 0 || r > 32) throw new Error(`convertRadix2: wrong to=${r}`);
                  if (m(t, r) > 32)
                    throw new Error(
                      `convertRadix2: carry overflow from=${t} to=${r} carryBits=${m(t, r)}`
                    );
                  let i = 0,
                    o = 0;
                  const a = 2 ** r - 1,
                    c = [];
                  for (const s of e) {
                    if ((n(s), s >= 2 ** t))
                      throw new Error(`convertRadix2: invalid data word=${s} from=${t}`);
                    if (((i = (i << t) | s), o + t > 32))
                      throw new Error(`convertRadix2: carry overflow pos=${o} from=${t}`);
                    for (o += t; o >= r; o -= r) c.push(((i >> (o - r)) & a) >>> 0);
                    i &= 2 ** o - 1;
                  }
                  if (((i = (i << (r - o)) & a), !s && o >= t)) throw new Error('Excess padding');
                  if (!s && i) throw new Error(`Non-zero padding: ${i}`);
                  return s && o > 0 && c.push(i >>> 0), c;
                }
                function p(e) {
                  return (
                    n(e),
                    {
                      encode: t => {
                        if (!s(t)) throw new Error('radix.encode input should be Uint8Array');
                        return l(Array.from(t), 256, e);
                      },
                      decode: t => {
                        if (!Array.isArray(t) || (t.length && 'number' != typeof t[0]))
                          throw new Error('radix.decode input should be array of numbers');
                        return Uint8Array.from(l(t, e, 256));
                      },
                    }
                  );
                }
                function h(e, t = !1) {
                  if ((n(e), e <= 0 || e > 32))
                    throw new Error('radix2: bits should be in (0..32]');
                  if (m(8, e) > 32 || m(e, 8) > 32) throw new Error('radix2: carry overflow');
                  return {
                    encode: r => {
                      if (!s(r)) throw new Error('radix2.encode input should be Uint8Array');
                      return f(Array.from(r), 8, e, !t);
                    },
                    decode: r => {
                      if (!Array.isArray(r) || (r.length && 'number' != typeof r[0]))
                        throw new Error('radix2.decode input should be array of numbers');
                      return Uint8Array.from(f(r, e, 8, t));
                    },
                  };
                }
                function g(e) {
                  if ('function' != typeof e)
                    throw new Error('unsafeWrapper fn should be function');
                  return function (...t) {
                    try {
                      return e.apply(null, t);
                    } catch (e) {}
                  };
                }
                function y(e, t) {
                  if ((n(e), 'function' != typeof t))
                    throw new Error('checksum fn should be function');
                  return {
                    encode(r) {
                      if (!s(r)) throw new Error('checksum.encode: input should be Uint8Array');
                      const n = t(r).slice(0, e),
                        i = new Uint8Array(r.length + e);
                      return i.set(r), i.set(n, r.length), i;
                    },
                    decode(r) {
                      if (!s(r)) throw new Error('checksum.decode: input should be Uint8Array');
                      const n = r.slice(0, -e),
                        i = t(n).slice(0, e),
                        o = r.slice(-e);
                      for (let t = 0; t < e; t++)
                        if (i[t] !== o[t]) throw new Error('Invalid checksum');
                      return n;
                    },
                  };
                }
                (r.utils = {
                  alphabet: o,
                  chain: i,
                  checksum: y,
                  convertRadix: l,
                  convertRadix2: f,
                  radix: p,
                  radix2: h,
                  join: a,
                  padding: c,
                }),
                  (r.base16 = i(h(4), o('0123456789ABCDEF'), a(''))),
                  (r.base32 = i(h(5), o('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), c(5), a(''))),
                  (r.base32nopad = i(h(5), o('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), a(''))),
                  (r.base32hex = i(h(5), o('0123456789ABCDEFGHIJKLMNOPQRSTUV'), c(5), a(''))),
                  (r.base32hexnopad = i(h(5), o('0123456789ABCDEFGHIJKLMNOPQRSTUV'), a(''))),
                  (r.base32crockford = i(
                    h(5),
                    o('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),
                    a(''),
                    u(e => e.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))
                  )),
                  (r.base64 = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
                    c(6),
                    a('')
                  )),
                  (r.base64nopad = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
                    a('')
                  )),
                  (r.base64url = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
                    c(6),
                    a('')
                  )),
                  (r.base64urlnopad = i(
                    h(6),
                    o('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
                    a('')
                  ));
                const w = e => i(p(58), o(e), a(''));
                (r.base58 = w('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz')),
                  (r.base58flickr = w(
                    '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
                  )),
                  (r.base58xrp = w('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'));
                const k = [0, 2, 3, 5, 6, 7, 9, 10, 11];
                r.base58xmr = {
                  encode(e) {
                    let t = '';
                    for (let n = 0; n < e.length; n += 8) {
                      const s = e.subarray(n, n + 8);
                      t += r.base58.encode(s).padStart(k[s.length], '1');
                    }
                    return t;
                  },
                  decode(e) {
                    let t = [];
                    for (let n = 0; n < e.length; n += 11) {
                      const s = e.slice(n, n + 11),
                        i = k.indexOf(s.length),
                        o = r.base58.decode(s);
                      for (let e = 0; e < o.length - i; e++)
                        if (0 !== o[e]) throw new Error('base58xmr: wrong padding');
                      t = t.concat(Array.from(o.slice(o.length - i)));
                    }
                    return Uint8Array.from(t);
                  },
                };
                (r.createBase58check = e =>
                  i(
                    y(4, t => e(e(t))),
                    r.base58
                  )),
                  (r.base58check = r.createBase58check);
                const b = i(o('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), a('')),
                  _ = [996825010, 642813549, 513874426, 1027748829, 705979059];
                function S(e) {
                  const t = e >> 25;
                  let r = (33554431 & e) << 5;
                  for (let e = 0; e < _.length; e++) 1 == ((t >> e) & 1) && (r ^= _[e]);
                  return r;
                }
                function E(e, t, r = 1) {
                  const n = e.length;
                  let s = 1;
                  for (let t = 0; t < n; t++) {
                    const r = e.charCodeAt(t);
                    if (r < 33 || r > 126) throw new Error(`Invalid prefix (${e})`);
                    s = S(s) ^ (r >> 5);
                  }
                  s = S(s);
                  for (let t = 0; t < n; t++) s = S(s) ^ (31 & e.charCodeAt(t));
                  for (let e of t) s = S(s) ^ e;
                  for (let e = 0; e < 6; e++) s = S(s);
                  return (s ^= r), b.encode(f([s % 2 ** 30], 30, 5, !1));
                }
                function T(e) {
                  const t = 'bech32' === e ? 1 : 734539939,
                    r = h(5),
                    n = r.decode,
                    s = r.encode,
                    i = g(n);
                  function o(e, r, n = 90) {
                    if ('string' != typeof e)
                      throw new Error('bech32.encode prefix should be string, not ' + typeof e);
                    if (
                      (r instanceof Uint8Array && (r = Array.from(r)),
                      !Array.isArray(r) || (r.length && 'number' != typeof r[0]))
                    )
                      throw new Error(
                        'bech32.encode words should be array of numbers, not ' + typeof r
                      );
                    if (0 === e.length) throw new TypeError(`Invalid prefix length ${e.length}`);
                    const s = e.length + 7 + r.length;
                    if (!1 !== n && s > n) throw new TypeError(`Length ${s} exceeds limit ${n}`);
                    const i = e.toLowerCase(),
                      o = E(i, r, t);
                    return `${i}1${b.encode(r)}${o}`;
                  }
                  function a(e, r = 90) {
                    if ('string' != typeof e)
                      throw new Error('bech32.decode input should be string, not ' + typeof e);
                    if (e.length < 8 || (!1 !== r && e.length > r))
                      throw new TypeError(
                        `Wrong string length: ${e.length} (${e}). Expected (8..${r})`
                      );
                    const n = e.toLowerCase();
                    if (e !== n && e !== e.toUpperCase())
                      throw new Error('String must be lowercase or uppercase');
                    const s = n.lastIndexOf('1');
                    if (0 === s || -1 === s)
                      throw new Error('Letter "1" must be present between prefix and data only');
                    const i = n.slice(0, s),
                      o = n.slice(s + 1);
                    if (o.length < 6) throw new Error('Data must be at least 6 characters long');
                    const a = b.decode(o).slice(0, -6),
                      c = E(i, a, t);
                    if (!o.endsWith(c))
                      throw new Error(`Invalid checksum in ${e}: expected "${c}"`);
                    return { prefix: i, words: a };
                  }
                  return {
                    encode: o,
                    decode: a,
                    encodeFromBytes: function (e, t) {
                      return o(e, s(t));
                    },
                    decodeToBytes: function (e) {
                      const { prefix: t, words: r } = a(e, !1);
                      return { prefix: t, words: r, bytes: n(r) };
                    },
                    decodeUnsafe: g(a),
                    fromWords: n,
                    fromWordsUnsafe: i,
                    toWords: s,
                  };
                }
                (r.bech32 = T('bech32')),
                  (r.bech32m = T('bech32m')),
                  (r.utf8 = {
                    encode: e => new TextDecoder().decode(e),
                    decode: e => new TextEncoder().encode(e),
                  }),
                  (r.hex = i(
                    h(4),
                    o('0123456789abcdef'),
                    a(''),
                    u(e => {
                      if ('string' != typeof e || e.length % 2)
                        throw new TypeError(
                          `hex.decode: expected string, got ${typeof e} with length ${e.length}`
                        );
                      return e.toLowerCase();
                    })
                  ));
                const v = {
                    utf8: r.utf8,
                    hex: r.hex,
                    base16: r.base16,
                    base32: r.base32,
                    base64: r.base64,
                    base64url: r.base64url,
                    base58: r.base58,
                    base58xmr: r.base58xmr,
                  },
                  A =
                    'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';
                (r.bytesToString = (e, t) => {
                  if ('string' != typeof e || !v.hasOwnProperty(e)) throw new TypeError(A);
                  if (!s(t)) throw new TypeError('bytesToString() expects Uint8Array');
                  return v[e].encode(t);
                }),
                  (r.str = r.bytesToString);
                (r.stringToBytes = (e, t) => {
                  if (!v.hasOwnProperty(e)) throw new TypeError(A);
                  if ('string' != typeof t) throw new TypeError('stringToBytes() expects string');
                  return v[e].decode(t);
                }),
                  (r.bytes = r.stringToBytes);
              };
            };
      },
      {
        package:
          '@metamask/network-controller>@metamask/eth-json-rpc-middleware>@metamask/eth-sig-util>@scure/base',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/eth-sig-util/node_modules/@scure/base/lib/index.js',
      },
    ],
    [
      2339,
      { './errors.cjs': 2347, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.assertExhaustive = r.assertStruct = r.assert = r.AssertionError = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./errors.cjs');
                function i(e, t) {
                  return (
                    (r = e),
                    Boolean('string' == typeof r?.prototype?.constructor?.name)
                      ? new e({ message: t })
                      : e({ message: t })
                  );
                  var r;
                }
                class o extends Error {
                  constructor(e) {
                    super(e.message), (this.code = 'ERR_ASSERTION');
                  }
                }
                (r.AssertionError = o),
                  (r.assert = function (e, t = 'Assertion failed.', r = o) {
                    if (!e) {
                      if (t instanceof Error) throw t;
                      throw i(r, t);
                    }
                  }),
                  (r.assertStruct = function (e, t, r = 'Assertion failed', a = o) {
                    try {
                      (0, n.assert)(e, t);
                    } catch (e) {
                      throw i(
                        a,
                        `${r}: ${(function (e) {
                          return (0, s.getErrorMessage)(e).replace(/\.$/u, '');
                        })(e)}.`
                      );
                    }
                  }),
                  (r.assertExhaustive = function (e) {
                    throw new Error(
                      'Invalid branch reached. Should be detected during compilation.'
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/assert.cjs',
      },
    ],
    [
      2340,
      { './assert.cjs': 2339, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.base64 = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs');
                r.base64 = (e, t = {}) => {
                  const r = t.paddingRequired ?? !1,
                    i = t.characterSet ?? 'base64';
                  let o, a;
                  return (
                    'base64' === i
                      ? (o = String.raw`[A-Za-z0-9+\/]`)
                      : ((0, s.assert)('base64url' === i), (o = String.raw`[-_A-Za-z0-9]`)),
                    (a = r
                      ? new RegExp(`^(?:${o}{4})*(?:${o}{3}=|${o}{2}==)?$`, 'u')
                      : new RegExp(`^(?:${o}{4})*(?:${o}{2,3}|${o}{3}=|${o}{2}==)?$`, 'u')),
                    (0, n.pattern)(e, a)
                  );
                };
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/base64.cjs',
      },
    ],
    [
      2341,
      { './assert.cjs': 2339, './hex.cjs': 2348, '@scure/base': 3078, buffer: 4139 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                (function (t) {
                  (function () {
                    Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.createDataView =
                        r.concatBytes =
                        r.valueToBytes =
                        r.base64ToBytes =
                        r.stringToBytes =
                        r.numberToBytes =
                        r.signedBigIntToBytes =
                        r.bigIntToBytes =
                        r.hexToBytes =
                        r.bytesToBase64 =
                        r.bytesToString =
                        r.bytesToNumber =
                        r.bytesToSignedBigInt =
                        r.bytesToBigInt =
                        r.bytesToHex =
                        r.assertIsBytes =
                        r.isBytes =
                          void 0);
                    const n = e('@scure/base'),
                      s = e('./assert.cjs'),
                      i = e('./hex.cjs'),
                      o = 48,
                      a = 58,
                      c = 87;
                    const u = (function () {
                      const e = [];
                      return () => {
                        if (0 === e.length)
                          for (let t = 0; t < 256; t++) e.push(t.toString(16).padStart(2, '0'));
                        return e;
                      };
                    })();
                    function l(e) {
                      return e instanceof Uint8Array;
                    }
                    function d(e) {
                      (0, s.assert)(l(e), 'Value must be a Uint8Array.');
                    }
                    function m(e) {
                      if ((d(e), 0 === e.length)) return '0x';
                      const t = u(),
                        r = new Array(e.length);
                      for (let n = 0; n < e.length; n++) r[n] = t[e[n]];
                      return (0, i.add0x)(r.join(''));
                    }
                    function f(e) {
                      d(e);
                      const t = m(e);
                      return BigInt(t);
                    }
                    function p(e) {
                      if ('0x' === e?.toLowerCase?.()) return new Uint8Array();
                      (0, i.assertIsHexString)(e);
                      const t = (0, i.remove0x)(e).toLowerCase(),
                        r = t.length % 2 == 0 ? t : `0${t}`,
                        n = new Uint8Array(r.length / 2);
                      for (let e = 0; e < n.length; e++) {
                        const t = r.charCodeAt(2 * e),
                          s = r.charCodeAt(2 * e + 1),
                          i = t - (t < a ? o : c),
                          u = s - (s < a ? o : c);
                        n[e] = 16 * i + u;
                      }
                      return n;
                    }
                    function h(e) {
                      (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                        (0, s.assert)(e >= BigInt(0), 'Value must be a non-negative bigint.');
                      return p(e.toString(16));
                    }
                    function g(e) {
                      (0, s.assert)('number' == typeof e, 'Value must be a number.'),
                        (0, s.assert)(e >= 0, 'Value must be a non-negative number.'),
                        (0, s.assert)(
                          Number.isSafeInteger(e),
                          'Value is not a safe integer. Use `bigIntToBytes` instead.'
                        );
                      return p(e.toString(16));
                    }
                    function y(e) {
                      return (
                        (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                        new TextEncoder().encode(e)
                      );
                    }
                    function w(e) {
                      if ('bigint' == typeof e) return h(e);
                      if ('number' == typeof e) return g(e);
                      if ('string' == typeof e) return e.startsWith('0x') ? p(e) : y(e);
                      if (l(e)) return e;
                      throw new TypeError(`Unsupported value type: "${typeof e}".`);
                    }
                    (r.isBytes = l),
                      (r.assertIsBytes = d),
                      (r.bytesToHex = m),
                      (r.bytesToBigInt = f),
                      (r.bytesToSignedBigInt = function (e) {
                        d(e);
                        let t = BigInt(0);
                        for (const r of e) t = (t << BigInt(8)) + BigInt(r);
                        return BigInt.asIntN(8 * e.length, t);
                      }),
                      (r.bytesToNumber = function (e) {
                        d(e);
                        const t = f(e);
                        return (
                          (0, s.assert)(
                            t <= BigInt(Number.MAX_SAFE_INTEGER),
                            'Number is not a safe integer. Use `bytesToBigInt` instead.'
                          ),
                          Number(t)
                        );
                      }),
                      (r.bytesToString = function (e) {
                        return d(e), new TextDecoder().decode(e);
                      }),
                      (r.bytesToBase64 = function (e) {
                        return d(e), n.base64.encode(e);
                      }),
                      (r.hexToBytes = p),
                      (r.bigIntToBytes = h),
                      (r.signedBigIntToBytes = function (e, t) {
                        (0, s.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                          (0, s.assert)('number' == typeof t, 'Byte length must be a number.'),
                          (0, s.assert)(t > 0, 'Byte length must be greater than 0.'),
                          (0, s.assert)(
                            (function (e, t) {
                              (0, s.assert)(t > 0);
                              const r = e >> BigInt(31);
                              return !(((~e & r) + (e & ~r)) >> BigInt(8 * t - 1));
                            })(e, t),
                            'Byte length is too small to represent the given value.'
                          );
                        let r = e;
                        const n = new Uint8Array(t);
                        for (let e = 0; e < n.length; e++)
                          (n[e] = Number(BigInt.asUintN(8, r))), (r >>= BigInt(8));
                        return n.reverse();
                      }),
                      (r.numberToBytes = g),
                      (r.stringToBytes = y),
                      (r.base64ToBytes = function (e) {
                        return (
                          (0, s.assert)('string' == typeof e, 'Value must be a string.'),
                          n.base64.decode(e)
                        );
                      }),
                      (r.valueToBytes = w),
                      (r.concatBytes = function (e) {
                        const t = new Array(e.length);
                        let r = 0;
                        for (let n = 0; n < e.length; n++) {
                          const s = w(e[n]);
                          (t[n] = s), (r += s.length);
                        }
                        const n = new Uint8Array(r);
                        for (let e = 0, r = 0; e < t.length; e++)
                          n.set(t[e], r), (r += t[e].length);
                        return n;
                      }),
                      (r.createDataView = function (e) {
                        if (void 0 !== t && e instanceof t) {
                          const t = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                          return new DataView(t);
                        }
                        return new DataView(e.buffer, e.byteOffset, e.byteLength);
                      });
                  }).call(this);
                }).call(this, e('buffer').Buffer);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/bytes.cjs',
      },
    ],
    [
      2342,
      { '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toCaipChainId =
                    r.parseCaipAccountId =
                    r.parseCaipChainId =
                    r.isCaipAssetId =
                    r.isCaipAssetType =
                    r.isCaipAccountAddress =
                    r.isCaipAccountId =
                    r.isCaipReference =
                    r.isCaipNamespace =
                    r.isCaipChainId =
                    r.KnownCaipNamespace =
                    r.CaipAssetIdStruct =
                    r.CaipAssetTypeStruct =
                    r.CaipAccountAddressStruct =
                    r.CaipAccountIdStruct =
                    r.CaipReferenceStruct =
                    r.CaipNamespaceStruct =
                    r.CaipChainIdStruct =
                    r.CAIP_ASSET_ID_REGEX =
                    r.CAIP_ASSET_TYPE_REGEX =
                    r.CAIP_ACCOUNT_ADDRESS_REGEX =
                    r.CAIP_ACCOUNT_ID_REGEX =
                    r.CAIP_REFERENCE_REGEX =
                    r.CAIP_NAMESPACE_REGEX =
                    r.CAIP_CHAIN_ID_REGEX =
                      void 0);
                const n = e('@metamask/superstruct');
                function s(e) {
                  return (0, n.is)(e, r.CaipNamespaceStruct);
                }
                function i(e) {
                  return (0, n.is)(e, r.CaipReferenceStruct);
                }
                (r.CAIP_CHAIN_ID_REGEX =
                  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u),
                  (r.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u),
                  (r.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u),
                  (r.CAIP_ACCOUNT_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u),
                  (r.CAIP_ASSET_TYPE_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$/u),
                  (r.CAIP_ASSET_ID_REGEX =
                    /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$/u),
                  (r.CaipChainIdStruct = (0, n.pattern)((0, n.string)(), r.CAIP_CHAIN_ID_REGEX)),
                  (r.CaipNamespaceStruct = (0, n.pattern)((0, n.string)(), r.CAIP_NAMESPACE_REGEX)),
                  (r.CaipReferenceStruct = (0, n.pattern)((0, n.string)(), r.CAIP_REFERENCE_REGEX)),
                  (r.CaipAccountIdStruct = (0, n.pattern)(
                    (0, n.string)(),
                    r.CAIP_ACCOUNT_ID_REGEX
                  )),
                  (r.CaipAccountAddressStruct = (0, n.pattern)(
                    (0, n.string)(),
                    r.CAIP_ACCOUNT_ADDRESS_REGEX
                  )),
                  (r.CaipAssetTypeStruct = (0, n.pattern)(
                    (0, n.string)(),
                    r.CAIP_ASSET_TYPE_REGEX
                  )),
                  (r.CaipAssetIdStruct = (0, n.pattern)((0, n.string)(), r.CAIP_ASSET_ID_REGEX)),
                  (function (e) {
                    (e.Bip122 = 'bip122'),
                      (e.Solana = 'solana'),
                      (e.Eip155 = 'eip155'),
                      (e.Wallet = 'wallet');
                  })(r.KnownCaipNamespace || (r.KnownCaipNamespace = {})),
                  (r.isCaipChainId = function (e) {
                    return (0, n.is)(e, r.CaipChainIdStruct);
                  }),
                  (r.isCaipNamespace = s),
                  (r.isCaipReference = i),
                  (r.isCaipAccountId = function (e) {
                    return (0, n.is)(e, r.CaipAccountIdStruct);
                  }),
                  (r.isCaipAccountAddress = function (e) {
                    return (0, n.is)(e, r.CaipAccountAddressStruct);
                  }),
                  (r.isCaipAssetType = function (e) {
                    return (0, n.is)(e, r.CaipAssetTypeStruct);
                  }),
                  (r.isCaipAssetId = function (e) {
                    return (0, n.is)(e, r.CaipAssetIdStruct);
                  }),
                  (r.parseCaipChainId = function (e) {
                    const t = r.CAIP_CHAIN_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP chain ID.');
                    return { namespace: t.groups.namespace, reference: t.groups.reference };
                  }),
                  (r.parseCaipAccountId = function (e) {
                    const t = r.CAIP_ACCOUNT_ID_REGEX.exec(e);
                    if (!t?.groups) throw new Error('Invalid CAIP account ID.');
                    return {
                      address: t.groups.accountAddress,
                      chainId: t.groups.chainId,
                      chain: { namespace: t.groups.namespace, reference: t.groups.reference },
                    };
                  }),
                  (r.toCaipChainId = function (e, t) {
                    if (!s(e))
                      throw new Error(
                        `Invalid "namespace", must match: ${r.CAIP_NAMESPACE_REGEX.toString()}`
                      );
                    if (!i(t))
                      throw new Error(
                        `Invalid "reference", must match: ${r.CAIP_REFERENCE_REGEX.toString()}`
                      );
                    return `${e}:${t}`;
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/caip-types.cjs',
      },
    ],
    [
      2343,
      { './base64.cjs': 2340, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.ChecksumStruct = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./base64.cjs');
                r.ChecksumStruct = (0, n.size)(
                  (0, s.base64)((0, n.string)(), { paddingRequired: !0 }),
                  44,
                  44
                );
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/checksum.cjs',
      },
    ],
    [
      2344,
      {
        './assert.cjs': 2339,
        './bytes.cjs': 2341,
        './hex.cjs': 2348,
        '@metamask/superstruct': 2913,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createHex = r.createBytes = r.createBigInt = r.createNumber = void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./bytes.cjs'),
                  o = e('./hex.cjs'),
                  a = (0, n.union)([
                    (0, n.number)(),
                    (0, n.bigint)(),
                    (0, n.string)(),
                    o.StrictHexStruct,
                  ]),
                  c = (0, n.coerce)((0, n.number)(), a, Number),
                  u = (0, n.coerce)((0, n.bigint)(), a, BigInt),
                  l =
                    ((0, n.union)([o.StrictHexStruct, (0, n.instance)(Uint8Array)]),
                    (0, n.coerce)(
                      (0, n.instance)(Uint8Array),
                      (0, n.union)([o.StrictHexStruct]),
                      i.hexToBytes
                    )),
                  d = (0, n.coerce)(o.StrictHexStruct, (0, n.instance)(Uint8Array), i.bytesToHex);
                (r.createNumber = function (e) {
                  try {
                    const t = (0, n.create)(e, c);
                    return (
                      (0, s.assert)(
                        Number.isFinite(t),
                        `Expected a number-like value, got "${e}".`
                      ),
                      t
                    );
                  } catch (t) {
                    if (t instanceof n.StructError)
                      throw new Error(`Expected a number-like value, got "${e}".`);
                    throw t;
                  }
                }),
                  (r.createBigInt = function (e) {
                    try {
                      return (0, n.create)(e, u);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a number-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createBytes = function (e) {
                    if ('string' == typeof e && '0x' === e.toLowerCase()) return new Uint8Array();
                    try {
                      return (0, n.create)(e, l);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  }),
                  (r.createHex = function (e) {
                    if (
                      (e instanceof Uint8Array && 0 === e.length) ||
                      ('string' == typeof e && '0x' === e.toLowerCase())
                    )
                      return '0x';
                    try {
                      return (0, n.create)(e, d);
                    } catch (e) {
                      if (e instanceof n.StructError)
                        throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);
                      throw e;
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/coercers.cjs',
      },
    ],
    [
      2345,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  o =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.FrozenSet = r.FrozenMap = void 0);
                class a {
                  get size() {
                    return i(this, n, 'f').size;
                  }
                  [((n = new WeakMap()), Symbol.iterator)]() {
                    return i(this, n, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    n.set(this, void 0), o(this, n, new Map(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, n, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, n, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  get(e) {
                    return i(this, n, 'f').get(e);
                  }
                  has(e) {
                    return i(this, n, 'f').has(e);
                  }
                  keys() {
                    return i(this, n, 'f').keys();
                  }
                  values() {
                    return i(this, n, 'f').values();
                  }
                  toString() {
                    return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[...this.entries()].map(([e, t]) => `${String(e)} => ${String(t)}`).join(', ')} ` : ''}}`;
                  }
                }
                r.FrozenMap = a;
                class c {
                  get size() {
                    return i(this, s, 'f').size;
                  }
                  [((s = new WeakMap()), Symbol.iterator)]() {
                    return i(this, s, 'f')[Symbol.iterator]();
                  }
                  constructor(e) {
                    s.set(this, void 0), o(this, s, new Set(e), 'f'), Object.freeze(this);
                  }
                  entries() {
                    return i(this, s, 'f').entries();
                  }
                  forEach(e, t) {
                    return i(this, s, 'f').forEach((r, n, s) => e.call(t, r, n, this));
                  }
                  has(e) {
                    return i(this, s, 'f').has(e);
                  }
                  keys() {
                    return i(this, s, 'f').keys();
                  }
                  values() {
                    return i(this, s, 'f').values();
                  }
                  toString() {
                    return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[...this.values()].map(e => String(e)).join(', ')} ` : ''}}`;
                  }
                }
                (r.FrozenSet = c),
                  Object.freeze(a),
                  Object.freeze(a.prototype),
                  Object.freeze(c),
                  Object.freeze(c.prototype);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/collections.cjs',
      },
    ],
    [
      2346,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/encryption-types.cjs',
      },
    ],
    [
      2347,
      { './misc.cjs': 2353, 'pony-cause': 5071 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.wrapError =
                    r.getErrorMessage =
                    r.isErrorWithStack =
                    r.isErrorWithMessage =
                    r.isErrorWithCode =
                      void 0);
                const n = e('pony-cause'),
                  s = e('./misc.cjs');
                function i(e) {
                  return 'object' == typeof e && null !== e && 'code' in e;
                }
                function o(e) {
                  return 'object' == typeof e && null !== e && 'message' in e;
                }
                (r.isErrorWithCode = i),
                  (r.isErrorWithMessage = o),
                  (r.isErrorWithStack = function (e) {
                    return 'object' == typeof e && null !== e && 'stack' in e;
                  }),
                  (r.getErrorMessage = function (e) {
                    return o(e) && 'string' == typeof e.message
                      ? e.message
                      : (0, s.isNullOrUndefined)(e)
                        ? ''
                        : String(e);
                  }),
                  (r.wrapError = function (e, t) {
                    if (
                      (r = e) instanceof Error ||
                      ((0, s.isObject)(r) && 'Error' === r.constructor.name)
                    ) {
                      let r;
                      return (
                        (r =
                          2 === Error.length
                            ? new Error(t, { cause: e })
                            : new n.ErrorWithCause(t, { cause: e })),
                        i(e) && (r.code = e.code),
                        r
                      );
                    }
                    var r;
                    return t.length > 0 ? new Error(`${String(e)}: ${t}`) : new Error(String(e));
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/errors.cjs',
      },
    ],
    [
      2348,
      {
        './assert.cjs': 2339,
        './bytes.cjs': 2341,
        '@metamask/superstruct': 2913,
        '@noble/hashes/sha3': 3055,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.remove0x =
                    r.add0x =
                    r.isValidChecksumAddress =
                    r.getChecksumAddress =
                    r.isValidHexAddress =
                    r.assertIsStrictHexString =
                    r.assertIsHexString =
                    r.isStrictHexString =
                    r.isHexString =
                    r.HexChecksumAddressStruct =
                    r.HexAddressStruct =
                    r.StrictHexStruct =
                    r.HexStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('@noble/hashes/sha3'),
                  i = e('./assert.cjs'),
                  o = e('./bytes.cjs');
                function a(e) {
                  return (0, n.is)(e, r.HexStruct);
                }
                function c(e) {
                  return (0, n.is)(e, r.StrictHexStruct);
                }
                function u(e) {
                  (0, i.assert)((0, n.is)(e, r.HexChecksumAddressStruct), 'Invalid hex address.');
                  const t = d(e.toLowerCase()),
                    a = d((0, o.bytesToHex)((0, s.keccak_256)(t)));
                  return `0x${t
                    .split('')
                    .map((e, t) => {
                      const r = a[t];
                      return (
                        (0, i.assert)((0, n.is)(r, (0, n.string)()), 'Hash shorter than address.'),
                        parseInt(r, 16) > 7 ? e.toUpperCase() : e
                      );
                    })
                    .join('')}`;
                }
                function l(e) {
                  return !!(0, n.is)(e, r.HexChecksumAddressStruct) && u(e) === e;
                }
                function d(e) {
                  return e.startsWith('0x') || e.startsWith('0X') ? e.substring(2) : e;
                }
                (r.HexStruct = (0, n.pattern)((0, n.string)(), /^(?:0x)?[0-9a-f]+$/iu)),
                  (r.StrictHexStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]+$/iu)),
                  (r.HexAddressStruct = (0, n.pattern)((0, n.string)(), /^0x[0-9a-f]{40}$/u)),
                  (r.HexChecksumAddressStruct = (0, n.pattern)(
                    (0, n.string)(),
                    /^0x[0-9a-fA-F]{40}$/u
                  )),
                  (r.isHexString = a),
                  (r.isStrictHexString = c),
                  (r.assertIsHexString = function (e) {
                    (0, i.assert)(a(e), 'Value must be a hexadecimal string.');
                  }),
                  (r.assertIsStrictHexString = function (e) {
                    (0, i.assert)(c(e), 'Value must be a hexadecimal string, starting with "0x".');
                  }),
                  (r.isValidHexAddress = function (e) {
                    return (0, n.is)(e, r.HexAddressStruct) || l(e);
                  }),
                  (r.getChecksumAddress = u),
                  (r.isValidChecksumAddress = l),
                  (r.add0x = function (e) {
                    return e.startsWith('0x')
                      ? e
                      : e.startsWith('0X')
                        ? `0x${e.substring(2)}`
                        : `0x${e}`;
                  }),
                  (r.remove0x = d);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/hex.cjs',
      },
    ],
    [
      2349,
      {
        './assert.cjs': 2339,
        './base64.cjs': 2340,
        './bytes.cjs': 2341,
        './caip-types.cjs': 2342,
        './checksum.cjs': 2343,
        './coercers.cjs': 2344,
        './collections.cjs': 2345,
        './encryption-types.cjs': 2346,
        './errors.cjs': 2347,
        './hex.cjs': 2348,
        './json.cjs': 2350,
        './keyring.cjs': 2351,
        './logging.cjs': 2352,
        './misc.cjs': 2353,
        './number.cjs': 2354,
        './opaque.cjs': 2355,
        './promise.cjs': 2356,
        './time.cjs': 2357,
        './transaction-types.cjs': 2358,
        './versions.cjs': 2359,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./assert.cjs'), r),
                  s(e('./base64.cjs'), r),
                  s(e('./bytes.cjs'), r),
                  s(e('./caip-types.cjs'), r),
                  s(e('./checksum.cjs'), r),
                  s(e('./coercers.cjs'), r),
                  s(e('./collections.cjs'), r),
                  s(e('./encryption-types.cjs'), r),
                  s(e('./errors.cjs'), r),
                  s(e('./hex.cjs'), r),
                  s(e('./json.cjs'), r),
                  s(e('./keyring.cjs'), r),
                  s(e('./logging.cjs'), r),
                  s(e('./misc.cjs'), r),
                  s(e('./number.cjs'), r),
                  s(e('./opaque.cjs'), r),
                  s(e('./promise.cjs'), r),
                  s(e('./time.cjs'), r),
                  s(e('./transaction-types.cjs'), r),
                  s(e('./versions.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/index.cjs',
      },
    ],
    [
      2350,
      { './assert.cjs': 2339, './misc.cjs': 2353, '@metamask/superstruct': 2913 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getJsonRpcIdValidator =
                    r.assertIsJsonRpcError =
                    r.isJsonRpcError =
                    r.assertIsJsonRpcFailure =
                    r.isJsonRpcFailure =
                    r.assertIsJsonRpcSuccess =
                    r.isJsonRpcSuccess =
                    r.assertIsJsonRpcResponse =
                    r.isJsonRpcResponse =
                    r.assertIsPendingJsonRpcResponse =
                    r.isPendingJsonRpcResponse =
                    r.JsonRpcResponseStruct =
                    r.JsonRpcFailureStruct =
                    r.JsonRpcSuccessStruct =
                    r.PendingJsonRpcResponseStruct =
                    r.assertIsJsonRpcRequest =
                    r.isJsonRpcRequest =
                    r.assertIsJsonRpcNotification =
                    r.isJsonRpcNotification =
                    r.JsonRpcNotificationStruct =
                    r.JsonRpcRequestStruct =
                    r.JsonRpcParamsStruct =
                    r.JsonRpcErrorStruct =
                    r.JsonRpcIdStruct =
                    r.JsonRpcVersionStruct =
                    r.jsonrpc2 =
                    r.getJsonSize =
                    r.getSafeJson =
                    r.isValidJson =
                    r.JsonStruct =
                    r.UnsafeJsonStruct =
                    r.exactOptional =
                    r.object =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('./assert.cjs'),
                  i = e('./misc.cjs');
                function o({ path: e, branch: t }) {
                  const r = e[e.length - 1];
                  return (0, i.hasProperty)(t[t.length - 2], r);
                }
                function a(e) {
                  return new n.Struct({
                    ...e,
                    type: `optional ${e.type}`,
                    validator: (t, r) => !o(r) || e.validator(t, r),
                    refiner: (t, r) => !o(r) || e.refiner(t, r),
                  });
                }
                function c(e) {
                  if (null === e || 'boolean' == typeof e || 'string' == typeof e) return !0;
                  if ('number' == typeof e && Number.isFinite(e)) return !0;
                  if ('object' == typeof e) {
                    let t = !0;
                    if (Array.isArray(e)) {
                      for (let r = 0; r < e.length; r++)
                        if (!c(e[r])) {
                          t = !1;
                          break;
                        }
                      return t;
                    }
                    const r = Object.entries(e);
                    for (let e = 0; e < r.length; e++)
                      if ('string' != typeof r[e][0] || !c(r[e][1])) {
                        t = !1;
                        break;
                      }
                    return t;
                  }
                  return !1;
                }
                function u(e) {
                  return (0, n.create)(e, r.JsonStruct);
                }
                (r.object = e => (0, n.object)(e)),
                  (r.exactOptional = a),
                  (r.UnsafeJsonStruct = (0, n.define)('JSON', e => c(e))),
                  (r.JsonStruct = (0, n.coerce)(
                    r.UnsafeJsonStruct,
                    (0, n.any)(),
                    e => (
                      (0, s.assertStruct)(e, r.UnsafeJsonStruct),
                      JSON.parse(
                        JSON.stringify(e, (e, t) =>
                          '__proto__' === e || 'constructor' === e ? undefined : t
                        )
                      )
                    )
                  )),
                  (r.isValidJson = function (e) {
                    try {
                      return u(e), !0;
                    } catch {
                      return !1;
                    }
                  }),
                  (r.getSafeJson = u),
                  (r.getJsonSize = function (e) {
                    (0, s.assertStruct)(e, r.JsonStruct, 'Invalid JSON value');
                    const t = JSON.stringify(e);
                    return new TextEncoder().encode(t).byteLength;
                  }),
                  (r.jsonrpc2 = '2.0'),
                  (r.JsonRpcVersionStruct = (0, n.literal)(r.jsonrpc2)),
                  (r.JsonRpcIdStruct = (0, n.nullable)(
                    (0, n.union)([(0, n.number)(), (0, n.string)()])
                  )),
                  (r.JsonRpcErrorStruct = (0, r.object)({
                    code: (0, n.integer)(),
                    message: (0, n.string)(),
                    data: a(r.JsonStruct),
                    stack: a((0, n.string)()),
                  })),
                  (r.JsonRpcParamsStruct = (0, n.union)([
                    (0, n.record)((0, n.string)(), r.JsonStruct),
                    (0, n.array)(r.JsonStruct),
                  ])),
                  (r.JsonRpcRequestStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.JsonRpcNotificationStruct = (0, r.object)({
                    jsonrpc: r.JsonRpcVersionStruct,
                    method: (0, n.string)(),
                    params: a(r.JsonRpcParamsStruct),
                  })),
                  (r.isJsonRpcNotification = function (e) {
                    return (0, n.is)(e, r.JsonRpcNotificationStruct);
                  }),
                  (r.assertIsJsonRpcNotification = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcNotificationStruct,
                      'Invalid JSON-RPC notification',
                      t
                    );
                  }),
                  (r.isJsonRpcRequest = function (e) {
                    return (0, n.is)(e, r.JsonRpcRequestStruct);
                  }),
                  (r.assertIsJsonRpcRequest = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcRequestStruct, 'Invalid JSON-RPC request', t);
                  }),
                  (r.PendingJsonRpcResponseStruct = (0, n.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: (0, n.optional)((0, n.unknown)()),
                    error: (0, n.optional)(r.JsonRpcErrorStruct),
                  })),
                  (r.JsonRpcSuccessStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    result: r.JsonStruct,
                  })),
                  (r.JsonRpcFailureStruct = (0, r.object)({
                    id: r.JsonRpcIdStruct,
                    jsonrpc: r.JsonRpcVersionStruct,
                    error: r.JsonRpcErrorStruct,
                  })),
                  (r.JsonRpcResponseStruct = (0, n.union)([
                    r.JsonRpcSuccessStruct,
                    r.JsonRpcFailureStruct,
                  ])),
                  (r.isPendingJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.PendingJsonRpcResponseStruct);
                  }),
                  (r.assertIsPendingJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.PendingJsonRpcResponseStruct,
                      'Invalid pending JSON-RPC response',
                      t
                    );
                  }),
                  (r.isJsonRpcResponse = function (e) {
                    return (0, n.is)(e, r.JsonRpcResponseStruct);
                  }),
                  (r.assertIsJsonRpcResponse = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcResponseStruct, 'Invalid JSON-RPC response', t);
                  }),
                  (r.isJsonRpcSuccess = function (e) {
                    return (0, n.is)(e, r.JsonRpcSuccessStruct);
                  }),
                  (r.assertIsJsonRpcSuccess = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcSuccessStruct,
                      'Invalid JSON-RPC success response',
                      t
                    );
                  }),
                  (r.isJsonRpcFailure = function (e) {
                    return (0, n.is)(e, r.JsonRpcFailureStruct);
                  }),
                  (r.assertIsJsonRpcFailure = function (e, t) {
                    (0, s.assertStruct)(
                      e,
                      r.JsonRpcFailureStruct,
                      'Invalid JSON-RPC failure response',
                      t
                    );
                  }),
                  (r.isJsonRpcError = function (e) {
                    return (0, n.is)(e, r.JsonRpcErrorStruct);
                  }),
                  (r.assertIsJsonRpcError = function (e, t) {
                    (0, s.assertStruct)(e, r.JsonRpcErrorStruct, 'Invalid JSON-RPC error', t);
                  }),
                  (r.getJsonRpcIdValidator = function (e) {
                    const {
                      permitEmptyString: t,
                      permitFractions: r,
                      permitNull: n,
                    } = { permitEmptyString: !0, permitFractions: !1, permitNull: !0, ...e };
                    return e =>
                      Boolean(
                        ('number' == typeof e && (r || Number.isInteger(e))) ||
                          ('string' == typeof e && (t || e.length > 0)) ||
                          (n && null === e)
                      );
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/json.cjs',
      },
    ],
    [
      2351,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/keyring.cjs',
      },
    ],
    [
      2352,
      { debug: 4292 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createModuleLogger = r.createProjectLogger = void 0);
                const s = (0, n(e('debug')).default)('metamask');
                (r.createProjectLogger = function (e) {
                  return s.extend(e);
                }),
                  (r.createModuleLogger = function (e, t) {
                    return e.extend(t);
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/logging.cjs',
      },
    ],
    [
      2353,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.calculateNumberSize =
                    r.calculateStringSize =
                    r.isASCII =
                    r.isPlainObject =
                    r.ESCAPE_CHARACTERS_REGEXP =
                    r.JsonSize =
                    r.getKnownPropertyNames =
                    r.hasProperty =
                    r.isObject =
                    r.isNullOrUndefined =
                    r.isNonEmptyArray =
                      void 0),
                  (r.isNonEmptyArray = function (e) {
                    return Array.isArray(e) && e.length > 0;
                  }),
                  (r.isNullOrUndefined = function (e) {
                    return null === e || e === undefined;
                  }),
                  (r.isObject = function (e) {
                    return Boolean(e) && 'object' == typeof e && !Array.isArray(e);
                  });
                function n(e) {
                  return e.charCodeAt(0) <= 127;
                }
                (r.hasProperty = (e, t) => Object.hasOwnProperty.call(e, t)),
                  (r.getKnownPropertyNames = function (e) {
                    return Object.getOwnPropertyNames(e);
                  }),
                  (function (e) {
                    (e[(e.Null = 4)] = 'Null'),
                      (e[(e.Comma = 1)] = 'Comma'),
                      (e[(e.Wrapper = 1)] = 'Wrapper'),
                      (e[(e.True = 4)] = 'True'),
                      (e[(e.False = 5)] = 'False'),
                      (e[(e.Quote = 1)] = 'Quote'),
                      (e[(e.Colon = 1)] = 'Colon'),
                      (e[(e.Date = 24)] = 'Date');
                  })(r.JsonSize || (r.JsonSize = {})),
                  (r.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu),
                  (r.isPlainObject = function (e) {
                    if ('object' != typeof e || null === e) return !1;
                    try {
                      let t = e;
                      for (; null !== Object.getPrototypeOf(t); ) t = Object.getPrototypeOf(t);
                      return Object.getPrototypeOf(e) === t;
                    } catch (e) {
                      return !1;
                    }
                  }),
                  (r.isASCII = n),
                  (r.calculateStringSize = function (e) {
                    return (
                      e.split('').reduce((e, t) => (n(t) ? e + 1 : e + 2), 0) +
                      (e.match(r.ESCAPE_CHARACTERS_REGEXP) ?? []).length
                    );
                  }),
                  (r.calculateNumberSize = function (e) {
                    return e.toString().length;
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/misc.cjs',
      },
    ],
    [
      2354,
      { './assert.cjs': 2339, './hex.cjs': 2348 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.hexToBigInt = r.hexToNumber = r.bigIntToHex = r.numberToHex = void 0);
                const n = e('./assert.cjs'),
                  s = e('./hex.cjs');
                r.numberToHex = e => (
                  (0, n.assert)('number' == typeof e, 'Value must be a number.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative number.'),
                  (0, n.assert)(
                    Number.isSafeInteger(e),
                    'Value is not a safe integer. Use `bigIntToHex` instead.'
                  ),
                  (0, s.add0x)(e.toString(16))
                );
                r.bigIntToHex = e => (
                  (0, n.assert)('bigint' == typeof e, 'Value must be a bigint.'),
                  (0, n.assert)(e >= 0, 'Value must be a non-negative bigint.'),
                  (0, s.add0x)(e.toString(16))
                );
                r.hexToNumber = e => {
                  (0, s.assertIsHexString)(e);
                  const t = parseInt(e, 16);
                  return (
                    (0, n.assert)(
                      Number.isSafeInteger(t),
                      'Value is not a safe integer. Use `hexToBigInt` instead.'
                    ),
                    t
                  );
                };
                r.hexToBigInt = e => ((0, s.assertIsHexString)(e), BigInt((0, s.add0x)(e)));
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/number.cjs',
      },
    ],
    [
      2355,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/opaque.cjs',
      },
    ],
    [
      2356,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createDeferredPromise = void 0),
                  (r.createDeferredPromise = function ({
                    suppressUnhandledRejection: e = !1,
                  } = {}) {
                    let t, r;
                    const n = new Promise((e, n) => {
                      (t = e), (r = n);
                    });
                    return e && n.catch(e => {}), { promise: n, resolve: t, reject: r };
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/promise.cjs',
      },
    ],
    [
      2357,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.timeSince = r.inMilliseconds = r.Duration = void 0),
                  (function (e) {
                    (e[(e.Millisecond = 1)] = 'Millisecond'),
                      (e[(e.Second = 1e3)] = 'Second'),
                      (e[(e.Minute = 6e4)] = 'Minute'),
                      (e[(e.Hour = 36e5)] = 'Hour'),
                      (e[(e.Day = 864e5)] = 'Day'),
                      (e[(e.Week = 6048e5)] = 'Week'),
                      (e[(e.Year = 31536e6)] = 'Year');
                  })(r.Duration || (r.Duration = {}));
                const n = (e, t) => {
                  if (!(e => Number.isInteger(e) && e >= 0)(e))
                    throw new Error(`"${t}" must be a non-negative integer. Received: "${e}".`);
                };
                (r.inMilliseconds = function (e, t) {
                  return n(e, 'count'), e * t;
                }),
                  (r.timeSince = function (e) {
                    return n(e, 'timestamp'), Date.now() - e;
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/time.cjs',
      },
    ],
    [
      2358,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/transaction-types.cjs',
      },
    ],
    [
      2359,
      { './assert.cjs': 2339, '@metamask/superstruct': 2913, semver: 5617 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.satisfiesVersionRange =
                    r.gtRange =
                    r.gtVersion =
                    r.assertIsSemVerRange =
                    r.assertIsSemVerVersion =
                    r.isValidSemVerRange =
                    r.isValidSemVerVersion =
                    r.VersionRangeStruct =
                    r.VersionStruct =
                      void 0);
                const n = e('@metamask/superstruct'),
                  s = e('semver'),
                  i = e('./assert.cjs');
                (r.VersionStruct = (0, n.refine)(
                  (0, n.string)(),
                  'Version',
                  e => null !== (0, s.valid)(e) || `Expected SemVer version, got "${e}"`
                )),
                  (r.VersionRangeStruct = (0, n.refine)(
                    (0, n.string)(),
                    'Version range',
                    e => null !== (0, s.validRange)(e) || `Expected SemVer range, got "${e}"`
                  )),
                  (r.isValidSemVerVersion = function (e) {
                    return (0, n.is)(e, r.VersionStruct);
                  }),
                  (r.isValidSemVerRange = function (e) {
                    return (0, n.is)(e, r.VersionRangeStruct);
                  }),
                  (r.assertIsSemVerVersion = function (e) {
                    (0, i.assertStruct)(e, r.VersionStruct);
                  }),
                  (r.assertIsSemVerRange = function (e) {
                    (0, i.assertStruct)(e, r.VersionRangeStruct);
                  }),
                  (r.gtVersion = function (e, t) {
                    return (0, s.gt)(e, t);
                  }),
                  (r.gtRange = function (e, t) {
                    return (0, s.gtr)(e, t);
                  }),
                  (r.satisfiesVersionRange = function (e, t) {
                    return (0, s.satisfies)(e, t, { includePrerelease: !0 });
                  });
              };
            };
      },
      {
        package: '@metamask/network-controller>@metamask/utils',
        file: 'node_modules/@metamask/network-controller/node_modules/@metamask/utils/dist/versions.cjs',
      },
    ],
    [
      2360,
      { '@ethersproject/providers': 565, assert: 4135, 'async-mutex': 2365 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  u =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  l =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.NonceTracker = void 0);
                const d = l(e('assert')),
                  m = e('async-mutex'),
                  f = e('@ethersproject/providers');
                (r.NonceTracker = class {
                  constructor(e) {
                    n.set(this, void 0),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o.set(this, void 0),
                      a.set(this, void 0),
                      c(this, n, e.provider, 'f'),
                      c(this, s, e.blockTracker, 'f'),
                      c(this, i, e.getPendingTransactions, 'f'),
                      c(this, o, e.getConfirmedTransactions, 'f'),
                      c(this, a, {}, 'f');
                  }
                  setProvider({ provider: e, blockTracker: t }) {
                    d.default('object' == typeof e, 'missing or invalid provider'),
                      d.default('object' == typeof t, 'missing or invalid blockTracker'),
                      c(this, n, e, 'f'),
                      c(this, s, t, 'f');
                  }
                  async getGlobalLock() {
                    const e = this._lookupMutex('global');
                    return { releaseLock: await e.acquire() };
                  }
                  async getNonceLock(e) {
                    await this._globalMutexFree();
                    const t = await this._takeMutex(e);
                    try {
                      const r = await this._getNetworkNextNonce(e),
                        n = this._getHighestLocallyConfirmed(e),
                        s = r.nonce,
                        o = Math.max(s, n),
                        a = u(this, i, 'f').call(this, e),
                        c = this._getHighestContinuousFrom(a, o),
                        l = {
                          params: {
                            highestLocallyConfirmed: n,
                            nextNetworkNonce: s,
                            highestSuggested: o,
                          },
                          local: c,
                          network: r,
                        },
                        m = Math.max(r.nonce, c.nonce);
                      return (
                        d.default(
                          Number.isInteger(m),
                          `nonce-tracker - nextNonce is not an integer - got: (${typeof m}) "${m}"`
                        ),
                        { nextNonce: m, nonceDetails: l, releaseLock: t }
                      );
                    } catch (e) {
                      throw (t(), e);
                    }
                  }
                  async _globalMutexFree() {
                    const e = this._lookupMutex('global');
                    (await e.acquire())();
                  }
                  async _takeMutex(e) {
                    const t = this._lookupMutex(e);
                    return await t.acquire();
                  }
                  _lookupMutex(e) {
                    let t = u(this, a, 'f')[e];
                    return t || ((t = new m.Mutex()), (u(this, a, 'f')[e] = t)), t;
                  }
                  async _getNetworkNextNonce(e) {
                    const t = await u(this, s, 'f').getLatestBlock(),
                      r = await new f.Web3Provider(u(this, n, 'f')).getTransactionCount(e, t);
                    return (
                      d.default(
                        Number.isInteger(r),
                        `nonce-tracker - baseCount is not an integer - got: (${typeof r}) "${r}"`
                      ),
                      { name: 'network', nonce: r, details: { blockNumber: t, baseCount: r } }
                    );
                  }
                  _getHighestLocallyConfirmed(e) {
                    const t = u(this, o, 'f').call(this, e),
                      r = this._getHighestNonce(t);
                    return Number.isInteger(r) ? r + 1 : 0;
                  }
                  _getHighestNonce(e) {
                    const t = e.map(e => {
                      const { nonce: t } = e.txParams;
                      return (
                        d.default('string' == typeof t, 'nonces should be hex strings'),
                        parseInt(t, 16)
                      );
                    });
                    return Math.max.apply(null, t);
                  }
                  _getHighestContinuousFrom(e, t) {
                    const r = e.map(e => {
                      const { nonce: t } = e.txParams;
                      return (
                        d.default('string' == typeof t, 'nonces should be hex strings'),
                        parseInt(t, 16)
                      );
                    });
                    let n = t;
                    for (; r.includes(n); ) n += 1;
                    return { name: 'local', nonce: n, details: { startPoint: t, highest: n } };
                  }
                }),
                  (n = new WeakMap()),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (a = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker',
        file: 'node_modules/@metamask/nonce-tracker/dist/NonceTracker.js',
      },
    ],
    [
      2361,
      { './NonceTracker': 2360 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.NonceTracker = void 0);
                var n = e('./NonceTracker');
                Object.defineProperty(r, 'NonceTracker', {
                  enumerable: !0,
                  get: function () {
                    return n.NonceTracker;
                  },
                });
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker',
        file: 'node_modules/@metamask/nonce-tracker/dist/index.js',
      },
    ],
    [
      2362,
      { './Semaphore': 2363, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
                var n = e('tslib'),
                  s = e('./Semaphore'),
                  i = (function () {
                    function e(e) {
                      this._semaphore = new s.default(1, e);
                    }
                    return (
                      (e.prototype.acquire = function () {
                        return (0, n.__awaiter)(this, void 0, void 0, function () {
                          var e;
                          return (0, n.__generator)(this, function (t) {
                            switch (t.label) {
                              case 0:
                                return [4, this._semaphore.acquire()];
                              case 1:
                                return (e = t.sent()), [2, e[1]];
                            }
                          });
                        });
                      }),
                      (e.prototype.runExclusive = function (e) {
                        return this._semaphore.runExclusive(function () {
                          return e();
                        });
                      }),
                      (e.prototype.isLocked = function () {
                        return this._semaphore.isLocked();
                      }),
                      (e.prototype.waitForUnlock = function () {
                        return this._semaphore.waitForUnlock();
                      }),
                      (e.prototype.release = function () {
                        this._semaphore.release();
                      }),
                      (e.prototype.cancel = function () {
                        return this._semaphore.cancel();
                      }),
                      e
                    );
                  })();
                r.default = i;
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker>async-mutex',
        file: 'node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/Mutex.js',
      },
    ],
    [
      2363,
      { './errors': 2364, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 });
                var n = e('tslib'),
                  s = e('./errors'),
                  i = (function () {
                    function e(e, t) {
                      if (
                        (void 0 === t && (t = s.E_CANCELED),
                        (this._maxConcurrency = e),
                        (this._cancelError = t),
                        (this._queue = []),
                        (this._waiters = []),
                        e <= 0)
                      )
                        throw new Error('semaphore must be initialized to a positive value');
                      this._value = e;
                    }
                    return (
                      (e.prototype.acquire = function () {
                        var e = this,
                          t = this.isLocked(),
                          r = new Promise(function (t, r) {
                            return e._queue.push({ resolve: t, reject: r });
                          });
                        return t || this._dispatch(), r;
                      }),
                      (e.prototype.runExclusive = function (e) {
                        return (0, n.__awaiter)(this, void 0, void 0, function () {
                          var t, r, s;
                          return (0, n.__generator)(this, function (n) {
                            switch (n.label) {
                              case 0:
                                return [4, this.acquire()];
                              case 1:
                                (t = n.sent()), (r = t[0]), (s = t[1]), (n.label = 2);
                              case 2:
                                return n.trys.push([2, , 4, 5]), [4, e(r)];
                              case 3:
                                return [2, n.sent()];
                              case 4:
                                return s(), [7];
                              case 5:
                                return [2];
                            }
                          });
                        });
                      }),
                      (e.prototype.waitForUnlock = function () {
                        return (0, n.__awaiter)(this, void 0, void 0, function () {
                          var e = this;
                          return (0, n.__generator)(this, function (t) {
                            return this.isLocked()
                              ? [
                                  2,
                                  new Promise(function (t) {
                                    return e._waiters.push({ resolve: t });
                                  }),
                                ]
                              : [2, Promise.resolve()];
                          });
                        });
                      }),
                      (e.prototype.isLocked = function () {
                        return this._value <= 0;
                      }),
                      (e.prototype.release = function () {
                        if (this._maxConcurrency > 1)
                          throw new Error(
                            'this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead'
                          );
                        if (this._currentReleaser) {
                          var e = this._currentReleaser;
                          (this._currentReleaser = undefined), e();
                        }
                      }),
                      (e.prototype.cancel = function () {
                        var e = this;
                        this._queue.forEach(function (t) {
                          return t.reject(e._cancelError);
                        }),
                          (this._queue = []);
                      }),
                      (e.prototype._dispatch = function () {
                        var e = this,
                          t = this._queue.shift();
                        if (t) {
                          var r = !1;
                          (this._currentReleaser = function () {
                            r || ((r = !0), e._value++, e._resolveWaiters(), e._dispatch());
                          }),
                            t.resolve([this._value--, this._currentReleaser]);
                        }
                      }),
                      (e.prototype._resolveWaiters = function () {
                        this._waiters.forEach(function (e) {
                          return e.resolve();
                        }),
                          (this._waiters = []);
                      }),
                      e
                    );
                  })();
                r.default = i;
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker>async-mutex',
        file: 'node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/Semaphore.js',
      },
    ],
    [
      2364,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.E_CANCELED = r.E_ALREADY_LOCKED = r.E_TIMEOUT = void 0),
                  (r.E_TIMEOUT = new Error('timeout while waiting for mutex to become available')),
                  (r.E_ALREADY_LOCKED = new Error('mutex already locked')),
                  (r.E_CANCELED = new Error('request for lock canceled'));
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker>async-mutex',
        file: 'node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/errors.js',
      },
    ],
    [
      2365,
      {
        './Mutex': 2362,
        './Semaphore': 2363,
        './errors': 2364,
        './tryAcquire': 2366,
        './withTimeout': 2367,
        tslib: 5685,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.tryAcquire = r.withTimeout = r.Semaphore = r.Mutex = void 0);
                var n = e('tslib'),
                  s = e('./Mutex');
                Object.defineProperty(r, 'Mutex', {
                  enumerable: !0,
                  get: function () {
                    return s.default;
                  },
                });
                var i = e('./Semaphore');
                Object.defineProperty(r, 'Semaphore', {
                  enumerable: !0,
                  get: function () {
                    return i.default;
                  },
                });
                var o = e('./withTimeout');
                Object.defineProperty(r, 'withTimeout', {
                  enumerable: !0,
                  get: function () {
                    return o.withTimeout;
                  },
                });
                var a = e('./tryAcquire');
                Object.defineProperty(r, 'tryAcquire', {
                  enumerable: !0,
                  get: function () {
                    return a.tryAcquire;
                  },
                }),
                  (0, n.__exportStar)(e('./errors'), r);
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker>async-mutex',
        file: 'node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/index.js',
      },
    ],
    [
      2366,
      { './errors': 2364, './withTimeout': 2367 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.tryAcquire = void 0);
                var n = e('./errors'),
                  s = e('./withTimeout');
                r.tryAcquire = function (e, t) {
                  return void 0 === t && (t = n.E_ALREADY_LOCKED), (0, s.withTimeout)(e, 0, t);
                };
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker>async-mutex',
        file: 'node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/tryAcquire.js',
      },
    ],
    [
      2367,
      { './errors': 2364, tslib: 5685 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.withTimeout = void 0);
                var n = e('tslib'),
                  s = e('./errors');
                r.withTimeout = function (e, t, r) {
                  var i = this;
                  return (
                    void 0 === r && (r = s.E_TIMEOUT),
                    {
                      acquire: function () {
                        return new Promise(function (s, o) {
                          return (0, n.__awaiter)(i, void 0, void 0, function () {
                            var i, a, c, u;
                            return (0, n.__generator)(this, function (n) {
                              switch (n.label) {
                                case 0:
                                  (i = !1),
                                    (a = setTimeout(function () {
                                      (i = !0), o(r);
                                    }, t)),
                                    (n.label = 1);
                                case 1:
                                  return n.trys.push([1, 3, , 4]), [4, e.acquire()];
                                case 2:
                                  return (
                                    (c = n.sent()),
                                    i ? (Array.isArray(c) ? c[1] : c)() : (clearTimeout(a), s(c)),
                                    [3, 4]
                                  );
                                case 3:
                                  return (u = n.sent()), i || (clearTimeout(a), o(u)), [3, 4];
                                case 4:
                                  return [2];
                              }
                            });
                          });
                        });
                      },
                      runExclusive: function (e) {
                        return (0, n.__awaiter)(this, void 0, void 0, function () {
                          var t, r;
                          return (0, n.__generator)(this, function (n) {
                            switch (n.label) {
                              case 0:
                                (t = function () {
                                  return undefined;
                                }),
                                  (n.label = 1);
                              case 1:
                                return n.trys.push([1, , 7, 8]), [4, this.acquire()];
                              case 2:
                                return (
                                  (r = n.sent()),
                                  Array.isArray(r) ? ((t = r[1]), [4, e(r[0])]) : [3, 4]
                                );
                              case 3:
                                return [2, n.sent()];
                              case 4:
                                return (t = r), [4, e()];
                              case 5:
                                return [2, n.sent()];
                              case 6:
                                return [3, 8];
                              case 7:
                                return t(), [7];
                              case 8:
                                return [2];
                            }
                          });
                        });
                      },
                      release: function () {
                        e.release();
                      },
                      cancel: function () {
                        return e.cancel();
                      },
                      waitForUnlock: function () {
                        return e.waitForUnlock();
                      },
                      isLocked: function () {
                        return e.isLocked();
                      },
                    }
                  );
                };
              };
            };
      },
      {
        package: '@metamask/transaction-controller>@metamask/nonce-tracker>async-mutex',
        file: 'node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/withTimeout.js',
      },
    ],
    [
      2368,
      {
        './constants/constants.cjs': 2369,
        './constants/notification-schema.cjs': 2371,
        './processors/process-notifications.cjs': 2382,
        './services/feature-announcements.cjs': 2385,
        './services/onchain-notifications.cjs': 2386,
        './utils/utils.cjs': 2389,
        '@metamask/base-controller': 1407,
        '@metamask/controller-utils': 1515,
        '@metamask/keyring-controller': 2021,
        '@metamask/utils': 2995,
        loglevel: 4929,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d,
                  m,
                  f,
                  p,
                  h,
                  g,
                  y,
                  w,
                  k,
                  b,
                  _,
                  S =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  E =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  T =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            S(t, e, r);
                      return E(t, e), t;
                    },
                  v =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  A =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  I =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.defaultState = void 0);
                const C = e('@metamask/base-controller'),
                  j = e('@metamask/controller-utils'),
                  N = e('@metamask/keyring-controller'),
                  P = e('@metamask/utils'),
                  R = I(e('loglevel')),
                  O = e('./constants/constants.cjs'),
                  M = e('./constants/notification-schema.cjs'),
                  x = e('./processors/process-notifications.cjs'),
                  B = T(e('./services/feature-announcements.cjs')),
                  D = T(e('./services/onchain-notifications.cjs')),
                  U = T(e('./utils/utils.cjs')),
                  L = 'NotificationServicesController',
                  H = {
                    subscriptionAccountsSeen: { persist: !0, anonymous: !0 },
                    isMetamaskNotificationsFeatureSeen: { persist: !0, anonymous: !1 },
                    isNotificationServicesEnabled: { persist: !0, anonymous: !1 },
                    isFeatureAnnouncementsEnabled: { persist: !0, anonymous: !1 },
                    metamaskNotificationsList: { persist: !0, anonymous: !0 },
                    metamaskNotificationsReadList: { persist: !0, anonymous: !0 },
                    isUpdatingMetamaskNotifications: { persist: !1, anonymous: !1 },
                    isFetchingMetamaskNotifications: { persist: !1, anonymous: !1 },
                    isUpdatingMetamaskNotificationsAccount: { persist: !1, anonymous: !1 },
                    isCheckingAccountsPresence: { persist: !1, anonymous: !1 },
                  };
                r.defaultState = {
                  subscriptionAccountsSeen: [],
                  isMetamaskNotificationsFeatureSeen: !1,
                  isNotificationServicesEnabled: !1,
                  isFeatureAnnouncementsEnabled: !1,
                  metamaskNotificationsList: [],
                  metamaskNotificationsReadList: [],
                  isUpdatingMetamaskNotifications: !1,
                  isFetchingMetamaskNotifications: !1,
                  isUpdatingMetamaskNotificationsAccount: [],
                  isCheckingAccountsPresence: !1,
                };
                const $ = new Set([M.TRIGGER_TYPES.SNAP]);
                class F extends C.BaseController {
                  constructor({ messenger: e, state: t, env: m }) {
                    super({
                      messenger: e,
                      metadata: H,
                      name: L,
                      state: { ...r.defaultState, ...t },
                    }),
                      n.add(this),
                      s.set(this, {
                        isUnlocked: !1,
                        setupLockedStateSubscriptions: e => {
                          const { isUnlocked: t } = this.messagingSystem.call(
                            'KeyringController:getState'
                          );
                          (A(this, s, 'f').isUnlocked = t),
                            this.messagingSystem.subscribe('KeyringController:unlock', () => {
                              (A(this, s, 'f').isUnlocked = !0), e();
                            }),
                            this.messagingSystem.subscribe('KeyringController:lock', () => {
                              A(this, s, 'f').isUnlocked = !1;
                            });
                        },
                      }),
                      i.set(this, {
                        getBearerToken: async () =>
                          await this.messagingSystem.call(
                            'AuthenticationController:getBearerToken'
                          ),
                        isSignedIn: () =>
                          this.messagingSystem.call('AuthenticationController:isSignedIn'),
                        signIn: async () =>
                          await this.messagingSystem.call('AuthenticationController:performSignIn'),
                      }),
                      o.set(this, {
                        getStorageKey: () =>
                          this.messagingSystem.call('UserStorageController:getStorageKey'),
                        getNotificationStorage: async () =>
                          await this.messagingSystem.call(
                            'UserStorageController:performGetStorage',
                            'notifications.notification_settings'
                          ),
                        setNotificationStorage: async e =>
                          await this.messagingSystem.call(
                            'UserStorageController:performSetStorage',
                            'notifications.notification_settings',
                            e
                          ),
                      }),
                      a.set(this, {
                        isSetup: !1,
                        subscribeToPushNotifications: async () => {
                          await this.messagingSystem.call(
                            'NotificationServicesPushController:subscribeToPushNotifications'
                          );
                        },
                        enablePushNotifications: async e => {
                          try {
                            await this.messagingSystem.call(
                              'NotificationServicesPushController:enablePushNotifications',
                              e
                            );
                          } catch (e) {
                            R.default.error('Silently failed to enable push notifications', e);
                          }
                        },
                        disablePushNotifications: async () => {
                          try {
                            await this.messagingSystem.call(
                              'NotificationServicesPushController:disablePushNotifications'
                            );
                          } catch (e) {
                            R.default.error('Silently failed to disable push notifications', e);
                          }
                        },
                        updatePushNotifications: async e => {
                          try {
                            await this.messagingSystem.call(
                              'NotificationServicesPushController:updateTriggerPushNotifications',
                              e
                            );
                          } catch (e) {
                            R.default.error('Silently failed to update push notifications', e);
                          }
                        },
                        subscribe: () => {
                          this.messagingSystem.subscribe(
                            'NotificationServicesPushController:onNewNotifications',
                            e => {
                              this.updateMetamaskNotificationsList(e);
                            }
                          );
                        },
                        initializePushNotifications: async () => {
                          if (this.state.isNotificationServicesEnabled && !A(this, a, 'f').isSetup)
                            try {
                              if (!A(this, s, 'f').isUnlocked) throw new Error('Keyring is locked');
                              await this.enablePushNotifications(), (A(this, a, 'f').isSetup = !0);
                            } catch {
                              await A(this, a, 'f')
                                .subscribeToPushNotifications()
                                .catch(() => {});
                            }
                        },
                      }),
                      c.set(this, {
                        isNotificationAccountsSetup: !1,
                        getNotificationAccounts: async () =>
                          await this.messagingSystem
                            .call(
                              'KeyringController:withKeyring',
                              { type: N.KeyringTypes.hd, index: 0 },
                              async ({ keyring: e }) => await e.getAccounts()
                            )
                            .catch(() => null),
                        listAccounts: async () => {
                          const e = await A(this, c, 'f').getNotificationAccounts();
                          if (!e) return { accountsAdded: [], accountsRemoved: [], accounts: [] };
                          const t = e
                              .map(e => (0, j.toChecksumHexAddress)(e))
                              .filter(e => (0, j.isValidHexAddress)(e)),
                            r = new Set(t),
                            n = new Set(this.state.subscriptionAccountsSeen);
                          if (0 === t.length)
                            return { accountsAdded: [], accountsRemoved: [], accounts: [] };
                          const s = t.filter(e => !n.has(e)),
                            i = [...n.values()].filter(e => !r.has(e));
                          return (
                            this.update(e => {
                              e.subscriptionAccountsSeen = [...r];
                            }),
                            { accountsAdded: s, accountsRemoved: i, accounts: t }
                          );
                        },
                        initialize: async () => {
                          A(this, s, 'f').isUnlocked &&
                            !A(this, c, 'f').isNotificationAccountsSetup &&
                            (await A(this, c, 'f').listAccounts(),
                            (A(this, c, 'f').isNotificationAccountsSetup = !0));
                        },
                        subscribe: () => {
                          this.messagingSystem.subscribe(
                            'KeyringController:stateChange',
                            async (e, t) => {
                              const r = e !== t;
                              if (!this.state.isNotificationServicesEnabled || !r) return;
                              const { accountsAdded: n, accountsRemoved: s } = await A(
                                  this,
                                  c,
                                  'f'
                                ).listAccounts(),
                                i = [];
                              n.length > 0 && i.push(this.updateOnChainTriggersByAccount(n)),
                                s.length > 0 && i.push(this.deleteOnChainTriggersByAccount(s)),
                                await Promise.all(i);
                            },
                            e => e?.keyrings?.flatMap?.(e => e.accounts)?.length ?? 0
                          );
                        },
                      }),
                      u.set(this, void 0),
                      v(this, u, m.featureAnnouncements, 'f'),
                      A(this, n, 'm', l).call(this),
                      A(this, n, 'm', d).call(this);
                  }
                  init() {
                    A(this, s, 'f').setupLockedStateSubscriptions(async () => {
                      await A(this, c, 'f').initialize(),
                        await A(this, a, 'f').initializePushNotifications();
                    }),
                      A(this, c, 'f').initialize(),
                      A(this, a, 'f').initializePushNotifications(),
                      A(this, c, 'f').subscribe(),
                      A(this, a, 'f').subscribe();
                  }
                  async enablePushNotifications() {
                    await A(this, n, 'm', f).call(this);
                    const e = await A(this, n, 'm', g).call(this);
                    if (!e) throw new Error('Unable to get triggers');
                    const t = U.getAllUUIDs(e);
                    await A(this, a, 'f').enablePushNotifications(t);
                  }
                  async disablePushNotifications() {
                    await A(this, a, 'f').disablePushNotifications();
                  }
                  async checkAccountsPresence(e) {
                    try {
                      A(this, n, 'm', k).call(this, !0);
                      const t = await A(this, n, 'm', g).call(this);
                      A(this, n, 'm', h).call(this, t);
                      return U.checkAccountsPresence(t, e);
                    } catch (e) {
                      throw (R.default.error('Failed to check accounts presence', e), e);
                    } finally {
                      A(this, n, 'm', k).call(this, !1);
                    }
                  }
                  async setFeatureAnnouncementsEnabled(e) {
                    try {
                      this.update(t => {
                        t.isFeatureAnnouncementsEnabled = e;
                      });
                    } catch (e) {
                      throw (
                        (R.default.error('Unable to toggle feature announcements', e),
                        new Error('Unable to toggle feature announcements'))
                      );
                    }
                  }
                  async createOnChainTriggers(e) {
                    try {
                      A(this, n, 'm', y).call(this, !0);
                      const { bearerToken: t, storageKey: r } = await A(this, n, 'm', p).call(this),
                        { accounts: s } = await A(this, c, 'f').listAccounts();
                      let i = e?.resetNotifications ? null : await A(this, n, 'm', g).call(this);
                      i?.[O.USER_STORAGE_VERSION_KEY] === undefined &&
                        ((i = U.initializeUserStorage(
                          s.map(e => ({ address: e })),
                          !1
                        )),
                        await A(this, o, 'f').setNotificationStorage(JSON.stringify(i)));
                      const u = U.traverseUserStorageTriggers(i);
                      await D.createOnChainTriggers(i, r, t, u);
                      const l = U.getAllUUIDs(i);
                      return (
                        A(this, a, 'f')
                          .enablePushNotifications(l)
                          .catch(() => {}),
                        await A(this, o, 'f').setNotificationStorage(JSON.stringify(i)),
                        this.update(e => {
                          (e.isNotificationServicesEnabled = !0),
                            (e.isFeatureAnnouncementsEnabled = !0),
                            (e.isMetamaskNotificationsFeatureSeen = !0);
                        }),
                        i
                      );
                    } catch (e) {
                      throw (
                        (R.default.error('Failed to create On Chain triggers', e),
                        new Error('Failed to create On Chain triggers'))
                      );
                    } finally {
                      A(this, n, 'm', y).call(this, !1);
                    }
                  }
                  async enableMetamaskNotifications() {
                    try {
                      A(this, n, 'm', y).call(this, !0),
                        await A(this, n, 'm', f).call(this),
                        await this.createOnChainTriggers();
                    } catch (e) {
                      throw (
                        (R.default.error('Unable to enable notifications', e),
                        new Error('Unable to enable notifications'))
                      );
                    } finally {
                      A(this, n, 'm', y).call(this, !1);
                    }
                  }
                  async disableNotificationServices() {
                    A(this, n, 'm', y).call(this, !0);
                    try {
                      await A(this, a, 'f').disablePushNotifications();
                    } catch {}
                    const e = this.state.metamaskNotificationsList.filter(
                      e => e.type === M.TRIGGER_TYPES.SNAP
                    );
                    this.update(t => {
                      (t.isNotificationServicesEnabled = !1),
                        (t.isFeatureAnnouncementsEnabled = !1),
                        (t.metamaskNotificationsList = e);
                    }),
                      A(this, n, 'm', y).call(this, !1);
                  }
                  async deleteOnChainTriggersByAccount(e) {
                    try {
                      A(this, n, 'm', b).call(this, e);
                      const { bearerToken: t, storageKey: r } = await A(this, n, 'm', p).call(this),
                        s = await A(this, n, 'm', g).call(this);
                      A(this, n, 'm', h).call(this, s);
                      const i = e.map(e => U.getUUIDsForAccount(s, e.toLowerCase())).flat();
                      if (0 === i.length) return s;
                      await D.deleteOnChainTriggers(s, r, t, i);
                      const c = U.getAllUUIDs(s);
                      return (
                        await A(this, a, 'f').updatePushNotifications(c),
                        await A(this, o, 'f').setNotificationStorage(JSON.stringify(s)),
                        s
                      );
                    } catch (e) {
                      throw (
                        (R.default.error('Failed to delete OnChain triggers', e),
                        new Error('Failed to delete OnChain triggers'))
                      );
                    } finally {
                      A(this, n, 'm', _).call(this, e);
                    }
                  }
                  async updateOnChainTriggersByAccount(e) {
                    try {
                      A(this, n, 'm', b).call(this, e);
                      const { bearerToken: t, storageKey: r } = await A(this, n, 'm', p).call(this),
                        s = await A(this, n, 'm', g).call(this);
                      A(this, n, 'm', h).call(this, s),
                        e.forEach(e => U.upsertAddressTriggers(e, s));
                      if (
                        U.traverseUserStorageTriggers(s, {
                          mapTrigger: e => (e.enabled ? undefined : e),
                        }).length > 0
                      ) {
                        await A(this, o, 'f').setNotificationStorage(JSON.stringify(s));
                        const n = U.traverseUserStorageTriggers(s, {
                          mapTrigger: t =>
                            e.some(e => e.toLowerCase() === t.address.toLowerCase())
                              ? t
                              : undefined,
                        });
                        await D.createOnChainTriggers(s, r, t, n);
                      }
                      const i = U.getAllUUIDs(s);
                      return (
                        await A(this, a, 'f').updatePushNotifications(i),
                        await A(this, o, 'f').setNotificationStorage(JSON.stringify(s)),
                        s
                      );
                    } catch (e) {
                      throw (
                        (R.default.error('Failed to update OnChain triggers', e),
                        new Error('Failed to update OnChain triggers'))
                      );
                    } finally {
                      A(this, n, 'm', _).call(this, e);
                    }
                  }
                  async fetchAndUpdateMetamaskNotifications(e) {
                    try {
                      A(this, n, 'm', w).call(this, !0);
                      const t = this.state.isNotificationServicesEnabled,
                        r =
                          t && this.state.isFeatureAnnouncementsEnabled
                            ? await B.getFeatureAnnouncementNotifications(A(this, u, 'f'), e).catch(
                                () => []
                              )
                            : [],
                        s = [];
                      if (t) {
                        const e = await A(this, o, 'f')
                            .getNotificationStorage()
                            .then(e => e && JSON.parse(e))
                            .catch(() => null),
                          t = await A(this, i, 'f')
                            .getBearerToken()
                            .catch(() => null);
                        if (e && t) {
                          const r = await D.getOnChainNotifications(e, t).catch(() => []);
                          s.push(...r);
                        }
                      }
                      const a = this.state.metamaskNotificationsList.filter(
                          e => e.type === M.TRIGGER_TYPES.SNAP
                        ),
                        c = this.state.metamaskNotificationsReadList,
                        l = e => Boolean(e),
                        d = e => e.map(e => (0, x.safeProcessNotification)(e, c)).filter(l),
                        m = d(r),
                        f = d(s),
                        p = [...m, ...f, ...a];
                      return (
                        p.sort(
                          (e, t) =>
                            new Date(t.createdAt).getTime() - new Date(e.createdAt).getTime()
                        ),
                        this.update(e => {
                          e.metamaskNotificationsList = p;
                        }),
                        this.messagingSystem.publish(
                          `${L}:notificationsListUpdated`,
                          this.state.metamaskNotificationsList
                        ),
                        A(this, n, 'm', w).call(this, !1),
                        p
                      );
                    } catch (e) {
                      throw (
                        (A(this, n, 'm', w).call(this, !1),
                        R.default.error('Failed to fetch notifications', e),
                        new Error('Failed to fetch notifications'))
                      );
                    }
                  }
                  getNotificationsByType(e) {
                    return (
                      (0, P.assert)(
                        Object.values(M.TRIGGER_TYPES).includes(e),
                        'Invalid trigger type.'
                      ),
                      this.state.metamaskNotificationsList.filter(t => t.type === e)
                    );
                  }
                  async deleteNotificationById(e) {
                    const t = this.state.metamaskNotificationsList.find(t => t.id === e);
                    (0, P.assert)(t, 'The notification to be deleted does not exist.'),
                      (0, P.assert)(
                        $.has(t.type),
                        `The notification type of "${t.type}" is not locally persisted, only the following types can use this function: ${[...$].join(', ')}.`
                      );
                    const r = this.state.metamaskNotificationsList.filter(t => t.id !== e);
                    this.update(e => {
                      e.metamaskNotificationsList = r;
                    });
                  }
                  async deleteNotificationsById(e) {
                    for (const t of e) await this.deleteNotificationById(t);
                    this.messagingSystem.publish(
                      `${L}:notificationsListUpdated`,
                      this.state.metamaskNotificationsList
                    );
                  }
                  async markMetamaskNotificationsAsRead(e) {
                    let t = [],
                      r = [],
                      n = [];
                    try {
                      const [s, o, a] = e.reduce(
                        (e, t) => {
                          if (!t.isRead)
                            switch (t.type) {
                              case M.TRIGGER_TYPES.FEATURES_ANNOUNCEMENT:
                                e[1].push(t);
                                break;
                              case M.TRIGGER_TYPES.SNAP:
                                e[2].push(t);
                                break;
                              default:
                                e[0].push(t);
                            }
                          return e;
                        },
                        [[], [], []]
                      );
                      if (s.length > 0) {
                        const e = await A(this, i, 'f').getBearerToken();
                        e &&
                          ((t = s.map(e => e.id)),
                          await D.markNotificationsAsRead(e, t).catch(() => {
                            (t = []),
                              R.default.warn('Unable to mark onchain notifications as read');
                          }));
                      }
                      o.length > 0 && (r = o.map(e => e.id)),
                        a.length > 0 && (n = a.map(e => e.id));
                    } catch (e) {
                      R.default.warn('Something failed when marking notifications as read', e);
                    }
                    this.update(e => {
                      const s = e.metamaskNotificationsReadList,
                        i = [...r, ...n];
                      (e.metamaskNotificationsReadList = [...new Set([...s, ...i])]),
                        (e.metamaskNotificationsList = e.metamaskNotificationsList.map(e =>
                          i.includes(e.id) || t.includes(e.id)
                            ? e.type === M.TRIGGER_TYPES.SNAP
                              ? { ...e, isRead: !0, readDate: new Date().toISOString() }
                              : { ...e, isRead: !0 }
                            : e
                        ));
                    }),
                      this.messagingSystem.publish(
                        `${L}:markNotificationsAsRead`,
                        this.state.metamaskNotificationsList
                      );
                  }
                  async updateMetamaskNotificationsList(e) {
                    if (this.state.metamaskNotificationsList.some(t => t.id === e.id)) return;
                    const t = (0, x.safeProcessNotification)(e);
                    t &&
                      (this.update(e => {
                        new Set(e.metamaskNotificationsList.map(e => e.id)).has(t.id) ||
                          (e.metamaskNotificationsList = [t, ...e.metamaskNotificationsList]);
                      }),
                      this.messagingSystem.publish(
                        `${L}:notificationsListUpdated`,
                        this.state.metamaskNotificationsList
                      ));
                  }
                }
                (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (a = new WeakMap()),
                  (c = new WeakMap()),
                  (u = new WeakMap()),
                  (n = new WeakSet()),
                  (l = function () {
                    this.messagingSystem.registerActionHandler(
                      `${L}:updateMetamaskNotificationsList`,
                      this.updateMetamaskNotificationsList.bind(this)
                    ),
                      this.messagingSystem.registerActionHandler(
                        `${L}:disableNotificationServices`,
                        this.disableNotificationServices.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${L}:getNotificationsByType`,
                        this.getNotificationsByType.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${L}:deleteNotificationsById`,
                        this.deleteNotificationsById.bind(this)
                      );
                  }),
                  (d = function () {
                    this.update(e => {
                      (e.isUpdatingMetamaskNotifications = !1),
                        (e.isCheckingAccountsPresence = !1),
                        (e.isFetchingMetamaskNotifications = !1),
                        (e.isUpdatingMetamaskNotificationsAccount = []);
                    });
                  }),
                  (m = function () {
                    if (!A(this, i, 'f').isSignedIn())
                      throw (
                        (this.update(e => {
                          e.isNotificationServicesEnabled = !1;
                        }),
                        new Error('User is not signed in.'))
                      );
                  }),
                  (f = async function () {
                    A(this, i, 'f').isSignedIn() || (await A(this, i, 'f').signIn());
                  }),
                  (p = async function () {
                    A(this, n, 'm', m).call(this);
                    const e = await A(this, i, 'f').getBearerToken(),
                      t = await A(this, o, 'f').getStorageKey();
                    if (!e || !t) throw new Error('Missing BearerToken or storage key');
                    return { bearerToken: e, storageKey: t };
                  }),
                  (h = function (e) {
                    if (!e) throw new Error('User Storage does not exist');
                  }),
                  (g = async function () {
                    const e = await A(this, o, 'f').getNotificationStorage();
                    if (!e) return null;
                    try {
                      const t = JSON.parse(e);
                      return U.cleanUserStorage(t), t;
                    } catch {
                      return R.default.error('Unable to parse User Storage'), null;
                    }
                  }),
                  (y = function (e) {
                    this.update(t => {
                      t.isUpdatingMetamaskNotifications = e;
                    });
                  }),
                  (w = function (e) {
                    this.update(t => {
                      t.isFetchingMetamaskNotifications = e;
                    });
                  }),
                  (k = function (e) {
                    this.update(t => {
                      t.isCheckingAccountsPresence = e;
                    });
                  }),
                  (b = function (e) {
                    this.update(t => {
                      const r = new Set([...t.isUpdatingMetamaskNotificationsAccount, ...e]);
                      t.isUpdatingMetamaskNotificationsAccount = Array.from(r);
                    });
                  }),
                  (_ = function (e) {
                    this.update(t => {
                      t.isUpdatingMetamaskNotificationsAccount =
                        t.isUpdatingMetamaskNotificationsAccount.filter(t => !e.includes(t));
                    });
                  }),
                  (r.default = F);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/NotificationServicesController.cjs',
      },
    ],
    [
      2369,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.USER_STORAGE_VERSION_KEY = r.USER_STORAGE_VERSION = void 0),
                  (r.USER_STORAGE_VERSION = '1'),
                  (r.USER_STORAGE_VERSION_KEY = 'v');
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/constants/constants.cjs',
      },
    ],
    [
      2370,
      { './constants.cjs': 2369, './notification-schema.cjs': 2371 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./constants.cjs'), r),
                  s(e('./notification-schema.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/constants/index.cjs',
      },
    ],
    [
      2371,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n, s;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.TRIGGERS =
                    r.SUPPORTED_CHAINS =
                    r.CHAIN_SYMBOLS =
                    r.NOTIFICATION_CHAINS =
                    r.NOTIFICATION_CHAINS_ID =
                    r.TRIGGER_TYPES_GROUPS =
                    r.TRIGGER_TYPES_WALLET_SET =
                    r.TRIGGER_TYPES =
                      void 0),
                  (function (e) {
                    (e.FEATURES_ANNOUNCEMENT = 'features_announcement'),
                      (e.METAMASK_SWAP_COMPLETED = 'metamask_swap_completed'),
                      (e.ERC20_SENT = 'erc20_sent'),
                      (e.ERC20_RECEIVED = 'erc20_received'),
                      (e.ETH_SENT = 'eth_sent'),
                      (e.ETH_RECEIVED = 'eth_received'),
                      (e.ROCKETPOOL_STAKE_COMPLETED = 'rocketpool_stake_completed'),
                      (e.ROCKETPOOL_UNSTAKE_COMPLETED = 'rocketpool_unstake_completed'),
                      (e.LIDO_STAKE_COMPLETED = 'lido_stake_completed'),
                      (e.LIDO_WITHDRAWAL_REQUESTED = 'lido_withdrawal_requested'),
                      (e.LIDO_WITHDRAWAL_COMPLETED = 'lido_withdrawal_completed'),
                      (e.LIDO_STAKE_READY_TO_BE_WITHDRAWN = 'lido_stake_ready_to_be_withdrawn'),
                      (e.ERC721_SENT = 'erc721_sent'),
                      (e.ERC721_RECEIVED = 'erc721_received'),
                      (e.ERC1155_SENT = 'erc1155_sent'),
                      (e.ERC1155_RECEIVED = 'erc1155_received'),
                      (e.AAVE_V3_HEALTH_FACTOR = 'aave_v3_health_factor'),
                      (e.ENS_EXPIRATION = 'ens_expiration'),
                      (e.LIDO_STAKING_REWARDS = 'lido_staking_rewards'),
                      (e.ROCKETPOOL_STAKING_REWARDS = 'rocketpool_staking_rewards'),
                      (e.NOTIONAL_LOAN_EXPIRATION = 'notional_loan_expiration'),
                      (e.SPARK_FI_HEALTH_FACTOR = 'spark_fi_health_factor'),
                      (e.SNAP = 'snap');
                  })(n || (r.TRIGGER_TYPES = n = {})),
                  (r.TRIGGER_TYPES_WALLET_SET = new Set([
                    n.METAMASK_SWAP_COMPLETED,
                    n.ERC20_SENT,
                    n.ERC20_RECEIVED,
                    n.ETH_SENT,
                    n.ETH_RECEIVED,
                    n.ROCKETPOOL_STAKE_COMPLETED,
                    n.ROCKETPOOL_UNSTAKE_COMPLETED,
                    n.LIDO_STAKE_COMPLETED,
                    n.LIDO_WITHDRAWAL_REQUESTED,
                    n.LIDO_WITHDRAWAL_COMPLETED,
                    n.LIDO_STAKE_READY_TO_BE_WITHDRAWN,
                    n.ERC721_SENT,
                    n.ERC721_RECEIVED,
                    n.ERC1155_SENT,
                    n.ERC1155_RECEIVED,
                  ])),
                  (function (e) {
                    (e.RECEIVED = 'received'), (e.SENT = 'sent'), (e.DEFI = 'defi');
                  })(s || (r.TRIGGER_TYPES_GROUPS = s = {})),
                  (r.NOTIFICATION_CHAINS_ID = {
                    ETHEREUM: '1',
                    OPTIMISM: '10',
                    BSC: '56',
                    POLYGON: '137',
                    ARBITRUM: '42161',
                    AVALANCHE: '43114',
                    LINEA: '59144',
                  }),
                  (r.NOTIFICATION_CHAINS = r.NOTIFICATION_CHAINS_ID),
                  (r.CHAIN_SYMBOLS = {
                    [r.NOTIFICATION_CHAINS.ETHEREUM]: 'ETH',
                    [r.NOTIFICATION_CHAINS.OPTIMISM]: 'ETH',
                    [r.NOTIFICATION_CHAINS.BSC]: 'BNB',
                    [r.NOTIFICATION_CHAINS.POLYGON]: 'POL',
                    [r.NOTIFICATION_CHAINS.ARBITRUM]: 'ETH',
                    [r.NOTIFICATION_CHAINS.AVALANCHE]: 'AVAX',
                    [r.NOTIFICATION_CHAINS.LINEA]: 'ETH',
                  }),
                  (r.SUPPORTED_CHAINS = [
                    r.NOTIFICATION_CHAINS.ETHEREUM,
                    r.NOTIFICATION_CHAINS.OPTIMISM,
                    r.NOTIFICATION_CHAINS.BSC,
                    r.NOTIFICATION_CHAINS.POLYGON,
                    r.NOTIFICATION_CHAINS.ARBITRUM,
                    r.NOTIFICATION_CHAINS.AVALANCHE,
                    r.NOTIFICATION_CHAINS.LINEA,
                  ]),
                  (r.TRIGGERS = {
                    [n.METAMASK_SWAP_COMPLETED]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.OPTIMISM,
                        r.NOTIFICATION_CHAINS.BSC,
                        r.NOTIFICATION_CHAINS.POLYGON,
                        r.NOTIFICATION_CHAINS.ARBITRUM,
                        r.NOTIFICATION_CHAINS.AVALANCHE,
                      ],
                    },
                    [n.ERC20_SENT]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.OPTIMISM,
                        r.NOTIFICATION_CHAINS.BSC,
                        r.NOTIFICATION_CHAINS.POLYGON,
                        r.NOTIFICATION_CHAINS.ARBITRUM,
                        r.NOTIFICATION_CHAINS.AVALANCHE,
                        r.NOTIFICATION_CHAINS.LINEA,
                      ],
                    },
                    [n.ERC20_RECEIVED]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.OPTIMISM,
                        r.NOTIFICATION_CHAINS.BSC,
                        r.NOTIFICATION_CHAINS.POLYGON,
                        r.NOTIFICATION_CHAINS.ARBITRUM,
                        r.NOTIFICATION_CHAINS.AVALANCHE,
                        r.NOTIFICATION_CHAINS.LINEA,
                      ],
                    },
                    [n.ERC721_SENT]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.POLYGON,
                      ],
                    },
                    [n.ERC721_RECEIVED]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.POLYGON,
                      ],
                    },
                    [n.ERC1155_SENT]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.POLYGON,
                      ],
                    },
                    [n.ERC1155_RECEIVED]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.POLYGON,
                      ],
                    },
                    [n.ETH_SENT]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.OPTIMISM,
                        r.NOTIFICATION_CHAINS.BSC,
                        r.NOTIFICATION_CHAINS.POLYGON,
                        r.NOTIFICATION_CHAINS.ARBITRUM,
                        r.NOTIFICATION_CHAINS.AVALANCHE,
                        r.NOTIFICATION_CHAINS.LINEA,
                      ],
                    },
                    [n.ETH_RECEIVED]: {
                      supported_chains: [
                        r.NOTIFICATION_CHAINS.ETHEREUM,
                        r.NOTIFICATION_CHAINS.OPTIMISM,
                        r.NOTIFICATION_CHAINS.BSC,
                        r.NOTIFICATION_CHAINS.POLYGON,
                        r.NOTIFICATION_CHAINS.ARBITRUM,
                        r.NOTIFICATION_CHAINS.AVALANCHE,
                        r.NOTIFICATION_CHAINS.LINEA,
                      ],
                    },
                    [n.ROCKETPOOL_STAKE_COMPLETED]: {
                      supported_chains: [r.NOTIFICATION_CHAINS.ETHEREUM],
                    },
                    [n.ROCKETPOOL_UNSTAKE_COMPLETED]: {
                      supported_chains: [r.NOTIFICATION_CHAINS.ETHEREUM],
                    },
                    [n.LIDO_STAKE_COMPLETED]: {
                      supported_chains: [r.NOTIFICATION_CHAINS.ETHEREUM],
                    },
                    [n.LIDO_WITHDRAWAL_REQUESTED]: {
                      supported_chains: [r.NOTIFICATION_CHAINS.ETHEREUM],
                    },
                    [n.LIDO_WITHDRAWAL_COMPLETED]: {
                      supported_chains: [r.NOTIFICATION_CHAINS.ETHEREUM],
                    },
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/constants/notification-schema.cjs',
      },
    ],
    [
      2372,
      {
        '../shared/index.cjs': 2402,
        './NotificationServicesController.cjs': 2368,
        './constants/index.cjs': 2370,
        './mocks/index.cjs': 2373,
        './processors/index.cjs': 2380,
        './ui/index.cjs': 2388,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    },
                  o =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    },
                  a =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.UI = r.Mocks = r.Constants = r.Processors = r.Controller = void 0);
                const c = a(e('./NotificationServicesController.cjs'));
                r.Controller = c.default;
                const u = c.default;
                (r.default = u),
                  i(e('./NotificationServicesController.cjs'), r),
                  (r.Processors = o(e('./processors/index.cjs'))),
                  i(e('./processors/index.cjs'), r),
                  (r.Constants = o(e('./constants/index.cjs'))),
                  i(e('./constants/index.cjs'), r),
                  (r.Mocks = o(e('./mocks/index.cjs'))),
                  (r.UI = o(e('./ui/index.cjs'))),
                  i(e('../shared/index.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/index.cjs',
      },
    ],
    [
      2373,
      {
        './mock-feature-announcements.cjs': 2374,
        './mock-notification-trigger.cjs': 2375,
        './mock-notification-user-storage.cjs': 2376,
        './mock-raw-notifications.cjs': 2377,
        './mock-snap-notification.cjs': 2378,
        './mockResponses.cjs': 2379,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./mock-feature-announcements.cjs'), r),
                  s(e('./mock-notification-trigger.cjs'), r),
                  s(e('./mock-notification-user-storage.cjs'), r),
                  s(e('./mock-raw-notifications.cjs'), r),
                  s(e('./mockResponses.cjs'), r),
                  s(e('./mock-snap-notification.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/index.cjs',
      },
    ],
    [
      2374,
      { '../constants/notification-schema.cjs': 2371 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createMockFeatureAnnouncementRaw = r.createMockFeatureAnnouncementAPIResult =
                    void 0);
                const n = e('../constants/notification-schema.cjs');
                (r.createMockFeatureAnnouncementAPIResult = function () {
                  return {
                    sys: { type: 'Array' },
                    total: 17,
                    skip: 0,
                    limit: 1,
                    items: [
                      {
                        metadata: { tags: [] },
                        sys: {
                          space: { sys: { type: 'Link', linkType: 'Space', id: 'jdkgyfmyd9sw' } },
                          id: '1ABRmHaNCgmxROKXXLXsMu',
                          type: 'Entry',
                          createdAt: '2024-04-09T13:24:01.872Z',
                          updatedAt: '2024-04-09T13:24:01.872Z',
                          environment: {
                            sys: { id: 'master', type: 'Link', linkType: 'Environment' },
                          },
                          revision: 1,
                          contentType: {
                            sys: {
                              type: 'Link',
                              linkType: 'ContentType',
                              id: 'productAnnouncement',
                            },
                          },
                          locale: 'en-US',
                        },
                        fields: {
                          title: 'Don’t miss out on airdrops and new NFT mints!',
                          id: 'dont-miss-out-on-airdrops-and-new-nft-mints',
                          category: 'ANNOUNCEMENT',
                          shortDescription:
                            'Check your airdrop eligibility and see trending NFT drops. Head over to the Explore tab to get started. ',
                          image: {
                            sys: { type: 'Link', linkType: 'Asset', id: '5jqq8sFeLc6XEoeWlpI3aB' },
                          },
                          longDescription: {
                            data: {},
                            content: [
                              {
                                data: {},
                                content: [
                                  {
                                    data: {},
                                    marks: [],
                                    value:
                                      'You can now verify if any of your connected addresses are eligible for airdrops and other ERC-20 claims in a secure and convenient way. We’ve also added trending NFT mints based on creators you’ve minted from before or other tokens you hold. Head over to the Explore tab to get started. \n',
                                    nodeType: 'text',
                                  },
                                ],
                                nodeType: 'paragraph',
                              },
                            ],
                            nodeType: 'document',
                          },
                          link: {
                            sys: { type: 'Link', linkType: 'Entry', id: '62xKYM2ydo4F1mS5q97K5q' },
                          },
                        },
                      },
                    ],
                    includes: {
                      Entry: [
                        {
                          metadata: { tags: [] },
                          sys: {
                            space: { sys: { type: 'Link', linkType: 'Space', id: 'jdkgyfmyd9sw' } },
                            id: '62xKYM2ydo4F1mS5q97K5q',
                            type: 'Entry',
                            createdAt: '2024-04-09T13:23:03.636Z',
                            updatedAt: '2024-04-09T13:23:03.636Z',
                            environment: {
                              sys: { id: 'master', type: 'Link', linkType: 'Environment' },
                            },
                            revision: 1,
                            contentType: {
                              sys: { type: 'Link', linkType: 'ContentType', id: 'link' },
                            },
                            locale: 'en-US',
                          },
                          fields: { extensionLinkText: 'Try now', extensionLinkRoute: 'home.html' },
                        },
                      ],
                      Asset: [
                        {
                          metadata: { tags: [] },
                          sys: {
                            space: { sys: { type: 'Link', linkType: 'Space', id: 'jdkgyfmyd9sw' } },
                            id: '5jqq8sFeLc6XEoeWlpI3aB',
                            type: 'Asset',
                            createdAt: '2024-04-09T13:23:13.327Z',
                            updatedAt: '2024-04-09T13:23:13.327Z',
                            environment: {
                              sys: { id: 'master', type: 'Link', linkType: 'Environment' },
                            },
                            revision: 1,
                            locale: 'en-US',
                          },
                          fields: {
                            title: 'PDAPP notification image Airdrops & NFT mints',
                            description: '',
                            file: {
                              url: '//images.ctfassets.net/jdkgyfmyd9sw/5jqq8sFeLc6XEoeWlpI3aB/73ee0f1afa9916c3a7538b0bbee09c26/PDAPP_notification_image_Airdrops___NFT_mints.png',
                              details: { size: 797731, image: { width: 2880, height: 1921 } },
                              fileName: 'PDAPP notification image_Airdrops & NFT mints.png',
                              contentType: 'image/png',
                            },
                          },
                        },
                      ],
                    },
                  };
                }),
                  (r.createMockFeatureAnnouncementRaw = function () {
                    return {
                      type: n.TRIGGER_TYPES.FEATURES_ANNOUNCEMENT,
                      createdAt: '2999-04-09T13:24:01.872Z',
                      data: {
                        id: 'dont-miss-out-on-airdrops-and-new-nft-mints',
                        category: 'ANNOUNCEMENT',
                        title: 'Don’t miss out on airdrops and new NFT mints!',
                        longDescription:
                          '<p>You can now verify if any of your connected addresses are eligible for airdrops and other ERC-20 claims in a secure and convenient way. We’ve also added trending NFT mints based on creators you’ve minted from before or other tokens you hold. Head over to the Explore tab to get started.</p>',
                        shortDescription:
                          'Check your airdrop eligibility and see trending NFT drops. Head over to the Explore tab to get started.',
                        image: {
                          title: 'PDAPP notification image Airdrops & NFT mints',
                          description: '',
                          url: '//images.ctfassets.net/jdkgyfmyd9sw/5jqq8sFeLc6XEoeWlpI3aB/73ee0f1afa9916c3a7538b0bbee09c26/PDAPP_notification_image_Airdrops___NFT_mints.png',
                        },
                        extensionLink: {
                          extensionLinkText: 'Try now',
                          extensionLinkRoute: 'home.html',
                        },
                      },
                    };
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/mock-feature-announcements.cjs',
      },
    ],
    [
      2375,
      { uuid: 5733 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createMockNotificationTrigger = void 0);
                const n = e('uuid');
                r.createMockNotificationTrigger = function (e) {
                  return {
                    id: (0, n.v4)(),
                    address: '0xFAKE_ADDRESS',
                    chainId: '1',
                    kind: 'eth_sent',
                    enabled: !0,
                    ...e,
                  };
                };
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/mock-notification-trigger.cjs',
      },
    ],
    [
      2376,
      {
        '../constants/constants.cjs': 2369,
        '../constants/notification-schema.cjs': 2371,
        '../utils/utils.cjs': 2389,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createMockFullUserStorage =
                    r.createMockUserStorageWithTriggers =
                    r.createMockUserStorage =
                    r.MOCK_USER_STORAGE_CHAIN =
                    r.MOCK_USER_STORAGE_ACCOUNT =
                      void 0);
                const n = e('../constants/constants.cjs'),
                  s = e('../constants/notification-schema.cjs'),
                  i = e('../utils/utils.cjs');
                (r.MOCK_USER_STORAGE_ACCOUNT = '0x0000000000000000000000000000000000000000'),
                  (r.MOCK_USER_STORAGE_CHAIN = '1'),
                  (r.createMockUserStorage = function (e) {
                    return {
                      [n.USER_STORAGE_VERSION_KEY]: '1',
                      [r.MOCK_USER_STORAGE_ACCOUNT]: {
                        [r.MOCK_USER_STORAGE_CHAIN]: {
                          '111-111-111-111': { k: s.TRIGGER_TYPES.ERC20_RECEIVED, e: !0 },
                          '222-222-222-222': { k: s.TRIGGER_TYPES.ERC20_SENT, e: !0 },
                        },
                      },
                      ...e,
                    };
                  }),
                  (r.createMockUserStorageWithTriggers = function (e) {
                    const t = {
                      [n.USER_STORAGE_VERSION_KEY]: '1',
                      [r.MOCK_USER_STORAGE_ACCOUNT]: { [r.MOCK_USER_STORAGE_CHAIN]: {} },
                    };
                    return (
                      e.forEach(e => {
                        let n, i, o;
                        'string' == typeof e
                          ? ((n = e), (i = !0), (o = s.TRIGGER_TYPES.ERC20_RECEIVED))
                          : ((n = e.id), (i = e.e), (o = e.k ?? s.TRIGGER_TYPES.ERC20_RECEIVED)),
                          (t[r.MOCK_USER_STORAGE_ACCOUNT][r.MOCK_USER_STORAGE_CHAIN][n] = {
                            k: o,
                            e: i,
                          });
                      }),
                      t
                    );
                  }),
                  (r.createMockFullUserStorage = function (e = {}) {
                    return (0, i.initializeUserStorage)(
                      [{ address: e.address ?? r.MOCK_USER_STORAGE_ACCOUNT }],
                      e.triggersEnabled ?? !0,
                      !1
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/mock-notification-user-storage.cjs',
      },
    ],
    [
      2377,
      { '../constants/notification-schema.cjs': 2371 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createMockRawOnChainNotifications =
                    r.createMockNotificationSparkFiHealthFactor =
                    r.createMockNotificationRocketpoolStakingRewards =
                    r.createMockNotificationNotionalLoanExpiration =
                    r.createMockNotificationLidoStakingRewards =
                    r.createMockNotificationEnsExpiration =
                    r.createMockNotificationAaveV3HealthFactor =
                    r.createMockNotificationLidoReadyToBeWithdrawn =
                    r.createMockNotificationLidoWithdrawalCompleted =
                    r.createMockNotificationLidoWithdrawalRequested =
                    r.createMockNotificationLidoStakeCompleted =
                    r.createMockNotificationRocketPoolUnStakeCompleted =
                    r.createMockNotificationRocketPoolStakeCompleted =
                    r.createMockNotificationMetaMaskSwapsCompleted =
                    r.createMockNotificationERC1155Received =
                    r.createMockNotificationERC1155Sent =
                    r.createMockNotificationERC721Received =
                    r.createMockNotificationERC721Sent =
                    r.createMockNotificationERC20Received =
                    r.createMockNotificationERC20Sent =
                    r.createMockNotificationEthReceived =
                    r.createMockNotificationEthSent =
                      void 0);
                const n = e('../constants/notification-schema.cjs');
                function s() {
                  return {
                    type: n.TRIGGER_TYPES.ETH_SENT,
                    id: '3fa85f64-5717-4562-b3fc-2c963f66afa7',
                    trigger_id: '3fa85f64-5717-4562-b3fc-2c963f66afa7',
                    chain_id: 1,
                    block_number: 17485840,
                    block_timestamp: '2022-03-01T00:00:00Z',
                    tx_hash: '0xb2256b183f2fb3872f99294ab55fb03e6a479b0d4aca556a3b27568b712505a6',
                    unread: !0,
                    created_at: '2022-03-01T00:00:00Z',
                    address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                    data: {
                      kind: 'eth_sent',
                      network_fee: { gas_price: '207806259583', native_token_price_in_usd: '0.83' },
                      from: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      to: '0x881D40237659C251811CEC9c364ef91dC08D300D',
                      amount: { usd: '670.64', eth: '0.005' },
                    },
                  };
                }
                (r.createMockNotificationEthSent = s),
                  (r.createMockNotificationEthReceived = function () {
                    return {
                      type: n.TRIGGER_TYPES.ETH_RECEIVED,
                      id: '3fa85f64-5717-4562-b3fc-2c963f66afa8',
                      trigger_id: '3fa85f64-5717-4562-b3fc-2c963f66afa8',
                      chain_id: 1,
                      block_number: 17485840,
                      block_timestamp: '2022-03-01T00:00:00Z',
                      tx_hash: '0xb2256b183f2fb3872f99294ab55fb03e6a479b0d4aca556a3b27568b712505a6',
                      unread: !0,
                      created_at: '2022-03-01T00:00:00Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'eth_received',
                        network_fee: {
                          gas_price: '207806259583',
                          native_token_price_in_usd: '0.83',
                        },
                        from: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                        to: '0x881D40237659C251811CEC9c364ef91dC08D300D',
                        amount: { usd: '670.64', eth: '808.000000000000000000' },
                      },
                    };
                  }),
                  (r.createMockNotificationERC20Sent = function () {
                    return {
                      type: n.TRIGGER_TYPES.ERC20_SENT,
                      id: '3fa85f64-5717-4562-b3fc-2c963f66afa9',
                      trigger_id: '3fa85f64-5717-4562-b3fc-2c963f66afa9',
                      chain_id: 1,
                      block_number: 17485840,
                      block_timestamp: '2022-03-01T00:00:00Z',
                      tx_hash: '0xb2256b183f2fb3872f99294ab55fb03e6a479b0d4aca556a3b27568b712505a6',
                      unread: !0,
                      created_at: '2022-03-01T00:00:00Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'erc20_sent',
                        network_fee: {
                          gas_price: '207806259583',
                          native_token_price_in_usd: '0.83',
                        },
                        to: '0xecc19e177d24551aa7ed6bc6fe566eca726cc8a9',
                        from: '0x1231deb6f5749ef6ce6943a275a1d3e7486f4eae',
                        token: {
                          usd: '1.00',
                          name: 'USDC',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/usdc.svg',
                          amount: '4956250000',
                          symbol: 'USDC',
                          address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
                          decimals: '6',
                        },
                      },
                    };
                  }),
                  (r.createMockNotificationERC20Received = function () {
                    return {
                      type: n.TRIGGER_TYPES.ERC20_RECEIVED,
                      id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                      trigger_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                      chain_id: 1,
                      block_number: 17485840,
                      block_timestamp: '2022-03-01T00:00:00Z',
                      tx_hash: '0xb2256b183f2fb3872f99294ab55fb03e6a479b0d4aca556a3b27568b712505a6',
                      unread: !0,
                      created_at: '2022-03-01T00:00:00Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'erc20_received',
                        network_fee: {
                          gas_price: '207806259583',
                          native_token_price_in_usd: '0.83',
                        },
                        to: '0xeae7380dd4cef6fbd1144f49e4d1e6964258a4f4',
                        from: '0x51c72848c68a965f66fa7a88855f9f7784502a7f',
                        token: {
                          usd: '0.00',
                          name: 'SHIBA INU',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/shib.svg',
                          amount: '8382798736999999457296646144',
                          symbol: 'SHIB',
                          address: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce',
                          decimals: '18',
                        },
                      },
                    };
                  }),
                  (r.createMockNotificationERC721Sent = function () {
                    return {
                      type: n.TRIGGER_TYPES.ERC721_SENT,
                      block_number: 18576643,
                      block_timestamp: '1700043467',
                      chain_id: 1,
                      created_at: '2023-11-15T11:08:17.895407Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        to: '0xf47f628fe3bd2595e9ab384bfffc3859b448e451',
                        nft: {
                          name: 'Captainz #8680',
                          image:
                            'https://i.seadn.io/s/raw/files/ae0fc06714ff7fb40217340d8a242c0e.gif?w=500&auto=format',
                          token_id: '8680',
                          collection: {
                            name: 'The Captainz',
                            image:
                              'https://i.seadn.io/gcs/files/6df4d75778066bce740050615bc84e21.png?w=500&auto=format',
                            symbol: 'Captainz',
                            address: '0x769272677fab02575e84945f03eca517acc544cc',
                          },
                        },
                        from: '0x24a0bb54b7e7a8e406e9b28058a9fd6c49e6df4f',
                        kind: 'erc721_sent',
                        network_fee: {
                          gas_price: '24550653274',
                          native_token_price_in_usd: '1986.61',
                        },
                      },
                      id: 'a4193058-9814-537e-9df4-79dcac727fb6',
                      trigger_id: '028485be-b994-422b-a93b-03fcc01ab715',
                      tx_hash: '0x0833c69fb41cf972a0f031fceca242939bc3fcf82b964b74606649abcad371bd',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationERC721Received = function () {
                    return {
                      type: n.TRIGGER_TYPES.ERC721_RECEIVED,
                      block_number: 18571446,
                      block_timestamp: '1699980623',
                      chain_id: 1,
                      created_at: '2023-11-14T17:40:52.319281Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        to: '0xba7f3daa8adfdad686574406ab9bd5d2f0a49d2e',
                        nft: {
                          name: 'The Plague #2722',
                          image:
                            'https://i.seadn.io/s/raw/files/a96f90ec8ebf55a2300c66a0c46d6a16.png?w=500&auto=format',
                          token_id: '2722',
                          collection: {
                            name: 'The Plague NFT',
                            image:
                              'https://i.seadn.io/gcs/files/4577987a5ca45ca5118b2e31559ee4d1.jpg?w=500&auto=format',
                            symbol: 'FROG',
                            address: '0xc379e535caff250a01caa6c3724ed1359fe5c29b',
                          },
                        },
                        from: '0x24a0bb54b7e7a8e406e9b28058a9fd6c49e6df4f',
                        kind: 'erc721_received',
                        network_fee: {
                          gas_price: '53701898538',
                          native_token_price_in_usd: '2047.01',
                        },
                      },
                      id: '00a79d24-befa-57ed-a55a-9eb8696e1654',
                      trigger_id: 'd24ac26a-8579-49ec-9947-d04d63592ebd',
                      tx_hash: '0xe554c9e29e6eeca8ba94da4d047334ba08b8eb9ca3b801dd69cec08dfdd4ae43',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationERC1155Sent = function () {
                    return {
                      type: n.TRIGGER_TYPES.ERC1155_SENT,
                      block_number: 18615206,
                      block_timestamp: '1700510003',
                      chain_id: 1,
                      created_at: '2023-11-20T20:44:10.110706Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        to: '0x15bd77ccacf2da39b84f0c31fee2e451225bb190',
                        nft: {
                          name: 'IlluminatiNFT DAO',
                          image:
                            'https://i.seadn.io/gcs/files/79a77cb37c7b2f1069f752645d29fea7.jpg?w=500&auto=format',
                          token_id: '1',
                          collection: {
                            name: 'IlluminatiNFT DAO',
                            image:
                              'https://i.seadn.io/gae/LTKz3om2eCQfn3M6PkqEmY7KhLtdMCOm0QVch2318KJq7-KyToCH7NBTMo4UuJ0AZI-oaBh1HcgrAEIEWYbXY3uMcYpuGXunaXEh?w=500&auto=format',
                            symbol: 'TRUTH',
                            address: '0xe25f0fe686477f9df3c2876c4902d3b85f75f33a',
                          },
                        },
                        from: '0x0000000000000000000000000000000000000000',
                        kind: 'erc1155_sent',
                        network_fee: {
                          gas_price: '33571446596',
                          native_token_price_in_usd: '2038.88',
                        },
                      },
                      id: 'a09ff9d1-623a-52ab-a3d4-c7c8c9a58362',
                      trigger_id: 'e2130f7d-78b8-4c34-999a-3f3d3bb5b03c',
                      tx_hash: '0x03381aba290facbaf71c123e263c8dc3dd550aac00ef589cce395182eaeff76f',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationERC1155Received = function () {
                    return {
                      type: n.TRIGGER_TYPES.ERC1155_RECEIVED,
                      block_number: 18615206,
                      block_timestamp: '1700510003',
                      chain_id: 1,
                      created_at: '2023-11-20T20:44:10.110706Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        to: '0x15bd77ccacf2da39b84f0c31fee2e451225bb190',
                        nft: {
                          name: 'IlluminatiNFT DAO',
                          image:
                            'https://i.seadn.io/gcs/files/79a77cb37c7b2f1069f752645d29fea7.jpg?w=500&auto=format',
                          token_id: '1',
                          collection: {
                            name: 'IlluminatiNFT DAO',
                            image:
                              'https://i.seadn.io/gae/LTKz3om2eCQfn3M6PkqEmY7KhLtdMCOm0QVch2318KJq7-KyToCH7NBTMo4UuJ0AZI-oaBh1HcgrAEIEWYbXY3uMcYpuGXunaXEh?w=500&auto=format',
                            symbol: 'TRUTH',
                            address: '0xe25f0fe686477f9df3c2876c4902d3b85f75f33a',
                          },
                        },
                        from: '0x0000000000000000000000000000000000000000',
                        kind: 'erc1155_received',
                        network_fee: {
                          gas_price: '33571446596',
                          native_token_price_in_usd: '2038.88',
                        },
                      },
                      id: 'b6b93c84-e8dc-54ed-9396-7ea50474843a',
                      trigger_id: '710c8abb-43a9-42a5-9d86-9dd258726c82',
                      tx_hash: '0x03381aba290facbaf71c123e263c8dc3dd550aac00ef589cce395182eaeff76f',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationMetaMaskSwapsCompleted = function () {
                    return {
                      type: n.TRIGGER_TYPES.METAMASK_SWAP_COMPLETED,
                      block_number: 18377666,
                      block_timestamp: '1697637275',
                      chain_id: 1,
                      created_at: '2023-10-18T13:58:49.854596Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'metamask_swap_completed',
                        rate: '1558.27',
                        token_in: {
                          usd: '1576.73',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          amount: '9000000000000000',
                          symbol: 'ETH',
                          address: '0x0000000000000000000000000000000000000000',
                          decimals: '18',
                          name: 'Ethereum',
                        },
                        token_out: {
                          usd: '1.00',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/usdt.svg',
                          amount: '14024419',
                          symbol: 'USDT',
                          address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
                          decimals: '6',
                          name: 'USDT',
                        },
                        network_fee: {
                          gas_price: '15406129273',
                          native_token_price_in_usd: '1576.73',
                        },
                      },
                      id: '7ddfe6a1-ac52-5ffe-aa40-f04242db4b8b',
                      trigger_id: 'd2eaa2eb-2e6e-4fd5-8763-b70ea571b46c',
                      tx_hash: '0xf69074290f3aa11bce567aabc9ca0df7a12559dfae1b80ba1a124e9dfe19ecc5',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationRocketPoolStakeCompleted = function () {
                    return {
                      type: n.TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED,
                      block_number: 18585057,
                      block_timestamp: '1700145059',
                      chain_id: 1,
                      created_at: '2023-11-20T12:02:48.796824Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'rocketpool_stake_completed',
                        stake_in: {
                          usd: '2031.86',
                          name: 'Ethereum',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          amount: '190690478063438272',
                          symbol: 'ETH',
                          address: '0x0000000000000000000000000000000000000000',
                          decimals: '18',
                        },
                        stake_out: {
                          usd: '2226.49',
                          name: 'Rocket Pool ETH',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/rETH.svg',
                          amount: '175024360778165879',
                          symbol: 'RETH',
                          address: '0xae78736Cd615f374D3085123A210448E74Fc6393',
                          decimals: '18',
                        },
                        network_fee: {
                          gas_price: '36000000000',
                          native_token_price_in_usd: '2031.86',
                        },
                      },
                      id: 'c2a2f225-b2fb-5d6c-ba56-e27a5c71ffb9',
                      trigger_id: '5110ff97-acff-40c0-83b4-11d487b8c7b0',
                      tx_hash: '0xcfc0693bf47995907b0f46ef0644cf16dd9a0de797099b2e00fd481e1b2117d3',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationRocketPoolUnStakeCompleted = function () {
                    return {
                      type: n.TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED,
                      block_number: 18384336,
                      block_timestamp: '1697718011',
                      chain_id: 1,
                      created_at: '2023-10-19T13:11:10.623042Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'rocketpool_unstake_completed',
                        stake_in: {
                          usd: '1686.34',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/rETH.svg',
                          amount: '66608041413696770',
                          symbol: 'RETH',
                          address: '0xae78736Cd615f374D3085123A210448E74Fc6393',
                          decimals: '18',
                          name: 'Rocketpool Eth',
                        },
                        stake_out: {
                          usd: '1553.75',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          amount: '72387843427700824',
                          symbol: 'ETH',
                          address: '0x0000000000000000000000000000000000000000',
                          decimals: '18',
                          name: 'Ethereum',
                        },
                        network_fee: {
                          gas_price: '5656322987',
                          native_token_price_in_usd: '1553.75',
                        },
                      },
                      id: '291ec897-f569-4837-b6c0-21001b198dff',
                      trigger_id: '291ec897-f569-4837-b6c0-21001b198dff',
                      tx_hash: '0xc7972a7e409abfc62590ec90e633acd70b9b74e76ad02305be8bf133a0e22d5f',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationLidoStakeCompleted = function () {
                    return {
                      type: n.TRIGGER_TYPES.LIDO_STAKE_COMPLETED,
                      block_number: 18487118,
                      block_timestamp: '1698961091',
                      chain_id: 1,
                      created_at: '2023-11-02T22:28:49.970865Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'lido_stake_completed',
                        stake_in: {
                          usd: '1806.33',
                          name: 'Ethereum',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          amount: '330303634023928032',
                          symbol: 'ETH',
                          address: '0x0000000000000000000000000000000000000000',
                          decimals: '18',
                        },
                        stake_out: {
                          usd: '1801.30',
                          name: 'Liquid staked Ether 2.0',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/stETH.svg',
                          amount: '330303634023928032',
                          symbol: 'STETH',
                          address: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84',
                          decimals: '18',
                        },
                        network_fee: {
                          gas_price: '26536359866',
                          native_token_price_in_usd: '1806.33',
                        },
                      },
                      id: 'ec10d66a-f78f-461f-83c9-609aada8cc50',
                      trigger_id: 'ec10d66a-f78f-461f-83c9-609aada8cc50',
                      tx_hash: '0x8cc0fa805f7c3b1743b14f3b91c6b824113b094f26d4ccaf6a71ad8547ce6a0f',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationLidoWithdrawalRequested = function () {
                    return {
                      type: n.TRIGGER_TYPES.LIDO_WITHDRAWAL_REQUESTED,
                      block_number: 18377760,
                      block_timestamp: '1697638415',
                      chain_id: 1,
                      created_at: '2023-10-18T15:04:02.482526Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'lido_withdrawal_requested',
                        stake_in: {
                          usd: '1568.54',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/stETH.svg',
                          amount: '97180668792218669859',
                          symbol: 'STETH',
                          address: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84',
                          decimals: '18',
                          name: 'Staked Eth',
                        },
                        stake_out: {
                          usd: '1576.73',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          amount: '97180668792218669859',
                          symbol: 'ETH',
                          address: '0x0000000000000000000000000000000000000000',
                          decimals: '18',
                          name: 'Ethereum',
                        },
                        network_fee: {
                          gas_price: '11658906980',
                          native_token_price_in_usd: '1576.73',
                        },
                      },
                      id: 'ef003925-3379-4ba7-9e2d-8218690cadc9',
                      trigger_id: 'ef003925-3379-4ba7-9e2d-8218690cadc9',
                      tx_hash: '0x58b5f82e084cb750ea174e02b20fbdfd2ba8d78053deac787f34fc38e5d427aa',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationLidoWithdrawalCompleted = function () {
                    return {
                      type: n.TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED,
                      block_number: 18378208,
                      block_timestamp: '1697643851',
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'lido_withdrawal_completed',
                        stake_in: {
                          usd: '1570.23',
                          image:
                            'https://raw.githubusercontent.com/MetaMask/contract-metadata/master/images/stETH.svg',
                          amount: '35081997661451346',
                          symbol: 'STETH',
                          address: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84',
                          decimals: '18',
                          name: 'Staked Eth',
                        },
                        stake_out: {
                          usd: '1571.74',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          amount: '35081997661451346',
                          symbol: 'ETH',
                          address: '0x0000000000000000000000000000000000000000',
                          decimals: '18',
                          name: 'Ethereum',
                        },
                        network_fee: {
                          gas_price: '12699495150',
                          native_token_price_in_usd: '1571.74',
                        },
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042f',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042f',
                      tx_hash: '0xe6d210d2e601ef3dd1075c48e71452cf35f2daae3886911e964e3babad8ac657',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationLidoReadyToBeWithdrawn = function () {
                    return {
                      type: n.TRIGGER_TYPES.LIDO_STAKE_READY_TO_BE_WITHDRAWN,
                      block_number: 18378208,
                      block_timestamp: '1697643851',
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'lido_stake_ready_to_be_withdrawn',
                        request_id: '123456789',
                        staked_eth: {
                          address: '0x881D40237659C251811CEC9c364ef91dC08D300F',
                          symbol: 'ETH',
                          name: 'Ethereum',
                          amount: '2.5',
                          decimals: '18',
                          image:
                            'https://token.api.cx.metamask.io/assets/nativeCurrencyLogos/ethereum.svg',
                          usd: '10000.00',
                        },
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042e',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042e',
                      tx_hash: '0xe6d210d2e601ef3dd1075c48e71452cf35f2daae3886911e964e3babad8ac657',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationAaveV3HealthFactor = function () {
                    return {
                      type: n.TRIGGER_TYPES.AAVE_V3_HEALTH_FACTOR,
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'aave_v3_health_factor',
                        chainId: 1,
                        healthFactor: '3.4',
                        threshold: '5.5',
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042b',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042b',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationEnsExpiration = function () {
                    return {
                      type: n.TRIGGER_TYPES.ENS_EXPIRATION,
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'ens_expiration',
                        chainId: 1,
                        reverseEnsName: 'vitalik.eth',
                        expirationDateIso: '2024-01-01T00:00:00Z',
                        reminderDelayInSeconds: 86400,
                      },
                      id: 'f4ef0b7f-5612-537f-9144-0b5c63ae5391',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042c',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationLidoStakingRewards = function () {
                    return {
                      type: n.TRIGGER_TYPES.LIDO_STAKING_REWARDS,
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'lido_staking_rewards',
                        chainId: 1,
                        currentStethBalance: '10',
                        currentEthValue: '10.5',
                        estimatedTotalRewardInPeriod: '0.5',
                        daysSinceLastNotification: 30,
                        notificationIntervalDays: 30,
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042l',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042l',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationNotionalLoanExpiration = function () {
                    return {
                      type: n.TRIGGER_TYPES.NOTIONAL_LOAN_EXPIRATION,
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'notional_loan_expiration',
                        chainId: 1,
                        loans: [
                          {
                            amount: '1.1234',
                            symbol: 'ETH',
                            maturityDateIso: '2024-01-01T00:00:00Z',
                          },
                        ],
                        reminderDelayInSeconds: 86400,
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042n',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042n',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationRocketpoolStakingRewards = function () {
                    return {
                      type: n.TRIGGER_TYPES.ROCKETPOOL_STAKING_REWARDS,
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'rocketpool_staking_rewards',
                        chainId: 1,
                        currentRethBalance: '10',
                        currentEthValue: '10.5',
                        estimatedTotalRewardInPeriod: '0.5',
                        daysSinceLastNotification: 30,
                        notificationIntervalDays: 30,
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042r',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042r',
                      unread: !0,
                    };
                  }),
                  (r.createMockNotificationSparkFiHealthFactor = function () {
                    return {
                      type: n.TRIGGER_TYPES.SPARK_FI_HEALTH_FACTOR,
                      chain_id: 1,
                      created_at: '2023-10-18T16:35:03.147606Z',
                      address: '0x881D40237659C251811CEC9c364ef91dC08D300C',
                      data: {
                        kind: 'spark_fi_health_factor',
                        chainId: 1,
                        healthFactor: '3.4',
                        threshold: '5.5',
                      },
                      id: 'd73df14d-ce73-4f38-bad3-ab028154042s',
                      trigger_id: 'd73df14d-ce73-4f38-bad3-ab028154042s',
                      unread: !0,
                    };
                  }),
                  (r.createMockRawOnChainNotifications = function () {
                    return [1, 2, 3].map(e => {
                      const t = s();
                      return (t.id += `-${e}`), t;
                    });
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/mock-raw-notifications.cjs',
      },
    ],
    [
      2378,
      { '../constants/index.cjs': 2370 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createMockSnapNotification = void 0);
                const n = e('../constants/index.cjs');
                r.createMockSnapNotification = function () {
                  return {
                    type: n.TRIGGER_TYPES.SNAP,
                    readDate: null,
                    data: {
                      message: 'fooBar',
                      origin: '@metamask/example-snap',
                      detailedView: {
                        title: 'Detailed View',
                        interfaceId: '1',
                        footerLink: { text: 'Go Home', href: 'metamask://client/' },
                      },
                    },
                  };
                };
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/mock-snap-notification.cjs',
      },
    ],
    [
      2379,
      {
        '../services/feature-announcements.cjs': 2385,
        '../services/onchain-notifications.cjs': 2386,
        './mock-feature-announcements.cjs': 2374,
        './mock-raw-notifications.cjs': 2377,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getMockMarkNotificationsAsReadResponse =
                    r.getMockListNotificationsResponse =
                    r.MOCK_RAW_ON_CHAIN_NOTIFICATIONS =
                    r.getMockBatchDeleteTriggersResponse =
                    r.getMockBatchCreateTriggersResponse =
                    r.getMockFeatureAnnouncementResponse =
                    r.CONTENTFUL_RESPONSE =
                      void 0);
                const n = e('./mock-feature-announcements.cjs'),
                  s = e('./mock-raw-notifications.cjs'),
                  i = e('../services/feature-announcements.cjs'),
                  o = e('../services/onchain-notifications.cjs');
                r.CONTENTFUL_RESPONSE = (0, n.createMockFeatureAnnouncementAPIResult)();
                r.getMockFeatureAnnouncementResponse = () => ({
                  url: i.FEATURE_ANNOUNCEMENT_API,
                  requestMethod: 'GET',
                  response: r.CONTENTFUL_RESPONSE,
                });
                r.getMockBatchCreateTriggersResponse = () => ({
                  url: o.TRIGGER_API_BATCH_ENDPOINT,
                  requestMethod: 'POST',
                  response: null,
                });
                (r.getMockBatchDeleteTriggersResponse = () => ({
                  url: o.TRIGGER_API_BATCH_ENDPOINT,
                  requestMethod: 'DELETE',
                  response: null,
                })),
                  (r.MOCK_RAW_ON_CHAIN_NOTIFICATIONS = (0, s.createMockRawOnChainNotifications)());
                r.getMockListNotificationsResponse = () => ({
                  url: o.NOTIFICATION_API_LIST_ENDPOINT,
                  requestMethod: 'POST',
                  response: r.MOCK_RAW_ON_CHAIN_NOTIFICATIONS,
                });
                r.getMockMarkNotificationsAsReadResponse = () => ({
                  url: o.NOTIFICATION_API_MARK_ALL_AS_READ_ENDPOINT,
                  requestMethod: 'POST',
                  response: null,
                });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/mocks/mockResponses.cjs',
      },
    ],
    [
      2380,
      {
        './process-feature-announcement.cjs': 2381,
        './process-notifications.cjs': 2382,
        './process-onchain-notifications.cjs': 2383,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./process-feature-announcement.cjs'), r),
                  s(e('./process-notifications.cjs'), r),
                  s(e('./process-onchain-notifications.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/processors/index.cjs',
      },
    ],
    [
      2381,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.processFeatureAnnouncement = r.isFeatureAnnouncementRead = void 0);
                (r.isFeatureAnnouncementRead = function (e, t) {
                  return (
                    !!t.includes(e.id) ||
                    ((r = new Date(e.createdAt)), (Date.now() - r.getTime()) / 864e5 >= 90)
                  );
                  var r;
                }),
                  (r.processFeatureAnnouncement = function (e) {
                    return {
                      type: e.type,
                      id: e.data.id,
                      createdAt: new Date(e.createdAt).toISOString(),
                      data: e.data,
                      isRead: !1,
                    };
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/processors/process-feature-announcement.cjs',
      },
    ],
    [
      2382,
      {
        '../constants/notification-schema.cjs': 2371,
        './process-feature-announcement.cjs': 2381,
        './process-onchain-notifications.cjs': 2383,
        './process-snap-notifications.cjs': 2384,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.safeProcessNotification = r.processNotification = void 0);
                const n = e('./process-feature-announcement.cjs'),
                  s = e('./process-onchain-notifications.cjs'),
                  i = e('./process-snap-notifications.cjs'),
                  o = e('../constants/notification-schema.cjs'),
                  a = e => Object.values(o.TRIGGER_TYPES).includes(e.type),
                  c = e => e.type === o.TRIGGER_TYPES.FEATURES_ANNOUNCEMENT,
                  u = e => e.type === o.TRIGGER_TYPES.SNAP;
                function l(e, t = []) {
                  if (c(e)) {
                    const r = (0, n.processFeatureAnnouncement)(e);
                    return (r.isRead = (0, n.isFeatureAnnouncementRead)(r, t)), r;
                  }
                  return u(e)
                    ? (0, i.processSnapNotification)(e)
                    : a(e)
                      ? (0, s.processOnChainNotification)(e)
                      : (t => {
                          const r = e?.type;
                          throw new Error(`No processor found for notification kind ${r}`);
                        })();
                }
                (r.processNotification = l),
                  (r.safeProcessNotification = function (e, t = []) {
                    try {
                      return l(e, t);
                    } catch {
                      return undefined;
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/processors/process-notifications.cjs',
      },
    ],
    [
      2383,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.processOnChainNotification = void 0),
                  (r.processOnChainNotification = function (e) {
                    return {
                      ...e,
                      id: e.id,
                      createdAt: new Date(e.created_at).toISOString(),
                      isRead: !e.unread,
                    };
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/processors/process-onchain-notifications.cjs',
      },
    ],
    [
      2384,
      { uuid: 5733 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.processSnapNotification = void 0);
                const n = e('uuid');
                r.processSnapNotification = e => {
                  const { data: t, type: r, readDate: s } = e;
                  return {
                    id: (0, n.v4)(),
                    readDate: s,
                    createdAt: new Date().toISOString(),
                    isRead: !1,
                    type: r,
                    data: t,
                  };
                };
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/processors/process-snap-notifications.cjs',
      },
    ],
    [
      2385,
      {
        '../constants/notification-schema.cjs': 2371,
        '../processors/process-feature-announcement.cjs': 2381,
        '@contentful/rich-text-html-renderer': 424,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getFeatureAnnouncementNotifications =
                    r.getFeatureAnnouncementUrl =
                    r.FEATURE_ANNOUNCEMENT_URL =
                    r.FEATURE_ANNOUNCEMENT_API =
                      void 0);
                const n = e('@contentful/rich-text-html-renderer'),
                  s = e('../constants/notification-schema.cjs'),
                  i = e('../processors/process-feature-announcement.cjs'),
                  o = ':space_id',
                  a = ':access_token',
                  c = ':client_id',
                  u = 'cdn.contentful.com';
                (r.FEATURE_ANNOUNCEMENT_API = `https://${u}/spaces/${o}/environments/master/entries`),
                  (r.FEATURE_ANNOUNCEMENT_URL = `${r.FEATURE_ANNOUNCEMENT_API}?access_token=${a}&content_type=productAnnouncement&include=10&fields.clients[in]=${c}`);
                r.getFeatureAnnouncementUrl = (e, t) => {
                  const n = t ? 'preview.contentful.com' : u,
                    s = r.FEATURE_ANNOUNCEMENT_URL.replace(o, e.spaceId)
                      .replace(a, t || e.accessToken)
                      .replace(c, e.platform)
                      .replace(u, n);
                  return encodeURI(s);
                };
                r.getFeatureAnnouncementNotifications = async function (e, t) {
                  if (e?.accessToken && e?.spaceId && e?.platform) {
                    const o = await (async (e, t) => {
                      const i = (0, r.getFeatureAnnouncementUrl)(e, t),
                        o = await fetch(i)
                          .then(e => e.json())
                          .catch(() => null);
                      if (!o) return [];
                      const a = e => {
                        const t = o,
                          r =
                            t?.includes?.Entry?.find(t => t?.sys?.id === e) ||
                            t?.includes?.Asset?.find(t => t?.sys?.id === e);
                        return r ? r?.fields : null;
                      };
                      return (o?.items ?? []).map(e => {
                        const { fields: t } = e,
                          r = t.image ? a(t.image.sys.id) : undefined,
                          i = t.externalLink ? a(t.externalLink.sys.id) : undefined,
                          o = t.portfolioLink ? a(t.portfolioLink.sys.id) : undefined,
                          c = t.extensionLink ? a(t.extensionLink.sys.id) : undefined,
                          u = t.mobileLink ? a(t.mobileLink.sys.id) : undefined;
                        return {
                          type: s.TRIGGER_TYPES.FEATURES_ANNOUNCEMENT,
                          createdAt: new Date(e.sys.createdAt).toString(),
                          data: {
                            id: t.id,
                            category: t.category,
                            title: t.title,
                            longDescription: (0, n.documentToHtmlString)(t.longDescription),
                            shortDescription: t.shortDescription,
                            image: {
                              title: r?.title,
                              description: r?.description,
                              url: r?.file?.url ?? '',
                            },
                            externalLink: i && {
                              externalLinkText: i?.externalLinkText,
                              externalLinkUrl: i?.externalLinkUrl,
                            },
                            portfolioLink: o && {
                              portfolioLinkText: o?.portfolioLinkText,
                              portfolioLinkUrl: o?.portfolioLinkUrl,
                            },
                            extensionLink: c && {
                              extensionLinkText: c?.extensionLinkText,
                              extensionLinkRoute: c?.extensionLinkRoute,
                            },
                            mobileLink: u && {
                              mobileLinkText: u?.mobileLinkText,
                              mobileLinkUrl: u?.mobileLinkUrl,
                            },
                          },
                        };
                      });
                    })(e, t);
                    return o.map(e => (0, i.processFeatureAnnouncement)(e));
                  }
                  return [];
                };
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/services/feature-announcements.cjs',
      },
    ],
    [
      2386,
      {
        '../../shared/to-raw-notification.cjs': 2404,
        '../utils/utils.cjs': 2389,
        '@metamask/profile-sync-controller': 2484,
        loglevel: 4929,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.markNotificationsAsRead =
                    r.getOnChainNotifications =
                    r.deleteOnChainTriggers =
                    r.createOnChainTriggers =
                    r.NOTIFICATION_API_MARK_ALL_AS_READ_ENDPOINT =
                    r.NOTIFICATION_API_LIST_ENDPOINT_PAGE_QUERY =
                    r.NOTIFICATION_API_LIST_ENDPOINT =
                    r.TRIGGER_API_BATCH_ENDPOINT =
                    r.NOTIFICATION_API =
                    r.TRIGGER_API =
                      void 0);
                const s = e('@metamask/profile-sync-controller'),
                  i = n(e('loglevel')),
                  o = e('../../shared/to-raw-notification.cjs'),
                  a = e('../utils/utils.cjs');
                (r.TRIGGER_API = 'https://trigger.api.cx.metamask.io'),
                  (r.NOTIFICATION_API = 'https://notification.api.cx.metamask.io'),
                  (r.TRIGGER_API_BATCH_ENDPOINT = `${r.TRIGGER_API}/api/v1/triggers/batch`),
                  (r.NOTIFICATION_API_LIST_ENDPOINT = `${r.NOTIFICATION_API}/api/v1/notifications`);
                (r.NOTIFICATION_API_LIST_ENDPOINT_PAGE_QUERY = e =>
                  `${r.NOTIFICATION_API_LIST_ENDPOINT}?page=${e}&per_page=100`),
                  (r.NOTIFICATION_API_MARK_ALL_AS_READ_ENDPOINT = `${r.NOTIFICATION_API}/api/v1/notifications/mark-as-read`),
                  (r.createOnChainTriggers = async function (e, t, n, o) {
                    const c = o.map(e => ({
                      id: e.id,
                      token: s.UserStorageController.createSHA256Hash(e.id + t),
                      config: { kind: e.kind, chain_id: Number(e.chainId), address: e.address },
                    }));
                    if (0 === c.length) return;
                    const u = await (0, a.makeApiCall)(n, r.TRIGGER_API_BATCH_ENDPOINT, 'POST', c);
                    if (!u.ok) {
                      const e = await u.json().catch(() => undefined);
                      throw (
                        (i.default.error('Error creating triggers:', e),
                        new Error('OnChain Notifications - unable to create triggers'))
                      );
                    }
                    for (const t of c)
                      (0, a.toggleUserStorageTriggerStatus)(
                        e,
                        t.config.address,
                        String(t.config.chain_id),
                        t.id,
                        !0
                      );
                    (0, a.cleanUserStorage)(e);
                  }),
                  (r.deleteOnChainTriggers = async function (e, t, n, o) {
                    const c = o.map(e => ({
                      id: e,
                      token: s.UserStorageController.createSHA256Hash(e + t),
                    }));
                    try {
                      if (
                        !(await (0, a.makeApiCall)(n, r.TRIGGER_API_BATCH_ENDPOINT, 'DELETE', c)).ok
                      )
                        throw new Error(
                          `Failed to delete on-chain notifications for uuids ${o.join(', ')}`
                        );
                      for (const t of o)
                        for (const r in e)
                          if (r in e) for (const n in e[r]) e?.[r]?.[n]?.[t] && delete e[r][n][t];
                      const t = (e = {}) => 0 === Object.keys(e).length;
                      for (const r in e)
                        if (r in e) {
                          for (const n in e[r]) t(e?.[r]?.[n]) && delete e[r][n];
                          t(e?.[r]) && delete e[r];
                        }
                    } catch (e) {
                      throw (
                        (i.default.error(
                          `Error deleting on-chain notifications for uuids ${o.join(', ')}:`,
                          e
                        ),
                        e)
                      );
                    }
                    return e;
                  }),
                  (r.getOnChainNotifications = async function (e, t) {
                    const n = (0, a.traverseUserStorageTriggers)(e, {
                      mapTrigger: e => (e.enabled ? e.id : undefined),
                    });
                    if (0 === n.length) return [];
                    const s = [];
                    for (let e = 1; e <= 2; e++)
                      try {
                        const i = await (0, a.makeApiCall)(
                            t,
                            (0, r.NOTIFICATION_API_LIST_ENDPOINT_PAGE_QUERY)(e),
                            'POST',
                            { trigger_ids: n }
                          ),
                          c = await i.json(),
                          u = c
                            .map(e =>
                              e.data?.kind ? (0, o.toRawOnChainNotification)(e) : undefined
                            )
                            .filter(e => Boolean(e));
                        if ((s.push(...u), c.length < 100)) {
                          e = 3;
                          break;
                        }
                      } catch (e) {
                        i.default.error(
                          `Error fetching on-chain notifications for trigger IDs ${n.join(', ')}:`,
                          e
                        );
                      }
                    return s;
                  }),
                  (r.markNotificationsAsRead = async function (e, t) {
                    if (0 !== t.length)
                      try {
                        const n = await (0, a.makeApiCall)(
                          e,
                          r.NOTIFICATION_API_MARK_ALL_AS_READ_ENDPOINT,
                          'POST',
                          { ids: t }
                        );
                        if (200 !== n.status) {
                          const e = await n.json().catch(() => undefined);
                          throw new Error(`Error marking notifications as read: ${e?.message}`);
                        }
                      } catch (e) {
                        throw (i.default.error('Error marking notifications as read:', e), e);
                      }
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/services/onchain-notifications.cjs',
      },
    ],
    [
      2387,
      { '../constants/notification-schema.cjs': 2371 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NOTIFICATION_CHAINS_ID =
                    r.SUPPORTED_NOTIFICATION_BLOCK_EXPLORERS =
                    r.NOTIFICATION_NETWORK_CURRENCY_SYMBOL =
                    r.NOTIFICATION_NETWORK_CURRENCY_NAME =
                      void 0);
                const n = e('../constants/notification-schema.cjs');
                (r.NOTIFICATION_NETWORK_CURRENCY_NAME = {
                  [n.NOTIFICATION_CHAINS_ID.ETHEREUM]: 'Ethereum',
                  [n.NOTIFICATION_CHAINS_ID.ARBITRUM]: 'Arbitrum',
                  [n.NOTIFICATION_CHAINS_ID.AVALANCHE]: 'Avalanche',
                  [n.NOTIFICATION_CHAINS_ID.BSC]: 'Binance',
                  [n.NOTIFICATION_CHAINS_ID.LINEA]: 'Linea',
                  [n.NOTIFICATION_CHAINS_ID.OPTIMISM]: 'Optimism',
                  [n.NOTIFICATION_CHAINS_ID.POLYGON]: 'Polygon',
                }),
                  (r.NOTIFICATION_NETWORK_CURRENCY_SYMBOL = {
                    [n.NOTIFICATION_CHAINS_ID.ETHEREUM]: 'ETH',
                    [n.NOTIFICATION_CHAINS_ID.ARBITRUM]: 'ETH',
                    [n.NOTIFICATION_CHAINS_ID.AVALANCHE]: 'AVAX',
                    [n.NOTIFICATION_CHAINS_ID.BSC]: 'BNB',
                    [n.NOTIFICATION_CHAINS_ID.LINEA]: 'ETH',
                    [n.NOTIFICATION_CHAINS_ID.OPTIMISM]: 'ETH',
                    [n.NOTIFICATION_CHAINS_ID.POLYGON]: 'POL',
                  }),
                  (r.SUPPORTED_NOTIFICATION_BLOCK_EXPLORERS = {
                    [n.NOTIFICATION_CHAINS_ID.ETHEREUM]: {
                      url: 'https://etherscan.io',
                      name: 'Etherscan',
                    },
                    [n.NOTIFICATION_CHAINS_ID.OPTIMISM]: {
                      url: 'https://optimistic.etherscan.io',
                      name: 'Optimistic Etherscan',
                    },
                    [n.NOTIFICATION_CHAINS_ID.BSC]: { url: 'https://bscscan.com', name: 'BscScan' },
                    [n.NOTIFICATION_CHAINS_ID.POLYGON]: {
                      url: 'https://polygonscan.com',
                      name: 'PolygonScan',
                    },
                    [n.NOTIFICATION_CHAINS_ID.ARBITRUM]: {
                      url: 'https://arbiscan.io',
                      name: 'Arbiscan',
                    },
                    [n.NOTIFICATION_CHAINS_ID.AVALANCHE]: {
                      url: 'https://snowtrace.io',
                      name: 'Snowtrace',
                    },
                    [n.NOTIFICATION_CHAINS_ID.LINEA]: {
                      url: 'https://lineascan.build',
                      name: 'LineaScan',
                    },
                  });
                var s = e('../constants/notification-schema.cjs');
                Object.defineProperty(r, 'NOTIFICATION_CHAINS_ID', {
                  enumerable: !0,
                  get: function () {
                    return s.NOTIFICATION_CHAINS_ID;
                  },
                });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/ui/constants.cjs',
      },
    ],
    [
      2388,
      { './constants.cjs': 2387 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), s(e('./constants.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/ui/index.cjs',
      },
    ],
    [
      2389,
      {
        '../constants/constants.cjs': 2369,
        '../constants/notification-schema.cjs': 2371,
        '@metamask/controller-utils': 1515,
        uuid: 5733,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.makeApiCall =
                    r.toggleUserStorageTriggerStatus =
                    r.upsertTriggerTypeTriggers =
                    r.upsertAddressTriggers =
                    r.getUUIDsForAccountByKinds =
                    r.getUUIDsForKinds =
                    r.getAllUUIDs =
                    r.getUUIDsForAccount =
                    r.inferEnabledKinds =
                    r.checkAccountsPresence =
                    r.traverseUserStorageTriggers =
                    r.cleanUserStorage =
                    r.initializeUserStorage =
                      void 0);
                const n = e('@metamask/controller-utils'),
                  s = e('uuid'),
                  i = e('../constants/constants.cjs'),
                  o = e('../constants/notification-schema.cjs'),
                  a = e => e.id,
                  c = e => e;
                function u(e) {
                  const t = new Set();
                  return (
                    l(e, { mapTrigger: e => t.add(e.address) }),
                    t.forEach(t => {
                      (0, n.isValidHexAddress)(t) || delete e[t];
                    }),
                    e
                  );
                }
                function l(e, t) {
                  const r = [],
                    n = t?.mapTrigger ?? c;
                  for (const s in e)
                    if (s !== i.USER_STORAGE_VERSION_KEY && (!t?.address || s === t.address))
                      for (const t in e[s])
                        if (t in e[s])
                          for (const i in e[s][t])
                            if (i) {
                              const o = n({
                                id: i,
                                kind: e[s]?.[t]?.[i]?.k,
                                chainId: t,
                                address: s,
                                enabled: e[s]?.[t]?.[i]?.e ?? !1,
                              });
                              o && r.push(o);
                            }
                  return r;
                }
                (r.initializeUserStorage = function (e, t, r = !0) {
                  const n = { [i.USER_STORAGE_VERSION_KEY]: i.USER_STORAGE_VERSION };
                  return (
                    e.forEach(e => {
                      const r = e.address?.toLowerCase();
                      r &&
                        (n[r] || (n[r] = {}),
                        Object.entries(o.TRIGGERS).forEach(([e, { supported_chains: i }]) => {
                          i.forEach(i => {
                            n[r]?.[i] || (n[r][i] = {}), (n[r][i][(0, s.v4)()] = { k: e, e: t });
                          });
                        }));
                    }),
                    r && u(n),
                    n
                  );
                }),
                  (r.cleanUserStorage = u),
                  (r.traverseUserStorageTriggers = l),
                  (r.checkAccountsPresence = function (e, t) {
                    const r = {};
                    return (
                      t.forEach(t => {
                        r[t.toLowerCase()] = (function (e, t) {
                          const r = t[e?.toLowerCase()];
                          if (!r) return !1;
                          for (const [e, t] of Object.entries(o.TRIGGERS))
                            for (const n of t.supported_chains) {
                              if (!r[n]) return !1;
                              if (!Object.values(r[n]).some(t => t.k === e)) return !1;
                              for (const e in r[n]) if (!r[n][e].e) return !1;
                            }
                          return !0;
                        })(t, e);
                      }),
                      r
                    );
                  }),
                  (r.inferEnabledKinds = function (e) {
                    const t = new Set();
                    return (
                      l(e, {
                        mapTrigger: e => {
                          t.add(e.kind);
                        },
                      }),
                      Array.from(t)
                    );
                  }),
                  (r.getUUIDsForAccount = function (e, t) {
                    return l(e, { address: t, mapTrigger: a });
                  }),
                  (r.getAllUUIDs = function (e) {
                    return l(e, { mapTrigger: a });
                  }),
                  (r.getUUIDsForKinds = function (e, t) {
                    const r = new Set(t);
                    return l(e, { mapTrigger: e => (r.has(e.kind) ? e.id : undefined) });
                  }),
                  (r.getUUIDsForAccountByKinds = function (e, t, r) {
                    const n = new Set(r);
                    return l(e, { address: t, mapTrigger: e => (n.has(e.kind) ? e : undefined) });
                  }),
                  (r.upsertAddressTriggers = function (e, t) {
                    const r = e.toLowerCase();
                    t[r] = t[r] || {};
                    for (const [e, { supported_chains: n }] of Object.entries(o.TRIGGERS))
                      for (const i of n) {
                        t[r][i] = t[r][i] || {};
                        if (!Object.values(t[r][i]).find(t => t.k === e)) {
                          const n = (0, s.v4)();
                          t[r][i][n] = { k: e, e: !1 };
                        }
                      }
                    return t;
                  }),
                  (r.upsertTriggerTypeTriggers = function (e, t) {
                    return (
                      Object.entries(t).forEach(([r, n]) => {
                        r !== i.USER_STORAGE_VERSION_KEY &&
                          Object.entries(n).forEach(([n, i]) => {
                            if (!Object.values(i).find(t => t.k === e)) {
                              const i = (0, s.v4)();
                              t[r][n][i] = { k: e, e: !1 };
                            }
                          });
                      }),
                      t
                    );
                  }),
                  (r.toggleUserStorageTriggerStatus = function (e, t, r, n, s) {
                    return e?.[t]?.[r]?.[n] && (e[t][r][n].e = s), e;
                  }),
                  (r.makeApiCall = async function (e, t, r, n) {
                    const s = {
                      method: r,
                      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${e}` },
                      body: JSON.stringify(n),
                    };
                    return await fetch(t, s);
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesController/utils/utils.cjs',
      },
    ],
    [
      2390,
      { './services/services.cjs': 2395, '@metamask/base-controller': 1407, loglevel: 4929 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  m =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  f =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.defaultState = void 0);
                const p = e('@metamask/base-controller'),
                  h = f(e('loglevel')),
                  g = e('./services/services.cjs');
                r.defaultState = { isPushEnabled: !0, fcmToken: '', isUpdatingFCMToken: !1 };
                const y = {
                    isPushEnabled: { persist: !0, anonymous: !0 },
                    fcmToken: { persist: !0, anonymous: !0 },
                    isUpdatingFCMToken: { persist: !1, anonymous: !0 },
                  },
                  w = {
                    apiKey: '',
                    authDomain: '',
                    storageBucket: '',
                    projectId: '',
                    messagingSenderId: '',
                    appId: '',
                    measurementId: '',
                    vapidKey: '',
                  };
                class k extends p.BaseController {
                  constructor({ messenger: e, state: t, env: u, config: l }) {
                    super({
                      messenger: e,
                      metadata: y,
                      name: 'NotificationServicesPushController',
                      state: { ...r.defaultState, ...t },
                    }),
                      n.add(this),
                      s.set(this, undefined),
                      i.set(this, void 0),
                      o.set(this, void 0),
                      d(this, i, u ?? w, 'f'),
                      d(this, o, l, 'f'),
                      m(this, n, 'm', a).call(this),
                      m(this, n, 'm', c).call(this);
                  }
                  async subscribeToPushNotifications() {
                    if (m(this, o, 'f').isPushFeatureEnabled) {
                      m(this, s, 'f') && (m(this, s, 'f').call(this), d(this, s, undefined, 'f'));
                      try {
                        d(
                          this,
                          s,
                          (await m(this, o, 'f').pushService.subscribeToPushNotifications(
                            m(this, i, 'f')
                          )) ?? undefined,
                          'f'
                        );
                      } catch {}
                    }
                  }
                  async enablePushNotifications(e) {
                    if (m(this, o, 'f').isPushFeatureEnabled) {
                      this.update(e => {
                        e.isUpdatingFCMToken = !0;
                      });
                      try {
                        const t = await m(this, n, 'm', u)
                          .call(this)
                          .catch(() => null);
                        if (t) {
                          const r = await (0, g.activatePushNotifications)({
                            bearerToken: t,
                            triggers: e,
                            env: m(this, i, 'f'),
                            createRegToken: m(this, o, 'f').pushService.createRegToken,
                            platform: m(this, o, 'f').platform,
                            locale: m(this, o, 'f').getLocale?.() ?? 'en',
                          }).catch(() => null);
                          r && m(this, n, 'm', l).call(this, { type: 'enable', fcmToken: r });
                        }
                      } catch {}
                      try {
                        await this.subscribeToPushNotifications();
                      } catch {}
                      this.update(e => {
                        e.isUpdatingFCMToken = !1;
                      });
                    }
                  }
                  async disablePushNotifications() {
                    if (m(this, o, 'f').isPushFeatureEnabled) {
                      this.update(e => {
                        e.isUpdatingFCMToken = !0;
                      });
                      try {
                        await (0, g.deactivatePushNotifications)({
                          env: m(this, i, 'f'),
                          deleteRegToken: m(this, o, 'f').pushService.deleteRegToken,
                          regToken: this.state.fcmToken,
                        });
                      } catch (e) {
                        const t = `Failed to disable push notifications: ${e}`;
                        throw (h.default.error(t), new Error(t));
                      } finally {
                        this.update(e => {
                          e.isUpdatingFCMToken = !1;
                        });
                      }
                      m(this, s, 'f')?.call(this),
                        m(this, n, 'm', l).call(this, { type: 'disable' });
                    }
                  }
                  async updateTriggerPushNotifications(e) {
                    if (m(this, o, 'f').isPushFeatureEnabled) {
                      this.update(e => {
                        e.isUpdatingFCMToken = !0;
                      });
                      try {
                        const t = await m(this, n, 'm', u).call(this),
                          { fcmToken: r } = await (0, g.updateTriggerPushNotifications)({
                            bearerToken: t,
                            triggers: e,
                            env: m(this, i, 'f'),
                            createRegToken: m(this, o, 'f').pushService.createRegToken,
                            deleteRegToken: m(this, o, 'f').pushService.deleteRegToken,
                            platform: m(this, o, 'f').platform,
                            locale: m(this, o, 'f').getLocale?.() ?? 'en',
                          });
                        r && m(this, n, 'm', l).call(this, { type: 'update', fcmToken: r });
                      } catch (e) {
                        const t = `Failed to update triggers for push notifications: ${e}`;
                        throw (h.default.error(t), new Error(t));
                      } finally {
                        this.update(e => {
                          e.isUpdatingFCMToken = !1;
                        });
                      }
                    }
                  }
                }
                (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (n = new WeakSet()),
                  (a = function () {
                    this.messagingSystem.registerActionHandler(
                      'NotificationServicesPushController:enablePushNotifications',
                      this.enablePushNotifications.bind(this)
                    ),
                      this.messagingSystem.registerActionHandler(
                        'NotificationServicesPushController:disablePushNotifications',
                        this.disablePushNotifications.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'NotificationServicesPushController:updateTriggerPushNotifications',
                        this.updateTriggerPushNotifications.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'NotificationServicesPushController:subscribeToPushNotifications',
                        this.subscribeToPushNotifications.bind(this)
                      );
                  }),
                  (c = function () {
                    this.update(e => {
                      e.isUpdatingFCMToken = !1;
                    });
                  }),
                  (u = async function () {
                    const e = await this.messagingSystem.call(
                      'AuthenticationController:getBearerToken'
                    );
                    if (!e)
                      throw (
                        (h.default.error(
                          'Failed to enable push notifications: BearerToken token is missing.'
                        ),
                        new Error('BearerToken token is missing'))
                      );
                    return e;
                  }),
                  (l = function (e) {
                    'enable' === e.type &&
                      this.update(t => {
                        (t.isPushEnabled = !0),
                          (t.fcmToken = e.fcmToken),
                          (t.isUpdatingFCMToken = !1);
                      }),
                      'disable' === e.type &&
                        this.update(e => {
                          (e.isPushEnabled = !1), (e.fcmToken = ''), (e.isUpdatingFCMToken = !1);
                        }),
                      'update' === e.type &&
                        this.update(t => {
                          (t.isPushEnabled = !0),
                            (t.fcmToken = e.fcmToken),
                            (t.isUpdatingFCMToken = !1);
                        });
                  }),
                  (r.default = k);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/NotificationServicesPushController.cjs',
      },
    ],
    [
      2391,
      {
        './NotificationServicesPushController.cjs': 2390,
        './mocks/index.cjs': 2392,
        './utils/index.cjs': 2398,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    },
                  o =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    },
                  a =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.Mocks = r.Utils = r.Controller = void 0);
                const c = a(e('./NotificationServicesPushController.cjs'));
                r.Controller = c.default;
                const u = c.default;
                (r.default = u),
                  i(e('./NotificationServicesPushController.cjs'), r),
                  (r.Utils = o(e('./utils/index.cjs'))),
                  i(e('./utils/index.cjs'), r),
                  (r.Mocks = o(e('./mocks/index.cjs')));
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/index.cjs',
      },
    ],
    [
      2392,
      { './mockResponse.cjs': 2393 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./mockResponse.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/mocks/index.cjs',
      },
    ],
    [
      2393,
      { '../services/endpoints.cjs': 2394 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getMockDeleteFCMRegistrationTokenResponse =
                    r.getMockCreateFCMRegistrationTokenResponse =
                    r.MOCK_FCM_RESPONSE =
                    r.getMockUpdatePushNotificationLinksResponse =
                    r.getMockRetrievePushNotificationLinksResponse =
                    r.MOCK_LINKS_RESPONSE =
                    r.MOCK_REG_TOKEN =
                      void 0);
                const n = e('../services/endpoints.cjs');
                (r.MOCK_REG_TOKEN = 'REG_TOKEN'),
                  (r.MOCK_LINKS_RESPONSE = {
                    trigger_ids: ['1', '2', '3'],
                    registration_tokens: [
                      { token: 'reg_token_1', platform: 'portfolio', locale: 'en' },
                      { token: 'reg_token_2', platform: 'extension', locale: 'en' },
                    ],
                  });
                r.getMockRetrievePushNotificationLinksResponse = () => ({
                  url: n.REGISTRATION_TOKENS_ENDPOINT,
                  requestMethod: 'GET',
                  response: r.MOCK_LINKS_RESPONSE,
                });
                (r.getMockUpdatePushNotificationLinksResponse = () => ({
                  url: n.REGISTRATION_TOKENS_ENDPOINT,
                  requestMethod: 'POST',
                  response: null,
                })),
                  (r.MOCK_FCM_RESPONSE = {
                    name: '',
                    token: 'fcm-token',
                    web: { endpoint: '', p256dh: '', auth: '', applicationPubKey: '' },
                  });
                r.getMockCreateFCMRegistrationTokenResponse = () => ({
                  url: /^https:\/\/fcmregistrations\.googleapis\.com\/v1\/projects\/.*$/u,
                  requestMethod: 'POST',
                  response: r.MOCK_FCM_RESPONSE,
                });
                r.getMockDeleteFCMRegistrationTokenResponse = () => ({
                  url: /^https:\/\/fcmregistrations\.googleapis\.com\/v1\/projects\/.*$/u,
                  requestMethod: 'POST',
                  response: {},
                });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/mocks/mockResponse.cjs',
      },
    ],
    [
      2394,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.REGISTRATION_TOKENS_ENDPOINT = void 0);
                r.REGISTRATION_TOKENS_ENDPOINT = 'https://push.api.cx.metamask.io/v1/link';
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/services/endpoints.cjs',
      },
    ],
    [
      2395,
      { './endpoints.cjs': 2394 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.updateTriggerPushNotifications =
                    r.deactivatePushNotifications =
                    r.activatePushNotifications =
                    r.updateLinksAPI =
                      void 0);
                const o = i(e('./endpoints.cjs'));
                async function a(e, t, r) {
                  try {
                    const n = { trigger_ids: t, registration_tokens: r };
                    return (
                      200 ===
                      (
                        await fetch(o.REGISTRATION_TOKENS_ENDPOINT, {
                          method: 'POST',
                          headers: {
                            Authorization: `Bearer ${e}`,
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(n),
                        })
                      ).status
                    );
                  } catch {
                    return !1;
                  }
                }
                (r.updateLinksAPI = a),
                  (r.activatePushNotifications = async function (e) {
                    const {
                        bearerToken: t,
                        triggers: r,
                        env: n,
                        createRegToken: s,
                        platform: i,
                        locale: o,
                      } = e,
                      c = await s(n).catch(() => null);
                    return c ? (await a(t, r, [{ token: c, platform: i, locale: o }]), c) : null;
                  }),
                  (r.deactivatePushNotifications = async function (e) {
                    const { regToken: t, env: r, deleteRegToken: n } = e;
                    return !t || !!(await n(r));
                  }),
                  (r.updateTriggerPushNotifications = async function (e) {
                    const {
                      bearerToken: t,
                      triggers: r,
                      createRegToken: n,
                      platform: s,
                      locale: i,
                      deleteRegToken: o,
                      env: c,
                    } = e;
                    await o(c);
                    const u = await n(c);
                    if (!u) throw new Error('Failed to create a new registration token');
                    if (!(await a(t, r, [{ token: u, platform: s, locale: i }])))
                      throw new Error('Failed to create links to new reg token');
                    return { fcmToken: u };
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/services/services.cjs',
      },
    ],
    [
      2396,
      { 'bignumber.js': 2405 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getAmount =
                    r.formatAmount =
                    r.getLeadingZeroCount =
                    r.calcTokenAmount =
                      void 0);
                const n = e('bignumber.js'),
                  s = { decimalPlaces: 4 };
                function i(e, t) {
                  const r = Math.pow(10, Number(t || 0));
                  return new n.BigNumber(String(e)).div(r);
                }
                r.calcTokenAmount = i;
                r.getLeadingZeroCount = e => {
                  const t = new n.BigNumber(e, 10).toString(10).split('.')[1] ?? '';
                  return t.match(/^0*/u)?.[0]?.length || 0;
                };
                r.formatAmount = (e, t) => {
                  const n = { ...s, ...t },
                    i = (0, r.getLeadingZeroCount)(e),
                    o = e.toString().includes('.') || i > 0;
                  if (e > 999)
                    return Intl.NumberFormat('en-US', {
                      notation: 'compact',
                      compactDisplay: 'short',
                      maximumFractionDigits: 2,
                    }).format(e);
                  if (o) {
                    const t = ((a = n.decimalPlaces), Boolean(n?.shouldEllipse) && i >= a),
                      r = Intl.NumberFormat('en-US', {
                        minimumFractionDigits: t ? n.decimalPlaces : undefined,
                        maximumFractionDigits: n.decimalPlaces,
                      }).format(e);
                    return t ? `${r}...` : r;
                  }
                  var a;
                  return e.toString();
                };
                r.getAmount = (e, t, n) => {
                  if (!e || !t) return '';
                  const s = i(e, parseFloat(t)).toNumber();
                  return (0, r.formatAmount)(s, n);
                };
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/utils/get-notification-data.cjs',
      },
    ],
    [
      2397,
      {
        '../../NotificationServicesController/index.cjs': 2372,
        './get-notification-data.cjs': 2396,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createOnChainPushNotificationMessage =
                    r.createOnChainPushNotificationMessages =
                      void 0);
                const n = e('./get-notification-data.cjs'),
                  s = e('../../NotificationServicesController/index.cjs');
                function i(e) {
                  return s.Constants.CHAIN_SYMBOLS[e] ?? null;
                }
                (r.createOnChainPushNotificationMessages = e => {
                  const t = (...t) => {
                    const [r, ...n] = t;
                    return (0, e[r])(...n);
                  };
                  return {
                    erc20_sent: {
                      title: t('pushPlatformNotificationsFundsSentTitle'),
                      defaultDescription: t('pushPlatformNotificationsFundsSentDescriptionDefault'),
                      getDescription: e => {
                        const r = e?.data?.token?.symbol,
                          s = e?.data?.token?.amount,
                          i = e?.data?.token?.decimals;
                        if (!r || !s || !i) return null;
                        const o = (0, n.getAmount)(s, i, { shouldEllipse: !0 });
                        return t('pushPlatformNotificationsFundsSentDescription', o, r);
                      },
                    },
                    eth_sent: {
                      title: t('pushPlatformNotificationsFundsSentTitle'),
                      defaultDescription: t('pushPlatformNotificationsFundsSentDescriptionDefault'),
                      getDescription: e => {
                        const r = i(e?.chain_id),
                          s = e?.data?.amount?.eth;
                        if (!r || !s) return null;
                        const o = (0, n.formatAmount)(parseFloat(s), { shouldEllipse: !0 });
                        return t('pushPlatformNotificationsFundsSentDescription', o, r);
                      },
                    },
                    erc20_received: {
                      title: t('pushPlatformNotificationsFundsReceivedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsFundsReceivedDescriptionDefault'
                      ),
                      getDescription: e => {
                        const r = e?.data?.token?.symbol,
                          s = e?.data?.token?.amount,
                          i = e?.data?.token?.decimals;
                        if (!r || !s || !i) return null;
                        const o = (0, n.getAmount)(s, i, { shouldEllipse: !0 });
                        return t('pushPlatformNotificationsFundsReceivedDescription', o, r);
                      },
                    },
                    eth_received: {
                      title: t('pushPlatformNotificationsFundsReceivedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsFundsReceivedDescriptionDefault'
                      ),
                      getDescription: e => {
                        const r = i(e?.chain_id),
                          s = e?.data?.amount?.eth;
                        if (!r || !s) return null;
                        const o = (0, n.formatAmount)(parseFloat(s), { shouldEllipse: !0 });
                        return t('pushPlatformNotificationsFundsReceivedDescription', o, r);
                      },
                    },
                    metamask_swap_completed: {
                      title: t('pushPlatformNotificationsSwapCompletedTitle'),
                      defaultDescription: t('pushPlatformNotificationsSwapCompletedDescription'),
                    },
                    erc721_sent: {
                      title: t('pushPlatformNotificationsNftSentTitle'),
                      defaultDescription: t('pushPlatformNotificationsNftSentDescription'),
                    },
                    erc1155_sent: {
                      title: t('pushPlatformNotificationsNftSentTitle'),
                      defaultDescription: t('pushPlatformNotificationsNftSentDescription'),
                    },
                    erc721_received: {
                      title: t('pushPlatformNotificationsNftReceivedTitle'),
                      defaultDescription: t('pushPlatformNotificationsNftReceivedDescription'),
                    },
                    erc1155_received: {
                      title: t('pushPlatformNotificationsNftReceivedTitle'),
                      defaultDescription: t('pushPlatformNotificationsNftReceivedDescription'),
                    },
                    rocketpool_stake_completed: {
                      title: t('pushPlatformNotificationsStakingRocketpoolStakeCompletedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsStakingRocketpoolStakeCompletedDescription'
                      ),
                    },
                    rocketpool_unstake_completed: {
                      title: t('pushPlatformNotificationsStakingRocketpoolUnstakeCompletedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsStakingRocketpoolUnstakeCompletedDescription'
                      ),
                    },
                    lido_stake_completed: {
                      title: t('pushPlatformNotificationsStakingLidoStakeCompletedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsStakingLidoStakeCompletedDescription'
                      ),
                    },
                    lido_stake_ready_to_be_withdrawn: {
                      title: t('pushPlatformNotificationsStakingLidoStakeReadyToBeWithdrawnTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsStakingLidoStakeReadyToBeWithdrawnDescription'
                      ),
                    },
                    lido_withdrawal_requested: {
                      title: t('pushPlatformNotificationsStakingLidoWithdrawalRequestedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsStakingLidoWithdrawalRequestedDescription'
                      ),
                    },
                    lido_withdrawal_completed: {
                      title: t('pushPlatformNotificationsStakingLidoWithdrawalCompletedTitle'),
                      defaultDescription: t(
                        'pushPlatformNotificationsStakingLidoWithdrawalCompletedDescription'
                      ),
                    },
                  };
                }),
                  (r.createOnChainPushNotificationMessage = function (e, t) {
                    if (!e?.type) return null;
                    const n = (0, r.createOnChainPushNotificationMessages)(t)[e.type];
                    if (!n) return null;
                    let s = null;
                    try {
                      s = n?.getDescription?.(e) ?? n.defaultDescription ?? null;
                    } catch {
                      s = n.defaultDescription ?? null;
                    }
                    return { title: n.title ?? '', description: s ?? '' };
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/utils/get-notification-message.cjs',
      },
    ],
    [
      2398,
      { './get-notification-data.cjs': 2396, './get-notification-message.cjs': 2397 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./get-notification-data.cjs'), r),
                  s(e('./get-notification-message.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/utils/index.cjs',
      },
    ],
    [
      2401,
      {
        './NotificationServicesController/index.cjs': 2372,
        './NotificationServicesPushController/index.cjs': 2391,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.NotificationServicesPushController = r.NotificationServicesController =
                    void 0),
                  (r.NotificationServicesController = i(
                    e('./NotificationServicesController/index.cjs')
                  )),
                  (r.NotificationServicesPushController = i(
                    e('./NotificationServicesPushController/index.cjs')
                  ));
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/index.cjs',
      },
    ],
    [
      2402,
      { './is-onchain-notification.cjs': 2403, './to-raw-notification.cjs': 2404 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./is-onchain-notification.cjs'), r),
                  s(e('./to-raw-notification.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/shared/index.cjs',
      },
    ],
    [
      2403,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isOnChainRawNotification = void 0),
                  (r.isOnChainRawNotification = function (e) {
                    const t = e;
                    return [t?.id, t?.data, t?.trigger_id].every(e => e !== undefined);
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/shared/is-onchain-notification.cjs',
      },
    ],
    [
      2404,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toRawOnChainNotification = void 0),
                  (r.toRawOnChainNotification = function (e) {
                    return { ...e, type: e?.data?.kind };
                  });
              };
            };
      },
      {
        package: '@metamask/notification-services-controller',
        file: 'node_modules/@metamask/notification-services-controller/dist/shared/to-raw-notification.cjs',
      },
    ],
    [
      2405,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                !(function (e) {
                  var r,
                    n = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
                    s = Math.ceil,
                    i = Math.floor,
                    o = '[BigNumber Error] ',
                    a = o + 'Number primitive has more than 15 significant digits: ',
                    c = 1e14,
                    u = 14,
                    l = 9007199254740991,
                    d = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
                    m = 1e7,
                    f = 1e9;
                  function p(e) {
                    var t = 0 | e;
                    return e > 0 || e === t ? t : t - 1;
                  }
                  function h(e) {
                    for (var t, r, n = 1, s = e.length, i = e[0] + ''; n < s; ) {
                      for (t = e[n++] + '', r = u - t.length; r--; t = '0' + t);
                      i += t;
                    }
                    for (s = i.length; 48 === i.charCodeAt(--s); );
                    return i.slice(0, s + 1 || 1);
                  }
                  function g(e, t) {
                    var r,
                      n,
                      s = e.c,
                      i = t.c,
                      o = e.s,
                      a = t.s,
                      c = e.e,
                      u = t.e;
                    if (!o || !a) return null;
                    if (((r = s && !s[0]), (n = i && !i[0]), r || n)) return r ? (n ? 0 : -a) : o;
                    if (o != a) return o;
                    if (((r = o < 0), (n = c == u), !s || !i)) return n ? 0 : !s ^ r ? 1 : -1;
                    if (!n) return (c > u) ^ r ? 1 : -1;
                    for (a = (c = s.length) < (u = i.length) ? c : u, o = 0; o < a; o++)
                      if (s[o] != i[o]) return (s[o] > i[o]) ^ r ? 1 : -1;
                    return c == u ? 0 : (c > u) ^ r ? 1 : -1;
                  }
                  function y(e, t, r, n) {
                    if (e < t || e > r || e !== i(e))
                      throw Error(
                        o +
                          (n || 'Argument') +
                          ('number' == typeof e
                            ? e < t || e > r
                              ? ' out of range: '
                              : ' not an integer: '
                            : ' not a primitive number: ') +
                          String(e)
                      );
                  }
                  function w(e) {
                    var t = e.c.length - 1;
                    return p(e.e / u) == t && e.c[t] % 2 != 0;
                  }
                  function k(e, t) {
                    return (
                      (e.length > 1 ? e.charAt(0) + '.' + e.slice(1) : e) + (t < 0 ? 'e' : 'e+') + t
                    );
                  }
                  function b(e, t, r) {
                    var n, s;
                    if (t < 0) {
                      for (s = r + '.'; ++t; s += r);
                      e = s + e;
                    } else if (++t > (n = e.length)) {
                      for (s = r, t -= n; --t; s += r);
                      e += s;
                    } else t < n && (e = e.slice(0, t) + '.' + e.slice(t));
                    return e;
                  }
                  (r = (function e(t) {
                    var r,
                      _,
                      S,
                      E,
                      T,
                      v,
                      A,
                      I,
                      C,
                      j,
                      N = (G.prototype = { constructor: G, toString: null, valueOf: null }),
                      P = new G(1),
                      R = 20,
                      O = 4,
                      M = -7,
                      x = 21,
                      B = -1e7,
                      D = 1e7,
                      U = !1,
                      L = 1,
                      H = 0,
                      $ = {
                        prefix: '',
                        groupSize: 3,
                        secondaryGroupSize: 0,
                        groupSeparator: ',',
                        decimalSeparator: '.',
                        fractionGroupSize: 0,
                        fractionGroupSeparator: ' ',
                        suffix: '',
                      },
                      F = '0123456789abcdefghijklmnopqrstuvwxyz',
                      V = !0;
                    function G(e, t) {
                      var r,
                        s,
                        o,
                        c,
                        d,
                        m,
                        f,
                        p,
                        h = this;
                      if (!(h instanceof G)) return new G(e, t);
                      if (null == t) {
                        if (e && !0 === e._isBigNumber)
                          return (
                            (h.s = e.s),
                            void (!e.c || e.e > D
                              ? (h.c = h.e = null)
                              : e.e < B
                                ? (h.c = [(h.e = 0)])
                                : ((h.e = e.e), (h.c = e.c.slice())))
                          );
                        if ((m = 'number' == typeof e) && 0 * e == 0) {
                          if (((h.s = 1 / e < 0 ? ((e = -e), -1) : 1), e === ~~e)) {
                            for (c = 0, d = e; d >= 10; d /= 10, c++);
                            return void (c > D ? (h.c = h.e = null) : ((h.e = c), (h.c = [e])));
                          }
                          p = String(e);
                        } else {
                          if (!n.test((p = String(e)))) return S(h, p, m);
                          h.s = 45 == p.charCodeAt(0) ? ((p = p.slice(1)), -1) : 1;
                        }
                        (c = p.indexOf('.')) > -1 && (p = p.replace('.', '')),
                          (d = p.search(/e/i)) > 0
                            ? (c < 0 && (c = d), (c += +p.slice(d + 1)), (p = p.substring(0, d)))
                            : c < 0 && (c = p.length);
                      } else {
                        if ((y(t, 2, F.length, 'Base'), 10 == t && V))
                          return z((h = new G(e)), R + h.e + 1, O);
                        if (((p = String(e)), (m = 'number' == typeof e))) {
                          if (0 * e != 0) return S(h, p, m, t);
                          if (
                            ((h.s = 1 / e < 0 ? ((p = p.slice(1)), -1) : 1),
                            G.DEBUG && p.replace(/^0\.0*|\./, '').length > 15)
                          )
                            throw Error(a + e);
                        } else h.s = 45 === p.charCodeAt(0) ? ((p = p.slice(1)), -1) : 1;
                        for (r = F.slice(0, t), c = d = 0, f = p.length; d < f; d++)
                          if (r.indexOf((s = p.charAt(d))) < 0) {
                            if ('.' == s) {
                              if (d > c) {
                                c = f;
                                continue;
                              }
                            } else if (
                              !o &&
                              ((p == p.toUpperCase() && (p = p.toLowerCase())) ||
                                (p == p.toLowerCase() && (p = p.toUpperCase())))
                            ) {
                              (o = !0), (d = -1), (c = 0);
                              continue;
                            }
                            return S(h, String(e), m, t);
                          }
                        (m = !1),
                          (c = (p = _(p, t, 10, h.s)).indexOf('.')) > -1
                            ? (p = p.replace('.', ''))
                            : (c = p.length);
                      }
                      for (d = 0; 48 === p.charCodeAt(d); d++);
                      for (f = p.length; 48 === p.charCodeAt(--f); );
                      if ((p = p.slice(d, ++f))) {
                        if (((f -= d), m && G.DEBUG && f > 15 && (e > l || e !== i(e))))
                          throw Error(a + h.s * e);
                        if ((c = c - d - 1) > D) h.c = h.e = null;
                        else if (c < B) h.c = [(h.e = 0)];
                        else {
                          if (
                            ((h.e = c), (h.c = []), (d = (c + 1) % u), c < 0 && (d += u), d < f)
                          ) {
                            for (d && h.c.push(+p.slice(0, d)), f -= u; d < f; )
                              h.c.push(+p.slice(d, (d += u)));
                            d = u - (p = p.slice(d)).length;
                          } else d -= f;
                          for (; d--; p += '0');
                          h.c.push(+p);
                        }
                      } else h.c = [(h.e = 0)];
                    }
                    function J(e, t, r, n) {
                      var s, i, o, a, c;
                      if ((null == r ? (r = O) : y(r, 0, 8), !e.c)) return e.toString();
                      if (((s = e.c[0]), (o = e.e), null == t))
                        (c = h(e.c)),
                          (c = 1 == n || (2 == n && (o <= M || o >= x)) ? k(c, o) : b(c, o, '0'));
                      else if (
                        ((i = (e = z(new G(e), t, r)).e),
                        (a = (c = h(e.c)).length),
                        1 == n || (2 == n && (t <= i || i <= M)))
                      ) {
                        for (; a < t; c += '0', a++);
                        c = k(c, i);
                      } else if (((t -= o), (c = b(c, i, '0')), i + 1 > a)) {
                        if (--t > 0) for (c += '.'; t--; c += '0');
                      } else if ((t += i - a) > 0) for (i + 1 == a && (c += '.'); t--; c += '0');
                      return e.s < 0 && s ? '-' + c : c;
                    }
                    function K(e, t) {
                      for (var r, n, s = 1, i = new G(e[0]); s < e.length; s++)
                        (!(n = new G(e[s])).s || (r = g(i, n)) === t || (0 === r && i.s === t)) &&
                          (i = n);
                      return i;
                    }
                    function W(e, t, r) {
                      for (var n = 1, s = t.length; !t[--s]; t.pop());
                      for (s = t[0]; s >= 10; s /= 10, n++);
                      return (
                        (r = n + r * u - 1) > D
                          ? (e.c = e.e = null)
                          : r < B
                            ? (e.c = [(e.e = 0)])
                            : ((e.e = r), (e.c = t)),
                        e
                      );
                    }
                    function z(e, t, r, n) {
                      var o,
                        a,
                        l,
                        m,
                        f,
                        p,
                        h,
                        g = e.c,
                        y = d;
                      if (g) {
                        e: {
                          for (o = 1, m = g[0]; m >= 10; m /= 10, o++);
                          if ((a = t - o) < 0)
                            (a += u), (l = t), (f = g[(p = 0)]), (h = i((f / y[o - l - 1]) % 10));
                          else if ((p = s((a + 1) / u)) >= g.length) {
                            if (!n) break e;
                            for (; g.length <= p; g.push(0));
                            (f = h = 0), (o = 1), (l = (a %= u) - u + 1);
                          } else {
                            for (f = m = g[p], o = 1; m >= 10; m /= 10, o++);
                            h = (l = (a %= u) - u + o) < 0 ? 0 : i((f / y[o - l - 1]) % 10);
                          }
                          if (
                            ((n = n || t < 0 || null != g[p + 1] || (l < 0 ? f : f % y[o - l - 1])),
                            (n =
                              r < 4
                                ? (h || n) && (0 == r || r == (e.s < 0 ? 3 : 2))
                                : h > 5 ||
                                  (5 == h &&
                                    (4 == r ||
                                      n ||
                                      (6 == r &&
                                        (a > 0 ? (l > 0 ? f / y[o - l] : 0) : g[p - 1]) % 10 & 1) ||
                                      r == (e.s < 0 ? 8 : 7)))),
                            t < 1 || !g[0])
                          )
                            return (
                              (g.length = 0),
                              n
                                ? ((t -= e.e + 1), (g[0] = y[(u - (t % u)) % u]), (e.e = -t || 0))
                                : (g[0] = e.e = 0),
                              e
                            );
                          if (
                            (0 == a
                              ? ((g.length = p), (m = 1), p--)
                              : ((g.length = p + 1),
                                (m = y[u - a]),
                                (g[p] = l > 0 ? i((f / y[o - l]) % y[l]) * m : 0)),
                            n)
                          )
                            for (;;) {
                              if (0 == p) {
                                for (a = 1, l = g[0]; l >= 10; l /= 10, a++);
                                for (l = g[0] += m, m = 1; l >= 10; l /= 10, m++);
                                a != m && (e.e++, g[0] == c && (g[0] = 1));
                                break;
                              }
                              if (((g[p] += m), g[p] != c)) break;
                              (g[p--] = 0), (m = 1);
                            }
                          for (a = g.length; 0 === g[--a]; g.pop());
                        }
                        e.e > D ? (e.c = e.e = null) : e.e < B && (e.c = [(e.e = 0)]);
                      }
                      return e;
                    }
                    function q(e) {
                      var t,
                        r = e.e;
                      return null === r
                        ? e.toString()
                        : ((t = h(e.c)),
                          (t = r <= M || r >= x ? k(t, r) : b(t, r, '0')),
                          e.s < 0 ? '-' + t : t);
                    }
                    return (
                      (G.clone = e),
                      (G.ROUND_UP = 0),
                      (G.ROUND_DOWN = 1),
                      (G.ROUND_CEIL = 2),
                      (G.ROUND_FLOOR = 3),
                      (G.ROUND_HALF_UP = 4),
                      (G.ROUND_HALF_DOWN = 5),
                      (G.ROUND_HALF_EVEN = 6),
                      (G.ROUND_HALF_CEIL = 7),
                      (G.ROUND_HALF_FLOOR = 8),
                      (G.EUCLID = 9),
                      (G.config = G.set =
                        function (e) {
                          var t, r;
                          if (null != e) {
                            if ('object' != typeof e) throw Error(o + 'Object expected: ' + e);
                            if (
                              (e.hasOwnProperty((t = 'DECIMAL_PLACES')) &&
                                (y((r = e[t]), 0, f, t), (R = r)),
                              e.hasOwnProperty((t = 'ROUNDING_MODE')) &&
                                (y((r = e[t]), 0, 8, t), (O = r)),
                              e.hasOwnProperty((t = 'EXPONENTIAL_AT')) &&
                                ((r = e[t]) && r.pop
                                  ? (y(r[0], -f, 0, t), y(r[1], 0, f, t), (M = r[0]), (x = r[1]))
                                  : (y(r, -f, f, t), (M = -(x = r < 0 ? -r : r)))),
                              e.hasOwnProperty((t = 'RANGE')))
                            )
                              if ((r = e[t]) && r.pop)
                                y(r[0], -f, -1, t), y(r[1], 1, f, t), (B = r[0]), (D = r[1]);
                              else {
                                if ((y(r, -f, f, t), !r))
                                  throw Error(o + t + ' cannot be zero: ' + r);
                                B = -(D = r < 0 ? -r : r);
                              }
                            if (e.hasOwnProperty((t = 'CRYPTO'))) {
                              if ((r = e[t]) !== !!r)
                                throw Error(o + t + ' not true or false: ' + r);
                              if (r) {
                                if (
                                  'undefined' == typeof crypto ||
                                  !crypto ||
                                  (!crypto.getRandomValues && !crypto.randomBytes)
                                )
                                  throw ((U = !r), Error(o + 'crypto unavailable'));
                                U = r;
                              } else U = r;
                            }
                            if (
                              (e.hasOwnProperty((t = 'MODULO_MODE')) &&
                                (y((r = e[t]), 0, 9, t), (L = r)),
                              e.hasOwnProperty((t = 'POW_PRECISION')) &&
                                (y((r = e[t]), 0, f, t), (H = r)),
                              e.hasOwnProperty((t = 'FORMAT')))
                            ) {
                              if ('object' != typeof (r = e[t]))
                                throw Error(o + t + ' not an object: ' + r);
                              $ = r;
                            }
                            if (e.hasOwnProperty((t = 'ALPHABET'))) {
                              if ('string' != typeof (r = e[t]) || /^.?$|[+\-.\s]|(.).*\1/.test(r))
                                throw Error(o + t + ' invalid: ' + r);
                              (V = '0123456789' == r.slice(0, 10)), (F = r);
                            }
                          }
                          return {
                            DECIMAL_PLACES: R,
                            ROUNDING_MODE: O,
                            EXPONENTIAL_AT: [M, x],
                            RANGE: [B, D],
                            CRYPTO: U,
                            MODULO_MODE: L,
                            POW_PRECISION: H,
                            FORMAT: $,
                            ALPHABET: F,
                          };
                        }),
                      (G.isBigNumber = function (e) {
                        if (!e || !0 !== e._isBigNumber) return !1;
                        if (!G.DEBUG) return !0;
                        var t,
                          r,
                          n = e.c,
                          s = e.e,
                          a = e.s;
                        e: if ('[object Array]' == {}.toString.call(n)) {
                          if ((1 === a || -1 === a) && s >= -f && s <= f && s === i(s)) {
                            if (0 === n[0]) {
                              if (0 === s && 1 === n.length) return !0;
                              break e;
                            }
                            if (((t = (s + 1) % u) < 1 && (t += u), String(n[0]).length == t)) {
                              for (t = 0; t < n.length; t++)
                                if ((r = n[t]) < 0 || r >= c || r !== i(r)) break e;
                              if (0 !== r) return !0;
                            }
                          }
                        } else if (null === n && null === s && (null === a || 1 === a || -1 === a))
                          return !0;
                        throw Error(o + 'Invalid BigNumber: ' + e);
                      }),
                      (G.maximum = G.max =
                        function () {
                          return K(arguments, -1);
                        }),
                      (G.minimum = G.min =
                        function () {
                          return K(arguments, 1);
                        }),
                      (G.random =
                        ((E = 9007199254740992),
                        (T =
                          (Math.random() * E) & 2097151
                            ? function () {
                                return i(Math.random() * E);
                              }
                            : function () {
                                return (
                                  8388608 * ((1073741824 * Math.random()) | 0) +
                                  ((8388608 * Math.random()) | 0)
                                );
                              }),
                        function (e) {
                          var t,
                            r,
                            n,
                            a,
                            c,
                            l = 0,
                            m = [],
                            p = new G(P);
                          if ((null == e ? (e = R) : y(e, 0, f), (a = s(e / u)), U))
                            if (crypto.getRandomValues) {
                              for (t = crypto.getRandomValues(new Uint32Array((a *= 2))); l < a; )
                                (c = 131072 * t[l] + (t[l + 1] >>> 11)) >= 9e15
                                  ? ((r = crypto.getRandomValues(new Uint32Array(2))),
                                    (t[l] = r[0]),
                                    (t[l + 1] = r[1]))
                                  : (m.push(c % 1e14), (l += 2));
                              l = a / 2;
                            } else {
                              if (!crypto.randomBytes)
                                throw ((U = !1), Error(o + 'crypto unavailable'));
                              for (t = crypto.randomBytes((a *= 7)); l < a; )
                                (c =
                                  281474976710656 * (31 & t[l]) +
                                  1099511627776 * t[l + 1] +
                                  4294967296 * t[l + 2] +
                                  16777216 * t[l + 3] +
                                  (t[l + 4] << 16) +
                                  (t[l + 5] << 8) +
                                  t[l + 6]) >= 9e15
                                  ? crypto.randomBytes(7).copy(t, l)
                                  : (m.push(c % 1e14), (l += 7));
                              l = a / 7;
                            }
                          if (!U) for (; l < a; ) (c = T()) < 9e15 && (m[l++] = c % 1e14);
                          for (
                            a = m[--l], e %= u, a && e && ((c = d[u - e]), (m[l] = i(a / c) * c));
                            0 === m[l];
                            m.pop(), l--
                          );
                          if (l < 0) m = [(n = 0)];
                          else {
                            for (n = -1; 0 === m[0]; m.splice(0, 1), n -= u);
                            for (l = 1, c = m[0]; c >= 10; c /= 10, l++);
                            l < u && (n -= u - l);
                          }
                          return (p.e = n), (p.c = m), p;
                        })),
                      (G.sum = function () {
                        for (var e = 1, t = arguments, r = new G(t[0]); e < t.length; )
                          r = r.plus(t[e++]);
                        return r;
                      }),
                      (_ = (function () {
                        var e = '0123456789';
                        function t(e, t, r, n) {
                          for (var s, i, o = [0], a = 0, c = e.length; a < c; ) {
                            for (i = o.length; i--; o[i] *= t);
                            for (o[0] += n.indexOf(e.charAt(a++)), s = 0; s < o.length; s++)
                              o[s] > r - 1 &&
                                (null == o[s + 1] && (o[s + 1] = 0),
                                (o[s + 1] += (o[s] / r) | 0),
                                (o[s] %= r));
                          }
                          return o.reverse();
                        }
                        return function (n, s, i, o, a) {
                          var c,
                            u,
                            l,
                            d,
                            m,
                            f,
                            p,
                            g,
                            y = n.indexOf('.'),
                            w = R,
                            k = O;
                          for (
                            y >= 0 &&
                              ((d = H),
                              (H = 0),
                              (n = n.replace('.', '')),
                              (f = (g = new G(s)).pow(n.length - y)),
                              (H = d),
                              (g.c = t(b(h(f.c), f.e, '0'), 10, i, e)),
                              (g.e = g.c.length)),
                              l = d = (p = t(n, s, i, a ? ((c = F), e) : ((c = e), F))).length;
                            0 == p[--d];
                            p.pop()
                          );
                          if (!p[0]) return c.charAt(0);
                          if (
                            (y < 0
                              ? --l
                              : ((f.c = p),
                                (f.e = l),
                                (f.s = o),
                                (p = (f = r(f, g, w, k, i)).c),
                                (m = f.r),
                                (l = f.e)),
                            (y = p[(u = l + w + 1)]),
                            (d = i / 2),
                            (m = m || u < 0 || null != p[u + 1]),
                            (m =
                              k < 4
                                ? (null != y || m) && (0 == k || k == (f.s < 0 ? 3 : 2))
                                : y > d ||
                                  (y == d &&
                                    (4 == k ||
                                      m ||
                                      (6 == k && 1 & p[u - 1]) ||
                                      k == (f.s < 0 ? 8 : 7)))),
                            u < 1 || !p[0])
                          )
                            n = m ? b(c.charAt(1), -w, c.charAt(0)) : c.charAt(0);
                          else {
                            if (((p.length = u), m))
                              for (--i; ++p[--u] > i; ) (p[u] = 0), u || (++l, (p = [1].concat(p)));
                            for (d = p.length; !p[--d]; );
                            for (y = 0, n = ''; y <= d; n += c.charAt(p[y++]));
                            n = b(n, l, c.charAt(0));
                          }
                          return n;
                        };
                      })()),
                      (r = (function () {
                        function e(e, t, r) {
                          var n,
                            s,
                            i,
                            o,
                            a = 0,
                            c = e.length,
                            u = t % m,
                            l = (t / m) | 0;
                          for (e = e.slice(); c--; )
                            (a =
                              (((s =
                                u * (i = e[c] % m) +
                                ((n = l * i + (o = (e[c] / m) | 0) * u) % m) * m +
                                a) /
                                r) |
                                0) +
                              ((n / m) | 0) +
                              l * o),
                              (e[c] = s % r);
                          return a && (e = [a].concat(e)), e;
                        }
                        function t(e, t, r, n) {
                          var s, i;
                          if (r != n) i = r > n ? 1 : -1;
                          else
                            for (s = i = 0; s < r; s++)
                              if (e[s] != t[s]) {
                                i = e[s] > t[s] ? 1 : -1;
                                break;
                              }
                          return i;
                        }
                        function r(e, t, r, n) {
                          for (var s = 0; r--; )
                            (e[r] -= s), (s = e[r] < t[r] ? 1 : 0), (e[r] = s * n + e[r] - t[r]);
                          for (; !e[0] && e.length > 1; e.splice(0, 1));
                        }
                        return function (n, s, o, a, l) {
                          var d,
                            m,
                            f,
                            h,
                            g,
                            y,
                            w,
                            k,
                            b,
                            _,
                            S,
                            E,
                            T,
                            v,
                            A,
                            I,
                            C,
                            j = n.s == s.s ? 1 : -1,
                            N = n.c,
                            P = s.c;
                          if (!(N && N[0] && P && P[0]))
                            return new G(
                              n.s && s.s && (N ? !P || N[0] != P[0] : P)
                                ? (N && 0 == N[0]) || !P
                                  ? 0 * j
                                  : j / 0
                                : NaN
                            );
                          for (
                            b = (k = new G(j)).c = [],
                              j = o + (m = n.e - s.e) + 1,
                              l || ((l = c), (m = p(n.e / u) - p(s.e / u)), (j = (j / u) | 0)),
                              f = 0;
                            P[f] == (N[f] || 0);
                            f++
                          );
                          if ((P[f] > (N[f] || 0) && m--, j < 0)) b.push(1), (h = !0);
                          else {
                            for (
                              v = N.length,
                                I = P.length,
                                f = 0,
                                j += 2,
                                (g = i(l / (P[0] + 1))) > 1 &&
                                  ((P = e(P, g, l)),
                                  (N = e(N, g, l)),
                                  (I = P.length),
                                  (v = N.length)),
                                T = I,
                                S = (_ = N.slice(0, I)).length;
                              S < I;
                              _[S++] = 0
                            );
                            (C = P.slice()), (C = [0].concat(C)), (A = P[0]), P[1] >= l / 2 && A++;
                            do {
                              if (((g = 0), (d = t(P, _, I, S)) < 0)) {
                                if (
                                  ((E = _[0]),
                                  I != S && (E = E * l + (_[1] || 0)),
                                  (g = i(E / A)) > 1)
                                )
                                  for (
                                    g >= l && (g = l - 1),
                                      w = (y = e(P, g, l)).length,
                                      S = _.length;
                                    1 == t(y, _, w, S);

                                  )
                                    g--, r(y, I < w ? C : P, w, l), (w = y.length), (d = 1);
                                else 0 == g && (d = g = 1), (w = (y = P.slice()).length);
                                if (
                                  (w < S && (y = [0].concat(y)),
                                  r(_, y, S, l),
                                  (S = _.length),
                                  -1 == d)
                                )
                                  for (; t(P, _, I, S) < 1; )
                                    g++, r(_, I < S ? C : P, S, l), (S = _.length);
                              } else 0 === d && (g++, (_ = [0]));
                              (b[f++] = g), _[0] ? (_[S++] = N[T] || 0) : ((_ = [N[T]]), (S = 1));
                            } while ((T++ < v || null != _[0]) && j--);
                            (h = null != _[0]), b[0] || b.splice(0, 1);
                          }
                          if (l == c) {
                            for (f = 1, j = b[0]; j >= 10; j /= 10, f++);
                            z(k, o + (k.e = f + m * u - 1) + 1, a, h);
                          } else (k.e = m), (k.r = +h);
                          return k;
                        };
                      })()),
                      (v = /^(-?)0([xbo])(?=\w[\w.]*$)/i),
                      (A = /^([^.]+)\.$/),
                      (I = /^\.([^.]+)$/),
                      (C = /^-?(Infinity|NaN)$/),
                      (j = /^\s*\+(?=[\w.])|^\s+|\s+$/g),
                      (S = function (e, t, r, n) {
                        var s,
                          i = r ? t : t.replace(j, '');
                        if (C.test(i)) e.s = isNaN(i) ? null : i < 0 ? -1 : 1;
                        else {
                          if (
                            !r &&
                            ((i = i.replace(v, function (e, t, r) {
                              return (
                                (s = 'x' == (r = r.toLowerCase()) ? 16 : 'b' == r ? 2 : 8),
                                n && n != s ? e : t
                              );
                            })),
                            n && ((s = n), (i = i.replace(A, '$1').replace(I, '0.$1'))),
                            t != i)
                          )
                            return new G(i, s);
                          if (G.DEBUG)
                            throw Error(o + 'Not a' + (n ? ' base ' + n : '') + ' number: ' + t);
                          e.s = null;
                        }
                        e.c = e.e = null;
                      }),
                      (N.absoluteValue = N.abs =
                        function () {
                          var e = new G(this);
                          return e.s < 0 && (e.s = 1), e;
                        }),
                      (N.comparedTo = function (e, t) {
                        return g(this, new G(e, t));
                      }),
                      (N.decimalPlaces = N.dp =
                        function (e, t) {
                          var r,
                            n,
                            s,
                            i = this;
                          if (null != e)
                            return (
                              y(e, 0, f),
                              null == t ? (t = O) : y(t, 0, 8),
                              z(new G(i), e + i.e + 1, t)
                            );
                          if (!(r = i.c)) return null;
                          if (((n = ((s = r.length - 1) - p(this.e / u)) * u), (s = r[s])))
                            for (; s % 10 == 0; s /= 10, n--);
                          return n < 0 && (n = 0), n;
                        }),
                      (N.dividedBy = N.div =
                        function (e, t) {
                          return r(this, new G(e, t), R, O);
                        }),
                      (N.dividedToIntegerBy = N.idiv =
                        function (e, t) {
                          return r(this, new G(e, t), 0, 1);
                        }),
                      (N.exponentiatedBy = N.pow =
                        function (e, t) {
                          var r,
                            n,
                            a,
                            c,
                            l,
                            d,
                            m,
                            f,
                            p = this;
                          if ((e = new G(e)).c && !e.isInteger())
                            throw Error(o + 'Exponent not an integer: ' + q(e));
                          if (
                            (null != t && (t = new G(t)),
                            (l = e.e > 14),
                            !p.c ||
                              !p.c[0] ||
                              (1 == p.c[0] && !p.e && 1 == p.c.length) ||
                              !e.c ||
                              !e.c[0])
                          )
                            return (
                              (f = new G(Math.pow(+q(p), l ? e.s * (2 - w(e)) : +q(e)))),
                              t ? f.mod(t) : f
                            );
                          if (((d = e.s < 0), t)) {
                            if (t.c ? !t.c[0] : !t.s) return new G(NaN);
                            (n = !d && p.isInteger() && t.isInteger()) && (p = p.mod(t));
                          } else {
                            if (
                              e.e > 9 &&
                              (p.e > 0 ||
                                p.e < -1 ||
                                (0 == p.e
                                  ? p.c[0] > 1 || (l && p.c[1] >= 24e7)
                                  : p.c[0] < 8e13 || (l && p.c[0] <= 9999975e7)))
                            )
                              return (
                                (c = p.s < 0 && w(e) ? -0 : 0),
                                p.e > -1 && (c = 1 / c),
                                new G(d ? 1 / c : c)
                              );
                            H && (c = s(H / u + 2));
                          }
                          for (
                            l
                              ? ((r = new G(0.5)), d && (e.s = 1), (m = w(e)))
                              : (m = (a = Math.abs(+q(e))) % 2),
                              f = new G(P);
                            ;

                          ) {
                            if (m) {
                              if (!(f = f.times(p)).c) break;
                              c ? f.c.length > c && (f.c.length = c) : n && (f = f.mod(t));
                            }
                            if (a) {
                              if (0 === (a = i(a / 2))) break;
                              m = a % 2;
                            } else if ((z((e = e.times(r)), e.e + 1, 1), e.e > 14)) m = w(e);
                            else {
                              if (0 === (a = +q(e))) break;
                              m = a % 2;
                            }
                            (p = p.times(p)),
                              c ? p.c && p.c.length > c && (p.c.length = c) : n && (p = p.mod(t));
                          }
                          return n
                            ? f
                            : (d && (f = P.div(f)), t ? f.mod(t) : c ? z(f, H, O, undefined) : f);
                        }),
                      (N.integerValue = function (e) {
                        var t = new G(this);
                        return null == e ? (e = O) : y(e, 0, 8), z(t, t.e + 1, e);
                      }),
                      (N.isEqualTo = N.eq =
                        function (e, t) {
                          return 0 === g(this, new G(e, t));
                        }),
                      (N.isFinite = function () {
                        return !!this.c;
                      }),
                      (N.isGreaterThan = N.gt =
                        function (e, t) {
                          return g(this, new G(e, t)) > 0;
                        }),
                      (N.isGreaterThanOrEqualTo = N.gte =
                        function (e, t) {
                          return 1 === (t = g(this, new G(e, t))) || 0 === t;
                        }),
                      (N.isInteger = function () {
                        return !!this.c && p(this.e / u) > this.c.length - 2;
                      }),
                      (N.isLessThan = N.lt =
                        function (e, t) {
                          return g(this, new G(e, t)) < 0;
                        }),
                      (N.isLessThanOrEqualTo = N.lte =
                        function (e, t) {
                          return -1 === (t = g(this, new G(e, t))) || 0 === t;
                        }),
                      (N.isNaN = function () {
                        return !this.s;
                      }),
                      (N.isNegative = function () {
                        return this.s < 0;
                      }),
                      (N.isPositive = function () {
                        return this.s > 0;
                      }),
                      (N.isZero = function () {
                        return !!this.c && 0 == this.c[0];
                      }),
                      (N.minus = function (e, t) {
                        var r,
                          n,
                          s,
                          i,
                          o = this,
                          a = o.s;
                        if (((t = (e = new G(e, t)).s), !a || !t)) return new G(NaN);
                        if (a != t) return (e.s = -t), o.plus(e);
                        var l = o.e / u,
                          d = e.e / u,
                          m = o.c,
                          f = e.c;
                        if (!l || !d) {
                          if (!m || !f) return m ? ((e.s = -t), e) : new G(f ? o : NaN);
                          if (!m[0] || !f[0])
                            return f[0] ? ((e.s = -t), e) : new G(m[0] ? o : 3 == O ? -0 : 0);
                        }
                        if (((l = p(l)), (d = p(d)), (m = m.slice()), (a = l - d))) {
                          for (
                            (i = a < 0) ? ((a = -a), (s = m)) : ((d = l), (s = f)),
                              s.reverse(),
                              t = a;
                            t--;
                            s.push(0)
                          );
                          s.reverse();
                        } else
                          for (
                            n = (i = (a = m.length) < (t = f.length)) ? a : t, a = t = 0;
                            t < n;
                            t++
                          )
                            if (m[t] != f[t]) {
                              i = m[t] < f[t];
                              break;
                            }
                        if (
                          (i && ((s = m), (m = f), (f = s), (e.s = -e.s)),
                          (t = (n = f.length) - (r = m.length)) > 0)
                        )
                          for (; t--; m[r++] = 0);
                        for (t = c - 1; n > a; ) {
                          if (m[--n] < f[n]) {
                            for (r = n; r && !m[--r]; m[r] = t);
                            --m[r], (m[n] += c);
                          }
                          m[n] -= f[n];
                        }
                        for (; 0 == m[0]; m.splice(0, 1), --d);
                        return m[0]
                          ? W(e, m, d)
                          : ((e.s = 3 == O ? -1 : 1), (e.c = [(e.e = 0)]), e);
                      }),
                      (N.modulo = N.mod =
                        function (e, t) {
                          var n,
                            s,
                            i = this;
                          return (
                            (e = new G(e, t)),
                            !i.c || !e.s || (e.c && !e.c[0])
                              ? new G(NaN)
                              : !e.c || (i.c && !i.c[0])
                                ? new G(i)
                                : (9 == L
                                    ? ((s = e.s),
                                      (e.s = 1),
                                      (n = r(i, e, 0, 3)),
                                      (e.s = s),
                                      (n.s *= s))
                                    : (n = r(i, e, 0, L)),
                                  (e = i.minus(n.times(e))).c[0] || 1 != L || (e.s = i.s),
                                  e)
                          );
                        }),
                      (N.multipliedBy = N.times =
                        function (e, t) {
                          var r,
                            n,
                            s,
                            i,
                            o,
                            a,
                            l,
                            d,
                            f,
                            h,
                            g,
                            y,
                            w,
                            k,
                            b,
                            _ = this,
                            S = _.c,
                            E = (e = new G(e, t)).c;
                          if (!(S && E && S[0] && E[0]))
                            return (
                              !_.s || !e.s || (S && !S[0] && !E) || (E && !E[0] && !S)
                                ? (e.c = e.e = e.s = null)
                                : ((e.s *= _.s),
                                  S && E ? ((e.c = [0]), (e.e = 0)) : (e.c = e.e = null)),
                              e
                            );
                          for (
                            n = p(_.e / u) + p(e.e / u),
                              e.s *= _.s,
                              (l = S.length) < (h = E.length) &&
                                ((w = S), (S = E), (E = w), (s = l), (l = h), (h = s)),
                              s = l + h,
                              w = [];
                            s--;
                            w.push(0)
                          );
                          for (k = c, b = m, s = h; --s >= 0; ) {
                            for (r = 0, g = E[s] % b, y = (E[s] / b) | 0, i = s + (o = l); i > s; )
                              (r =
                                (((d =
                                  g * (d = S[--o] % b) +
                                  ((a = y * d + (f = (S[o] / b) | 0) * g) % b) * b +
                                  w[i] +
                                  r) /
                                  k) |
                                  0) +
                                ((a / b) | 0) +
                                y * f),
                                (w[i--] = d % k);
                            w[i] = r;
                          }
                          return r ? ++n : w.splice(0, 1), W(e, w, n);
                        }),
                      (N.negated = function () {
                        var e = new G(this);
                        return (e.s = -e.s || null), e;
                      }),
                      (N.plus = function (e, t) {
                        var r,
                          n = this,
                          s = n.s;
                        if (((t = (e = new G(e, t)).s), !s || !t)) return new G(NaN);
                        if (s != t) return (e.s = -t), n.minus(e);
                        var i = n.e / u,
                          o = e.e / u,
                          a = n.c,
                          l = e.c;
                        if (!i || !o) {
                          if (!a || !l) return new G(s / 0);
                          if (!a[0] || !l[0]) return l[0] ? e : new G(a[0] ? n : 0 * s);
                        }
                        if (((i = p(i)), (o = p(o)), (a = a.slice()), (s = i - o))) {
                          for (
                            s > 0 ? ((o = i), (r = l)) : ((s = -s), (r = a)), r.reverse();
                            s--;
                            r.push(0)
                          );
                          r.reverse();
                        }
                        for (
                          (s = a.length) - (t = l.length) < 0 &&
                            ((r = l), (l = a), (a = r), (t = s)),
                            s = 0;
                          t;

                        )
                          (s = ((a[--t] = a[t] + l[t] + s) / c) | 0),
                            (a[t] = c === a[t] ? 0 : a[t] % c);
                        return s && ((a = [s].concat(a)), ++o), W(e, a, o);
                      }),
                      (N.precision = N.sd =
                        function (e, t) {
                          var r,
                            n,
                            s,
                            i = this;
                          if (null != e && e !== !!e)
                            return y(e, 1, f), null == t ? (t = O) : y(t, 0, 8), z(new G(i), e, t);
                          if (!(r = i.c)) return null;
                          if (((n = (s = r.length - 1) * u + 1), (s = r[s]))) {
                            for (; s % 10 == 0; s /= 10, n--);
                            for (s = r[0]; s >= 10; s /= 10, n++);
                          }
                          return e && i.e + 1 > n && (n = i.e + 1), n;
                        }),
                      (N.shiftedBy = function (e) {
                        return y(e, -9007199254740991, l), this.times('1e' + e);
                      }),
                      (N.squareRoot = N.sqrt =
                        function () {
                          var e,
                            t,
                            n,
                            s,
                            i,
                            o = this,
                            a = o.c,
                            c = o.s,
                            u = o.e,
                            l = R + 4,
                            d = new G('0.5');
                          if (1 !== c || !a || !a[0])
                            return new G(!c || (c < 0 && (!a || a[0])) ? NaN : a ? o : 1 / 0);
                          if (
                            (0 == (c = Math.sqrt(+q(o))) || c == 1 / 0
                              ? (((t = h(a)).length + u) % 2 == 0 && (t += '0'),
                                (c = Math.sqrt(+t)),
                                (u = p((u + 1) / 2) - (u < 0 || u % 2)),
                                (n = new G(
                                  (t =
                                    c == 1 / 0
                                      ? '5e' + u
                                      : (t = c.toExponential()).slice(0, t.indexOf('e') + 1) + u)
                                )))
                              : (n = new G(c + '')),
                            n.c[0])
                          )
                            for ((c = (u = n.e) + l) < 3 && (c = 0); ; )
                              if (
                                ((i = n),
                                (n = d.times(i.plus(r(o, i, l, 1)))),
                                h(i.c).slice(0, c) === (t = h(n.c)).slice(0, c))
                              ) {
                                if (
                                  (n.e < u && --c,
                                  '9999' != (t = t.slice(c - 3, c + 1)) && (s || '4999' != t))
                                ) {
                                  (+t && (+t.slice(1) || '5' != t.charAt(0))) ||
                                    (z(n, n.e + R + 2, 1), (e = !n.times(n).eq(o)));
                                  break;
                                }
                                if (!s && (z(i, i.e + R + 2, 0), i.times(i).eq(o))) {
                                  n = i;
                                  break;
                                }
                                (l += 4), (c += 4), (s = 1);
                              }
                          return z(n, n.e + R + 1, O, e);
                        }),
                      (N.toExponential = function (e, t) {
                        return null != e && (y(e, 0, f), e++), J(this, e, t, 1);
                      }),
                      (N.toFixed = function (e, t) {
                        return null != e && (y(e, 0, f), (e = e + this.e + 1)), J(this, e, t);
                      }),
                      (N.toFormat = function (e, t, r) {
                        var n,
                          s = this;
                        if (null == r)
                          null != e && t && 'object' == typeof t
                            ? ((r = t), (t = null))
                            : e && 'object' == typeof e
                              ? ((r = e), (e = t = null))
                              : (r = $);
                        else if ('object' != typeof r)
                          throw Error(o + 'Argument not an object: ' + r);
                        if (((n = s.toFixed(e, t)), s.c)) {
                          var i,
                            a = n.split('.'),
                            c = +r.groupSize,
                            u = +r.secondaryGroupSize,
                            l = r.groupSeparator || '',
                            d = a[0],
                            m = a[1],
                            f = s.s < 0,
                            p = f ? d.slice(1) : d,
                            h = p.length;
                          if ((u && ((i = c), (c = u), (u = i), (h -= i)), c > 0 && h > 0)) {
                            for (i = h % c || c, d = p.substr(0, i); i < h; i += c)
                              d += l + p.substr(i, c);
                            u > 0 && (d += l + p.slice(i)), f && (d = '-' + d);
                          }
                          n = m
                            ? d +
                              (r.decimalSeparator || '') +
                              ((u = +r.fractionGroupSize)
                                ? m.replace(
                                    new RegExp('\\d{' + u + '}\\B', 'g'),
                                    '$&' + (r.fractionGroupSeparator || '')
                                  )
                                : m)
                            : d;
                        }
                        return (r.prefix || '') + n + (r.suffix || '');
                      }),
                      (N.toFraction = function (e) {
                        var t,
                          n,
                          s,
                          i,
                          a,
                          c,
                          l,
                          m,
                          f,
                          p,
                          g,
                          y,
                          w = this,
                          k = w.c;
                        if (
                          null != e &&
                          ((!(l = new G(e)).isInteger() && (l.c || 1 !== l.s)) || l.lt(P))
                        )
                          throw Error(
                            o +
                              'Argument ' +
                              (l.isInteger() ? 'out of range: ' : 'not an integer: ') +
                              q(l)
                          );
                        if (!k) return new G(w);
                        for (
                          t = new G(P),
                            f = n = new G(P),
                            s = m = new G(P),
                            y = h(k),
                            a = t.e = y.length - w.e - 1,
                            t.c[0] = d[(c = a % u) < 0 ? u + c : c],
                            e = !e || l.comparedTo(t) > 0 ? (a > 0 ? t : f) : l,
                            c = D,
                            D = 1 / 0,
                            l = new G(y),
                            m.c[0] = 0;
                          (p = r(l, t, 0, 1)), 1 != (i = n.plus(p.times(s))).comparedTo(e);

                        )
                          (n = s),
                            (s = i),
                            (f = m.plus(p.times((i = f)))),
                            (m = i),
                            (t = l.minus(p.times((i = t)))),
                            (l = i);
                        return (
                          (i = r(e.minus(n), s, 0, 1)),
                          (m = m.plus(i.times(f))),
                          (n = n.plus(i.times(s))),
                          (m.s = f.s = w.s),
                          (g =
                            r(f, s, (a *= 2), O)
                              .minus(w)
                              .abs()
                              .comparedTo(r(m, n, a, O).minus(w).abs()) < 1
                              ? [f, s]
                              : [m, n]),
                          (D = c),
                          g
                        );
                      }),
                      (N.toNumber = function () {
                        return +q(this);
                      }),
                      (N.toPrecision = function (e, t) {
                        return null != e && y(e, 1, f), J(this, e, t, 2);
                      }),
                      (N.toString = function (e) {
                        var t,
                          r = this,
                          n = r.s,
                          s = r.e;
                        return (
                          null === s
                            ? n
                              ? ((t = 'Infinity'), n < 0 && (t = '-' + t))
                              : (t = 'NaN')
                            : (null == e
                                ? (t = s <= M || s >= x ? k(h(r.c), s) : b(h(r.c), s, '0'))
                                : 10 === e && V
                                  ? (t = b(h((r = z(new G(r), R + s + 1, O)).c), r.e, '0'))
                                  : (y(e, 2, F.length, 'Base'),
                                    (t = _(b(h(r.c), s, '0'), 10, e, n, !0))),
                              n < 0 && r.c[0] && (t = '-' + t)),
                          t
                        );
                      }),
                      (N.valueOf = N.toJSON =
                        function () {
                          return q(this);
                        }),
                      (N._isBigNumber = !0),
                      null != t && G.set(t),
                      G
                    );
                  })()),
                    (r.default = r.BigNumber = r),
                    'function' == typeof define && define.amd
                      ? define(function () {
                          return r;
                        })
                      : void 0 !== t && t.exports
                        ? (t.exports = r)
                        : (e || (e = 'undefined' != typeof self && self ? self : window),
                          (e.BigNumber = r));
                })(this);
              };
            };
      },
      {
        package: '@metamask/notification-services-controller>bignumber.js',
        file: 'node_modules/@metamask/notification-services-controller/node_modules/bignumber.js/bignumber.js',
      },
    ],
    [
      2406,
      { 'bn.js': 4078, 'strip-hex-prefix': 5668 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n = e('bn.js'),
                  s = e('strip-hex-prefix');
                t.exports = function (e) {
                  if ('string' == typeof e || 'number' == typeof e) {
                    var t = new n(1),
                      r = String(e).toLowerCase().trim(),
                      i = '0x' === r.substr(0, 2) || '-0x' === r.substr(0, 3),
                      o = s(r);
                    if (
                      ('-' === o.substr(0, 1) && ((o = s(o.slice(1))), (t = new n(-1, 10))),
                      (!(o = '' === o ? '0' : o).match(/^-?[0-9]+$/) &&
                        o.match(/^[0-9A-Fa-f]+$/)) ||
                        o.match(/^[a-fA-F]+$/) ||
                        (!0 === i && o.match(/^[0-9A-Fa-f]+$/)))
                    )
                      return new n(o, 16).mul(t);
                    if ((o.match(/^-?[0-9]+$/) || '' === o) && !1 === i) return new n(o, 10).mul(t);
                  } else if (
                    'object' == typeof e &&
                    e.toString &&
                    !e.pop &&
                    !e.push &&
                    e.toString(10).match(/^-?[0-9]+$/) &&
                    (e.mul || e.dividedToIntegerBy)
                  )
                    return new n(e.toString(10), 10);
                  throw new Error(
                    '[number-to-bn] while converting number ' +
                      JSON.stringify(e) +
                      ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.'
                  );
                };
              };
            };
      },
      {
        package: '@metamask/controller-utils>@metamask/ethjs-unit>@metamask/number-to-bn',
        file: 'node_modules/@metamask/number-to-bn/src/index.js',
      },
    ],
    [
      2407,
      { './Substream': 2408, once: 5043, 'readable-stream': 5343 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.ObjectMultiplex = void 0);
                const s = e('readable-stream'),
                  i = n(e('once')),
                  o = e('./Substream'),
                  a = Symbol('IGNORE_SUBSTREAM');
                class c extends s.Duplex {
                  constructor(e = {}) {
                    super(Object.assign({ objectMode: !0 }, e)), (this._substreams = {});
                  }
                  createStream(e, t = {}) {
                    if (this.destroyed)
                      throw new Error(
                        `ObjectMultiplex - parent stream for name "${e}" already destroyed`
                      );
                    if (this._readableState.ended || this._writableState.ended)
                      throw new Error(
                        `ObjectMultiplex - parent stream for name "${e}" already ended`
                      );
                    if (!e) throw new Error('ObjectMultiplex - name must not be empty');
                    if (this._substreams[e])
                      throw new Error(`ObjectMultiplex - Substream for name "${e}" already exists`);
                    const r = new o.Substream(Object.assign({ name: e, parent: this }, t));
                    return (
                      (this._substreams[e] = r),
                      (function (e, t) {
                        const r = (0, i.default)(t);
                        (0, s.finished)(e, { readable: !1 }, r),
                          (0, s.finished)(e, { writable: !1 }, r);
                      })(this, e => r.destroy(e || undefined)),
                      r
                    );
                  }
                  ignoreStream(e) {
                    if (!e) throw new Error('ObjectMultiplex - name must not be empty');
                    if (this._substreams[e])
                      throw new Error(`ObjectMultiplex - Substream for name "${e}" already exists`);
                    this._substreams[e] = a;
                  }
                  _read() {
                    return undefined;
                  }
                  _write(e, t, r) {
                    const { name: n, data: s } = e;
                    if (!n)
                      return (
                        console.warn(`ObjectMultiplex - malformed chunk without name "${e}"`), r()
                      );
                    const i = this._substreams[n];
                    return i
                      ? (i !== a && i.push(s), r())
                      : (console.warn(`ObjectMultiplex - orphaned data for stream "${n}"`), r());
                  }
                }
                r.ObjectMultiplex = c;
              };
            };
      },
      {
        package: '@metamask/object-multiplex',
        file: 'node_modules/@metamask/object-multiplex/dist/ObjectMultiplex.js',
      },
    ],
    [
      2408,
      { 'readable-stream': 5343 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__rest) ||
                  function (e, t) {
                    var r = {};
                    for (var n in e)
                      Object.prototype.hasOwnProperty.call(e, n) &&
                        t.indexOf(n) < 0 &&
                        (r[n] = e[n]);
                    if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
                      var s = 0;
                      for (n = Object.getOwnPropertySymbols(e); s < n.length; s++)
                        t.indexOf(n[s]) < 0 &&
                          Object.prototype.propertyIsEnumerable.call(e, n[s]) &&
                          (r[n[s]] = e[n[s]]);
                    }
                    return r;
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.Substream = void 0);
                const s = e('readable-stream');
                class i extends s.Duplex {
                  constructor(e) {
                    var { parent: t, name: r } = e,
                      s = n(e, ['parent', 'name']);
                    super(Object.assign({ objectMode: !0 }, s)),
                      (this._parent = t),
                      (this._name = r);
                  }
                  _read() {
                    return undefined;
                  }
                  _write(e, t, r) {
                    this._parent.push({ name: this._name, data: e }), r();
                  }
                }
                r.Substream = i;
              };
            };
      },
      {
        package: '@metamask/object-multiplex',
        file: 'node_modules/@metamask/object-multiplex/dist/Substream.js',
      },
    ],
    [
      2409,
      { './ObjectMultiplex': 2407 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                const n = e('./ObjectMultiplex');
                t.exports = n.ObjectMultiplex;
              };
            };
      },
      {
        package: '@metamask/object-multiplex',
        file: 'node_modules/@metamask/object-multiplex/dist/index.js',
      },
    ],
    [
      2416,
      { './Permission.cjs': 2417, './errors.cjs': 2420, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.decorateWithCaveats = r.isRestrictedMethodCaveatSpecification = void 0);
                const n = e('@metamask/utils'),
                  s = e('./errors.cjs'),
                  i = e('./Permission.cjs');
                function o(e) {
                  return (0, n.hasProperty)(e, 'decorator');
                }
                (r.isRestrictedMethodCaveatSpecification = o),
                  (r.decorateWithCaveats = function (e, t, r) {
                    const { caveats: n } = t;
                    if (!n) return e;
                    let a = async t => e(t);
                    for (const e of n) {
                      const t = r[e.type];
                      if (!t) throw new s.UnrecognizedCaveatTypeError(e.type);
                      if (!o(t))
                        throw new s.CaveatSpecificationMismatchError(
                          t,
                          i.PermissionType.RestrictedMethod
                        );
                      a = t.decorator(a, e);
                    }
                    return a;
                  });
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/Caveat.cjs',
      },
    ],
    [
      2417,
      { nanoid: 5027 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.hasSpecificationType =
                    r.PermissionType =
                    r.findCaveat =
                    r.constructPermission =
                      void 0);
                const n = e('nanoid');
                var s;
                (r.constructPermission = function (e) {
                  const { caveats: t = null, invoker: r, target: s } = e;
                  return {
                    id: (0, n.nanoid)(),
                    parentCapability: s,
                    invoker: r,
                    caveats: t,
                    date: new Date().getTime(),
                  };
                }),
                  (r.findCaveat = function (e, t) {
                    return e.caveats?.find(e => e.type === t);
                  }),
                  (function (e) {
                    (e.RestrictedMethod = 'RestrictedMethod'), (e.Endowment = 'Endowment');
                  })(s || (r.PermissionType = s = {})),
                  (r.hasSpecificationType = function (e, t) {
                    return e.permissionType === t;
                  });
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/Permission.cjs',
      },
    ],
    [
      2418,
      {
        './Caveat.cjs': 2416,
        './Permission.cjs': 2417,
        './errors.cjs': 2420,
        './permission-middleware.cjs': 2422,
        './utils.cjs': 2427,
        '@metamask/base-controller': 1407,
        '@metamask/controller-utils': 1515,
        '@metamask/rpc-errors': 2585,
        '@metamask/utils': 2995,
        'deep-freeze-strict': 4294,
        immer: 4715,
        nanoid: 5027,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  d =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.PermissionController = r.CaveatMutatorOperation = void 0);
                const m = e('@metamask/base-controller'),
                  f = e('@metamask/controller-utils'),
                  p = e('@metamask/rpc-errors'),
                  h = e('@metamask/utils'),
                  g = d(e('deep-freeze-strict')),
                  y = e('immer'),
                  w = e('nanoid'),
                  k = e('./Caveat.cjs'),
                  b = e('./errors.cjs'),
                  _ = e('./Permission.cjs'),
                  S = e('./permission-middleware.cjs'),
                  E = e('./utils.cjs'),
                  T = 'PermissionController';
                var v;
                !(function (e) {
                  (e[(e.Noop = 0)] = 'Noop'),
                    (e[(e.UpdateValue = 1)] = 'UpdateValue'),
                    (e[(e.DeleteCaveat = 2)] = 'DeleteCaveat'),
                    (e[(e.RevokePermission = 3)] = 'RevokePermission');
                })(v || (r.CaveatMutatorOperation = v = {}));
                class A extends m.BaseController {
                  get unrestrictedMethods() {
                    return this._unrestrictedMethods;
                  }
                  constructor(e) {
                    const {
                      caveatSpecifications: t,
                      permissionSpecifications: r,
                      unrestrictedMethods: s,
                      messenger: i,
                      state: o = {},
                    } = e;
                    super({
                      name: T,
                      metadata: { subjects: { anonymous: !0, persist: !0 } },
                      messenger: i,
                      state: { subjects: {}, ...o },
                    }),
                      n.add(this),
                      (this._unrestrictedMethods = new Set(s)),
                      (this._caveatSpecifications = (0, g.default)({ ...t })),
                      this.validatePermissionSpecifications(r, this._caveatSpecifications),
                      (this._permissionSpecifications = (0, g.default)({ ...r })),
                      this.registerMessageHandlers(),
                      (this.createPermissionMiddleware = (0, S.getPermissionMiddlewareFactory)({
                        executeRestrictedMethod: this._executeRestrictedMethod.bind(this),
                        getRestrictedMethod: this.getRestrictedMethod.bind(this),
                        isUnrestrictedMethod: this.unrestrictedMethods.has.bind(
                          this.unrestrictedMethods
                        ),
                      }));
                  }
                  getPermissionSpecification(e) {
                    return this._permissionSpecifications[e];
                  }
                  getCaveatSpecification(e) {
                    return this._caveatSpecifications[e];
                  }
                  validatePermissionSpecifications(e, t) {
                    Object.entries(e).forEach(
                      ([e, { permissionType: r, targetName: n, allowedCaveats: s }]) => {
                        if (!r || !(0, h.hasProperty)(_.PermissionType, r))
                          throw new Error(`Invalid permission type: "${r}"`);
                        if (!e) throw new Error(`Invalid permission target name: "${e}"`);
                        if (e !== n)
                          throw new Error(
                            `Invalid permission specification: target name "${e}" must match specification.targetName value "${n}".`
                          );
                        s &&
                          s.forEach(e => {
                            if (!(0, h.hasProperty)(t, e))
                              throw new b.UnrecognizedCaveatTypeError(e);
                            const n = t[e],
                              s = (0, k.isRestrictedMethodCaveatSpecification)(n);
                            if (
                              (r === _.PermissionType.RestrictedMethod && !s) ||
                              (r === _.PermissionType.Endowment && s)
                            )
                              throw new b.CaveatSpecificationMismatchError(n, r);
                          });
                      }
                    );
                  }
                  registerMessageHandlers() {
                    this.messagingSystem.registerActionHandler(`${T}:clearPermissions`, () =>
                      this.clearState()
                    ),
                      this.messagingSystem.registerActionHandler(`${T}:getEndowments`, (e, t, r) =>
                        this.getEndowments(e, t, r)
                      ),
                      this.messagingSystem.registerActionHandler(`${T}:getSubjectNames`, () =>
                        this.getSubjectNames()
                      ),
                      this.messagingSystem.registerActionHandler(`${T}:getPermissions`, e =>
                        this.getPermissions(e)
                      ),
                      this.messagingSystem.registerActionHandler(`${T}:hasPermission`, (e, t) =>
                        this.hasPermission(e, t)
                      ),
                      this.messagingSystem.registerActionHandler(`${T}:hasPermissions`, e =>
                        this.hasPermissions(e)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:grantPermissions`,
                        this.grantPermissions.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:grantPermissionsIncremental`,
                        this.grantPermissionsIncremental.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:requestPermissions`,
                        (e, t) => this.requestPermissions(e, t)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:requestPermissionsIncremental`,
                        (e, t) => this.requestPermissionsIncremental(e, t)
                      ),
                      this.messagingSystem.registerActionHandler(`${T}:revokeAllPermissions`, e =>
                        this.revokeAllPermissions(e)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:revokePermissionForAllSubjects`,
                        e => this.revokePermissionForAllSubjects(e)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:revokePermissions`,
                        this.revokePermissions.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${T}:updateCaveat`,
                        (e, t, r, n) => {
                          this.updateCaveat(e, t, r, n);
                        }
                      );
                  }
                  clearState() {
                    this.update(e => ({ subjects: {} }));
                  }
                  getTypedPermissionSpecification(e, t, r) {
                    const n =
                      e === _.PermissionType.RestrictedMethod
                        ? (0, b.methodNotFound)(t, r ? { origin: r } : undefined)
                        : new b.EndowmentPermissionDoesNotExistError(t, r);
                    if (!this.targetExists(t)) throw n;
                    const s = this.getPermissionSpecification(t);
                    if (!(0, _.hasSpecificationType)(s, e)) throw n;
                    return s;
                  }
                  getRestrictedMethod(e, t) {
                    return this.getTypedPermissionSpecification(
                      _.PermissionType.RestrictedMethod,
                      e,
                      t
                    ).methodImplementation;
                  }
                  getSubjectNames() {
                    return Object.keys(this.state.subjects);
                  }
                  getPermission(e, t) {
                    return this.state.subjects[e]?.permissions[t];
                  }
                  getPermissions(e) {
                    return this.state.subjects[e]?.permissions;
                  }
                  hasPermission(e, t) {
                    return Boolean(this.getPermission(e, t));
                  }
                  hasPermissions(e) {
                    return Boolean(this.state.subjects[e]);
                  }
                  revokeAllPermissions(e) {
                    this.update(t => {
                      if (!t.subjects[e]) throw new b.UnrecognizedSubjectError(e);
                      delete t.subjects[e];
                    });
                  }
                  revokePermission(e, t) {
                    this.revokePermissions({ [e]: [t] });
                  }
                  revokePermissions(e) {
                    this.update(t => {
                      Object.keys(e).forEach(r => {
                        if (!(0, h.hasProperty)(t.subjects, r))
                          throw new b.UnrecognizedSubjectError(r);
                        e[r].forEach(e => {
                          const { permissions: n } = t.subjects[r];
                          if (!(0, h.hasProperty)(n, e))
                            throw new b.PermissionDoesNotExistError(r, e);
                          this.deletePermission(t.subjects, r, e);
                        });
                      });
                    });
                  }
                  revokePermissionForAllSubjects(e) {
                    0 !== this.getSubjectNames().length &&
                      this.update(t => {
                        Object.entries(t.subjects).forEach(([r, n]) => {
                          const { permissions: s } = n;
                          (0, h.hasProperty)(s, e) && this.deletePermission(t.subjects, r, e);
                        });
                      });
                  }
                  deletePermission(e, t, r) {
                    const { permissions: n } = e[t];
                    Object.keys(n).length > 1 ? delete n[r] : delete e[t];
                  }
                  hasCaveat(e, t, r) {
                    return Boolean(this.getCaveat(e, t, r));
                  }
                  getCaveat(e, t, r) {
                    const n = this.getPermission(e, t);
                    if (!n) throw new b.PermissionDoesNotExistError(e, t);
                    return (0, _.findCaveat)(n, r);
                  }
                  addCaveat(e, t, r, n) {
                    if (this.hasCaveat(e, t, r)) throw new b.CaveatAlreadyExistsError(e, t, r);
                    this.setCaveat(e, t, r, n);
                  }
                  updateCaveat(e, t, r, n) {
                    if (!this.hasCaveat(e, t, r)) throw new b.CaveatDoesNotExistError(e, t, r);
                    this.setCaveat(e, t, r, n);
                  }
                  setCaveat(e, t, r, n) {
                    this.update(s => {
                      const i = s.subjects[e];
                      if (!i) throw new b.UnrecognizedSubjectError(e);
                      const o = i.permissions[t];
                      if (!o) throw new b.PermissionDoesNotExistError(e, t);
                      const a = { type: r, value: n };
                      this.validateCaveat(a, e, t);
                      let c = !1;
                      if (o.caveats) {
                        const e = o.caveats.findIndex(e => e.type === a.type);
                        -1 === e ? (o.caveats.push(a), (c = !0)) : o.caveats.splice(e, 1, a);
                      } else (o.caveats = [a]), (c = !0);
                      c &&
                        this.validateModifiedPermission(o, e, {
                          invokePermissionValidator: !0,
                          performCaveatValidation: !1,
                        });
                    });
                  }
                  updatePermissionsByCaveat(e, t) {
                    0 !== Object.keys(this.state.subjects).length &&
                      this.update(r => {
                        Object.values(r.subjects).forEach(n => {
                          Object.values(n.permissions).forEach(s => {
                            const { caveats: i } = s,
                              o = i?.find(({ type: t }) => t === e);
                            if (!o) return;
                            const a = t(o.value),
                              { operation: c } = a;
                            switch (c) {
                              case v.Noop:
                                break;
                              case v.UpdateValue:
                                (o.value = a.value),
                                  this.validateCaveat(o, n.origin, s.parentCapability);
                                break;
                              case v.DeleteCaveat:
                                this.deleteCaveat(s, e, n.origin);
                                break;
                              case v.RevokePermission:
                                this.deletePermission(r.subjects, n.origin, s.parentCapability);
                                break;
                              default:
                                throw new Error(`Unrecognized mutation result: "${c}"`);
                            }
                          });
                        });
                      });
                  }
                  removeCaveat(e, t, r) {
                    this.update(n => {
                      const s = n.subjects[e]?.permissions[t];
                      if (!s) throw new b.PermissionDoesNotExistError(e, t);
                      if (!s.caveats) throw new b.CaveatDoesNotExistError(e, t, r);
                      this.deleteCaveat(s, r, e);
                    });
                  }
                  deleteCaveat(e, t, r) {
                    if (!e.caveats) throw new b.CaveatDoesNotExistError(r, e.parentCapability, t);
                    const n = e.caveats.findIndex(e => e.type === t);
                    if (-1 === n) throw new b.CaveatDoesNotExistError(r, e.parentCapability, t);
                    1 === e.caveats.length ? (e.caveats = null) : e.caveats.splice(n, 1),
                      this.validateModifiedPermission(e, r, {
                        invokePermissionValidator: !0,
                        performCaveatValidation: !1,
                      });
                  }
                  validateModifiedPermission(e, t, r) {
                    if (!this.targetExists(e.parentCapability))
                      throw new Error(
                        `Fatal: Existing permission target "${e.parentCapability}" has no specification.`
                      );
                    this.validatePermission(
                      this.getPermissionSpecification(e.parentCapability),
                      e,
                      t,
                      r
                    );
                  }
                  targetExists(e) {
                    return (0, h.hasProperty)(this._permissionSpecifications, e);
                  }
                  grantPermissions({
                    approvedPermissions: e,
                    requestData: t,
                    preserveExistingPermissions: r = !0,
                    subject: s,
                  }) {
                    return l(this, n, 'm', i).call(this, {
                      approvedPermissions: e,
                      subject: s,
                      mergePermissions: !1,
                      preserveExistingPermissions: r,
                      requestData: t,
                    });
                  }
                  grantPermissionsIncremental({
                    approvedPermissions: e,
                    requestData: t,
                    subject: r,
                  }) {
                    return l(this, n, 'm', i).call(this, {
                      approvedPermissions: e,
                      subject: r,
                      mergePermissions: !0,
                      preserveExistingPermissions: !0,
                      requestData: t,
                    });
                  }
                  validatePermission(
                    e,
                    t,
                    r,
                    { invokePermissionValidator: n, performCaveatValidation: s }
                  ) {
                    const { allowedCaveats: i, validator: o, targetName: a } = e;
                    if (e.subjectTypes?.length && e.subjectTypes.length > 0) {
                      const t = this.messagingSystem.call(
                        'SubjectMetadataController:getSubjectMetadata',
                        r
                      );
                      if (!t || null === t.subjectType || !e.subjectTypes.includes(t.subjectType))
                        throw e.permissionType === _.PermissionType.RestrictedMethod
                          ? (0, b.methodNotFound)(a, { origin: r })
                          : new b.EndowmentPermissionDoesNotExistError(a, r);
                    }
                    if ((0, h.hasProperty)(t, 'caveats')) {
                      const { caveats: e } = t;
                      if (null !== e && !(Array.isArray(e) && e.length > 0))
                        throw new b.InvalidCaveatsPropertyError(r, a, e);
                      const n = new Set();
                      e?.forEach(e => {
                        if ((s && this.validateCaveat(e, r, a), !i?.includes(e.type)))
                          throw new b.ForbiddenCaveatError(e.type, r, a);
                        if (n.has(e.type)) throw new b.DuplicateCaveatError(e.type, r, a);
                        n.add(e.type);
                      });
                    }
                    n && o && o(t, r, a);
                  }
                  setValidatedPermissions(e, t) {
                    this.update(r => {
                      r.subjects[e] || (r.subjects[e] = { origin: e, permissions: {} }),
                        (r.subjects[e].permissions = (0, y.castDraft)(t));
                    });
                  }
                  constructCaveats(e, t, r) {
                    const n = r?.map(r => {
                      this.validateCaveat(r, e, t);
                      const { type: n, value: s } = r;
                      return { type: n, value: s };
                    });
                    return n && (0, f.isNonEmptyArray)(n) ? n : undefined;
                  }
                  validateCaveat(e, t, r) {
                    if (!(0, f.isPlainObject)(e)) throw new b.InvalidCaveatError(e, t, r);
                    if (2 !== Object.keys(e).length) throw new b.InvalidCaveatFieldsError(e, t, r);
                    if ('string' != typeof e.type) throw new b.InvalidCaveatTypeError(e, t, r);
                    const n = this.getCaveatSpecification(e.type);
                    if (!n) throw new b.UnrecognizedCaveatTypeError(e.type, t, r);
                    if (!(0, h.hasProperty)(e, 'value') || e.value === undefined)
                      throw new b.CaveatMissingValueError(e, t, r);
                    if (!(0, f.isValidJson)(e.value)) throw new b.CaveatInvalidJsonError(e, t, r);
                    n.validator?.(e, t, r);
                  }
                  async requestPermissions(e, t, r = {}) {
                    const { origin: s } = e,
                      { id: i = (0, w.nanoid)(), preserveExistingPermissions: o = !0 } = r;
                    this.validateRequestedPermissions(s, t);
                    const a = { ...r.metadata, id: i, origin: s },
                      c = { metadata: a, permissions: t },
                      d = await this.requestUserApproval(c);
                    return await l(this, n, 'm', u).call(this, {
                      subject: e,
                      metadata: a,
                      preserveExistingPermissions: o,
                      approvedRequest: d,
                    });
                  }
                  async requestPermissionsIncremental(e, t, r = {}) {
                    const { origin: s } = e,
                      { id: i = (0, w.nanoid)() } = r;
                    this.validateRequestedPermissions(s, t);
                    const a = this.getPermissions(s) ?? {},
                      [c, d] = l(this, n, 'm', o).call(this, a, t);
                    if (c === undefined || d === undefined) return [];
                    try {
                      this.validateRequestedPermissions(s, c);
                    } catch (e) {
                      if (e instanceof Error) throw new b.InvalidMergedPermissionsError(s, e, d);
                      throw (0, b.internalError)('Unrecognized error type', { error: e });
                    }
                    const m = { ...r.metadata, id: i, origin: s },
                      f = {
                        metadata: m,
                        permissions: c,
                        diff: { currentPermissions: a, permissionDiffMap: d },
                      },
                      p = await this.requestUserApproval(f);
                    return await l(this, n, 'm', u).call(this, {
                      subject: e,
                      metadata: m,
                      preserveExistingPermissions: !1,
                      approvedRequest: p,
                    });
                  }
                  validateRequestedPermissions(e, t) {
                    if (!(0, f.isPlainObject)(t))
                      throw (0, b.invalidParams)({
                        message: `Requested permissions for origin "${e}" is not a plain object.`,
                        data: { origin: e, requestedPermissions: t },
                      });
                    if (0 === Object.keys(t).length)
                      throw (0, b.invalidParams)({
                        message: `Permissions request for origin "${e}" contains no permissions.`,
                        data: { requestedPermissions: t },
                      });
                    for (const r of Object.keys(t)) {
                      const n = t[r];
                      if (!this.targetExists(r))
                        throw (0, b.methodNotFound)(r, { origin: e, requestedPermissions: t });
                      if (
                        !(0, f.isPlainObject)(n) ||
                        (n.parentCapability !== undefined && r !== n.parentCapability)
                      )
                        throw (0, b.invalidParams)({
                          message: `Permissions request for origin "${e}" contains invalid requested permission(s).`,
                          data: { origin: e, requestedPermissions: t },
                        });
                      this.validatePermission(this.getPermissionSpecification(r), n, e, {
                        invokePermissionValidator: !1,
                        performCaveatValidation: !0,
                      });
                    }
                  }
                  async requestUserApproval(e) {
                    const { origin: t, id: r } = e.metadata,
                      n = await this.messagingSystem.call(
                        'ApprovalController:addRequest',
                        {
                          id: r,
                          origin: t,
                          requestData: e,
                          type: E.MethodNames.RequestPermissions,
                        },
                        !0
                      );
                    return this.validateApprovedPermissions(n, { id: r, origin: t }), n;
                  }
                  getSideEffects(e) {
                    return Object.keys(e).reduce(
                      (e, t) => {
                        if (this.targetExists(t)) {
                          const r = this.getPermissionSpecification(t);
                          r.sideEffect &&
                            ((e.permittedHandlers[t] = r.sideEffect.onPermitted),
                            r.sideEffect.onFailure &&
                              (e.failureHandlers[t] = r.sideEffect.onFailure));
                        }
                        return e;
                      },
                      { permittedHandlers: {}, failureHandlers: {} }
                    );
                  }
                  async executeSideEffects(e, t) {
                    const { permittedHandlers: r, failureHandlers: n } = e,
                      s = { requestData: t, messagingSystem: this.messagingSystem },
                      i = await Promise.allSettled(Object.values(r).map(e => e(s))),
                      o = i.filter(e => 'rejected' === e.status);
                    if (o.length > 0) {
                      const e = Object.values(n);
                      if (e.length > 0)
                        try {
                          await Promise.all(e.map(e => e(s)));
                        } catch (e) {
                          throw (0, b.internalError)('Unexpected error in side-effects', {
                            error: e,
                          });
                        }
                      const t = o.map(e => e.reason);
                      throw (
                        (t.forEach(e => {
                          console.error(e);
                        }),
                        t.length > 1
                          ? (0, b.internalError)(
                              'Multiple errors occurred during side-effects execution',
                              { errors: t }
                            )
                          : t[0])
                      );
                    }
                    return i.map(({ value: e }) => e);
                  }
                  validateApprovedPermissions(e, t) {
                    const { id: r, origin: n } = t;
                    if (!(0, f.isPlainObject)(e) || !(0, f.isPlainObject)(e.metadata))
                      throw (0, b.internalError)(
                        `Approved permissions request for subject "${n}" is invalid.`,
                        { data: { approvedRequest: e } }
                      );
                    const {
                      metadata: { id: s, origin: i },
                      permissions: o,
                    } = e;
                    if (s !== r)
                      throw (0, b.internalError)(
                        `Approved permissions request for subject "${n}" mutated its id.`,
                        { originalId: r, mutatedId: s }
                      );
                    if (i !== n)
                      throw (0, b.internalError)(
                        `Approved permissions request for subject "${n}" mutated its origin.`,
                        { originalOrigin: n, mutatedOrigin: i }
                      );
                    try {
                      this.validateRequestedPermissions(n, o);
                    } catch (e) {
                      if (e instanceof Error)
                        throw (0, b.internalError)(
                          `Invalid approved permissions request: ${e.message}`,
                          e instanceof p.JsonRpcError ? e.data : undefined
                        );
                      throw (0, b.internalError)('Unrecognized error type', { error: e });
                    }
                  }
                  async acceptPermissionsRequest(e) {
                    const { id: t } = e.metadata;
                    if (!this.hasApprovalRequest({ id: t }))
                      throw new b.PermissionsRequestNotFoundError(t);
                    if (0 !== Object.keys(e.permissions).length)
                      try {
                        await this.messagingSystem.call('ApprovalController:acceptRequest', t, e);
                      } catch (e) {
                        throw (this._rejectPermissionsRequest(t, e), e);
                      }
                    else
                      this._rejectPermissionsRequest(
                        t,
                        (0, b.invalidParams)({ message: 'Must request at least one permission.' })
                      );
                  }
                  async rejectPermissionsRequest(e) {
                    if (!this.hasApprovalRequest({ id: e }))
                      throw new b.PermissionsRequestNotFoundError(e);
                    this._rejectPermissionsRequest(e, (0, b.userRejectedRequest)());
                  }
                  hasApprovalRequest(e) {
                    return this.messagingSystem.call('ApprovalController:hasRequest', e);
                  }
                  _rejectPermissionsRequest(e, t) {
                    return this.messagingSystem.call('ApprovalController:rejectRequest', e, t);
                  }
                  async getEndowments(e, t, r) {
                    if (!this.hasPermission(e, t))
                      throw (0, b.unauthorized)({ data: { origin: e, targetName: t } });
                    return this.getTypedPermissionSpecification(
                      _.PermissionType.Endowment,
                      t,
                      e
                    ).endowmentGetter({ origin: e, requestData: r });
                  }
                  async executeRestrictedMethod(e, t, r) {
                    const n = this.getRestrictedMethod(t, e),
                      s = await this._executeRestrictedMethod(n, { origin: e }, t, r);
                    if (s === undefined)
                      throw new Error(
                        `Internal request for method "${t}" as origin "${e}" returned no result.`
                      );
                    return s;
                  }
                  _executeRestrictedMethod(e, t, r, n = []) {
                    const { origin: s } = t,
                      i = this.getPermission(s, r);
                    if (!i) throw (0, b.unauthorized)({ data: { origin: s, method: r } });
                    return (0, k.decorateWithCaveats)(
                      e,
                      i,
                      this._caveatSpecifications
                    )({ method: r, params: n, context: { origin: s } });
                  }
                }
                (r.PermissionController = A),
                  (n = new WeakSet()),
                  (s = function (e) {
                    const { merger: t } = this.getCaveatSpecification(e);
                    if (t === undefined) throw new b.CaveatMergerDoesNotExistError(e);
                    return t;
                  }),
                  (i = function ({
                    approvedPermissions: e,
                    subject: t,
                    mergePermissions: r,
                    preserveExistingPermissions: s,
                    requestData: i,
                  }) {
                    const { origin: o } = t;
                    if (!o || 'string' != typeof o) throw new b.InvalidSubjectIdentifierError(o);
                    const c = s ? { ...this.getPermissions(o) } : {};
                    for (const [t, s] of Object.entries(e)) {
                      if (!this.targetExists(t)) throw (0, b.methodNotFound)(t);
                      if (s.parentCapability !== undefined && t !== s.parentCapability)
                        throw new b.InvalidApprovedPermissionError(o, t, s);
                      const e = t,
                        u = this.getPermissionSpecification(e),
                        d = {
                          caveats: this.constructCaveats(o, e, s.caveats),
                          invoker: o,
                          target: e,
                        };
                      let m;
                      (m = u.factory ? u.factory(d, i) : (0, _.constructPermission)(d)),
                        r && (m = l(this, n, 'm', a).call(this, c[e], m)[0]),
                        this.validatePermission(u, m, o, {
                          invokePermissionValidator: !0,
                          performCaveatValidation: !0,
                        }),
                        (c[e] = m);
                    }
                    return this.setValidatedPermissions(o, c), c;
                  }),
                  (o = function (e, t) {
                    const r = {},
                      s = (0, y.produce)(e, e => {
                        const s = e;
                        Object.entries(t).forEach(([e, t]) => {
                          const i = s[e],
                            [o, c] = l(this, n, 'm', a).call(this, i ?? {}, t);
                          (i === undefined || Object.keys(c).length > 0) &&
                            ((s[e] = o), (r[e] = c));
                        });
                      });
                    return 0 === Object.keys(r).length ? [] : [s, r];
                  }),
                  (a = function (e, t) {
                    const {
                        caveatPairs: r,
                        leftUniqueCaveats: s,
                        rightUniqueCaveats: i,
                      } = (0, E.collectUniqueAndPairedCaveats)(e, t),
                      [o, a] = r.reduce(
                        ([e, t], [r, s]) => {
                          const [i, o] = l(this, n, 'm', c).call(this, r, s);
                          return (
                            i !== undefined && o !== undefined
                              ? (e.push(i), (t[i.type] = o))
                              : e.push(r),
                            [e, t]
                          );
                        },
                        [[], {}]
                      ),
                      u = [
                        ...o,
                        ...s,
                        ...i.map(e => {
                          const [t, r] = l(this, n, 'm', c).call(this, undefined, e);
                          return (a[t.type] = r), t;
                        }),
                      ];
                    return [{ ...e, ...t, ...(u.length > 0 ? { caveats: u } : {}) }, a];
                  }),
                  (c = function (e, t) {
                    if (e !== undefined && e.type !== t.type)
                      throw new b.CaveatMergeTypeMismatchError(e.type, t.type);
                    const r = l(this, n, 'm', s).call(this, t.type);
                    if (e === undefined) return [{ ...t }, t.value];
                    const [i, o] = r(e.value, t.value);
                    return i !== undefined && o !== undefined
                      ? [{ type: t.type, value: i }, o]
                      : [];
                  }),
                  (u = async function ({
                    subject: e,
                    metadata: t,
                    preserveExistingPermissions: r,
                    approvedRequest: n,
                  }) {
                    const { permissions: s, ...i } = n,
                      o = { ...t },
                      a = this.getSideEffects(s);
                    if (Object.values(a.permittedHandlers).length > 0) {
                      const e = await this.executeSideEffects(a, n);
                      o.data = Object.keys(a.permittedHandlers).reduce(
                        (t, r, n) => ({ [r]: e[n], ...t }),
                        {}
                      );
                    }
                    return [
                      this.grantPermissions({
                        subject: e,
                        approvedPermissions: s,
                        preserveExistingPermissions: r,
                        requestData: i,
                      }),
                      o,
                    ];
                  });
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/PermissionController.cjs',
      },
    ],
    [
      2419,
      { '@metamask/base-controller': 1407 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.SubjectMetadataController = r.SubjectType = void 0);
                const n = e('@metamask/base-controller');
                var s;
                !(function (e) {
                  (e.Extension = 'extension'),
                    (e.Internal = 'internal'),
                    (e.Unknown = 'unknown'),
                    (e.Website = 'website'),
                    (e.Snap = 'snap');
                })(s || (r.SubjectType = s = {}));
                const i = { subjectMetadata: { persist: !0, anonymous: !1 } },
                  o = { subjectMetadata: {} };
                class a extends n.BaseController {
                  constructor({ messenger: e, subjectCacheLimit: t, state: r = {} }) {
                    if (!Number.isInteger(t) || t < 1)
                      throw new Error(
                        `subjectCacheLimit must be a positive integer. Received: "${t}"`
                      );
                    const n = t => e.call('PermissionController:hasPermissions', t);
                    super({
                      name: 'SubjectMetadataController',
                      metadata: i,
                      messenger: e,
                      state: { ...a.getTrimmedState(r, n) },
                    }),
                      (this.subjectHasPermissions = n),
                      (this.subjectCacheLimit = t),
                      (this.subjectsWithoutPermissionsEncounteredSinceStartup = new Set()),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:getSubjectMetadata`,
                        this.getSubjectMetadata.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        `${this.name}:addSubjectMetadata`,
                        this.addSubjectMetadata.bind(this)
                      );
                  }
                  clearState() {
                    this.subjectsWithoutPermissionsEncounteredSinceStartup.clear(),
                      this.update(e => ({ ...o }));
                  }
                  addSubjectMetadata(e) {
                    const { origin: t } = e,
                      r = {
                        ...e,
                        extensionId: e.extensionId || null,
                        iconUrl: e.iconUrl || null,
                        name: e.name || null,
                        subjectType: e.subjectType || null,
                      };
                    let n = null;
                    if (
                      this.subjectsWithoutPermissionsEncounteredSinceStartup.size >=
                      this.subjectCacheLimit
                    ) {
                      const e = this.subjectsWithoutPermissionsEncounteredSinceStartup
                        .values()
                        .next().value;
                      this.subjectsWithoutPermissionsEncounteredSinceStartup.delete(e),
                        this.subjectHasPermissions(e) || (n = e);
                    }
                    this.subjectsWithoutPermissionsEncounteredSinceStartup.add(t),
                      this.update(e => {
                        (e.subjectMetadata[t] = r),
                          'string' == typeof n && delete e.subjectMetadata[n];
                      });
                  }
                  getSubjectMetadata(e) {
                    return this.state.subjectMetadata[e];
                  }
                  trimMetadataState() {
                    this.update(e => a.getTrimmedState(e, this.subjectHasPermissions));
                  }
                  static getTrimmedState(e, t) {
                    const { subjectMetadata: r = {} } = e;
                    return {
                      subjectMetadata: Object.keys(r).reduce(
                        (e, n) => (t(n) && (e[n] = r[n]), e),
                        {}
                      ),
                    };
                  }
                }
                r.SubjectMetadataController = a;
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/SubjectMetadataController.cjs',
      },
    ],
    [
      2420,
      { '@metamask/rpc-errors': 2585 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.PermissionsRequestNotFoundError =
                    r.CaveatSpecificationMismatchError =
                    r.CaveatMergeTypeMismatchError =
                    r.DuplicateCaveatError =
                    r.ForbiddenCaveatError =
                    r.InvalidCaveatFieldsError =
                    r.CaveatInvalidJsonError =
                    r.CaveatMissingValueError =
                    r.InvalidCaveatTypeError =
                    r.InvalidCaveatError =
                    r.CaveatAlreadyExistsError =
                    r.CaveatDoesNotExistError =
                    r.InvalidCaveatsPropertyError =
                    r.UnrecognizedCaveatTypeError =
                    r.EndowmentPermissionDoesNotExistError =
                    r.PermissionDoesNotExistError =
                    r.InvalidApprovedPermissionError =
                    r.InvalidMergedPermissionsError =
                    r.CaveatMergerDoesNotExistError =
                    r.UnrecognizedSubjectError =
                    r.InvalidSubjectIdentifierError =
                    r.internalError =
                    r.userRejectedRequest =
                    r.invalidParams =
                    r.methodNotFound =
                    r.unauthorized =
                      void 0);
                const n = e('@metamask/rpc-errors');
                (r.unauthorized = function (e) {
                  return n.providerErrors.unauthorized({
                    message:
                      'Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions',
                    data: e.data,
                  });
                }),
                  (r.methodNotFound = function (e, t) {
                    const r = { message: `The method "${e}" does not exist / is not available.` };
                    return t !== undefined && (r.data = t), n.rpcErrors.methodNotFound(r);
                  }),
                  (r.invalidParams = function (e) {
                    return n.rpcErrors.invalidParams({ data: e.data, message: e.message });
                  }),
                  (r.userRejectedRequest = function (e) {
                    return n.providerErrors.userRejectedRequest({ data: e });
                  }),
                  (r.internalError = function (e, t) {
                    return n.rpcErrors.internal({ message: e, data: t });
                  });
                class s extends Error {
                  constructor(e) {
                    super(`Invalid subject identifier: "${'string' == typeof e ? e : typeof e}"`);
                  }
                }
                r.InvalidSubjectIdentifierError = s;
                class i extends Error {
                  constructor(e) {
                    super(`Unrecognized subject: "${e}" has no permissions.`);
                  }
                }
                r.UnrecognizedSubjectError = i;
                class o extends Error {
                  constructor(e) {
                    super(`Caveat value merger does not exist for type: "${e}"`);
                  }
                }
                r.CaveatMergerDoesNotExistError = o;
                class a extends Error {
                  constructor(e, t, r) {
                    super(`Invalid merged permissions for subject "${e}":\n${t.message}`),
                      (this.cause = t),
                      (this.data = { diff: r });
                  }
                }
                r.InvalidMergedPermissionsError = a;
                class c extends Error {
                  constructor(e, t, r) {
                    super(`Invalid approved permission for origin "${e}" and target "${t}".`),
                      (this.data = { origin: e, target: t, approvedPermission: r });
                  }
                }
                r.InvalidApprovedPermissionError = c;
                class u extends Error {
                  constructor(e, t) {
                    super(`Subject "${e}" has no permission for "${t}".`);
                  }
                }
                r.PermissionDoesNotExistError = u;
                class l extends Error {
                  constructor(e, t) {
                    super(
                      `${t ? `Subject "${t}"` : 'Unknown subject'} has no permission for "${e}".`
                    ),
                      t && (this.data = { origin: t });
                  }
                }
                r.EndowmentPermissionDoesNotExistError = l;
                class d extends Error {
                  constructor(e, t, r) {
                    super(`Unrecognized caveat type: "${e}"`),
                      (this.data = { caveatType: e }),
                      t !== undefined && (this.data.origin = t),
                      r !== undefined && (this.data.target = r);
                  }
                }
                r.UnrecognizedCaveatTypeError = d;
                class m extends Error {
                  constructor(e, t, r) {
                    super(
                      `The "caveats" property of permission for "${t}" of subject "${e}" is invalid. It must be a non-empty array if specified.`
                    ),
                      (this.data = { origin: e, target: t, caveatsProperty: r });
                  }
                }
                r.InvalidCaveatsPropertyError = m;
                class f extends Error {
                  constructor(e, t, r) {
                    super(`Permission for "${t}" of subject "${e}" has no caveat of type "${r}".`);
                  }
                }
                r.CaveatDoesNotExistError = f;
                class p extends Error {
                  constructor(e, t, r) {
                    super(
                      `Permission for "${t}" of subject "${e}" already has a caveat of type "${r}".`
                    );
                  }
                }
                r.CaveatAlreadyExistsError = p;
                class h extends n.JsonRpcError {
                  constructor(e, t, r) {
                    super(
                      n.errorCodes.rpc.invalidParams,
                      'Invalid caveat. Caveats must be plain objects.',
                      { receivedCaveat: e }
                    ),
                      (this.data = { origin: t, target: r });
                  }
                }
                r.InvalidCaveatError = h;
                class g extends Error {
                  constructor(e, t, r) {
                    super(`Caveat types must be strings. Received: "${typeof e.type}"`),
                      (this.data = { caveat: e, origin: t, target: r });
                  }
                }
                r.InvalidCaveatTypeError = g;
                class y extends Error {
                  constructor(e, t, r) {
                    super('Caveat is missing "value" field.'),
                      (this.data = { caveat: e, origin: t, target: r });
                  }
                }
                r.CaveatMissingValueError = y;
                class w extends Error {
                  constructor(e, t, r) {
                    super('Caveat "value" is invalid JSON.'),
                      (this.data = { caveat: e, origin: t, target: r });
                  }
                }
                r.CaveatInvalidJsonError = w;
                class k extends Error {
                  constructor(e, t, r) {
                    super(`Caveat has unexpected number of fields: "${Object.keys(e).length}"`),
                      (this.data = { caveat: e, origin: t, target: r });
                  }
                }
                r.InvalidCaveatFieldsError = k;
                class b extends Error {
                  constructor(e, t, r) {
                    super(`Permissions for target "${r}" may not have caveats of type "${e}".`),
                      (this.data = { caveatType: e, origin: t, target: r });
                  }
                }
                r.ForbiddenCaveatError = b;
                class _ extends Error {
                  constructor(e, t, r) {
                    super(
                      `Permissions for target "${r}" contains multiple caveats of type "${e}".`
                    ),
                      (this.data = { caveatType: e, origin: t, target: r });
                  }
                }
                r.DuplicateCaveatError = _;
                class S extends Error {
                  constructor(e, t) {
                    super(`Cannot merge caveats of different types: "${e}" and "${t}".`),
                      (this.data = { leftCaveatType: e, rightCaveatType: t });
                  }
                }
                r.CaveatMergeTypeMismatchError = S;
                class E extends Error {
                  constructor(e, t) {
                    super(`Caveat specification uses a mismatched type. Expected caveats for ${t}`),
                      (this.data = { caveatSpec: e, permissionType: t });
                  }
                }
                r.CaveatSpecificationMismatchError = E;
                class T extends Error {
                  constructor(e) {
                    super(`Permissions request with id "${e}" not found.`);
                  }
                }
                r.PermissionsRequestNotFoundError = T;
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/errors.cjs',
      },
    ],
    [
      2421,
      {
        './Caveat.cjs': 2416,
        './Permission.cjs': 2417,
        './PermissionController.cjs': 2418,
        './SubjectMetadataController.cjs': 2419,
        './errors.cjs': 2420,
        './rpc-methods/index.cjs': 2424,
        './utils.cjs': 2427,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    },
                  o =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.permissionRpcMethods = r.MethodNames = void 0),
                  i(e('./Caveat.cjs'), r),
                  i(e('./errors.cjs'), r),
                  i(e('./Permission.cjs'), r),
                  i(e('./PermissionController.cjs'), r);
                var a = e('./utils.cjs');
                Object.defineProperty(r, 'MethodNames', {
                  enumerable: !0,
                  get: function () {
                    return a.MethodNames;
                  },
                }),
                  (r.permissionRpcMethods = o(e('./rpc-methods/index.cjs'))),
                  i(e('./SubjectMetadataController.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/index.cjs',
      },
    ],
    [
      2422,
      { './errors.cjs': 2420, '@metamask/json-rpc-engine': 1964 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getPermissionMiddlewareFactory = void 0);
                const n = e('@metamask/json-rpc-engine'),
                  s = e('./errors.cjs');
                r.getPermissionMiddlewareFactory = function ({
                  executeRestrictedMethod: e,
                  getRestrictedMethod: t,
                  isUnrestrictedMethod: r,
                }) {
                  return function (i) {
                    const { origin: o } = i;
                    if ('string' != typeof o || !o)
                      throw new Error('The subject "origin" must be a non-empty string.');
                    return (0, n.createAsyncMiddleware)(async (n, a, c) => {
                      const { method: u, params: l } = n;
                      if (r(u)) return c();
                      const d = t(u, o),
                        m = await e(d, i, u, l);
                      return m === undefined
                        ? ((a.error = (0, s.internalError)(
                            `Request for method "${n.method}" returned undefined result.`,
                            { request: n }
                          )),
                          undefined)
                        : ((a.result = m), undefined);
                    });
                  };
                };
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/permission-middleware.cjs',
      },
    ],
    [
      2423,
      { '../utils.cjs': 2427 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getPermissionsHandler = void 0);
                const n = e('../utils.cjs');
                r.getPermissionsHandler = {
                  methodNames: [n.MethodNames.GetPermissions],
                  implementation: async function (e, t, r, n, { getPermissionsForOrigin: s }) {
                    return (t.result = Object.values(s() || {})), n();
                  },
                  hookNames: { getPermissionsForOrigin: !0 },
                };
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/rpc-methods/getPermissions.cjs',
      },
    ],
    [
      2424,
      {
        './getPermissions.cjs': 2423,
        './requestPermissions.cjs': 2425,
        './revokePermissions.cjs': 2426,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.handlers = void 0);
                const n = e('./getPermissions.cjs'),
                  s = e('./requestPermissions.cjs'),
                  i = e('./revokePermissions.cjs');
                r.handlers = [
                  s.requestPermissionsHandler,
                  n.getPermissionsHandler,
                  i.revokePermissionsHandler,
                ];
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/rpc-methods/index.cjs',
      },
    ],
    [
      2425,
      { '../errors.cjs': 2420, '../utils.cjs': 2427, '@metamask/controller-utils': 1515 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.requestPermissionsHandler = void 0);
                const n = e('@metamask/controller-utils'),
                  s = e('../errors.cjs'),
                  i = e('../utils.cjs');
                r.requestPermissionsHandler = {
                  methodNames: [i.MethodNames.RequestPermissions],
                  implementation: async function (e, t, r, i, { requestPermissionsForOrigin: o }) {
                    const { params: a } = e;
                    if (!Array.isArray(a) || !(0, n.isPlainObject)(a[0]))
                      return i((0, s.invalidParams)({ data: { request: e } }));
                    const [c] = a,
                      [u] = await o(c);
                    return (t.result = Object.values(u)), i();
                  },
                  hookNames: { requestPermissionsForOrigin: !0 },
                };
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/rpc-methods/requestPermissions.cjs',
      },
    ],
    [
      2426,
      { '../errors.cjs': 2420, '../utils.cjs': 2427, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.revokePermissionsHandler = void 0);
                const n = e('@metamask/utils'),
                  s = e('../errors.cjs'),
                  i = e('../utils.cjs');
                r.revokePermissionsHandler = {
                  methodNames: [i.MethodNames.RevokePermissions],
                  implementation: async function (e, t, r, i, { revokePermissionsForOrigin: o }) {
                    const { params: a } = e,
                      c = a?.[0];
                    if (!c) return i((0, s.invalidParams)({ data: { request: e } }));
                    const u = Object.keys(c);
                    if (!(0, n.isNonEmptyArray)(u))
                      return i((0, s.invalidParams)({ data: { request: e } }));
                    return o(u), (t.result = null), i();
                  },
                  hookNames: { revokePermissionsForOrigin: !0 },
                };
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/rpc-methods/revokePermissions.cjs',
      },
    ],
    [
      2427,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n;
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.collectUniqueAndPairedCaveats = r.MethodNames = void 0),
                  (function (e) {
                    (e.RequestPermissions = 'wallet_requestPermissions'),
                      (e.GetPermissions = 'wallet_getPermissions'),
                      (e.RevokePermissions = 'wallet_revokePermissions');
                  })(n || (r.MethodNames = n = {})),
                  (r.collectUniqueAndPairedCaveats = function (e, t) {
                    const r = e?.caveats?.slice() ?? [],
                      n = t.caveats?.slice() ?? [],
                      s = [],
                      i = [];
                    return (
                      r.forEach(e => {
                        const t = n.findIndex(t => t.type === e.type);
                        -1 === t ? s.push(e) : (i.push([e, n[t]]), n.splice(t, 1));
                      }),
                      { caveatPairs: i, leftUniqueCaveats: s, rightUniqueCaveats: [...n] }
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/permission-controller',
        file: 'node_modules/@metamask/permission-controller/dist/utils.cjs',
      },
    ],
    [
      2437,
      { 'fast-json-stable-stringify': 4501, uuid: 5733 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  s =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.AbstractPollingControllerBaseMixin = r.getKey = void 0);
                const i = s(e('fast-json-stable-stringify')),
                  o = e('uuid');
                (r.getKey = e => (0, i.default)(e)),
                  (r.AbstractPollingControllerBaseMixin = function (e) {
                    var t, s;
                    return (
                      (t = new WeakMap()),
                      (s = new WeakMap()),
                      class extends e {
                        constructor() {
                          super(...arguments), t.set(this, new Map()), s.set(this, new Map());
                        }
                        startPolling(e) {
                          const s = (0, o.v4)(),
                            i = (0, r.getKey)(e),
                            a = n(this, t, 'f').get(i) ?? new Set();
                          return (
                            a.add(s),
                            n(this, t, 'f').set(i, a),
                            1 === a.size && this._startPolling(e),
                            s
                          );
                        }
                        stopAllPolling() {
                          n(this, t, 'f').forEach((e, t) => {
                            e.forEach(e => {
                              this.stopPollingByPollingToken(e);
                            });
                          });
                        }
                        stopPollingByPollingToken(e) {
                          if (!e) throw new Error('pollingToken required');
                          let r = null;
                          for (const [s, i] of n(this, t, 'f'))
                            if (i.delete(e)) {
                              0 === i.size && (r = s);
                              break;
                            }
                          if (r) {
                            this._stopPollingByPollingTokenSetId(r), n(this, t, 'f').delete(r);
                            const e = n(this, s, 'f').get(r);
                            if (e) {
                              for (const t of e) t(JSON.parse(r));
                              e.clear();
                            }
                          }
                        }
                        onPollingComplete(e, t) {
                          const i = (0, r.getKey)(e),
                            o = n(this, s, 'f').get(i) ?? new Set();
                          o.add(t), n(this, s, 'f').set(i, o);
                        }
                      }
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/polling-controller',
        file: 'node_modules/@metamask/polling-controller/dist/AbstractPollingController.cjs',
      },
    ],
    [
      2438,
      { './AbstractPollingController.cjs': 2437, '@metamask/base-controller': 1407 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__classPrivateFieldGet) ||
                  function (e, t, r, n) {
                    if ('a' === r && !n)
                      throw new TypeError('Private accessor was defined without a getter');
                    if ('function' == typeof t ? e !== t || !n : !t.has(e))
                      throw new TypeError(
                        'Cannot read private member from an object whose class did not declare it'
                      );
                    return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.BlockTrackerPollingController = r.BlockTrackerPollingControllerOnly = void 0);
                const s = e('@metamask/base-controller'),
                  i = e('./AbstractPollingController.cjs');
                function o(e) {
                  var t;
                  class r extends (0, i.AbstractPollingControllerBaseMixin)(e) {
                    constructor() {
                      super(...arguments), t.set(this, {});
                    }
                    _startPolling(e) {
                      const r = (0, i.getKey)(e);
                      if (n(this, t, 'f')[r]) return;
                      const s = this._getNetworkClientById(e.networkClientId);
                      if (!s)
                        throw new Error(
                          `Unable to retrieve blockTracker for networkClientId ${e.networkClientId}`
                        );
                      {
                        const i = this._executePoll.bind(this, e);
                        s.blockTracker.addListener('latest', i), (n(this, t, 'f')[r] = i);
                      }
                    }
                    _stopPollingByPollingTokenSetId(e) {
                      const { networkClientId: r } = JSON.parse(e),
                        s = this._getNetworkClientById(r);
                      if (s && n(this, t, 'f')[e]) {
                        const r = n(this, t, 'f')[e];
                        r &&
                          (s.blockTracker.removeListener('latest', r), delete n(this, t, 'f')[e]);
                      }
                    }
                  }
                  return (t = new WeakMap()), r;
                }
                class a {}
                r.BlockTrackerPollingControllerOnly = () => o(a);
                r.BlockTrackerPollingController = () => o(s.BaseController);
              };
            };
      },
      {
        package: '@metamask/polling-controller',
        file: 'node_modules/@metamask/polling-controller/dist/BlockTrackerPollingController.cjs',
      },
    ],
    [
      2439,
      { './AbstractPollingController.cjs': 2437, '@metamask/base-controller': 1407 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  s =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.StaticIntervalPollingController = r.StaticIntervalPollingControllerOnly =
                    void 0);
                const i = e('@metamask/base-controller'),
                  o = e('./AbstractPollingController.cjs');
                function a(e) {
                  var t, r;
                  class i extends (0, o.AbstractPollingControllerBaseMixin)(e) {
                    constructor() {
                      super(...arguments), t.set(this, {}), r.set(this, 1e3);
                    }
                    setIntervalLength(e) {
                      n(this, r, e, 'f');
                    }
                    getIntervalLength() {
                      return s(this, r, 'f');
                    }
                    _startPolling(e) {
                      if (!s(this, r, 'f'))
                        throw new Error('intervalLength must be defined and greater than 0');
                      const n = (0, o.getKey)(e),
                        i = s(this, t, 'f')[n];
                      this._stopPollingByPollingTokenSetId(n);
                      const a = (s(this, t, 'f')[n] = setTimeout(
                        async () => {
                          try {
                            await this._executePoll(e);
                          } catch (e) {
                            console.error(e);
                          }
                          a === s(this, t, 'f')[n] && this._startPolling(e);
                        },
                        i ? s(this, r, 'f') : 0
                      ));
                    }
                    _stopPollingByPollingTokenSetId(e) {
                      const r = s(this, t, 'f')[e];
                      r && (clearTimeout(r), delete s(this, t, 'f')[e]);
                    }
                  }
                  return (t = new WeakMap()), (r = new WeakMap()), i;
                }
                class c {}
                r.StaticIntervalPollingControllerOnly = () => a(c);
                r.StaticIntervalPollingController = () => a(i.BaseController);
              };
            };
      },
      {
        package: '@metamask/polling-controller',
        file: 'node_modules/@metamask/polling-controller/dist/StaticIntervalPollingController.cjs',
      },
    ],
    [
      2440,
      {
        './BlockTrackerPollingController.cjs': 2438,
        './StaticIntervalPollingController.cjs': 2439,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.StaticIntervalPollingController =
                    r.StaticIntervalPollingControllerOnly =
                    r.BlockTrackerPollingController =
                    r.BlockTrackerPollingControllerOnly =
                      void 0);
                var n = e('./BlockTrackerPollingController.cjs');
                Object.defineProperty(r, 'BlockTrackerPollingControllerOnly', {
                  enumerable: !0,
                  get: function () {
                    return n.BlockTrackerPollingControllerOnly;
                  },
                }),
                  Object.defineProperty(r, 'BlockTrackerPollingController', {
                    enumerable: !0,
                    get: function () {
                      return n.BlockTrackerPollingController;
                    },
                  });
                var s = e('./StaticIntervalPollingController.cjs');
                Object.defineProperty(r, 'StaticIntervalPollingControllerOnly', {
                  enumerable: !0,
                  get: function () {
                    return s.StaticIntervalPollingControllerOnly;
                  },
                }),
                  Object.defineProperty(r, 'StaticIntervalPollingController', {
                    enumerable: !0,
                    get: function () {
                      return s.StaticIntervalPollingController;
                    },
                  });
              };
            };
      },
      {
        package: '@metamask/polling-controller',
        file: 'node_modules/@metamask/polling-controller/dist/index.cjs',
      },
    ],
    [
      2441,
      { 'readable-stream': 5343 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.BasePostMessageStream = void 0);
                const n = e('readable-stream'),
                  s = () => undefined,
                  i = 'SYN',
                  o = 'ACK';
                class a extends n.Duplex {
                  constructor(e) {
                    super(Object.assign({ objectMode: !0 }, e)),
                      (this._init = !1),
                      (this._haveSyn = !1),
                      (this._log = () => null);
                  }
                  _handshake() {
                    this._write(i, null, s), this.cork();
                  }
                  _onData(e) {
                    if (this._init)
                      try {
                        this.push(e), this._log(e, !1);
                      } catch (e) {
                        this.emit('error', e);
                      }
                    else
                      e === i
                        ? ((this._haveSyn = !0), this._write(o, null, s))
                        : e === o &&
                          ((this._init = !0),
                          this._haveSyn || this._write(o, null, s),
                          this.uncork());
                  }
                  _read() {
                    return undefined;
                  }
                  _write(e, t, r) {
                    e !== o && e !== i && this._log(e, !0), this._postMessage(e), r();
                  }
                  _setLogger(e) {
                    this._log = e;
                  }
                }
                r.BasePostMessageStream = a;
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/BasePostMessageStream.js',
      },
    ],
    [
      2442,
      { '../BasePostMessageStream': 2441, '../utils': 2446 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__rest) ||
                  function (e, t) {
                    var r = {};
                    for (var n in e)
                      Object.prototype.hasOwnProperty.call(e, n) &&
                        t.indexOf(n) < 0 &&
                        (r[n] = e[n]);
                    if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
                      var s = 0;
                      for (n = Object.getOwnPropertySymbols(e); s < n.length; s++)
                        t.indexOf(n[s]) < 0 &&
                          Object.prototype.propertyIsEnumerable.call(e, n[s]) &&
                          (r[n[s]] = e[n[s]]);
                    }
                    return r;
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.WebWorkerParentPostMessageStream = void 0);
                const s = e('../BasePostMessageStream'),
                  i = e('../utils');
                class o extends s.BasePostMessageStream {
                  constructor(e) {
                    var { worker: t } = e;
                    super(n(e, ['worker'])),
                      (this._target = i.DEDICATED_WORKER_NAME),
                      (this._worker = t),
                      (this._worker.onmessage = this._onMessage.bind(this)),
                      this._handshake();
                  }
                  _postMessage(e) {
                    this._worker.postMessage({ target: this._target, data: e });
                  }
                  _onMessage(e) {
                    const t = e.data;
                    (0, i.isValidStreamMessage)(t) && this._onData(t.data);
                  }
                  _destroy() {
                    (this._worker.onmessage = null), (this._worker = null);
                  }
                }
                r.WebWorkerParentPostMessageStream = o;
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/WebWorker/WebWorkerParentPostMessageStream.js',
      },
    ],
    [
      2443,
      { '../BasePostMessageStream': 2441, '../utils': 2446 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.WebWorkerPostMessageStream = void 0);
                const n = e('../BasePostMessageStream'),
                  s = e('../utils');
                class i extends n.BasePostMessageStream {
                  constructor(e = {}) {
                    if ('undefined' == typeof self || 'undefined' == typeof WorkerGlobalScope)
                      throw new Error(
                        'WorkerGlobalScope not found. This class should only be instantiated in a WebWorker.'
                      );
                    super(e),
                      (this._name = s.DEDICATED_WORKER_NAME),
                      self.addEventListener('message', this._onMessage.bind(this)),
                      this._handshake();
                  }
                  _postMessage(e) {
                    self.postMessage({ data: e });
                  }
                  _onMessage(e) {
                    const t = e.data;
                    (0, s.isValidStreamMessage)(t) &&
                      t.target === this._name &&
                      this._onData(t.data);
                  }
                  _destroy() {
                    return undefined;
                  }
                }
                r.WebWorkerPostMessageStream = i;
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/WebWorker/WebWorkerPostMessageStream.js',
      },
    ],
    [
      2444,
      {
        './BasePostMessageStream': 2441,
        './WebWorker/WebWorkerParentPostMessageStream': 2442,
        './WebWorker/WebWorkerPostMessageStream': 2443,
        './runtime/BrowserRuntimePostMessageStream': 2445,
        './window/WindowPostMessageStream': 2447,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./window/WindowPostMessageStream'), r),
                  s(e('./WebWorker/WebWorkerPostMessageStream'), r),
                  s(e('./WebWorker/WebWorkerParentPostMessageStream'), r),
                  s(e('./runtime/BrowserRuntimePostMessageStream'), r),
                  s(e('./BasePostMessageStream'), r);
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/browser.js',
      },
    ],
    [
      2445,
      { '../BasePostMessageStream': 2441, '../utils': 2446 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  o =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  a =
                    (this && this.__rest) ||
                    function (e, t) {
                      var r = {};
                      for (var n in e)
                        Object.prototype.hasOwnProperty.call(e, n) &&
                          t.indexOf(n) < 0 &&
                          (r[n] = e[n]);
                      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
                        var s = 0;
                        for (n = Object.getOwnPropertySymbols(e); s < n.length; s++)
                          t.indexOf(n[s]) < 0 &&
                            Object.prototype.propertyIsEnumerable.call(e, n[s]) &&
                            (r[n[s]] = e[n[s]]);
                      }
                      return r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.BrowserRuntimePostMessageStream = void 0);
                const c = e('../BasePostMessageStream'),
                  u = e('../utils');
                class l extends c.BasePostMessageStream {
                  constructor(e) {
                    var { name: t, target: r } = e;
                    super(a(e, ['name', 'target'])),
                      n.set(this, void 0),
                      s.set(this, void 0),
                      i(this, n, t, 'f'),
                      i(this, s, r, 'f'),
                      (this._onMessage = this._onMessage.bind(this)),
                      this._getRuntime().onMessage.addListener(this._onMessage),
                      this._handshake();
                  }
                  _postMessage(e) {
                    this._getRuntime().sendMessage({ target: o(this, s, 'f'), data: e });
                  }
                  _onMessage(e) {
                    (0, u.isValidStreamMessage)(e) &&
                      e.target === o(this, n, 'f') &&
                      this._onData(e.data);
                  }
                  _getRuntime() {
                    var e, t;
                    if (
                      'chrome' in globalThis &&
                      'function' ==
                        typeof (null ===
                          (e = null === chrome || void 0 === chrome ? void 0 : chrome.runtime) ||
                        void 0 === e
                          ? void 0
                          : e.sendMessage)
                    )
                      return chrome.runtime;
                    if (
                      'browser' in globalThis &&
                      'function' ==
                        typeof (null ===
                          (t = null === browser || void 0 === browser ? void 0 : browser.runtime) ||
                        void 0 === t
                          ? void 0
                          : t.sendMessage)
                    )
                      return browser.runtime;
                    throw new Error(
                      'browser.runtime.sendMessage is not a function. This class should only be instantiated in a web extension.'
                    );
                  }
                  _destroy() {
                    this._getRuntime().onMessage.removeListener(this._onMessage);
                  }
                }
                (r.BrowserRuntimePostMessageStream = l), (n = new WeakMap()), (s = new WeakMap());
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/runtime/BrowserRuntimePostMessageStream.js',
      },
    ],
    [
      2446,
      { '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isValidStreamMessage = r.DEDICATED_WORKER_NAME = void 0);
                const n = e('@metamask/utils');
                (r.DEDICATED_WORKER_NAME = 'dedicatedWorker'),
                  (r.isValidStreamMessage = function (e) {
                    return (
                      (0, n.isObject)(e) &&
                      Boolean(e.data) &&
                      ('number' == typeof e.data ||
                        'object' == typeof e.data ||
                        'string' == typeof e.data)
                    );
                  });
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/utils.js',
      },
    ],
    [
      2447,
      { '../BasePostMessageStream': 2441, '../utils': 2446, '@metamask/utils': 2995 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i =
                    (this && this.__rest) ||
                    function (e, t) {
                      var r = {};
                      for (var n in e)
                        Object.prototype.hasOwnProperty.call(e, n) &&
                          t.indexOf(n) < 0 &&
                          (r[n] = e[n]);
                      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
                        var s = 0;
                        for (n = Object.getOwnPropertySymbols(e); s < n.length; s++)
                          t.indexOf(n[s]) < 0 &&
                            Object.prototype.propertyIsEnumerable.call(e, n[s]) &&
                            (r[n[s]] = e[n[s]]);
                      }
                      return r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.WindowPostMessageStream = void 0);
                const o = e('@metamask/utils'),
                  a = e('../BasePostMessageStream'),
                  c = e('../utils'),
                  u =
                    null ===
                      (n = Object.getOwnPropertyDescriptor(MessageEvent.prototype, 'source')) ||
                    void 0 === n
                      ? void 0
                      : n.get;
                (0, o.assert)(u, 'MessageEvent.prototype.source getter is not defined.');
                const l =
                  null ===
                    (s = Object.getOwnPropertyDescriptor(MessageEvent.prototype, 'origin')) ||
                  void 0 === s
                    ? void 0
                    : s.get;
                (0, o.assert)(l, 'MessageEvent.prototype.origin getter is not defined.');
                class d extends a.BasePostMessageStream {
                  constructor(e) {
                    var {
                      name: t,
                      target: r,
                      targetOrigin: n = location.origin,
                      targetWindow: s = window,
                    } = e;
                    if (
                      (super(i(e, ['name', 'target', 'targetOrigin', 'targetWindow'])),
                      'undefined' == typeof window || 'function' != typeof window.postMessage)
                    )
                      throw new Error(
                        'window.postMessage is not a function. This class should only be instantiated in a Window.'
                      );
                    (this._name = t),
                      (this._target = r),
                      (this._targetOrigin = n),
                      (this._targetWindow = s),
                      (this._onMessage = this._onMessage.bind(this)),
                      window.addEventListener('message', this._onMessage, !1),
                      this._handshake();
                  }
                  _postMessage(e) {
                    this._targetWindow.postMessage(
                      { target: this._target, data: e },
                      this._targetOrigin
                    );
                  }
                  _onMessage(e) {
                    const t = e.data;
                    ('*' !== this._targetOrigin && l.call(e) !== this._targetOrigin) ||
                      u.call(e) !== this._targetWindow ||
                      !(0, c.isValidStreamMessage)(t) ||
                      t.target !== this._name ||
                      this._onData(t.data);
                  }
                  _destroy() {
                    window.removeEventListener('message', this._onMessage, !1);
                  }
                }
                r.WindowPostMessageStream = d;
              };
            };
      },
      {
        package: '@metamask/post-message-stream',
        file: 'node_modules/@metamask/post-message-stream/dist/window/WindowPostMessageStream.js',
      },
    ],
    [
      2461,
      {
        '../../sdk/index.cjs': 2491,
        './auth-snap-requests.cjs': 2462,
        '@metamask/base-controller': 1407,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d,
                  m,
                  f,
                  p,
                  h =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  g =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.defaultState = void 0);
                const y = e('@metamask/base-controller'),
                  w = e('./auth-snap-requests.cjs'),
                  k = e('../../sdk/index.cjs');
                r.defaultState = { isSignedIn: !1 };
                const b = {
                  isSignedIn: { persist: !0, anonymous: !0 },
                  sessionData: { persist: !0, anonymous: !1 },
                };
                class _ extends y.BaseController {
                  constructor({ messenger: e, state: t, metametrics: d }) {
                    if (
                      (super({
                        messenger: e,
                        metadata: b,
                        name: 'AuthenticationController',
                        state: { ...r.defaultState, ...t },
                      }),
                      n.add(this),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o.set(this, !1),
                      a.set(this, {
                        setupLockedStateSubscriptions: () => {
                          const { isUnlocked: e } = this.messagingSystem.call(
                            'KeyringController:getState'
                          );
                          h(this, o, e, 'f'),
                            this.messagingSystem.subscribe('KeyringController:unlock', () => {
                              h(this, o, !0, 'f');
                            }),
                            this.messagingSystem.subscribe('KeyringController:lock', () => {
                              h(this, o, !1, 'f');
                            });
                        },
                      }),
                      f.set(this, {}),
                      !d)
                    )
                      throw new Error('`metametrics` field is required');
                    h(this, s, d, 'f'),
                      h(
                        this,
                        i,
                        new k.JwtBearerAuth(
                          { env: k.Env.PRD, platform: d.agent, type: k.AuthType.SRP },
                          {
                            storage: {
                              getLoginResponse: g(this, n, 'm', u).bind(this),
                              setLoginResponse: g(this, n, 'm', l).bind(this),
                            },
                            signing: {
                              getIdentifier: g(this, n, 'm', m).bind(this),
                              signMessage: g(this, n, 'm', p).bind(this),
                            },
                            metametrics: g(this, s, 'f'),
                          }
                        ),
                        'f'
                      ),
                      g(this, a, 'f').setupLockedStateSubscriptions(),
                      g(this, n, 'm', c).call(this);
                  }
                  async performSignIn() {
                    return (
                      g(this, n, 'm', d).call(this, 'performSignIn'),
                      await g(this, i, 'f').getAccessToken()
                    );
                  }
                  performSignOut() {
                    this.update(e => {
                      (e.isSignedIn = !1), (e.sessionData = undefined);
                    });
                  }
                  async getBearerToken() {
                    return (
                      g(this, n, 'm', d).call(this, 'getBearerToken'),
                      await g(this, i, 'f').getAccessToken()
                    );
                  }
                  async getSessionProfile() {
                    return (
                      g(this, n, 'm', d).call(this, 'getSessionProfile'),
                      await g(this, i, 'f').getUserProfile()
                    );
                  }
                  isSignedIn() {
                    return this.state.isSignedIn;
                  }
                }
                (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (a = new WeakMap()),
                  (f = new WeakMap()),
                  (n = new WeakSet()),
                  (c = function () {
                    this.messagingSystem.registerActionHandler(
                      'AuthenticationController:getBearerToken',
                      this.getBearerToken.bind(this)
                    ),
                      this.messagingSystem.registerActionHandler(
                        'AuthenticationController:getSessionProfile',
                        this.getSessionProfile.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'AuthenticationController:isSignedIn',
                        this.isSignedIn.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'AuthenticationController:performSignIn',
                        this.performSignIn.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'AuthenticationController:performSignOut',
                        this.performSignOut.bind(this)
                      );
                  }),
                  (u = async function () {
                    return this.state.sessionData ? this.state.sessionData : null;
                  }),
                  (l = async function (e) {
                    const t = await g(this, s, 'f').getMetaMetricsId();
                    this.update(r => {
                      (r.isSignedIn = !0),
                        (r.sessionData = { ...e, profile: { ...e.profile, metaMetricsId: t } });
                    });
                  }),
                  (d = function (e) {
                    if (!g(this, o, 'f'))
                      throw new Error(`${e} - unable to proceed, wallet is locked`);
                  }),
                  (m = async function () {
                    g(this, n, 'm', d).call(this, '#snapGetPublicKey');
                    return await this.messagingSystem.call(
                      'SnapController:handleRequest',
                      (0, w.createSnapPublicKeyRequest)()
                    );
                  }),
                  (p = async function (e) {
                    if (((0, k.assertMessageStartsWithMetamask)(e), g(this, f, 'f')[e]))
                      return g(this, f, 'f')[e];
                    g(this, n, 'm', d).call(this, '#snapSignMessage');
                    const t = await this.messagingSystem.call(
                      'SnapController:handleRequest',
                      (0, w.createSnapSignMessageRequest)(e)
                    );
                    return (g(this, f, 'f')[e] = t), t;
                  }),
                  (r.default = _);
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/AuthenticationController.cjs',
      },
    ],
    [
      2462,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createSnapSignMessageRequest = r.createSnapPublicKeyRequest = void 0);
                const n = 'npm:@metamask/message-signing-snap';
                (r.createSnapPublicKeyRequest = function () {
                  return {
                    snapId: n,
                    origin: 'metamask',
                    handler: 'onRpcRequest',
                    request: { method: 'getPublicKey' },
                  };
                }),
                  (r.createSnapSignMessageRequest = function (e) {
                    return {
                      snapId: n,
                      origin: 'metamask',
                      handler: 'onRpcRequest',
                      request: { method: 'signMessage', params: { message: e } },
                    };
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/auth-snap-requests.cjs',
      },
    ],
    [
      2463,
      { './AuthenticationController.cjs': 2461, './mocks/index.cjs': 2464 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    },
                  o =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    },
                  a =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.Mocks = r.Controller = void 0);
                const c = a(e('./AuthenticationController.cjs'));
                r.Controller = c.default;
                const u = c.default;
                (r.default = u),
                  i(e('./AuthenticationController.cjs'), r),
                  (r.Mocks = o(e('./mocks/index.cjs')));
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/index.cjs',
      },
    ],
    [
      2464,
      { './mockResponses.cjs': 2465 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./mockResponses.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/mocks/index.cjs',
      },
    ],
    [
      2465,
      { '../../../sdk/mocks/auth.cjs': 2492 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getMockAuthAccessTokenResponse =
                    r.MOCK_OATH_TOKEN_RESPONSE =
                    r.getMockAuthLoginResponse =
                    r.MOCK_LOGIN_RESPONSE =
                    r.getMockAuthNonceResponse =
                    r.MOCK_JWT =
                    r.MOCK_NONCE =
                    r.MOCK_NONCE_RESPONSE =
                      void 0);
                const n = e('../../../sdk/mocks/auth.cjs');
                (r.MOCK_NONCE_RESPONSE = n.MOCK_NONCE_RESPONSE),
                  (r.MOCK_NONCE = r.MOCK_NONCE_RESPONSE.nonce),
                  (r.MOCK_JWT = n.MOCK_JWT);
                (r.getMockAuthNonceResponse = () => ({
                  url: n.MOCK_NONCE_URL,
                  requestMethod: 'GET',
                  response: r.MOCK_NONCE_RESPONSE,
                })),
                  (r.MOCK_LOGIN_RESPONSE = n.MOCK_SRP_LOGIN_RESPONSE);
                (r.getMockAuthLoginResponse = () => ({
                  url: n.MOCK_SRP_LOGIN_URL,
                  requestMethod: 'POST',
                  response: r.MOCK_LOGIN_RESPONSE,
                })),
                  (r.MOCK_OATH_TOKEN_RESPONSE = n.MOCK_OIDC_TOKEN_RESPONSE);
                r.getMockAuthAccessTokenResponse = () => ({
                  url: n.MOCK_OIDC_TOKEN_URL,
                  requestMethod: 'POST',
                  response: r.MOCK_OATH_TOKEN_RESPONSE,
                });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/mocks/mockResponses.cjs',
      },
    ],
    [
      2466,
      {
        '../../sdk/index.cjs': 2491,
        '../authentication/auth-snap-requests.cjs': 2462,
        './account-syncing/controller-integration.cjs': 2468,
        './account-syncing/setup-subscriptions.cjs': 2469,
        './network-syncing/controller-integration.cjs': 2477,
        '@metamask/base-controller': 1407,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d,
                  m,
                  f,
                  p,
                  h,
                  g =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    },
                  y =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }), (r.defaultState = void 0);
                const w = e('@metamask/base-controller'),
                  k = e('./account-syncing/controller-integration.cjs'),
                  b = e('./account-syncing/setup-subscriptions.cjs'),
                  _ = e('./network-syncing/controller-integration.cjs'),
                  S = e('../../sdk/index.cjs'),
                  E = e('../authentication/auth-snap-requests.cjs'),
                  T = 'UserStorageController';
                r.defaultState = {
                  isProfileSyncingEnabled: !0,
                  isProfileSyncingUpdateLoading: !1,
                  hasAccountSyncingSyncedAtLeastOnce: !1,
                  isAccountSyncingReadyToBeDispatched: !1,
                  isAccountSyncingInProgress: !1,
                };
                const v = {
                  isProfileSyncingEnabled: { persist: !0, anonymous: !0 },
                  isProfileSyncingUpdateLoading: { persist: !1, anonymous: !1 },
                  hasAccountSyncingSyncedAtLeastOnce: { persist: !0, anonymous: !1 },
                  isAccountSyncingReadyToBeDispatched: { persist: !0, anonymous: !1 },
                  isAccountSyncingInProgress: { persist: !1, anonymous: !1 },
                  hasNetworkSyncingSyncedAtLeastOnce: { persist: !0, anonymous: !1 },
                };
                class A extends w.BaseController {
                  constructor({
                    messenger: e,
                    state: t,
                    env: h,
                    config: w,
                    nativeScryptCrypto: k,
                  }) {
                    super({
                      messenger: e,
                      metadata: v,
                      name: T,
                      state: { ...r.defaultState, ...t },
                    }),
                      n.add(this),
                      s.set(this, { isAccountSyncingEnabled: !1, isNetworkSyncingEnabled: !1 }),
                      i.set(this, void 0),
                      o.set(this, {
                        getProfileId: async () => {
                          const e = await this.messagingSystem.call(
                            'AuthenticationController:getSessionProfile'
                          );
                          return e?.profileId;
                        },
                        isSignedIn: () =>
                          this.messagingSystem.call('AuthenticationController:isSignedIn'),
                        signIn: async () =>
                          await this.messagingSystem.call('AuthenticationController:performSignIn'),
                      }),
                      a.set(this, void 0),
                      c.set(this, !1),
                      u.set(this, {}),
                      l.set(this, {
                        setupLockedStateSubscriptions: () => {
                          const { isUnlocked: e } = this.messagingSystem.call(
                            'KeyringController:getState'
                          );
                          y(this, c, e, 'f'),
                            this.messagingSystem.subscribe('KeyringController:unlock', () => {
                              y(this, c, !0, 'f');
                            }),
                            this.messagingSystem.subscribe('KeyringController:lock', () => {
                              y(this, c, !1, 'f');
                            });
                        },
                      }),
                      d.set(this, undefined),
                      f.set(this, {}),
                      (g(this, s, 'f').isAccountSyncingEnabled = Boolean(
                        h?.isAccountSyncingEnabled
                      )),
                      (g(this, s, 'f').isNetworkSyncingEnabled = Boolean(
                        h?.isNetworkSyncingEnabled
                      )),
                      y(this, a, w, 'f'),
                      y(
                        this,
                        i,
                        new S.UserStorage(
                          {
                            env: S.Env.PRD,
                            auth: {
                              getAccessToken: () =>
                                this.messagingSystem.call(
                                  'AuthenticationController:getBearerToken'
                                ),
                              getUserProfile: async () =>
                                await this.messagingSystem.call(
                                  'AuthenticationController:getSessionProfile'
                                ),
                              signMessage: e => g(this, n, 'm', p).call(this, e),
                            },
                          },
                          {
                            storage: {
                              getStorageKey: async e => g(this, u, 'f')[e] ?? null,
                              setStorageKey: async (e, t) => {
                                g(this, u, 'f')[e] = t;
                              },
                            },
                          }
                        ),
                        'f'
                      ),
                      g(this, l, 'f').setupLockedStateSubscriptions(),
                      g(this, n, 'm', m).call(this),
                      y(this, d, k, 'f'),
                      g(this, s, 'f').isAccountSyncingEnabled &&
                        (0, b.setupAccountSyncingSubscriptions)(
                          { isAccountSyncingEnabled: !0 },
                          {
                            getUserStorageControllerInstance: () => this,
                            getMessenger: () => this.messagingSystem,
                          }
                        ),
                      g(this, s, 'f').isNetworkSyncingEnabled &&
                        (0, _.startNetworkSyncing)({
                          messenger: e,
                          getUserStorageControllerInstance: () => this,
                          isMutationSyncBlocked: () =>
                            !this.state.hasNetworkSyncingSyncedAtLeastOnce,
                        });
                  }
                  async performGetStorage(e) {
                    return await g(this, i, 'f').getItem(e, {
                      nativeScryptCrypto: g(this, d, 'f'),
                      validateAgainstSchema: !0,
                    });
                  }
                  async performGetStorageAllFeatureEntries(e) {
                    return await g(this, i, 'f').getAllFeatureItems(e, {
                      nativeScryptCrypto: g(this, d, 'f'),
                      validateAgainstSchema: !0,
                    });
                  }
                  async performSetStorage(e, t) {
                    return await g(this, i, 'f').setItem(e, t, {
                      nativeScryptCrypto: g(this, d, 'f'),
                      validateAgainstSchema: !0,
                    });
                  }
                  async performBatchSetStorage(e, t) {
                    return await g(this, i, 'f').batchSetItems(e, t, {
                      nativeScryptCrypto: g(this, d, 'f'),
                      validateAgainstSchema: !0,
                    });
                  }
                  async performDeleteStorage(e) {
                    return await g(this, i, 'f').deleteItem(e, {
                      nativeScryptCrypto: g(this, d, 'f'),
                      validateAgainstSchema: !0,
                    });
                  }
                  async performDeleteStorageAllFeatureEntries(e) {
                    return await g(this, i, 'f').deleteAllFeatureItems(e);
                  }
                  async performBatchDeleteStorage(e, t) {
                    return await g(this, i, 'f').batchDeleteItems(e, t);
                  }
                  async getStorageKey() {
                    return await g(this, i, 'f').getStorageKey();
                  }
                  flushStorageKeyCache() {
                    y(this, u, {}, 'f');
                  }
                  async enableProfileSyncing() {
                    try {
                      g(this, n, 'm', h).call(this, !0);
                      g(this, o, 'f').isSignedIn() || (await g(this, o, 'f').signIn()),
                        this.update(e => {
                          e.isProfileSyncingEnabled = !0;
                        }),
                        g(this, n, 'm', h).call(this, !1);
                    } catch (e) {
                      g(this, n, 'm', h).call(this, !1);
                      const t = e instanceof Error ? e.message : JSON.stringify(e);
                      throw new Error(`${T} - failed to enable profile syncing - ${t}`);
                    }
                  }
                  async disableProfileSyncing() {
                    !this.state.isProfileSyncingEnabled ||
                      (g(this, n, 'm', h).call(this, !0),
                      this.update(e => {
                        e.isProfileSyncingEnabled = !1;
                      }),
                      g(this, n, 'm', h).call(this, !1));
                  }
                  async setHasAccountSyncingSyncedAtLeastOnce(e) {
                    this.update(t => {
                      t.hasAccountSyncingSyncedAtLeastOnce = e;
                    });
                  }
                  async setIsAccountSyncingReadyToBeDispatched(e) {
                    this.update(t => {
                      t.isAccountSyncingReadyToBeDispatched = e;
                    });
                  }
                  async setIsAccountSyncingInProgress(e) {
                    this.update(t => {
                      t.isAccountSyncingInProgress = e;
                    });
                  }
                  async syncInternalAccountsWithUserStorage() {
                    const e = await g(this, o, 'f').getProfileId();
                    await (0, k.syncInternalAccountsWithUserStorage)(
                      {
                        isAccountSyncingEnabled: g(this, s, 'f').isAccountSyncingEnabled,
                        maxNumberOfAccountsToAdd: g(this, a, 'f')?.accountSyncing
                          ?.maxNumberOfAccountsToAdd,
                        onAccountAdded: () => g(this, a, 'f')?.accountSyncing?.onAccountAdded?.(e),
                        onAccountNameUpdated: () =>
                          g(this, a, 'f')?.accountSyncing?.onAccountNameUpdated?.(e),
                        onAccountSyncErroneousSituation: (t, r) =>
                          g(this, a, 'f')?.accountSyncing?.onAccountSyncErroneousSituation?.(
                            e,
                            t,
                            r
                          ),
                      },
                      {
                        getMessenger: () => this.messagingSystem,
                        getUserStorageControllerInstance: () => this,
                      }
                    );
                  }
                  async saveInternalAccountToUserStorage(e) {
                    await (0, k.saveInternalAccountToUserStorage)(
                      e,
                      { isAccountSyncingEnabled: g(this, s, 'f').isAccountSyncingEnabled },
                      {
                        getMessenger: () => this.messagingSystem,
                        getUserStorageControllerInstance: () => this,
                      }
                    );
                  }
                  async syncNetworks() {
                    if (!g(this, s, 'f').isNetworkSyncingEnabled) return;
                    const e = await g(this, o, 'f').getProfileId();
                    await (0, _.performMainNetworkSync)({
                      messenger: this.messagingSystem,
                      getUserStorageControllerInstance: () => this,
                      maxNetworksToAdd: g(this, a, 'f')?.networkSyncing?.maxNumberOfNetworksToAdd,
                      onNetworkAdded: t => g(this, a, 'f')?.networkSyncing?.onNetworkAdded?.(e, t),
                      onNetworkUpdated: t =>
                        g(this, a, 'f')?.networkSyncing?.onNetworkUpdated?.(e, t),
                      onNetworkRemoved: t =>
                        g(this, a, 'f')?.networkSyncing?.onNetworkRemoved?.(e, t),
                    }),
                      this.update(e => {
                        e.hasNetworkSyncingSyncedAtLeastOnce = !0;
                      });
                  }
                }
                (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (a = new WeakMap()),
                  (c = new WeakMap()),
                  (u = new WeakMap()),
                  (l = new WeakMap()),
                  (d = new WeakMap()),
                  (f = new WeakMap()),
                  (n = new WeakSet()),
                  (m = function () {
                    this.messagingSystem.registerActionHandler(
                      'UserStorageController:performGetStorage',
                      this.performGetStorage.bind(this)
                    ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:performGetStorageAllFeatureEntries',
                        this.performGetStorageAllFeatureEntries.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:performSetStorage',
                        this.performSetStorage.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:performBatchSetStorage',
                        this.performBatchSetStorage.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:performDeleteStorage',
                        this.performDeleteStorage.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:performBatchDeleteStorage',
                        this.performBatchDeleteStorage.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:getStorageKey',
                        this.getStorageKey.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:enableProfileSyncing',
                        this.enableProfileSyncing.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:disableProfileSyncing',
                        this.disableProfileSyncing.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:syncInternalAccountsWithUserStorage',
                        this.syncInternalAccountsWithUserStorage.bind(this)
                      ),
                      this.messagingSystem.registerActionHandler(
                        'UserStorageController:saveInternalAccountToUserStorage',
                        this.saveInternalAccountToUserStorage.bind(this)
                      );
                  }),
                  (p = async function (e) {
                    if (g(this, f, 'f')[e]) return g(this, f, 'f')[e];
                    if (!g(this, c, 'f'))
                      throw new Error('#snapSignMessage - unable to call snap, wallet is locked');
                    const t = await this.messagingSystem.call(
                      'SnapController:handleRequest',
                      (0, E.createSnapSignMessageRequest)(e)
                    );
                    return (g(this, f, 'f')[e] = t), t;
                  }),
                  (h = function (e) {
                    this.update(t => {
                      t.isProfileSyncingUpdateLoading = e;
                    });
                  }),
                  (r.default = A);
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/UserStorageController.cjs',
      },
    ],
    [
      2467,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.LOCALIZED_DEFAULT_ACCOUNT_NAMES =
                    r.USER_STORAGE_VERSION_KEY =
                    r.USER_STORAGE_VERSION =
                      void 0),
                  (r.USER_STORAGE_VERSION = '1'),
                  (r.USER_STORAGE_VERSION_KEY = 'v'),
                  (r.LOCALIZED_DEFAULT_ACCOUNT_NAMES = [
                    'Account',
                    'መለያ',
                    'الحساب',
                    'Профил',
                    'অ্যাকাউন্ট',
                    'Compte',
                    'Účet',
                    'Konto',
                    'Λογαριασμός',
                    'Cuenta',
                    'حساب',
                    'Tili',
                    'એકાઉન્ટ',
                    'חשבון',
                    'अकाउंट',
                    'खाता',
                    'Račun',
                    'Kont',
                    'Fiók',
                    'Akun',
                    'アカウント',
                    'ಖಾತೆ',
                    '계정',
                    'Paskyra',
                    'Konts',
                    'അക്കൗണ്ട്',
                    'खाते',
                    'Akaun',
                    'Conta',
                    'Cont',
                    'Счет',
                    'налог',
                    'Akaunti',
                    'கணக்கு',
                    'ఖాతా',
                    'บัญชี',
                    'Hesap',
                    'Обліковий запис',
                    'Tài khoản',
                    '账户',
                    '帳戶',
                  ]);
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/account-syncing/constants.cjs',
      },
    ],
    [
      2468,
      {
        '../../../shared/storage-schema.cjs': 2503,
        './sync-utils.cjs': 2470,
        './utils.cjs': 2471,
        '@metamask/keyring-api': 2014,
        '@metamask/keyring-controller': 2021,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.syncInternalAccountsWithUserStorage =
                    r.saveInternalAccountsListToUserStorage =
                    r.saveInternalAccountToUserStorage =
                      void 0);
                const n = e('@metamask/keyring-api'),
                  s = e('@metamask/keyring-controller'),
                  i = e('./sync-utils.cjs'),
                  o = e('./utils.cjs'),
                  a = e('../../../shared/storage-schema.cjs');
                async function c(e, t) {
                  const { isAccountSyncingEnabled: r } = e,
                    { getUserStorageControllerInstance: n } = t;
                  if (!r) return;
                  const s = await (0, i.getInternalAccountsList)(t);
                  if (!s?.length) return;
                  const c = s.map(o.mapInternalAccountToUserStorageAccount);
                  await n().performBatchSetStorage(
                    a.USER_STORAGE_FEATURE_NAMES.accounts,
                    c.map(e => [e.a, JSON.stringify(e)])
                  );
                }
                (r.saveInternalAccountToUserStorage = async function (e, t, r) {
                  const { isAccountSyncingEnabled: s } = t,
                    { getUserStorageControllerInstance: c } = r;
                  if (
                    s &&
                    (0, i.canPerformAccountSyncing)(t, r) &&
                    (0, n.isEvmAccountType)(e.type) &&
                    (await (0, o.isInternalAccountFromPrimarySRPHdKeyring)(e, r))
                  )
                    try {
                      const t = (0, o.mapInternalAccountToUserStorageAccount)(e);
                      await c().performSetStorage(
                        `${a.USER_STORAGE_FEATURE_NAMES.accounts}.${e.address}`,
                        JSON.stringify(t)
                      );
                    } catch (e) {
                      const t = e instanceof Error ? e.message : JSON.stringify(e);
                      throw new Error(
                        `UserStorageController - failed to save account to user storage - ${t}`
                      );
                    }
                }),
                  (r.saveInternalAccountsListToUserStorage = c),
                  (r.syncInternalAccountsWithUserStorage = async function (e, t) {
                    const { isAccountSyncingEnabled: r } = e;
                    if (!(0, i.canPerformAccountSyncing)(e, t) || !r) return;
                    const {
                        maxNumberOfAccountsToAdd: n = Infinity,
                        onAccountAdded: u,
                        onAccountNameUpdated: l,
                        onAccountSyncErroneousSituation: d,
                      } = e,
                      { getMessenger: m, getUserStorageControllerInstance: f } = t;
                    try {
                      await f().setIsAccountSyncingInProgress(!0);
                      const e = await (0, i.getUserStorageAccountsList)(t);
                      if (!e || !e.length)
                        return (
                          await c({ isAccountSyncingEnabled: r }, t),
                          void (await f().setHasAccountSyncingSyncedAtLeastOnce(!0))
                        );
                      let p = !1;
                      const h = [],
                        g = await (0, i.getInternalAccountsList)(t);
                      if (!g || !g.length) throw new Error('Failed to get internal accounts list');
                      if (e.length > g.length) {
                        const t = Math.min(e.length, n) - g.length;
                        await m().call(
                          'KeyringController:withKeyring',
                          { type: s.KeyringTypes.hd, index: 0 },
                          async ({ keyring: e }) => {
                            await e.addAccounts(t);
                          }
                        );
                        for (let e = 0; e < t; e++) u?.();
                      }
                      const y = await (0, i.getInternalAccountsList)(t),
                        w = y.filter(e => !g.find(t => t.address === e.address));
                      for (const t of y) {
                        const r = e.find(e => e.a === t.address);
                        if (!r) {
                          if (w.includes(t)) {
                            (p = !0),
                              d?.(
                                'An account was added to the internal accounts list but was not present in the user storage accounts list',
                                {
                                  internalAccount: t,
                                  userStorageAccount: r,
                                  newlyAddedAccounts: w,
                                  userStorageAccountsList: e,
                                  internalAccountsList: g,
                                  refreshedInternalAccountsList: y,
                                  internalAccountsToBeSavedToUserStorage: h,
                                }
                              );
                            continue;
                          }
                          h.push(t);
                          continue;
                        }
                        const n = (0, o.isNameDefaultAccountName)(t.metadata.name),
                          s = (0, o.isNameDefaultAccountName)(r.n);
                        if (n)
                          s ||
                            (m().call('AccountsController:updateAccountMetadata', t.id, {
                              name: r.n,
                            }),
                            l?.());
                        else if (s) h.push(t);
                        else if (r.nlu === undefined)
                          t.metadata.nameLastUpdatedAt === undefined || h.push(t);
                        else {
                          if (t.metadata.nameLastUpdatedAt !== undefined) {
                            if (t.metadata.nameLastUpdatedAt > r.nlu) {
                              h.push(t);
                              continue;
                            }
                          }
                          m().call('AccountsController:updateAccountMetadata', t.id, {
                            name: r.n,
                            nameLastUpdatedAt: r.nlu,
                          });
                          t.metadata.name === r.n || l?.();
                        }
                      }
                      h.length &&
                        (await f().performBatchSetStorage(
                          a.USER_STORAGE_FEATURE_NAMES.accounts,
                          h.map(e => [
                            e.address,
                            JSON.stringify((0, o.mapInternalAccountToUserStorageAccount)(e)),
                          ])
                        ));
                      const k = e.filter(e => !y.find(t => t.address === e.a));
                      if (
                        (k.length &&
                          (await f().performBatchDeleteStorage(
                            a.USER_STORAGE_FEATURE_NAMES.accounts,
                            k.map(e => e.a)
                          ),
                          (p = !0),
                          d?.(
                            'An account was present in the user storage accounts list but was not found in the internal accounts list after the sync',
                            {
                              userStorageAccountsToBeDeleted: k,
                              internalAccountsList: g,
                              refreshedInternalAccountsList: y,
                              internalAccountsToBeSavedToUserStorage: h,
                              userStorageAccountsList: e,
                            }
                          )),
                        p)
                      ) {
                        const [e, r] = await Promise.all([
                            (0, i.getUserStorageAccountsList)(t),
                            (0, i.getInternalAccountsList)(t),
                          ]),
                          s = r.every(t => e?.some(e => e.a === t.address)),
                          o = (e?.length || 0) > n || e?.every(e => r.some(t => t.address === e.a)),
                          a = s && o,
                          c = { finalUserStorageAccountsList: e, finalInternalAccountsList: r };
                        d?.(
                          a
                            ? 'Erroneous situations were found during the sync, but final state matches the expected state'
                            : 'Erroneous situations were found during the sync, and final state does not match the expected state',
                          c
                        );
                      }
                      await f().setHasAccountSyncingSyncedAtLeastOnce(!0);
                    } catch (e) {
                      const t = e instanceof Error ? e.message : JSON.stringify(e);
                      throw new Error(
                        `UserStorageController - failed to sync user storage accounts list - ${t}`
                      );
                    } finally {
                      await f().setIsAccountSyncingInProgress(!1);
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/account-syncing/controller-integration.cjs',
      },
    ],
    [
      2469,
      { './controller-integration.cjs': 2468, './sync-utils.cjs': 2470 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.setupAccountSyncingSubscriptions = void 0);
                const n = e('./controller-integration.cjs'),
                  s = e('./sync-utils.cjs');
                r.setupAccountSyncingSubscriptions = function (e, t) {
                  const { getMessenger: r, getUserStorageControllerInstance: i } = t;
                  r().subscribe('AccountsController:accountAdded', async r => {
                    (0, s.canPerformAccountSyncing)(e, t) &&
                      i().state.hasAccountSyncingSyncedAtLeastOnce &&
                      (await (0, n.saveInternalAccountToUserStorage)(r, e, t));
                  }),
                    r().subscribe('AccountsController:accountRenamed', async r => {
                      (0, s.canPerformAccountSyncing)(e, t) &&
                        i().state.hasAccountSyncingSyncedAtLeastOnce &&
                        (await (0, n.saveInternalAccountToUserStorage)(r, e, t));
                    });
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/account-syncing/setup-subscriptions.cjs',
      },
    ],
    [
      2470,
      { '../../../shared/storage-schema.cjs': 2503, './utils.cjs': 2471 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getUserStorageAccountsList =
                    r.getInternalAccountsList =
                    r.canPerformAccountSyncing =
                      void 0);
                const n = e('./utils.cjs'),
                  s = e('../../../shared/storage-schema.cjs');
                (r.canPerformAccountSyncing = function (e, t) {
                  const { isAccountSyncingEnabled: r } = e,
                    { getMessenger: n, getUserStorageControllerInstance: s } = t,
                    { isProfileSyncingEnabled: i, isAccountSyncingInProgress: o } = s().state,
                    a = n().call('AuthenticationController:isSignedIn');
                  return !(!(i && a && r) || o);
                }),
                  (r.getInternalAccountsList = async function (e) {
                    const { getMessenger: t } = e,
                      r = await t().call('AccountsController:listAccounts');
                    return await (0,
                    n.mapInternalAccountsListToPrimarySRPHdKeyringInternalAccountsList)(r, e);
                  }),
                  (r.getUserStorageAccountsList = async function (e) {
                    const { getUserStorageControllerInstance: t } = e,
                      r = await t().performGetStorageAllFeatureEntries(
                        s.USER_STORAGE_FEATURE_NAMES.accounts
                      );
                    return r?.map(e => JSON.parse(e)) ?? null;
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/account-syncing/sync-utils.cjs',
      },
    ],
    [
      2471,
      { './constants.cjs': 2467, '@metamask/keyring-controller': 2021 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.isInternalAccountFromPrimarySRPHdKeyring =
                    r.mapInternalAccountsListToPrimarySRPHdKeyringInternalAccountsList =
                    r.mapInternalAccountToUserStorageAccount =
                    r.isNameDefaultAccountName =
                      void 0);
                const n = e('@metamask/keyring-controller'),
                  s = e('./constants.cjs');
                r.isNameDefaultAccountName = e =>
                  s.LOCALIZED_DEFAULT_ACCOUNT_NAMES.some(t =>
                    new RegExp(`^${t} ([0-9]+)$`, 'u').test(e)
                  );
                (r.mapInternalAccountToUserStorageAccount = e => {
                  const { address: t, id: n, metadata: i } = e,
                    { name: o, nameLastUpdatedAt: a } = i;
                  return {
                    [s.USER_STORAGE_VERSION_KEY]: s.USER_STORAGE_VERSION,
                    a: t,
                    i: n,
                    n: o,
                    ...((0, r.isNameDefaultAccountName)(o) ? {} : { nlu: a }),
                  };
                }),
                  (r.mapInternalAccountsListToPrimarySRPHdKeyringInternalAccountsList =
                    async function (e, t) {
                      const { getMessenger: r } = t,
                        s = await r().call(
                          'KeyringController:withKeyring',
                          { type: n.KeyringTypes.hd, index: 0 },
                          async ({ keyring: e }) => await e.getAccounts()
                        );
                      return e.filter(e => s?.includes(e.address));
                    }),
                  (r.isInternalAccountFromPrimarySRPHdKeyring = async function (e, t) {
                    if (e.metadata.keyring.type !== n.KeyringTypes.hd) return !1;
                    const { getMessenger: r } = t;
                    return (
                      await r().call(
                        'KeyringController:withKeyring',
                        { type: n.KeyringTypes.hd, index: 0 },
                        async ({ keyring: e }) => await e.getAccounts()
                      )
                    ).includes(e.address);
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/account-syncing/utils.cjs',
      },
    ],
    [
      2472,
      {
        '../../shared/encryption/index.cjs': 2500,
        '../../shared/storage-schema.cjs': 2503,
        './UserStorageController.cjs': 2466,
        './mocks/index.cjs': 2473,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    },
                  o =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    },
                  a =
                    (this && this.__importDefault) ||
                    function (e) {
                      return e && e.__esModule ? e : { default: e };
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.Mocks = r.Controller = void 0);
                const c = a(e('./UserStorageController.cjs'));
                r.Controller = c.default;
                const u = c.default;
                (r.default = u),
                  i(e('./UserStorageController.cjs'), r),
                  (r.Mocks = o(e('./mocks/index.cjs'))),
                  i(e('../../shared/encryption/index.cjs'), r),
                  i(e('../../shared/storage-schema.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/index.cjs',
      },
    ],
    [
      2473,
      { './mockResponses.cjs': 2474, './mockStorage.cjs': 2475 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__exportStar) ||
                    function (e, t) {
                      for (var r in e)
                        'default' === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  s(e('./mockResponses.cjs'), r),
                  s(e('./mockStorage.cjs'), r);
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/mocks/index.cjs',
      },
    ],
    [
      2474,
      {
        '../../../sdk/index.cjs': 2491,
        '../../../shared/storage-schema.cjs': 2503,
        './mockStorage.cjs': 2475,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.deleteMockUserStorageAllFeatureEntriesResponse =
                    r.deleteMockUserStorageResponse =
                    r.getMockUserStorageBatchDeleteResponse =
                    r.getMockUserStorageBatchPutResponse =
                    r.getMockUserStoragePutResponse =
                    r.getMockUserStorageAllFeatureEntriesResponse =
                    r.getMockUserStorageGetResponse =
                    r.createMockAllFeatureEntriesResponse =
                    r.createMockGetStorageResponse =
                    r.getMockUserStorageEndpoint =
                      void 0);
                const n = e('./mockStorage.cjs'),
                  s = e('../../../sdk/index.cjs'),
                  i = e('../../../shared/storage-schema.cjs');
                async function o(e) {
                  return {
                    HashedKey: 'HASHED_KEY',
                    Data: await (0, n.MOCK_ENCRYPTED_STORAGE_DATA)(e),
                  };
                }
                async function a(e = [n.MOCK_STORAGE_DATA]) {
                  const t = [];
                  for (const r of e)
                    t.push({
                      HashedKey: 'HASHED_KEY',
                      Data: await (0, n.MOCK_ENCRYPTED_STORAGE_DATA)(r),
                    });
                  return t;
                }
                (r.getMockUserStorageEndpoint = e =>
                  1 === e.split('.').length
                    ? `${(0, s.getEnvUrls)(s.Env.PRD).userStorageApiUrl}/api/v1/userstorage/${e}`
                    : `${(0, s.getEnvUrls)(s.Env.PRD).userStorageApiUrl}/api/v1/userstorage/${(0, i.createEntryPath)(e, n.MOCK_STORAGE_KEY)}`),
                  (r.createMockGetStorageResponse = o),
                  (r.createMockAllFeatureEntriesResponse = a),
                  (r.getMockUserStorageGetResponse = async function (
                    e = `${i.USER_STORAGE_FEATURE_NAMES.notifications}.notification_settings`
                  ) {
                    return {
                      url: (0, r.getMockUserStorageEndpoint)(e),
                      requestMethod: 'GET',
                      response: await o(),
                    };
                  }),
                  (r.getMockUserStorageAllFeatureEntriesResponse = async function (
                    e = i.USER_STORAGE_FEATURE_NAMES.notifications,
                    t
                  ) {
                    return {
                      url: (0, r.getMockUserStorageEndpoint)(e),
                      requestMethod: 'GET',
                      response: await a(t),
                    };
                  });
                r.getMockUserStoragePutResponse = (
                  e = `${i.USER_STORAGE_FEATURE_NAMES.notifications}.notification_settings`
                ) => ({
                  url: (0, r.getMockUserStorageEndpoint)(e),
                  requestMethod: 'PUT',
                  response: null,
                });
                r.getMockUserStorageBatchPutResponse = (
                  e = i.USER_STORAGE_FEATURE_NAMES.notifications
                ) => ({
                  url: (0, r.getMockUserStorageEndpoint)(e),
                  requestMethod: 'PUT',
                  response: null,
                });
                r.getMockUserStorageBatchDeleteResponse = (e = 'notifications') => ({
                  url: (0, r.getMockUserStorageEndpoint)(e),
                  requestMethod: 'PUT',
                  response: null,
                });
                r.deleteMockUserStorageResponse = (
                  e = `${i.USER_STORAGE_FEATURE_NAMES.notifications}.notification_settings`
                ) => ({
                  url: (0, r.getMockUserStorageEndpoint)(e),
                  requestMethod: 'DELETE',
                  response: null,
                });
                r.deleteMockUserStorageAllFeatureEntriesResponse = (
                  e = i.USER_STORAGE_FEATURE_NAMES.notifications
                ) => ({
                  url: (0, r.getMockUserStorageEndpoint)(e),
                  requestMethod: 'DELETE',
                  response: null,
                });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/mocks/mockResponses.cjs',
      },
    ],
    [
      2475,
      { '../../../shared/encryption/index.cjs': 2500 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.MOCK_ENCRYPTED_STORAGE_DATA =
                    r.MOCK_STORAGE_DATA =
                    r.MOCK_STORAGE_KEY =
                    r.MOCK_STORAGE_KEY_SIGNATURE =
                      void 0);
                const o = i(e('../../../shared/encryption/index.cjs'));
                let a;
                (r.MOCK_STORAGE_KEY_SIGNATURE = 'mockStorageKey'),
                  (r.MOCK_STORAGE_KEY = (0, o.createSHA256Hash)(r.MOCK_STORAGE_KEY_SIGNATURE)),
                  (r.MOCK_STORAGE_DATA = JSON.stringify({ hello: 'world' }));
                r.MOCK_ENCRYPTED_STORAGE_DATA = async e =>
                  a ??
                  (a = await o.default.encryptString(e ?? r.MOCK_STORAGE_DATA, r.MOCK_STORAGE_KEY));
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/mocks/mockStorage.cjs',
      },
    ],
    [
      2476,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.getBoundedNetworksToAdd =
                    r.calculateAvailableSpaceToAdd =
                    r.MAX_NETWORKS_SIZE =
                      void 0),
                  (r.MAX_NETWORKS_SIZE = 50);
                r.calculateAvailableSpaceToAdd = (e, t) => Math.max(0, t - e);
                r.getBoundedNetworksToAdd = (e, t, n = r.MAX_NETWORKS_SIZE) => {
                  const s = (0, r.calculateAvailableSpaceToAdd)(e.length, n),
                    i = Math.min(s, t.length);
                  return t.sort((e, t) => e.chainId.localeCompare(t.chainId)).slice(0, i);
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/add-network-utils.cjs',
      },
    ],
    [
      2477,
      {
        './add-network-utils.cjs': 2476,
        './services.cjs': 2478,
        './sync-all.cjs': 2479,
        './sync-mutations.cjs': 2480,
        './update-network-utils.cjs': 2482,
        loglevel: 4929,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                  (this && this.__importDefault) ||
                  function (e) {
                    return e && e.__esModule ? e : { default: e };
                  };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.performMainNetworkSync =
                    r.dispatchUpdateNetwork =
                    r.startNetworkSyncing =
                    r.isMainNetworkSyncInProgress =
                      void 0);
                const s = n(e('loglevel')),
                  i = e('./add-network-utils.cjs'),
                  o = e('./services.cjs'),
                  a = e('./sync-all.cjs'),
                  c = e('./sync-mutations.cjs'),
                  u = e('./update-network-utils.cjs');
                (r.isMainNetworkSyncInProgress = !1),
                  (r.startNetworkSyncing = function (e) {
                    const {
                      messenger: t,
                      isMutationSyncBlocked: n,
                      getUserStorageControllerInstance: i,
                    } = e;
                    try {
                      t.subscribe('NetworkController:networkRemoved', async e => {
                        try {
                          if (n()) return;
                          if (r.isMainNetworkSyncInProgress) return;
                          await (0, c.deleteNetwork)(e, { getUserStorageControllerInstance: i });
                        } catch {}
                      });
                    } catch (e) {
                      s.default.warn('NetworkSyncing, event subscription failed', e);
                    }
                  });
                (r.dispatchUpdateNetwork = async e => {
                  const {
                      messenger: t,
                      originalNetworkConfiguration: r,
                      newNetworkConfiguration: n,
                      selectedNetworkClientId: s,
                    } = e,
                    { updateNetworkFields: i, newSelectedRpcEndpointIndex: o } = (0,
                    u.createUpdateNetworkProps)({
                      originalNetworkConfiguration: r,
                      newNetworkConfiguration: n,
                      selectedNetworkClientId: s,
                    });
                  await t.call('NetworkController:updateNetwork', i.chainId, i, {
                    replacementSelectedRpcEndpointIndex: o,
                  });
                }),
                  (r.performMainNetworkSync = async function (e) {
                    const {
                      messenger: t,
                      maxNetworksToAdd: n,
                      onNetworkAdded: u,
                      onNetworkRemoved: l,
                      onNetworkUpdated: d,
                      getUserStorageControllerInstance: m,
                    } = e;
                    if (!r.isMainNetworkSyncInProgress) {
                      r.isMainNetworkSyncInProgress = !0;
                      try {
                        const e = t.call('NetworkController:getState'),
                          f = Object.values(e.networkConfigurationsByChainId ?? {}),
                          p = await (0, o.getAllRemoteNetworks)({
                            getUserStorageControllerInstance: m,
                          }),
                          h = (0, a.findNetworksToUpdate)({ localNetworks: f, remoteNetworks: p });
                        s.default.debug('performMainNetworkSync() - Network Syncing Started', {
                          localNetworks: f,
                          remoteNetworks: p,
                          networkChanges: h,
                        }),
                          h?.remoteNetworksToUpdate &&
                            h.remoteNetworksToUpdate.length > 0 &&
                            (await (0, c.batchUpdateNetworks)(h?.remoteNetworksToUpdate, {
                              getUserStorageControllerInstance: m,
                            }));
                        const g =
                          h?.missingLocalNetworks &&
                          (0, i.getBoundedNetworksToAdd)(f, h.missingLocalNetworks, n);
                        if (g && g.length > 0) {
                          const e = [];
                          g.forEach(r => {
                            try {
                              t.call('NetworkController:addNetwork', r), u?.(r.chainId);
                            } catch (t) {
                              e.push(t);
                            }
                          }),
                            e.length > 0 &&
                              s.default.error(
                                'performMainNetworkSync() - NetworkController:addNetwork failures',
                                e
                              );
                        }
                        if (h?.localNetworksToUpdate && h.localNetworksToUpdate.length > 0) {
                          const n = [];
                          for (const s of h.localNetworksToUpdate)
                            try {
                              await (0, r.dispatchUpdateNetwork)({
                                messenger: t,
                                originalNetworkConfiguration:
                                  e.networkConfigurationsByChainId[s.chainId],
                                newNetworkConfiguration: s,
                                selectedNetworkClientId: e.selectedNetworkClientId,
                              }),
                                d?.(s.chainId);
                            } catch (e) {
                              n.push(e);
                            }
                          n.length > 0 &&
                            s.default.error(
                              'performMainNetworkSync() - NetworkController:updateNetwork failed',
                              n
                            );
                        }
                        if (h?.localNetworksToRemove && h.localNetworksToRemove.length > 0) {
                          const e = [];
                          h.localNetworksToRemove.forEach(r => {
                            try {
                              t.call('NetworkController:removeNetwork', r.chainId), l?.(r.chainId);
                            } catch (t) {
                              e.push(t);
                            }
                          }),
                            e.length > 0 &&
                              s.default.error(
                                'performMainNetworkSync() - NetworkController:removeNetwork failed',
                                e
                              );
                        }
                      } catch (e) {
                        s.default.error('performMainNetworkSync() failed', e);
                      } finally {
                        r.isMainNetworkSyncInProgress = !1;
                      }
                    }
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/controller-integration.cjs',
      },
    ],
    [
      2478,
      { '../../../shared/storage-schema.cjs': 2503 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.batchUpsertRemoteNetworks =
                    r.upsertRemoteNetwork =
                    r.getAllRemoteNetworks =
                      void 0);
                const n = e('../../../shared/storage-schema.cjs');
                const s = e => e !== undefined && null !== e;
                (r.getAllRemoteNetworks = async function (e) {
                  try {
                    const t =
                      (await e
                        .getUserStorageControllerInstance()
                        .performGetStorageAllFeatureEntries(
                          n.USER_STORAGE_FEATURE_NAMES.networks
                        )) ?? [];
                    return t
                      .map(e =>
                        (function (e) {
                          try {
                            return JSON.parse(e);
                          } catch {
                            return undefined;
                          }
                        })(e)
                      )
                      .filter(s);
                  } catch {
                    return [];
                  }
                }),
                  (r.upsertRemoteNetwork = async function (e, t) {
                    const r = e.chainId.toString(),
                      n = JSON.stringify(e);
                    return await t
                      .getUserStorageControllerInstance()
                      .performSetStorage(`networks.${r}`, n);
                  }),
                  (r.batchUpsertRemoteNetworks = async function (e, t) {
                    const r = e.map(e => [e.chainId, JSON.stringify(e)]);
                    await t
                      .getUserStorageControllerInstance()
                      .performBatchSetStorage('networks', r);
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/services.cjs',
      },
    ],
    [
      2479,
      { '../utils.cjs': 2483, './types.cjs': 2481 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.findNetworksToUpdate =
                    r.getUpdatedNetworkLists =
                    r.getMissingNetworkLists =
                    r.checkWhichNetworkIsLatest =
                    r.getDataStructures =
                      void 0);
                const n = e('./types.cjs'),
                  s = e('../utils.cjs'),
                  i = e => new Map(e.map(e => [e.chainId, e])),
                  o = (e, t) => {
                    const r = t ? e.filter(e => t(e)) : e;
                    return new Set(r.map(e => e.chainId));
                  };
                r.getDataStructures = (e, t) => ({
                  localMap: i(e),
                  remoteMap: i(t),
                  localKeySet: o(e),
                  remoteKeySet: o(t),
                  existingRemoteKeySet: o(t, e => !e.d),
                });
                r.checkWhichNetworkIsLatest = (e, t) =>
                  e.lastUpdatedAt || t.lastUpdatedAt
                    ? e.lastUpdatedAt && !t.lastUpdatedAt
                      ? 'Local Wins'
                      : !e.lastUpdatedAt && t.lastUpdatedAt
                        ? 'Remote Wins'
                        : e.lastUpdatedAt && t.lastUpdatedAt
                          ? e.lastUpdatedAt === t.lastUpdatedAt
                            ? 'Do Nothing'
                            : e.lastUpdatedAt > t.lastUpdatedAt
                              ? 'Local Wins'
                              : 'Remote Wins'
                          : 'Do Nothing'
                    : 'Do Nothing';
                r.getMissingNetworkLists = e => {
                  const {
                      localKeySet: t,
                      localMap: r,
                      remoteKeySet: i,
                      remoteMap: o,
                      existingRemoteKeySet: a,
                    } = e,
                    c = [],
                    u = [];
                  (0, s.setDifference)(t, i).forEach(e => {
                    const t = r.get(e);
                    t && u.push((0, n.toRemoteNetworkConfiguration)(t));
                  });
                  return (
                    (0, s.setDifference)(a, t).forEach(e => {
                      const t = o.get(e);
                      t && c.push((0, n.toNetworkConfiguration)(t));
                    }),
                    { missingLocalNetworks: c, missingRemoteNetworks: u }
                  );
                };
                r.getUpdatedNetworkLists = e => {
                  const { localKeySet: t, localMap: i, remoteKeySet: o, remoteMap: a } = e,
                    c = [],
                    u = [],
                    l = [];
                  return (
                    (0, s.setIntersection)(t, o).forEach(e => {
                      const t = i.get(e),
                        s = a.get(e);
                      if (!t || !s) return;
                      const o = (0, r.checkWhichNetworkIsLatest)(t, s);
                      'Local Wins' === o && c.push((0, n.toRemoteNetworkConfiguration)(t)),
                        'Remote Wins' === o &&
                          (s.d
                            ? l.push((0, n.toNetworkConfiguration)(s))
                            : u.push((0, n.toNetworkConfiguration)(s)));
                    }),
                    {
                      remoteNetworksToUpdate: c,
                      localNetworksToUpdate: u,
                      localNetworksToRemove: l,
                    }
                  );
                };
                r.findNetworksToUpdate = e => {
                  try {
                    const { localNetworks: t, remoteNetworks: n } = e,
                      s = (0, r.getDataStructures)(t, n),
                      i = (0, r.getMissingNetworkLists)(s),
                      o = (0, r.getUpdatedNetworkLists)(s);
                    return {
                      remoteNetworksToUpdate: [
                        ...i.missingRemoteNetworks,
                        ...o.remoteNetworksToUpdate,
                      ],
                      missingLocalNetworks: i.missingLocalNetworks,
                      localNetworksToRemove: o.localNetworksToRemove,
                      localNetworksToUpdate: o.localNetworksToUpdate,
                    };
                  } catch {}
                  return undefined;
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/sync-all.cjs',
      },
    ],
    [
      2480,
      { './services.cjs': 2478 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.batchUpdateNetworks =
                    r.deleteNetwork =
                    r.addNetwork =
                    r.updateNetwork =
                      void 0);
                const n = e('./services.cjs');
                (r.updateNetwork = async (e, t) =>
                  await (0, n.upsertRemoteNetwork)({ v: '1', ...e, d: !1 }, t)),
                  (r.addNetwork = r.updateNetwork);
                r.deleteNetwork = async (e, t) =>
                  await (0, n.upsertRemoteNetwork)(
                    { v: '1', ...e, d: !0, lastUpdatedAt: Date.now() },
                    t
                  );
                r.batchUpdateNetworks = async (e, t) => {
                  const r = e.map(e => ({ v: '1', ...e }));
                  return await (0, n.batchUpsertRemoteNetworks)(r, t);
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/sync-mutations.cjs',
      },
    ],
    [
      2481,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.toNetworkConfiguration = r.toRemoteNetworkConfiguration = void 0);
                r.toRemoteNetworkConfiguration = e => ({ ...e, v: '1' });
                r.toNetworkConfiguration = e => {
                  const { v: t, d: r, ...n } = e;
                  return n;
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/types.cjs',
      },
    ],
    [
      2482,
      { '../utils.cjs': 2483, '@metamask/network-controller': 2202 },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.createUpdateNetworkProps =
                    r.getNewRPCIndex =
                    r.appendMissingInfuraNetworks =
                    r.getMappedNetworkConfiguration =
                      void 0);
                const n = e('@metamask/network-controller'),
                  s = e('../utils.cjs');
                r.getMappedNetworkConfiguration = e => {
                  const { originalNetworkConfiguration: t, newNetworkConfiguration: r } = e,
                    n = new Map(t.rpcEndpoints.map(e => [e.url, e.networkClientId])),
                    s = r;
                  return (
                    (s.rpcEndpoints = s.rpcEndpoints.map(e => {
                      const t = n.get(e.url);
                      return t
                        ? ((e.networkClientId = t), e)
                        : ((e.networkClientId = undefined), e);
                    })),
                    s
                  );
                };
                r.appendMissingInfuraNetworks = e => {
                  const { originalNetworkConfiguration: t, updateNetworkConfiguration: r } = e,
                    i = new Map(
                      t.rpcEndpoints
                        .filter(e => e.type === n.RpcEndpointType.Infura)
                        .map(e => [e.networkClientId, e])
                    ),
                    o = new Map(
                      r.rpcEndpoints
                        .filter(e => e.type === n.RpcEndpointType.Infura && e.networkClientId)
                        .map(e => [e.networkClientId, e])
                    ),
                    a = (0, s.setDifference)(new Set(i.keys()), new Set(o.keys()));
                  if (a.size > 0) {
                    const e = [];
                    a.forEach(t => {
                      e.push(i.get(t));
                    }),
                      r.rpcEndpoints.unshift(...e);
                  }
                  return r;
                };
                r.getNewRPCIndex = e => {
                  const {
                      originalNetworkConfiguration: t,
                      updateNetworkConfiguration: r,
                      selectedNetworkClientId: n,
                    } = e,
                    s = r.rpcEndpoints.some(e => e.networkClientId === n),
                    i = t.rpcEndpoints.some(e => e.networkClientId === n),
                    o = () =>
                      Math.max(
                        r.rpcEndpoints.findIndex(e => Boolean(e.networkClientId)),
                        0
                      );
                  if (i && !s) {
                    return o();
                  }
                  if (i && s) {
                    const e = r.rpcEndpoints.findIndex(e => e.networkClientId === n);
                    return -1 !== e ? e : o();
                  }
                  return undefined;
                };
                r.createUpdateNetworkProps = e => {
                  const {
                      originalNetworkConfiguration: t,
                      newNetworkConfiguration: n,
                      selectedNetworkClientId: s,
                    } = e,
                    i = (0, r.getMappedNetworkConfiguration)({
                      originalNetworkConfiguration: t,
                      newNetworkConfiguration: n,
                    });
                  (0, r.appendMissingInfuraNetworks)({
                    originalNetworkConfiguration: t,
                    updateNetworkConfiguration: i,
                  });
                  return {
                    updateNetworkFields: i,
                    newSelectedRpcEndpointIndex: (0, r.getNewRPCIndex)({
                      originalNetworkConfiguration: t,
                      updateNetworkConfiguration: i,
                      selectedNetworkClientId: s,
                    }),
                  };
                };
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/network-syncing/update-network-utils.cjs',
      },
    ],
    [
      2483,
      {},
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.setIntersection = r.setDifference = void 0),
                  (r.setDifference = function (e, t) {
                    const r = new Set();
                    return e.forEach(e => !t.has(e) && r.add(e)), r;
                  }),
                  (r.setIntersection = function (e, t) {
                    const r = new Set();
                    return e.forEach(e => t.has(e) && r.add(e)), r;
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/controllers/user-storage/utils.cjs',
      },
    ],
    [
      2484,
      {
        './controllers/authentication/index.cjs': 2463,
        './controllers/user-storage/index.cjs': 2472,
        './sdk/index.cjs': 2491,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n =
                    (this && this.__createBinding) ||
                    (Object.create
                      ? function (e, t, r, n) {
                          n === undefined && (n = r);
                          var s = Object.getOwnPropertyDescriptor(t, r);
                          (s && !('get' in s ? !t.__esModule : s.writable || s.configurable)) ||
                            (s = {
                              enumerable: !0,
                              get: function () {
                                return t[r];
                              },
                            }),
                            Object.defineProperty(e, n, s);
                        }
                      : function (e, t, r, n) {
                          n === undefined && (n = r), (e[n] = t[r]);
                        }),
                  s =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                      ? function (e, t) {
                          Object.defineProperty(e, 'default', { enumerable: !0, value: t });
                        }
                      : function (e, t) {
                          e.default = t;
                        }),
                  i =
                    (this && this.__importStar) ||
                    function (e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e)
                        for (var r in e)
                          'default' !== r &&
                            Object.prototype.hasOwnProperty.call(e, r) &&
                            n(t, e, r);
                      return s(t, e), t;
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.UserStorageController = r.AuthenticationController = r.SDK = void 0),
                  (r.SDK = i(e('./sdk/index.cjs'))),
                  (r.AuthenticationController = i(e('./controllers/authentication/index.cjs'))),
                  (r.UserStorageController = i(e('./controllers/user-storage/index.cjs')));
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/index.cjs',
      },
    ],
    [
      2485,
      {
        '../errors.cjs': 2490,
        '../utils/validate-login-response.cjs': 2496,
        './services.cjs': 2487,
        siwe: 5653,
      },
      function () {
        with (this.scopeTerminator)
          with (this.globalThis)
            return function () {
              'use strict';
              return function (e, t, r) {
                var n,
                  s,
                  i,
                  o,
                  a,
                  c,
                  u,
                  l,
                  d =
                    (this && this.__classPrivateFieldSet) ||
                    function (e, t, r, n, s) {
                      if ('m' === n) throw new TypeError('Private method is not writable');
                      if ('a' === n && !s)
                        throw new TypeError('Private accessor was defined without a setter');
                      if ('function' == typeof t ? e !== t || !s : !t.has(e))
                        throw new TypeError(
                          'Cannot write private member to an object whose class did not declare it'
                        );
                      return 'a' === n ? s.call(e, r) : s ? (s.value = r) : t.set(e, r), r;
                    },
                  m =
                    (this && this.__classPrivateFieldGet) ||
                    function (e, t, r, n) {
                      if ('a' === r && !n)
                        throw new TypeError('Private accessor was defined without a getter');
                      if ('function' == typeof t ? e !== t || !n : !t.has(e))
                        throw new TypeError(
                          'Cannot read private member from an object whose class did not declare it'
                        );
                      return 'm' === r ? n : 'a' === r ? n.call(e) : n ? n.value : t.get(e);
                    };
                Object.defineProperty(r, '__esModule', { value: !0 }),
                  (r.SIWEJwtBearerAuth = void 0);
                const f = e('siwe'),
                  p = e('./services.cjs'),
                  h = e('../errors.cjs'),
                  g = e('../utils/validate-login-response.cjs');
                (r.SIWEJwtBearerAuth = class {
                  constructor(e, t) {
                    n.add(this),
                      s.set(this, void 0),
                      i.set(this, void 0),
                      o.set(this, void 0),
                      d(this, s, e, 'f'),
                      d(this, i, t, 'f');
                  }
                  async getAccessToken() {
                    const e = await m(this, n, 'm', a).call(this);
                    if (e) return e.token.accessToken;
                    return (await m(this, n, 'm', c).call(this)).token.accessToken;
                  }
                  async getUserProfile() {
                    const e = await m(this, n, 'm', a).call(this);
                    if (e) return e.profile;
                    return (await m(this, n, 'm', c).call(this)).profile;
                  }
                  async getIdentifier() {
                    return m(this, n, 'm', l).call(this, m(this, o, 'f')), m(this, o, 'f').address;
                  }
                  async signMessage(e) {
                    return (
                      m(this, n, 'm', l).call(this, m(this, o, 'f')),
                      await m(this, o, 'f').signMessage(e)
                    );
                  }
                  prepare(e) {
                    d(this, o, e, 'f');
                  }
                }),
                  (s = new WeakMap()),
                  (i = new WeakMap()),
                  (o = new WeakMap()),
                  (n = new WeakSet()),
                  (a = async function () {
                    const e = await m(this, i, 'f').storage.getLoginResponse();
                    if (!(0, g.validateLoginResponse)(e)) return null;
                    return Date.now() - e.token.obtainedAt < 1e3 * e.token.expiresIn * 0.9
                      ? e
                      : null;
                  }),
                  (c = async function () {
                    m(this, n, 'm', l).call(this, m(this, o, 'f'));
                    const e = await this.getIdentifier(),
                      t = await (0, p.getNonce)(e, m(this, s, 'f').env),
                      r = m(this, n, 'm', u).call(this, t.nonce),
                      a = await this.signMessage(r),
                      c = await (0, p.authenticate)(
                        r,
                        a,
                        m(this, s, 'f').type,
                        m(this, s, 'f').env
                      ),
                      d = await (0, p.authorizeOIDC)(
                        c.token,
                        m(this, s, 'f').env,
                        m(this, s, 'f').platform
                      ),
                      f = { profile: c.profile, token: d };
                    return await m(this, i, 'f').storage.setLoginResponse(f), f;
                  }),
                  (u = function (e) {
                    return (
                      m(this, n, 'm', l).call(this, m(this, o, 'f')),
                      new f.SiweMessage({
                        domain: m(this, o, 'f')?.domain,
                        address: m(this, o, 'f')?.address,
                        uri: (0, p.SIWE_LOGIN_URL)(m(this, s, 'f').env),
                        version: '1',
                        chainId: m(this, o, 'f')?.chainId,
                        nonce: e,
                        issuedAt: new Date().toISOString(),
                      }).prepareMessage()
                    );
                  }),
                  (l = function (e) {
                    if (!e)
                      throw new h.ValidationError("you must call 'prepare()' before logging in");
                  });
              };
            };
      },
      {
        package: '@metamask/profile-sync-controller',
        file: 'node_modules/@metamask/profile-sync-controller/dist/sdk/authentication-jwt-bearer/flow-siwe.cjs',
      },
    ],
  ],
  [],
  {}
);
