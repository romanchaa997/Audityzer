
name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run ESLint
      run: npx eslint . --format=json --output-file=eslint-report.json
      continue-on-error: true
    
    - name: Run security scan
      run: |
        pip install trufflehog3
        trufflehog3 --format json . > security-scan.json || true
    
    - name: Run tests
      run: npm test
    
    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: eslint-report.json
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔍 Code Quality Report\n\n';
          
          // ESLint results
          try {
            const eslintResults = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
            const totalErrors = eslintResults.reduce((sum, file) => sum + file.errorCount, 0);
            const totalWarnings = eslintResults.reduce((sum, file) => sum + file.warningCount, 0);
            
            comment += `### ESLint Results\n`;
            comment += `- ❌ Errors: ${totalErrors}\n`;
            comment += `- ⚠️ Warnings: ${totalWarnings}\n\n`;
          } catch (e) {
            comment += `### ESLint Results\n❌ Failed to parse results\n\n`;
          }
          
          // Security scan results
          try {
            const securityResults = JSON.parse(fs.readFileSync('security-scan.json', 'utf8'));
            const highSeverity = securityResults.filter(r => r.rule.severity === 'HIGH').length;
            const mediumSeverity = securityResults.filter(r => r.rule.severity === 'MEDIUM').length;
            
            comment += `### Security Scan Results\n`;
            comment += `- 🔴 High: ${highSeverity}\n`;
            comment += `- 🟡 Medium: ${mediumSeverity}\n\n`;
          } catch (e) {
            comment += `### Security Scan Results\n✅ No issues detected\n\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Audit dependencies
      run: |
        npm audit --audit-level=high --json > audit-results.json || true
        
    - name: Check for vulnerabilities
      run: |
        VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.total')
        if [ "$VULNS" -gt 0 ]; then
          echo "❌ Found $VULNS vulnerabilities"
          cat audit-results.json | jq '.vulnerabilities'
          exit 1
        else
          echo "✅ No vulnerabilities found"
        fi
