name: Bridge Security Testing

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight
  push:
    branches: [main]
    paths:
      - 'src/core/bridge-testing/**'
      - 'tests/**bridge**'
      - '.github/workflows/bridge-security-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/core/bridge-testing/**'
      - 'tests/**bridge**'
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    name: Run Bridge Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run bridge security tests
        run: npm run test:bridge
        env:
          NODE_ENV: test
          TEST_BRIDGE_TIMEOUT: 60000

      - name: Generate test report
        if: always()
        run: node scripts/generate-bridge-report.js

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bridge-test-results
          path: |
            playwright-report/
            reports/
            test-results/

      - name: Check for critical vulnerabilities
        run: |
          export CRITICAL_COUNT=$(grep -c "severity.*critical" reports/bridge-security-summary.json || echo "0")
          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "::error::Found $CRITICAL_COUNT critical bridge vulnerabilities!"
            exit 1
          fi

  visualize:
    name: Generate Visualizations
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: bridge-test-results
          path: downloaded-results

      - name: Process visualization data
        run: node src/web-ui/process-visualization-data.js
        env:
          RESULTS_DIR: downloaded-results
          OUTPUT_DIR: visualization

      - name: Upload visualization data
        uses: actions/upload-artifact@v4
        with:
          name: bridge-security-visualizations
          path: visualization/

  notify:
    name: Send Notifications
    needs: [test, visualize]
    runs-on: ubuntu-latest
    if: always() && (github.repository == 'yourusername/Web3FuzzForge' || github.repository == 'yourusername/web3-security-test-kit')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: bridge-test-results
          path: downloaded-results

      - name: Check for vulnerabilities
        id: check-vulnerabilities
        run: |
          export VULN_COUNT=$(grep -c '"vulnerabilitiesFound": true' downloaded-results/reports/*.json || echo "0")
          echo "vulnerability_count=$VULN_COUNT" >> $GITHUB_OUTPUT

      - name: Create GitHub issue for vulnerabilities
        if: steps.check-vulnerabilities.outputs.vulnerability_count != '0'
        uses: actions/github-script@v6
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          script: |
            const fs = require('fs');
            const vulnCount = "${{ steps.check-vulnerabilities.outputs.vulnerability_count }}";

            // Read the summary file
            const summaryFile = 'downloaded-results/reports/bridge-security-summary.json';
            const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));

            // Create issue content
            let issueBody = `## Bridge Security Vulnerabilities Detected\n\n`;
            issueBody += `**Total vulnerabilities:** ${vulnCount}\n\n`;
            issueBody += `### Severity Breakdown\n`;
            issueBody += `- Critical: ${summary.criticalCount || 0}\n`;
            issueBody += `- High: ${summary.highCount || 0}\n`;
            issueBody += `- Medium: ${summary.mediumCount || 0}\n`;
            issueBody += `- Low: ${summary.lowCount || 0}\n\n`;
            issueBody += `Please check the [detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) for more information.`;

            // Create the issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Bridge Security Alert: ${vulnCount} vulnerabilities detected`,
              body: issueBody,
              labels: ['security', 'bridge', 'vulnerability']
            });

  deploy-dashboard:
    name: Deploy Security Dashboard
    needs: [test, visualize]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download test results and visualizations
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Prepare dashboard files
        run: |
          mkdir -p dashboard/data
          cp -r downloaded-artifacts/bridge-test-results/reports/* dashboard/data/
          cp -r downloaded-artifacts/bridge-security-visualizations/* dashboard/
          cp -r src/web-ui/templates/* dashboard/
          cp -r src/web-ui/assets/* dashboard/

      # Deploy to GitHub Pages or your preferred hosting
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dashboard
          branch: gh-pages
          target-folder: bridge-dashboard
