name: Audityzer Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Set up environment variables
        run: |
          # Copy example env file if .env doesn't exist
          if [ ! -f .env ]; then
            cp .env-example .env
          fi
          # Ensure MOCK_MODE is set for CI
          echo "MOCK_MODE=true" >> .env
          echo "SCREENSHOT_ON_FAILURE=true" >> .env
          echo "HEADLESS=true" >> .env

      - name: Start mock dApp server
        run: |
          # Start the mock dApp server in the background
          cd mocked-sample-app
          npm install
          npm start &
          # Wait for server to start
          echo "Waiting for mock dApp server to start..."
          sleep 10

      - name: Run Playwright tests
        run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        env:
          CI: true
          MOCK_MODE: true
          TARGET_URL: http://localhost:3000
          DEFAULT_WALLET_ADDRESS: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
          DEFAULT_CHAIN_ID: 0x1
          UI_TIMEOUT: 10000
          TEST_TIMEOUT: 30000
          SAVE_TRACE: true
          SCREENSHOT_ON_FAILURE: true
          HEADLESS: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.shardIndex }}
          path: playwright-report/
          retention-days: 30

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-report-${{ matrix.shardIndex }}
          path: reports/
          retention-days: 30

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.shardIndex }}
          path: |
            test-output/
            test-results/
          retention-days: 30

  merge-reports:
    name: 'Merge Test Reports'
    needs: test
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Merge reports
        run: node utils/merge-reports.js --input-dir=all-artifacts --output-dir=merged-reports

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: merged-test-report
          path: merged-reports/
          retention-days: 30

  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment for security tests
        run: |
          cp .env-example .env
          echo "MOCK_MODE=true" >> .env
          echo "TARGET_URL=http://localhost:3000" >> .env

      - name: Start mock dApp server for security tests
        run: |
          cd mocked-sample-app
          npm install
          npm start &
          sleep 5

      - name: Run security checks
        run: npx Audityzer run --grep "security" --project chromium --report
        env:
          CI: true
          MOCK_MODE: true
          TARGET_URL: http://localhost:3000

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            test-results/
            reports/
          retention-days: 30
