/* global describe, it, expect, beforeEach, afterEach, jest */
const VulnerabilityClassifier = require('../../../src/core/ai-vulnerability-detection/model-development/vulnerability-classifier');

describe('Simple VulnerabilityClassifier Test', () => {
  it('should create classifier instance', () => {
    const classifier = new VulnerabilityClassifier();
    expect(classifier).toBeInstanceOf(VulnerabilityClassifier);
  });

  it('should have configuration', () => {
    const classifier = new VulnerabilityClassifier();
    const config = classifier.getConfig();
    expect(config).toEqual(expect.any(Object));
    expect(config.confidenceThreshold).toEqual(expect.any(Number));
  });

  it('should have categories', () => {
    const classifier = new VulnerabilityClassifier();
    const categories = classifier.getCategories();
    expect(categories).toEqual(expect.any(Object));
    expect(categories.REENTRANCY).toEqual(expect.any(Object));
  });

  it('should classify simple vulnerability', () => {
    const classifier = new VulnerabilityClassifier({ confidenceThreshold: 0.1 });

    const vulnerability = {
      name: 'Test',
      description: 'reentrancy issue',
      code: 'some code'
    };

    const result = classifier.classifyVulnerability(vulnerability);

    expect(result).toEqual(expect.any(Object));
    expect(result.classification).toEqual(expect.any(String));
    expect(result.confidence).toEqual(expect.any(Number));
  });

  it('should classify with multiple patterns', () => {
    const classifier = new VulnerabilityClassifier({ confidenceThreshold: 0.1 });

    const vulnerability = {
      name: 'Reentrancy Test',
      description: 'reentrancy vulnerability with reentrant call and external call after state change',
      code: 'function with call after transfer'
    };

    const result = classifier.classifyVulnerability(vulnerability);

    console.log('Result:', result);

    expect(result).toEqual(expect.any(Object));
    expect(result.classification).toBe('REENTRANCY');
    expect(result.confidence).toBeGreaterThan(0);
  });
});