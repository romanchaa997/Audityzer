/* global describe, it, expect, beforeEach, afterEach, jest */
const VulnerabilityClassifier = require('../../../src/core/ai-vulnerability-detection/model-development/vulnerability-classifier');

describe('Debug VulnerabilityClassifier', () => {
  let classifier;

  beforeEach(() => {
    classifier = new VulnerabilityClassifier({ confidenceThreshold: 0.1 });
  });

  it('should debug pattern matching', () => {
    const vulnerability = {
      name: 'Reentrancy Issue',
      description: 'reentrancy vulnerability with external call after state change',
      code: `
        function withdraw() public {
          msg.sender.call{value: balance}("");
          balance = 0;
        }
      `
    };

    console.log('Input vulnerability:', vulnerability);

    const result = classifier.classifyVulnerability(vulnerability);

    console.log('Classification result:', JSON.stringify(result, null, 2));
    console.log('Available categories:', Object.keys(classifier.getCategories()));

    // Check what patterns are available
    const categories = classifier.getCategories();
    console.log('REENTRANCY patterns:', categories.REENTRANCY?.patterns);

    // Test the text combination
    const textToClassify = `${vulnerability.name} ${vulnerability.description} ${vulnerability.code}`.toLowerCase();
    console.log('Text to classify:', textToClassify);

    // Check each pattern manually
    if (categories.REENTRANCY) {
      categories.REENTRANCY.patterns.forEach(pattern => {
        const matches = textToClassify.includes(pattern.toLowerCase());
        console.log(`Pattern "${pattern}": ${matches ? 'MATCH' : 'NO MATCH'}`);
      });
    }

    expect(result).toEqual(expect.any(Object));
  });
});