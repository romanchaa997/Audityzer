
version: '3.8'

services:
  audityzer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: audityzer-app
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - LOG_LEVEL=info
    volumes:
      - ./config:/app/config:ro
      - ./reports:/app/reports
      - audityzer-data:/app/data
    networks:
      - audityzer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "./scripts/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: audityzer-mcp
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - MCP_PORT=8080
      - AUDITYZER_URL=http://audityzer:5000
    networks:
      - audityzer-network
    depends_on:
      - audityzer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: audityzer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - audityzer-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  nginx:
    image: nginx:alpine
    container_name: audityzer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - audityzer-network
    depends_on:
      - audityzer
      - mcp-server
    restart: unless-stopped

volumes:
  audityzer-data:
  redis-data:

networks:
  audityzer-network:
    driver: bridge
